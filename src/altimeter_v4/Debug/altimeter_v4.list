
altimeter_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bc4  08008bc4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008bc4  08008bc4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bc4  08008bc4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000124c  200001e0  08008dac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08008dac  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183e4  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003887  00000000  00000000  000385ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0003be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  0003cf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baf6  00000000  00000000  0003de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143cf  00000000  00000000  00059966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e76d  00000000  00000000  0006dd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc4a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc8  00000000  00000000  000fc4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008aa4 	.word	0x08008aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008aa4 	.word	0x08008aa4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd22 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c8 	bl	80002ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 f89a 	bl	8007294 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000160:	f000 f874 	bl	800024c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  homeAll();
 8000164:	f000 face 	bl	8000704 <homeAll>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(20);
 8000168:	2014      	movs	r0, #20
 800016a:	f000 fd77 	bl	8000c5c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	4802      	ldr	r0, [pc, #8]	; (800017c <main+0x30>)
 8000174:	f001 f857 	bl	8001226 <HAL_GPIO_TogglePin>
	HAL_Delay(20);
 8000178:	e7f6      	b.n	8000168 <main+0x1c>
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	stepperServiceRoutine();
 8000188:	f000 f958 	bl	800043c <stepperServiceRoutine>

}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	; 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f007 fd16 	bl	8007bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fbc6 	bl	800297c <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 f91b 	bl	8000430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2101      	movs	r1, #1
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fe30 	bl	8002e7c <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000222:	f000 f905 	bl	8000430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000226:	2310      	movs	r3, #16
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800022a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800022e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	4618      	mov	r0, r3
 8000234:	f002 ff8a 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800023e:	f000 f8f7 	bl	8000430 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3750      	adds	r7, #80	; 0x50
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000268:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <MX_TIM2_Init+0x9c>)
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <MX_TIM2_Init+0x9c>)
 8000272:	220a      	movs	r2, #10
 8000274:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000276:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <MX_TIM2_Init+0x9c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_TIM2_Init+0x9c>)
 800027e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_TIM2_Init+0x9c>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_TIM2_Init+0x9c>)
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000290:	4815      	ldr	r0, [pc, #84]	; (80002e8 <MX_TIM2_Init+0x9c>)
 8000292:	f003 f811 	bl	80032b8 <HAL_TIM_Base_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800029c:	f000 f8c8 	bl	8000430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4619      	mov	r1, r3
 80002ac:	480e      	ldr	r0, [pc, #56]	; (80002e8 <MX_TIM2_Init+0x9c>)
 80002ae:	f003 f9ad 	bl	800360c <HAL_TIM_ConfigClockSource>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b8:	f000 f8ba 	bl	8000430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	4619      	mov	r1, r3
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <MX_TIM2_Init+0x9c>)
 80002ca:	f003 fb7f 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002d4:	f000 f8ac 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <MX_TIM2_Init+0x9c>)
 80002da:	f003 f83d 	bl	8003358 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000450 	.word	0x20000450

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b47      	ldr	r3, [pc, #284]	; (8000420 <MX_GPIO_Init+0x134>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a46      	ldr	r2, [pc, #280]	; (8000420 <MX_GPIO_Init+0x134>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b44      	ldr	r3, [pc, #272]	; (8000420 <MX_GPIO_Init+0x134>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b41      	ldr	r3, [pc, #260]	; (8000420 <MX_GPIO_Init+0x134>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a40      	ldr	r2, [pc, #256]	; (8000420 <MX_GPIO_Init+0x134>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b3e      	ldr	r3, [pc, #248]	; (8000420 <MX_GPIO_Init+0x134>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <MX_GPIO_Init+0x134>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a3a      	ldr	r2, [pc, #232]	; (8000420 <MX_GPIO_Init+0x134>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b38      	ldr	r3, [pc, #224]	; (8000420 <MX_GPIO_Init+0x134>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b35      	ldr	r3, [pc, #212]	; (8000420 <MX_GPIO_Init+0x134>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a34      	ldr	r2, [pc, #208]	; (8000420 <MX_GPIO_Init+0x134>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <MX_GPIO_Init+0x134>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	482f      	ldr	r0, [pc, #188]	; (8000424 <MX_GPIO_Init+0x138>)
 8000368:	f000 ff45 	bl	80011f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 800036c:	2200      	movs	r2, #0
 800036e:	21ff      	movs	r1, #255	; 0xff
 8000370:	482d      	ldr	r0, [pc, #180]	; (8000428 <MX_GPIO_Init+0x13c>)
 8000372:	f000 ff40 	bl	80011f6 <HAL_GPIO_WritePin>
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 8000376:	2200      	movs	r2, #0
 8000378:	f24f 11e0 	movw	r1, #61920	; 0xf1e0
 800037c:	482b      	ldr	r0, [pc, #172]	; (800042c <MX_GPIO_Init+0x140>)
 800037e:	f000 ff3a 	bl	80011f6 <HAL_GPIO_WritePin>
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2302      	movs	r3, #2
 8000392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	4822      	ldr	r0, [pc, #136]	; (8000424 <MX_GPIO_Init+0x138>)
 800039c:	f000 fd90 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_A1_Pin M3_A2_Pin M3_B1_Pin M3_B2_Pin
                           M4_A1_Pin M4_A2_Pin M4_B1_Pin M4_B2_Pin */
  GPIO_InitStruct.Pin = M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 80003a0:	23ff      	movs	r3, #255	; 0xff
 80003a2:	613b      	str	r3, [r7, #16]
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	2302      	movs	r3, #2
 80003ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	481c      	ldr	r0, [pc, #112]	; (8000428 <MX_GPIO_Init+0x13c>)
 80003b8:	f000 fd82 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A1_Pin M1_A2_Pin M1_B1_Pin M1_B2_Pin
                           M2_A1_Pin M2_A2_Pin M2_B1_Pin M2_B2_Pin */
  GPIO_InitStruct.Pin = M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 80003bc:	f24f 13e0 	movw	r3, #61920	; 0xf1e0
 80003c0:	613b      	str	r3, [r7, #16]
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <MX_GPIO_Init+0x140>)
 80003d6:	f000 fd73 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin HAL_2_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin|HAL_2_Pin;
 80003da:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e4:	2301      	movs	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <MX_GPIO_Init+0x13c>)
 80003f4:	f000 fd64 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_3_Pin HAL_4_Pin HAL_1_Pin */
  GPIO_InitStruct.Pin = HAL_3_Pin|HAL_4_Pin|HAL_1_Pin;
 80003f8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4806      	ldr	r0, [pc, #24]	; (800042c <MX_GPIO_Init+0x140>)
 8000412:	f000 fd55 	bl	8000ec0 <HAL_GPIO_Init>

}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40011000 	.word	0x40011000
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <stepperServiceRoutine>:
		case 2: stepper_3_change += steps; break;
		case 3: stepper_4_change += steps; break;
	}
}

void stepperServiceRoutine(){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af02      	add	r7, sp, #8
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	if (homing == 1){
 8000442:	4b89      	ldr	r3, [pc, #548]	; (8000668 <stepperServiceRoutine+0x22c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d102      	bne.n	8000450 <stepperServiceRoutine+0x14>
		homeISR();
 800044a:	f000 f923 	bl	8000694 <homeISR>
		return;
 800044e:	e109      	b.n	8000664 <stepperServiceRoutine+0x228>
	}

	if (stepper_1_change > 0){
 8000450:	4b86      	ldr	r3, [pc, #536]	; (800066c <stepperServiceRoutine+0x230>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	dd1f      	ble.n	8000498 <stepperServiceRoutine+0x5c>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8000458:	4b85      	ldr	r3, [pc, #532]	; (8000670 <stepperServiceRoutine+0x234>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800046c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000470:	4880      	ldr	r0, [pc, #512]	; (8000674 <stepperServiceRoutine+0x238>)
 8000472:	f000 f953 	bl	800071c <doStep>
		stepper_1_change --;
 8000476:	4b7d      	ldr	r3, [pc, #500]	; (800066c <stepperServiceRoutine+0x230>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3b01      	subs	r3, #1
 800047c:	4a7b      	ldr	r2, [pc, #492]	; (800066c <stepperServiceRoutine+0x230>)
 800047e:	6013      	str	r3, [r2, #0]
		stepper_1_state ++;
 8000480:	4b7b      	ldr	r3, [pc, #492]	; (8000670 <stepperServiceRoutine+0x234>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	4a7a      	ldr	r2, [pc, #488]	; (8000670 <stepperServiceRoutine+0x234>)
 8000488:	6013      	str	r3, [r2, #0]
		if (stepper_1_state == 8){stepper_1_state = 0;}
 800048a:	4b79      	ldr	r3, [pc, #484]	; (8000670 <stepperServiceRoutine+0x234>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b08      	cmp	r3, #8
 8000490:	d102      	bne.n	8000498 <stepperServiceRoutine+0x5c>
 8000492:	4b77      	ldr	r3, [pc, #476]	; (8000670 <stepperServiceRoutine+0x234>)
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
	}
	if (stepper_1_change < 0){
 8000498:	4b74      	ldr	r3, [pc, #464]	; (800066c <stepperServiceRoutine+0x230>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	da1f      	bge.n	80004e0 <stepperServiceRoutine+0xa4>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 80004a0:	4b73      	ldr	r3, [pc, #460]	; (8000670 <stepperServiceRoutine+0x234>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	486e      	ldr	r0, [pc, #440]	; (8000674 <stepperServiceRoutine+0x238>)
 80004ba:	f000 f92f 	bl	800071c <doStep>
		stepper_1_change ++;
 80004be:	4b6b      	ldr	r3, [pc, #428]	; (800066c <stepperServiceRoutine+0x230>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	4a69      	ldr	r2, [pc, #420]	; (800066c <stepperServiceRoutine+0x230>)
 80004c6:	6013      	str	r3, [r2, #0]
		stepper_1_state --;
 80004c8:	4b69      	ldr	r3, [pc, #420]	; (8000670 <stepperServiceRoutine+0x234>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a68      	ldr	r2, [pc, #416]	; (8000670 <stepperServiceRoutine+0x234>)
 80004d0:	6013      	str	r3, [r2, #0]
		if (stepper_1_state < 0){stepper_1_state = 7;}
 80004d2:	4b67      	ldr	r3, [pc, #412]	; (8000670 <stepperServiceRoutine+0x234>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	da02      	bge.n	80004e0 <stepperServiceRoutine+0xa4>
 80004da:	4b65      	ldr	r3, [pc, #404]	; (8000670 <stepperServiceRoutine+0x234>)
 80004dc:	2207      	movs	r2, #7
 80004de:	601a      	str	r2, [r3, #0]
	}

	if (stepper_2_change > 0){
 80004e0:	4b65      	ldr	r3, [pc, #404]	; (8000678 <stepperServiceRoutine+0x23c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dd1c      	ble.n	8000522 <stepperServiceRoutine+0xe6>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 80004e8:	4b64      	ldr	r3, [pc, #400]	; (800067c <stepperServiceRoutine+0x240>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	2240      	movs	r2, #64	; 0x40
 80004f8:	2120      	movs	r1, #32
 80004fa:	485e      	ldr	r0, [pc, #376]	; (8000674 <stepperServiceRoutine+0x238>)
 80004fc:	f000 f90e 	bl	800071c <doStep>
		stepper_2_change --;
 8000500:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <stepperServiceRoutine+0x23c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3b01      	subs	r3, #1
 8000506:	4a5c      	ldr	r2, [pc, #368]	; (8000678 <stepperServiceRoutine+0x23c>)
 8000508:	6013      	str	r3, [r2, #0]
		stepper_2_state ++;
 800050a:	4b5c      	ldr	r3, [pc, #368]	; (800067c <stepperServiceRoutine+0x240>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	4a5a      	ldr	r2, [pc, #360]	; (800067c <stepperServiceRoutine+0x240>)
 8000512:	6013      	str	r3, [r2, #0]
		if (stepper_2_state == 8){stepper_2_state = 0;}
 8000514:	4b59      	ldr	r3, [pc, #356]	; (800067c <stepperServiceRoutine+0x240>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b08      	cmp	r3, #8
 800051a:	d102      	bne.n	8000522 <stepperServiceRoutine+0xe6>
 800051c:	4b57      	ldr	r3, [pc, #348]	; (800067c <stepperServiceRoutine+0x240>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	}
	if (stepper_2_change < 0){
 8000522:	4b55      	ldr	r3, [pc, #340]	; (8000678 <stepperServiceRoutine+0x23c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	da1c      	bge.n	8000564 <stepperServiceRoutine+0x128>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 800052a:	4b54      	ldr	r3, [pc, #336]	; (800067c <stepperServiceRoutine+0x240>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2380      	movs	r3, #128	; 0x80
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	2120      	movs	r1, #32
 800053c:	484d      	ldr	r0, [pc, #308]	; (8000674 <stepperServiceRoutine+0x238>)
 800053e:	f000 f8ed 	bl	800071c <doStep>
		stepper_2_change ++;
 8000542:	4b4d      	ldr	r3, [pc, #308]	; (8000678 <stepperServiceRoutine+0x23c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a4b      	ldr	r2, [pc, #300]	; (8000678 <stepperServiceRoutine+0x23c>)
 800054a:	6013      	str	r3, [r2, #0]
		stepper_2_state --;
 800054c:	4b4b      	ldr	r3, [pc, #300]	; (800067c <stepperServiceRoutine+0x240>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a4a      	ldr	r2, [pc, #296]	; (800067c <stepperServiceRoutine+0x240>)
 8000554:	6013      	str	r3, [r2, #0]
		if (stepper_2_state < 0){stepper_2_state = 7;}
 8000556:	4b49      	ldr	r3, [pc, #292]	; (800067c <stepperServiceRoutine+0x240>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	da02      	bge.n	8000564 <stepperServiceRoutine+0x128>
 800055e:	4b47      	ldr	r3, [pc, #284]	; (800067c <stepperServiceRoutine+0x240>)
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
	}

	if (stepper_3_change > 0){
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <stepperServiceRoutine+0x244>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	dd1b      	ble.n	80005a4 <stepperServiceRoutine+0x168>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 800056c:	4b45      	ldr	r3, [pc, #276]	; (8000684 <stepperServiceRoutine+0x248>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2308      	movs	r3, #8
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2304      	movs	r3, #4
 8000578:	2202      	movs	r2, #2
 800057a:	2101      	movs	r1, #1
 800057c:	4842      	ldr	r0, [pc, #264]	; (8000688 <stepperServiceRoutine+0x24c>)
 800057e:	f000 f8cd 	bl	800071c <doStep>
		stepper_3_change --;
 8000582:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <stepperServiceRoutine+0x244>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a3d      	ldr	r2, [pc, #244]	; (8000680 <stepperServiceRoutine+0x244>)
 800058a:	6013      	str	r3, [r2, #0]
		stepper_3_state ++;
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <stepperServiceRoutine+0x248>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	4a3c      	ldr	r2, [pc, #240]	; (8000684 <stepperServiceRoutine+0x248>)
 8000594:	6013      	str	r3, [r2, #0]
		if (stepper_3_state == 8){stepper_3_state = 0;}
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <stepperServiceRoutine+0x248>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b08      	cmp	r3, #8
 800059c:	d102      	bne.n	80005a4 <stepperServiceRoutine+0x168>
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <stepperServiceRoutine+0x248>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
	}
	if (stepper_3_change < 0){
 80005a4:	4b36      	ldr	r3, [pc, #216]	; (8000680 <stepperServiceRoutine+0x244>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da1b      	bge.n	80005e4 <stepperServiceRoutine+0x1a8>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin, M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 80005ac:	4b35      	ldr	r3, [pc, #212]	; (8000684 <stepperServiceRoutine+0x248>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2308      	movs	r3, #8
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2304      	movs	r3, #4
 80005b8:	2202      	movs	r2, #2
 80005ba:	2101      	movs	r1, #1
 80005bc:	4832      	ldr	r0, [pc, #200]	; (8000688 <stepperServiceRoutine+0x24c>)
 80005be:	f000 f8ad 	bl	800071c <doStep>
		stepper_3_change ++;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <stepperServiceRoutine+0x244>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <stepperServiceRoutine+0x244>)
 80005ca:	6013      	str	r3, [r2, #0]
		stepper_3_state --;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <stepperServiceRoutine+0x248>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <stepperServiceRoutine+0x248>)
 80005d4:	6013      	str	r3, [r2, #0]
		if (stepper_3_state < 0){stepper_3_state = 7;}
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <stepperServiceRoutine+0x248>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	da02      	bge.n	80005e4 <stepperServiceRoutine+0x1a8>
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <stepperServiceRoutine+0x248>)
 80005e0:	2207      	movs	r2, #7
 80005e2:	601a      	str	r2, [r3, #0]
	}

	if (stepper_4_change > 0){
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <stepperServiceRoutine+0x250>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dd1b      	ble.n	8000624 <stepperServiceRoutine+0x1e8>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <stepperServiceRoutine+0x254>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2340      	movs	r3, #64	; 0x40
 80005f8:	2220      	movs	r2, #32
 80005fa:	2110      	movs	r1, #16
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <stepperServiceRoutine+0x24c>)
 80005fe:	f000 f88d 	bl	800071c <doStep>
		stepper_4_change --;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <stepperServiceRoutine+0x250>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3b01      	subs	r3, #1
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <stepperServiceRoutine+0x250>)
 800060a:	6013      	str	r3, [r2, #0]
		stepper_4_state ++;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <stepperServiceRoutine+0x254>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <stepperServiceRoutine+0x254>)
 8000614:	6013      	str	r3, [r2, #0]
		if (stepper_4_state == 8){stepper_4_state = 0;}
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <stepperServiceRoutine+0x254>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b08      	cmp	r3, #8
 800061c:	d102      	bne.n	8000624 <stepperServiceRoutine+0x1e8>
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <stepperServiceRoutine+0x254>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
	}
	if (stepper_4_change < 0){
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <stepperServiceRoutine+0x250>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	da1b      	bge.n	8000664 <stepperServiceRoutine+0x228>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <stepperServiceRoutine+0x254>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2340      	movs	r3, #64	; 0x40
 8000638:	2220      	movs	r2, #32
 800063a:	2110      	movs	r1, #16
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <stepperServiceRoutine+0x24c>)
 800063e:	f000 f86d 	bl	800071c <doStep>
		stepper_4_change ++;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <stepperServiceRoutine+0x250>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <stepperServiceRoutine+0x250>)
 800064a:	6013      	str	r3, [r2, #0]
		stepper_4_state --;
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <stepperServiceRoutine+0x254>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <stepperServiceRoutine+0x254>)
 8000654:	6013      	str	r3, [r2, #0]
		if (stepper_4_state < 0){stepper_4_state = 7;}
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <stepperServiceRoutine+0x254>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	da02      	bge.n	8000664 <stepperServiceRoutine+0x228>
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <stepperServiceRoutine+0x254>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
	}
}
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000021c 	.word	0x2000021c
 800066c:	200001fc 	.word	0x200001fc
 8000670:	2000020c 	.word	0x2000020c
 8000674:	40010c00 	.word	0x40010c00
 8000678:	20000200 	.word	0x20000200
 800067c:	20000210 	.word	0x20000210
 8000680:	20000204 	.word	0x20000204
 8000684:	20000214 	.word	0x20000214
 8000688:	40010800 	.word	0x40010800
 800068c:	20000208 	.word	0x20000208
 8000690:	20000218 	.word	0x20000218

08000694 <homeISR>:

void homeISR(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af02      	add	r7, sp, #8
	//stepper1
	printf("home s1");
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <homeISR+0x60>)
 800069c:	f007 faa2 	bl	8007be4 <iprintf>
	if(HAL_GPIO_ReadPin(HAL_1_GPIO_Port, HAL_1_Pin)){
 80006a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <homeISR+0x64>)
 80006a6:	f000 fd8f 	bl	80011c8 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d01b      	beq.n	80006e8 <homeISR+0x54>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <homeISR+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <homeISR+0x64>)
 80006ca:	f000 f827 	bl	800071c <doStep>
		stepper_1_state --;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <homeISR+0x68>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <homeISR+0x68>)
 80006d6:	6013      	str	r3, [r2, #0]
		if (stepper_1_state < 0){stepper_1_state = 7;}
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <homeISR+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da06      	bge.n	80006ee <homeISR+0x5a>
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <homeISR+0x68>)
 80006e2:	2207      	movs	r2, #7
 80006e4:	601a      	str	r2, [r3, #0]
	}else{
		homing = 0;
	}

}
 80006e6:	e002      	b.n	80006ee <homeISR+0x5a>
		homing = 0;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <homeISR+0x6c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08008abc 	.word	0x08008abc
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	2000020c 	.word	0x2000020c
 8000700:	2000021c 	.word	0x2000021c

08000704 <homeAll>:

void homeAll(){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	homing = 1;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <homeAll+0x14>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]

}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	2000021c 	.word	0x2000021c

0800071c <doStep>:

void doStep(GPIO_TypeDef *PORT, uint16_t  PIN1, uint16_t  PIN2, uint16_t  PIN3, uint16_t  PIN4, int step){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	4608      	mov	r0, r1
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	4603      	mov	r3, r0
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	460b      	mov	r3, r1
 8000730:	813b      	strh	r3, [r7, #8]
 8000732:	4613      	mov	r3, r2
 8000734:	80fb      	strh	r3, [r7, #6]
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	2b07      	cmp	r3, #7
 800073a:	f200 80db 	bhi.w	80008f4 <doStep+0x1d8>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <doStep+0x28>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	08000765 	.word	0x08000765
 8000748:	08000797 	.word	0x08000797
 800074c:	080007c9 	.word	0x080007c9
 8000750:	080007fb 	.word	0x080007fb
 8000754:	0800082d 	.word	0x0800082d
 8000758:	0800085f 	.word	0x0800085f
 800075c:	08000891 	.word	0x08000891
 8000760:	080008c3 	.word	0x080008c3
	switch(step){
		case 0:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 8000764:	897b      	ldrh	r3, [r7, #10]
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f000 fd43 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8000770:	893b      	ldrh	r3, [r7, #8]
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f000 fd3d 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f000 fd37 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8000788:	8b3b      	ldrh	r3, [r7, #24]
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f000 fd31 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 8000794:	e0ae      	b.n	80008f4 <doStep+0x1d8>
		case 1:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 8000796:	897b      	ldrh	r3, [r7, #10]
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f000 fd2a 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 80007a2:	893b      	ldrh	r3, [r7, #8]
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f000 fd24 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f000 fd1e 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80007ba:	8b3b      	ldrh	r3, [r7, #24]
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f000 fd18 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 80007c6:	e095      	b.n	80008f4 <doStep+0x1d8>
		case 2:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 fd11 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 80007d4:	893b      	ldrh	r3, [r7, #8]
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f000 fd0b 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f000 fd05 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80007ec:	8b3b      	ldrh	r3, [r7, #24]
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f000 fcff 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 80007f8:	e07c      	b.n	80008f4 <doStep+0x1d8>
		case 3:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80007fa:	897b      	ldrh	r3, [r7, #10]
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 fcf8 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 8000806:	893b      	ldrh	r3, [r7, #8]
 8000808:	2201      	movs	r2, #1
 800080a:	4619      	mov	r1, r3
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f000 fcf2 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	2201      	movs	r2, #1
 8000816:	4619      	mov	r1, r3
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 fcec 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 800081e:	8b3b      	ldrh	r3, [r7, #24]
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f000 fce6 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 800082a:	e063      	b.n	80008f4 <doStep+0x1d8>
		case 4:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f000 fcdf 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8000838:	893b      	ldrh	r3, [r7, #8]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f000 fcd9 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 fcd3 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8000850:	8b3b      	ldrh	r3, [r7, #24]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f000 fccd 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 800085c:	e04a      	b.n	80008f4 <doStep+0x1d8>
		case 5:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 800085e:	897b      	ldrh	r3, [r7, #10]
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 fcc6 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 800086a:	893b      	ldrh	r3, [r7, #8]
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f000 fcc0 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f000 fcba 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 8000882:	8b3b      	ldrh	r3, [r7, #24]
 8000884:	2201      	movs	r2, #1
 8000886:	4619      	mov	r1, r3
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 fcb4 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 800088e:	e031      	b.n	80008f4 <doStep+0x1d8>
		case 6:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8000890:	897b      	ldrh	r3, [r7, #10]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f000 fcad 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 800089c:	893b      	ldrh	r3, [r7, #8]
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 fca7 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 fca1 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 80008b4:	8b3b      	ldrh	r3, [r7, #24]
 80008b6:	2201      	movs	r2, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f000 fc9b 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 80008c0:	e018      	b.n	80008f4 <doStep+0x1d8>
		case 7:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	2201      	movs	r2, #1
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f000 fc94 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80008ce:	893b      	ldrh	r3, [r7, #8]
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f000 fc8e 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 fc88 	bl	80011f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 80008e6:	8b3b      	ldrh	r3, [r7, #24]
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 fc82 	bl	80011f6 <HAL_GPIO_WritePin>
			break;
 80008f2:	bf00      	nop
		}
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x40>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_MspInit+0x40>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x40>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x40>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_MspInit+0x40>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_MspInit+0x40>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000950:	d113      	bne.n	800097a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_TIM_Base_MspInit+0x44>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <HAL_TIM_Base_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x44>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	201c      	movs	r0, #28
 8000970:	f000 fa6f 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000974:	201c      	movs	r0, #28
 8000976:	f000 fa88 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 f929 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009de:	f000 fd6c 	bl	80014ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20001130 	.word	0x20001130

080009ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM2_IRQHandler+0x10>)
 80009f2:	f002 fd03 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000450 	.word	0x20000450

08000a00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e00a      	b.n	8000a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a12:	f3af 8000 	nop.w
 8000a16:	4601      	mov	r1, r0
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	b2ca      	uxtb	r2, r1
 8000a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf0      	blt.n	8000a12 <_read+0x12>
	}

return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e009      	b.n	8000a60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf1      	blt.n	8000a4c <_write+0x12>
	}
	return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_close>:

int _close(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a98:	605a      	str	r2, [r3, #4]
	return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f007 f83c 	bl	8007b80 <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20005000 	.word	0x20005000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000220 	.word	0x20000220
 8000b3c:	20001430 	.word	0x20001430

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b4e:	e003      	b.n	8000b58 <LoopCopyDataInit>

08000b50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b56:	3104      	adds	r1, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b60:	d3f6      	bcc.n	8000b50 <CopyDataInit>
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b64:	e002      	b.n	8000b6c <LoopFillZerobss>

08000b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b68:	f842 3b04 	str.w	r3, [r2], #4

08000b6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b70:	d3f9      	bcc.n	8000b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b72:	f7ff ffe5 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f007 f809 	bl	8007b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fae7 	bl	800014c <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b80:	08008bcc 	.word	0x08008bcc
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b88:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000b8c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000b90:	2000142c 	.word	0x2000142c

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x28>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x28>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f947 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fea2 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f95f 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f927 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <HAL_IncTick+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000498 	.word	0x20000498

08000c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000498 	.word	0x20000498

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff fff0 	bl	8000c48 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffe0 	bl	8000c48 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4906      	ldr	r1, [pc, #24]	; (8000d3c <__NVIC_EnableIRQ+0x34>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff90 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff2d 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff42 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff90 	bl	8000d94 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5f 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff35 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b08b      	sub	sp, #44	; 0x2c
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed2:	e169      	b.n	80011a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 8158 	bne.w	80011a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4a9a      	ldr	r2, [pc, #616]	; (8001160 <HAL_GPIO_Init+0x2a0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d05e      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000efc:	4a98      	ldr	r2, [pc, #608]	; (8001160 <HAL_GPIO_Init+0x2a0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d875      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f02:	4a98      	ldr	r2, [pc, #608]	; (8001164 <HAL_GPIO_Init+0x2a4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d058      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f08:	4a96      	ldr	r2, [pc, #600]	; (8001164 <HAL_GPIO_Init+0x2a4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d86f      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f0e:	4a96      	ldr	r2, [pc, #600]	; (8001168 <HAL_GPIO_Init+0x2a8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d052      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f14:	4a94      	ldr	r2, [pc, #592]	; (8001168 <HAL_GPIO_Init+0x2a8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d869      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f1a:	4a94      	ldr	r2, [pc, #592]	; (800116c <HAL_GPIO_Init+0x2ac>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d04c      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f20:	4a92      	ldr	r2, [pc, #584]	; (800116c <HAL_GPIO_Init+0x2ac>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d863      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f26:	4a92      	ldr	r2, [pc, #584]	; (8001170 <HAL_GPIO_Init+0x2b0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d046      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
 8000f2c:	4a90      	ldr	r2, [pc, #576]	; (8001170 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d85d      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d82a      	bhi.n	8000f8c <HAL_GPIO_Init+0xcc>
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d859      	bhi.n	8000fee <HAL_GPIO_Init+0x12e>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <HAL_GPIO_Init+0x80>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000fbb 	.word	0x08000fbb
 8000f44:	08000f95 	.word	0x08000f95
 8000f48:	08000fa7 	.word	0x08000fa7
 8000f4c:	08000fe9 	.word	0x08000fe9
 8000f50:	08000fef 	.word	0x08000fef
 8000f54:	08000fef 	.word	0x08000fef
 8000f58:	08000fef 	.word	0x08000fef
 8000f5c:	08000fef 	.word	0x08000fef
 8000f60:	08000fef 	.word	0x08000fef
 8000f64:	08000fef 	.word	0x08000fef
 8000f68:	08000fef 	.word	0x08000fef
 8000f6c:	08000fef 	.word	0x08000fef
 8000f70:	08000fef 	.word	0x08000fef
 8000f74:	08000fef 	.word	0x08000fef
 8000f78:	08000fef 	.word	0x08000fef
 8000f7c:	08000fef 	.word	0x08000fef
 8000f80:	08000fef 	.word	0x08000fef
 8000f84:	08000f9d 	.word	0x08000f9d
 8000f88:	08000fb1 	.word	0x08000fb1
 8000f8c:	4a79      	ldr	r2, [pc, #484]	; (8001174 <HAL_GPIO_Init+0x2b4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f92:	e02c      	b.n	8000fee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e029      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e024      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	3308      	adds	r3, #8
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e01f      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	330c      	adds	r3, #12
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e01a      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e013      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	611a      	str	r2, [r3, #16]
          break;
 8000fda:	e009      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	615a      	str	r2, [r3, #20]
          break;
 8000fe6:	e003      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x130>
          break;
 8000fee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2bff      	cmp	r3, #255	; 0xff
 8000ff4:	d801      	bhi.n	8000ffa <HAL_GPIO_Init+0x13a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	e001      	b.n	8000ffe <HAL_GPIO_Init+0x13e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d802      	bhi.n	800100c <HAL_GPIO_Init+0x14c>
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x152>
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	3b08      	subs	r3, #8
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	210f      	movs	r1, #15
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	6a39      	ldr	r1, [r7, #32]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80b1 	beq.w	80011a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001040:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <HAL_GPIO_Init+0x2b8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <HAL_GPIO_Init+0x2b8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <HAL_GPIO_Init+0x2b8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001058:	4a48      	ldr	r2, [pc, #288]	; (800117c <HAL_GPIO_Init+0x2bc>)
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a40      	ldr	r2, [pc, #256]	; (8001180 <HAL_GPIO_Init+0x2c0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d013      	beq.n	80010ac <HAL_GPIO_Init+0x1ec>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <HAL_GPIO_Init+0x2c4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d00d      	beq.n	80010a8 <HAL_GPIO_Init+0x1e8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a3e      	ldr	r2, [pc, #248]	; (8001188 <HAL_GPIO_Init+0x2c8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x1e4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a3d      	ldr	r2, [pc, #244]	; (800118c <HAL_GPIO_Init+0x2cc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_GPIO_Init+0x1e0>
 800109c:	2303      	movs	r3, #3
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x1ee>
 80010ac:	2300      	movs	r3, #0
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010be:	492f      	ldr	r1, [pc, #188]	; (800117c <HAL_GPIO_Init+0x2bc>)
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	492c      	ldr	r1, [pc, #176]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4928      	ldr	r1, [pc, #160]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4922      	ldr	r1, [pc, #136]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	491e      	ldr	r1, [pc, #120]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001118:	4013      	ands	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	4918      	ldr	r1, [pc, #96]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	4914      	ldr	r1, [pc, #80]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001140:	4013      	ands	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d021      	beq.n	8001194 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	490e      	ldr	r1, [pc, #56]	; (8001190 <HAL_GPIO_Init+0x2d0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
 800115c:	e021      	b.n	80011a2 <HAL_GPIO_Init+0x2e2>
 800115e:	bf00      	nop
 8001160:	10320000 	.word	0x10320000
 8001164:	10310000 	.word	0x10310000
 8001168:	10220000 	.word	0x10220000
 800116c:	10210000 	.word	0x10210000
 8001170:	10120000 	.word	0x10120000
 8001174:	10110000 	.word	0x10110000
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	40010800 	.word	0x40010800
 8001184:	40010c00 	.word	0x40010c00
 8001188:	40011000 	.word	0x40011000
 800118c:	40011400 	.word	0x40011400
 8001190:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_GPIO_Init+0x304>)
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	43db      	mvns	r3, r3
 800119c:	4909      	ldr	r1, [pc, #36]	; (80011c4 <HAL_GPIO_Init+0x304>)
 800119e:	4013      	ands	r3, r2
 80011a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	3301      	adds	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f47f ae8e 	bne.w	8000ed4 <HAL_GPIO_Init+0x14>
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	372c      	adds	r7, #44	; 0x2c
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e001      	b.n	80011ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]
 8001202:	4613      	mov	r3, r2
 8001204:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001206:	787b      	ldrb	r3, [r7, #1]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001212:	e003      	b.n	800121c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	041a      	lsls	r2, r3, #16
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	611a      	str	r2, [r3, #16]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001238:	887a      	ldrh	r2, [r7, #2]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	041a      	lsls	r2, r3, #16
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43d9      	mvns	r1, r3
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	400b      	ands	r3, r1
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af06      	add	r7, sp, #24
 800125e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0fd      	b.n	8001466 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f006 f9d4 	bl	800762c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fc31 	bl	8003af8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	687e      	ldr	r6, [r7, #4]
 800129e:	466d      	mov	r5, sp
 80012a0:	f106 0410 	add.w	r4, r6, #16
 80012a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	602b      	str	r3, [r5, #0]
 80012ac:	1d33      	adds	r3, r6, #4
 80012ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f002 fbfb 	bl	8003aac <USB_CoreInit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0ce      	b.n	8001466 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fc2c 	bl	8003b2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e04c      	b.n	8001374 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3301      	adds	r3, #1
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	b298      	uxth	r0, r3
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3336      	adds	r3, #54	; 0x36
 8001318:	4602      	mov	r2, r0
 800131a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3303      	adds	r3, #3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	3338      	adds	r3, #56	; 0x38
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	333c      	adds	r3, #60	; 0x3c
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3340      	adds	r3, #64	; 0x40
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3301      	adds	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3ad      	bcc.n	80012da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e044      	b.n	800140e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3b5      	bcc.n	8001384 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	687e      	ldr	r6, [r7, #4]
 8001420:	466d      	mov	r5, sp
 8001422:	f106 0410 	add.w	r4, r6, #16
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	602b      	str	r3, [r5, #0]
 800142e:	1d33      	adds	r3, r6, #4
 8001430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f002 fb86 	bl	8003b44 <USB_DevInit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00d      	b.n	8001466 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f004 fb20 	bl	8005aa4 <USB_DevDisconnect>

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_Start+0x16>
 8001480:	2302      	movs	r3, #2
 8001482:	e016      	b.n	80014b2 <HAL_PCD_Start+0x44>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fb1b 	bl	8003acc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001496:	2101      	movs	r1, #1
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f006 fb3a 	bl	8007b12 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 faf4 	bl	8005a90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 faf6 	bl	8005ab8 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d6:	d102      	bne.n	80014de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fb61 	bl	8001ba0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f004 fae8 	bl	8005ab8 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d112      	bne.n	800151a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f006 f908 	bl	8007722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f925 	bl	8001764 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f004 faca 	bl	8005ab8 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800152e:	d10b      	bne.n	8001548 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fab3 	bl	8005ab8 <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155c:	d10b      	bne.n	8001576 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001570:	b292      	uxth	r2, r2
 8001572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fa9c 	bl	8005ab8 <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158a:	d126      	bne.n	80015da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0204 	bic.w	r2, r2, #4
 800159e:	b292      	uxth	r2, r2
 80015a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0208 	bic.w	r2, r2, #8
 80015b6:	b292      	uxth	r2, r2
 80015b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f006 f8e9 	bl	8007794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015d4:	b292      	uxth	r2, r2
 80015d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 fa6a 	bl	8005ab8 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ee:	f040 8084 	bne.w	80016fa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	77fb      	strb	r3, [r7, #31]
 80015f6:	e011      	b.n	800161c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	441a      	add	r2, r3
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	b292      	uxth	r2, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	f107 0120 	add.w	r1, r7, #32
 8001610:	440b      	add	r3, r1
 8001612:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	3301      	adds	r3, #1
 800161a:	77fb      	strb	r3, [r7, #31]
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	2b07      	cmp	r3, #7
 8001620:	d9ea      	bls.n	80015f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0201 	orr.w	r2, r2, #1
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	b292      	uxth	r2, r2
 800164e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001652:	bf00      	nop
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165c:	b29b      	uxth	r3, r3
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f6      	beq.n	8001654 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	77fb      	strb	r3, [r7, #31]
 8001682:	e010      	b.n	80016a6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001684:	7ffb      	ldrb	r3, [r7, #31]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	4611      	mov	r1, r2
 800168c:	7ffa      	ldrb	r2, [r7, #31]
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	440a      	add	r2, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	f107 0120 	add.w	r1, r7, #32
 8001698:	440b      	add	r3, r1
 800169a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800169e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80016a0:	7ffb      	ldrb	r3, [r7, #31]
 80016a2:	3301      	adds	r3, #1
 80016a4:	77fb      	strb	r3, [r7, #31]
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d9eb      	bls.n	8001684 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0208 	orr.w	r2, r2, #8
 80016be:	b292      	uxth	r2, r2
 80016c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	b292      	uxth	r2, r2
 80016d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0204 	orr.w	r2, r2, #4
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f006 f833 	bl	8007760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 f9da 	bl	8005ab8 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170e:	d10e      	bne.n	800172e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001722:	b292      	uxth	r2, r2
 8001724:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 ffec 	bl	8007706 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f004 f9c0 	bl	8005ab8 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001742:	d10b      	bne.n	800175c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_PCD_SetAddress+0x1a>
 800177a:	2302      	movs	r3, #2
 800177c:	e013      	b.n	80017a6 <HAL_PCD_SetAddress+0x42>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f004 f967 	bl	8005a6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	70fb      	strb	r3, [r7, #3]
 80017c0:	460b      	mov	r3, r1
 80017c2:	803b      	strh	r3, [r7, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da0e      	bge.n	80017f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	705a      	strb	r2, [r3, #1]
 80017f0:	e00e      	b.n	8001810 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f003 0207 	and.w	r2, r3, #7
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800181c:	883a      	ldrh	r2, [r7, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d102      	bne.n	8001846 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_PCD_EP_Open+0xa6>
 8001850:	2302      	movs	r3, #2
 8001852:	e00e      	b.n	8001872 <HAL_PCD_EP_Open+0xc4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 f98e 	bl	8003b84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001870:	7afb      	ldrb	r3, [r7, #11]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da0e      	bge.n	80018ac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	705a      	strb	r2, [r3, #1]
 80018aa:	e00e      	b.n	80018ca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	f003 0207 	and.w	r2, r3, #7
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_PCD_EP_Close+0x6a>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00e      	b.n	8001902 <HAL_PCD_EP_Close+0x88>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fcb0 	bl	8004258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	460b      	mov	r3, r1
 8001918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	f003 0207 	and.w	r2, r3, #7
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2200      	movs	r2, #0
 8001948:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800194a:	7afb      	ldrb	r3, [r7, #11]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2da      	uxtb	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001956:	7afb      	ldrb	r3, [r7, #11]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	2b00      	cmp	r3, #0
 800195e:	d106      	bne.n	800196e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6979      	ldr	r1, [r7, #20]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fe62 	bl	8004630 <USB_EPStartXfer>
 800196c:	e005      	b.n	800197a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fe5b 	bl	8004630 <USB_EPStartXfer>
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 0207 	and.w	r2, r3, #7
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	460b      	mov	r3, r1
 80019c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2201      	movs	r2, #1
 80019fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d106      	bne.n	8001a22 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fe08 	bl	8004630 <USB_EPStartXfer>
 8001a20:	e005      	b.n	8001a2e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6979      	ldr	r1, [r7, #20]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fe01 	bl	8004630 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0207 	and.w	r2, r3, #7
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d901      	bls.n	8001a56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e04c      	b.n	8001af0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da0e      	bge.n	8001a7c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	705a      	strb	r2, [r3, #1]
 8001a7a:	e00c      	b.n	8001a96 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_EP_SetStall+0x7e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e01c      	b.n	8001af0 <HAL_PCD_EP_SetStall+0xb8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fed3 	bl	8005870 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f003 fff8 	bl	8005ad6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d901      	bls.n	8001b16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e040      	b.n	8001b98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da0e      	bge.n	8001b3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	705a      	strb	r2, [r3, #1]
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 0207 	and.w	r2, r3, #7
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_ClrStall+0x82>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00e      	b.n	8001b98 <HAL_PCD_EP_ClrStall+0xa0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fec1 	bl	8005910 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ba8:	e2df      	b.n	800216a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 8158 	bne.w	8001e7a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d152      	bne.n	8001c7a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be4:	81fb      	strh	r3, [r7, #14]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	3302      	adds	r3, #2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	441a      	add	r2, r3
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f005 fd49 	bl	80076d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 828e 	beq.w	800216a <PCD_EP_ISR_Handler+0x5ca>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 8289 	bne.w	800216a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c78:	e277      	b.n	800216a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d034      	beq.n	8001cfe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3306      	adds	r3, #6
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f003 ff4f 	bl	8005b76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	823b      	strh	r3, [r7, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	8a3a      	ldrh	r2, [r7, #16]
 8001cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f005 fcbe 	bl	8007678 <HAL_PCD_SetupStageCallback>
 8001cfc:	e235      	b.n	800216a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cfe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f280 8231 	bge.w	800216a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d14:	4013      	ands	r3, r2
 8001d16:	83bb      	strh	r3, [r7, #28]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	8bba      	ldrh	r2, [r7, #28]
 8001d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d22:	b292      	uxth	r2, r2
 8001d24:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3306      	adds	r3, #6
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <PCD_EP_ISR_Handler+0x1ee>
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d015      	beq.n	8001d8e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	6959      	ldr	r1, [r3, #20]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f003 feff 	bl	8005b76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	441a      	add	r2, r3
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f005 fc87 	bl	800769c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	4413      	add	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d112      	bne.n	8001ddc <PCD_EP_ISR_Handler+0x23c>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	e02f      	b.n	8001e3c <PCD_EP_ISR_Handler+0x29c>
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b3e      	cmp	r3, #62	; 0x3e
 8001de2:	d813      	bhi.n	8001e0c <PCD_EP_ISR_Handler+0x26c>
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <PCD_EP_ISR_Handler+0x25e>
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	e017      	b.n	8001e3c <PCD_EP_ISR_Handler+0x29c>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <PCD_EP_ISR_Handler+0x286>
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	3b01      	subs	r3, #1
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	029b      	lsls	r3, r3, #10
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4c:	827b      	strh	r3, [r7, #18]
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e54:	827b      	strh	r3, [r7, #18]
 8001e56:	8a7b      	ldrh	r3, [r7, #18]
 8001e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e5c:	827b      	strh	r3, [r7, #18]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	8a7b      	ldrh	r3, [r7, #18]
 8001e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	8013      	strh	r3, [r2, #0]
 8001e78:	e177      	b.n	800216a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f280 80ea 	bge.w	800206a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eac:	4013      	ands	r3, r2
 8001eae:	853b      	strh	r3, [r7, #40]	; 0x28
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ec8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	7b1b      	ldrb	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d122      	bne.n	8001f2c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3306      	adds	r3, #6
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8087 	beq.w	8002026 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	6959      	ldr	r1, [r3, #20]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	88da      	ldrh	r2, [r3, #6]
 8001f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f26:	f003 fe26 	bl	8005b76 <USB_ReadPMA>
 8001f2a:	e07c      	b.n	8002026 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	78db      	ldrb	r3, [r3, #3]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d108      	bne.n	8001f46 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f923 	bl	8002186 <HAL_PCD_EP_DB_Receive>
 8001f40:	4603      	mov	r3, r0
 8001f42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f44:	e06f      	b.n	8002026 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f60:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	441a      	add	r2, r3
 8001f70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02a      	beq.n	8002026 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	6959      	ldr	r1, [r3, #20]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	891a      	ldrh	r2, [r3, #8]
 8001fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fde:	f003 fdca 	bl	8005b76 <USB_ReadPMA>
 8001fe2:	e020      	b.n	8002026 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800200e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	895a      	ldrh	r2, [r3, #10]
 8002020:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002022:	f003 fda8 	bl	8005b76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800202c:	441a      	add	r2, r3
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002038:	441a      	add	r2, r3
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <PCD_EP_ISR_Handler+0x4b0>
 8002046:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d206      	bcs.n	800205e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f005 fb20 	bl	800769c <HAL_PCD_DataOutStageCallback>
 800205c:	e005      	b.n	800206a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fae3 	bl	8004630 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800206a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b00      	cmp	r3, #0
 8002072:	d07a      	beq.n	800216a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002074:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	843b      	strh	r3, [r7, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	8c3b      	ldrh	r3, [r7, #32]
 80020b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020bc:	b29b      	uxth	r3, r3
 80020be:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	78db      	ldrb	r3, [r3, #3]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d108      	bne.n	80020da <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d146      	bne.n	800215e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80020d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d141      	bne.n	800215e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	3302      	adds	r3, #2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002102:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	429a      	cmp	r2, r3
 800210c:	d906      	bls.n	800211c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	8bfb      	ldrh	r3, [r7, #30]
 8002114:	1ad2      	subs	r2, r2, r3
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	619a      	str	r2, [r3, #24]
 800211a:	e002      	b.n	8002122 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f005 face 	bl	80076d2 <HAL_PCD_DataInStageCallback>
 8002136:	e018      	b.n	800216a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	8bfb      	ldrh	r3, [r7, #30]
 800213e:	441a      	add	r2, r3
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	8bfb      	ldrh	r3, [r7, #30]
 800214a:	441a      	add	r2, r3
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fa6a 	bl	8004630 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800215c:	e005      	b.n	800216a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800215e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002160:	461a      	mov	r2, r3
 8002162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f91b 	bl	80023a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29b      	uxth	r3, r3
 8002174:	b21b      	sxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f6ff ad17 	blt.w	8001baa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07e      	beq.n	800229c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	3302      	adds	r3, #2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	8b7b      	ldrh	r3, [r7, #26]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d306      	bcc.n	80021e0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	8b7b      	ldrh	r3, [r7, #26]
 80021d8:	1ad2      	subs	r2, r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e002      	b.n	80021e6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d123      	bne.n	8002236 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	833b      	strh	r3, [r7, #24]
 800220a:	8b3b      	ldrh	r3, [r7, #24]
 800220c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002210:	833b      	strh	r3, [r7, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	441a      	add	r2, r3
 8002220:	8b3b      	ldrh	r3, [r7, #24]
 8002222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002232:	b29b      	uxth	r3, r3
 8002234:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	82fb      	strh	r3, [r7, #22]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	8afb      	ldrh	r3, [r7, #22]
 800226c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002278:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800227c:	b29b      	uxth	r3, r3
 800227e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002280:	8b7b      	ldrh	r3, [r7, #26]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6959      	ldr	r1, [r3, #20]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	891a      	ldrh	r2, [r3, #8]
 8002294:	8b7b      	ldrh	r3, [r7, #26]
 8002296:	f003 fc6e 	bl	8005b76 <USB_ReadPMA>
 800229a:	e07c      	b.n	8002396 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	3306      	adds	r3, #6
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	8b7b      	ldrh	r3, [r7, #26]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d306      	bcc.n	80022de <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	8b7b      	ldrh	r3, [r7, #26]
 80022d6:	1ad2      	subs	r2, r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	619a      	str	r2, [r3, #24]
 80022dc:	e002      	b.n	80022e4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d123      	bne.n	8002334 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002306:	83fb      	strh	r3, [r7, #30]
 8002308:	8bfb      	ldrh	r3, [r7, #30]
 800230a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800230e:	83fb      	strh	r3, [r7, #30]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	8bfb      	ldrh	r3, [r7, #30]
 8002320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	b29b      	uxth	r3, r3
 8002332:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002358:	83bb      	strh	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	8bbb      	ldrh	r3, [r7, #28]
 800236a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800236e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800237a:	b29b      	uxth	r3, r3
 800237c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800237e:	8b7b      	ldrh	r3, [r7, #26]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6959      	ldr	r1, [r3, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	895a      	ldrh	r2, [r3, #10]
 8002390:	8b7b      	ldrh	r3, [r7, #26]
 8002392:	f003 fbf0 	bl	8005b76 <USB_ReadPMA>
    }
  }

  return count;
 8002396:	8b7b      	ldrh	r3, [r7, #26]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b094      	sub	sp, #80	; 0x50
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8138 	beq.w	800262a <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	3302      	adds	r3, #2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d907      	bls.n	8002402 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023fa:	1ad2      	subs	r2, r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	e002      	b.n	8002408 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d12c      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f005 f95b 	bl	80076d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 823a 	beq.w	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	82fb      	strh	r3, [r7, #22]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	8afb      	ldrh	r3, [r7, #22]
 8002454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002464:	b29b      	uxth	r3, r3
 8002466:	8013      	strh	r3, [r2, #0]
 8002468:	e218      	b.n	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01f      	beq.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	441a      	add	r2, r3
 800249e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 81ee 	bne.w	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024c8:	441a      	add	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024d6:	441a      	add	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d309      	bcc.n	80024fc <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f4:	1ad2      	subs	r2, r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	621a      	str	r2, [r3, #32]
 80024fa:	e015      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002504:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002508:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002512:	e009      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d155      	bne.n	80025dc <HAL_PCD_EP_DB_Transmit+0x23c>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	011a      	lsls	r2, r3, #4
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255a:	2b00      	cmp	r3, #0
 800255c:	d112      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002568:	b29a      	uxth	r2, r3
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257c:	b29a      	uxth	r2, r3
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e047      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x274>
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	2b3e      	cmp	r3, #62	; 0x3e
 8002588:	d811      	bhi.n	80025ae <HAL_PCD_EP_DB_Transmit+0x20e>
 800258a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x200>
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	3301      	adds	r3, #1
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e032      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x274>
 80025ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x224>
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	3b01      	subs	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	e01b      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x274>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d117      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x274>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	4413      	add	r3, r2
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	011a      	lsls	r2, r3, #4
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	4413      	add	r3, r2
 8002606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800260a:	623b      	str	r3, [r7, #32]
 800260c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260e:	b29a      	uxth	r2, r3
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6959      	ldr	r1, [r3, #20]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	891a      	ldrh	r2, [r3, #8]
 8002620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002622:	b29b      	uxth	r3, r3
 8002624:	f003 fa62 	bl	8005aec <USB_WritePMA>
 8002628:	e138      	b.n	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	3306      	adds	r3, #6
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002652:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800265e:	429a      	cmp	r2, r3
 8002660:	d307      	bcc.n	8002672 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800266a:	1ad2      	subs	r2, r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	619a      	str	r2, [r3, #24]
 8002670:	e002      	b.n	8002678 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d12e      	bne.n	80026de <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f005 f823 	bl	80076d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8102 	bne.w	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
 80026dc:	e0de      	b.n	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11f      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	867b      	strh	r3, [r7, #50]	; 0x32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	441a      	add	r2, r3
 8002712:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002724:	b29b      	uxth	r3, r3
 8002726:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 80b4 	bne.w	800289c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800273c:	441a      	add	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800274a:	441a      	add	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d309      	bcc.n	8002770 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	621a      	str	r2, [r3, #32]
 800276e:	e015      	b.n	800279c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002778:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002786:	e009      	b.n	800279c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	643b      	str	r3, [r7, #64]	; 0x40
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d155      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x4b6>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	4413      	add	r3, r2
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	011a      	lsls	r2, r3, #4
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	4413      	add	r3, r2
 80027cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
 80027d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d112      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x45e>
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e044      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80027fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002800:	2b3e      	cmp	r3, #62	; 0x3e
 8002802:	d811      	bhi.n	8002828 <HAL_PCD_EP_DB_Transmit+0x488>
 8002804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_PCD_EP_DB_Transmit+0x47a>
 8002814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002816:	3301      	adds	r3, #1
 8002818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800281a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281c:	b29b      	uxth	r3, r3
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	b29a      	uxth	r2, r3
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	e02f      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_PCD_EP_DB_Transmit+0x49e>
 8002838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283a:	3b01      	subs	r3, #1
 800283c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800283e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002840:	b29b      	uxth	r3, r3
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	b29b      	uxth	r3, r3
 8002846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800284a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284e:	b29a      	uxth	r2, r3
 8002850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	e018      	b.n	8002888 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d114      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	4413      	add	r3, r2
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	011a      	lsls	r2, r3, #4
 8002876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002878:	4413      	add	r3, r2
 800287a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	b29a      	uxth	r2, r3
 8002884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002886:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	895a      	ldrh	r2, [r3, #10]
 8002894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002896:	b29b      	uxth	r3, r3
 8002898:	f003 f928 	bl	8005aec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b6:	82bb      	strh	r3, [r7, #20]
 80028b8:	8abb      	ldrh	r3, [r7, #20]
 80028ba:	f083 0310 	eor.w	r3, r3, #16
 80028be:	82bb      	strh	r3, [r7, #20]
 80028c0:	8abb      	ldrh	r3, [r7, #20]
 80028c2:	f083 0320 	eor.w	r3, r3, #32
 80028c6:	82bb      	strh	r3, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	8abb      	ldrh	r3, [r7, #20]
 80028d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3750      	adds	r7, #80	; 0x50
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b087      	sub	sp, #28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	817b      	strh	r3, [r7, #10]
 8002904:	4613      	mov	r3, r2
 8002906:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002908:	897b      	ldrh	r3, [r7, #10]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e009      	b.n	8002940 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800292c:	897a      	ldrh	r2, [r7, #10]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002940:	893b      	ldrh	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	b29a      	uxth	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	80da      	strh	r2, [r3, #6]
 8002954:	e00b      	b.n	800296e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2201      	movs	r2, #1
 800295a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	b29a      	uxth	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0c1b      	lsrs	r3, r3, #16
 8002968:	b29a      	uxth	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
	...

0800297c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e26c      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8087 	beq.w	8002aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800299c:	4b92      	ldr	r3, [pc, #584]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d00c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a8:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d112      	bne.n	80029da <HAL_RCC_OscConfig+0x5e>
 80029b4:	4b8c      	ldr	r3, [pc, #560]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d10b      	bne.n	80029da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	4b89      	ldr	r3, [pc, #548]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d06c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x12c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d168      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e246      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x76>
 80029e4:	4b80      	ldr	r3, [pc, #512]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a7f      	ldr	r2, [pc, #508]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e02e      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7a      	ldr	r2, [pc, #488]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b78      	ldr	r3, [pc, #480]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a77      	ldr	r2, [pc, #476]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0xbc>
 8002a1e:	4b72      	ldr	r3, [pc, #456]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a71      	ldr	r2, [pc, #452]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6e      	ldr	r2, [pc, #440]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a38:	4b6b      	ldr	r3, [pc, #428]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a67      	ldr	r2, [pc, #412]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe f8f6 	bl	8000c48 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe f8f2 	bl	8000c48 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1fa      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xe4>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe f8e2 	bl	8000c48 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe f8de 	bl	8000c48 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1e6      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x10c>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab6:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ac2:	4b49      	ldr	r3, [pc, #292]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x18c>
 8002ace:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x176>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1ba      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4939      	ldr	r1, [pc, #228]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	e03a      	b.n	8002b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe f897 	bl	8000c48 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe f893 	bl	8000c48 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e19b      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4927      	ldr	r1, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x270>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe f876 	bl	8000c48 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe f872 	bl	8000c48 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e17a      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d03a      	beq.n	8002c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d019      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe f856 	bl	8000c48 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe f852 	bl	8000c48 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e15a      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f000 faa6 	bl	8003110 <RCC_Delay>
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe f83c 	bl	8000c48 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd2:	e00f      	b.n	8002bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe f838 	bl	8000c48 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d908      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e140      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	42420000 	.word	0x42420000
 8002bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b9e      	ldr	r3, [pc, #632]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e9      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80a6 	beq.w	8002d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b97      	ldr	r3, [pc, #604]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10d      	bne.n	8002c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	4b94      	ldr	r3, [pc, #592]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a93      	ldr	r2, [pc, #588]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b8e      	ldr	r3, [pc, #568]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a8a      	ldr	r2, [pc, #552]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fd fff9 	bl	8000c48 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7fd fff5 	bl	8000c48 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b64      	cmp	r3, #100	; 0x64
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0fd      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x4f8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x312>
 8002c80:	4b7b      	ldr	r3, [pc, #492]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a7a      	ldr	r2, [pc, #488]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6213      	str	r3, [r2, #32]
 8002c8c:	e02d      	b.n	8002cea <HAL_RCC_OscConfig+0x36e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x334>
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a75      	ldr	r2, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6213      	str	r3, [r2, #32]
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a72      	ldr	r2, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6213      	str	r3, [r2, #32]
 8002cae:	e01c      	b.n	8002cea <HAL_RCC_OscConfig+0x36e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x356>
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a6c      	ldr	r2, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6213      	str	r3, [r2, #32]
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e00b      	b.n	8002cea <HAL_RCC_OscConfig+0x36e>
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a66      	ldr	r2, [pc, #408]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a63      	ldr	r2, [pc, #396]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fd ffa9 	bl	8000c48 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd ffa5 	bl	8000c48 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0ab      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ee      	beq.n	8002cfa <HAL_RCC_OscConfig+0x37e>
 8002d1c:	e014      	b.n	8002d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fd ff93 	bl	8000c48 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fd ff8f 	bl	8000c48 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e095      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ee      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8081 	beq.w	8002e66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d64:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d061      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d146      	bne.n	8002e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <HAL_RCC_OscConfig+0x4fc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fd ff63 	bl	8000c48 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fd ff5f 	bl	8000c48 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e067      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	492d      	ldr	r1, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a19      	ldr	r1, [r3, #32]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	4927      	ldr	r1, [pc, #156]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x4fc>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fd ff33 	bl	8000c48 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fd ff2f 	bl	8000c48 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e037      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x46a>
 8002e04:	e02f      	b.n	8002e66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <HAL_RCC_OscConfig+0x4fc>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fd ff1c 	bl	8000c48 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fd ff18 	bl	8000c48 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e020      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x498>
 8002e32:	e018      	b.n	8002e66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e013      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42420060 	.word	0x42420060

08002e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0d0      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 0207 	bic.w	r2, r3, #7
 8002ea6:	4965      	ldr	r1, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d040      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e073      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4936      	ldr	r1, [pc, #216]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6c:	f7fd fe6c 	bl	8000c48 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fd fe68 	bl	8000c48 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e053      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d210      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	5ccb      	ldrb	r3, [r1, r3]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1cc>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1d0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fdca 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40022000 	.word	0x40022000
 8003040:	40021000 	.word	0x40021000
 8003044:	08008b1c 	.word	0x08008b1c
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b490      	push	{r4, r7}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003056:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003058:	1d3c      	adds	r4, r7, #4
 800305a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800305c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003060:	f240 2301 	movw	r3, #513	; 0x201
 8003064:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_RCC_GetSysClockFreq+0xb4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d002      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x40>
 800308a:	2b08      	cmp	r3, #8
 800308c:	d003      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x46>
 800308e:	e02d      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003092:	623b      	str	r3, [r7, #32]
      break;
 8003094:	e02d      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	0c9b      	lsrs	r3, r3, #18
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030a2:	4413      	add	r3, r2
 80030a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c5b      	lsrs	r3, r3, #17
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030c2:	4413      	add	r3, r2
 80030c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	fb02 f203 	mul.w	r2, r2, r3
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e004      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	623b      	str	r3, [r7, #32]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ee:	623b      	str	r3, [r7, #32]
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	6a3b      	ldr	r3, [r7, #32]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc90      	pop	{r4, r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	08008ac4 	.word	0x08008ac4
 8003104:	40021000 	.word	0x40021000
 8003108:	007a1200 	.word	0x007a1200
 800310c:	003d0900 	.word	0x003d0900

08003110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <RCC_Delay+0x34>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <RCC_Delay+0x38>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800312c:	bf00      	nop
  }
  while (Delay --);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	60fa      	str	r2, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f9      	bne.n	800312c <RCC_Delay+0x1c>
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20000000 	.word	0x20000000
 8003148:	10624dd3 	.word	0x10624dd3

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d07d      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316c:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10d      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4a4b      	ldr	r2, [pc, #300]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	61d3      	str	r3, [r2, #28]
 8003184:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d118      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a0:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ac:	f7fd fd4c 	bl	8000c48 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fd fd48 	bl	8000c48 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e06d      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02e      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d027      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031fa:	4b2e      	ldr	r3, [pc, #184]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003200:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d014      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003216:	f7fd fd17 	bl	8000c48 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fd fd13 	bl	8000c48 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	; 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e036      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ee      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4917      	ldr	r1, [pc, #92]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	4313      	orrs	r3, r2
 8003250:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	490b      	ldr	r1, [pc, #44]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4904      	ldr	r1, [pc, #16]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420440 	.word	0x42420440

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e041      	b.n	800334e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fb2e 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 fa70 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e03a      	b.n	80033e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_Base_Start_IT+0x98>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00e      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d009      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d010      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	e007      	b.n	80033e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0202 	mvn.w	r2, #2
 8003428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9b1 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9a4 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9b3 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f987 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f97a 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f989 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0208 	mvn.w	r2, #8
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f95d 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f950 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f95f 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0210 	mvn.w	r2, #16
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2208      	movs	r2, #8
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f933 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f926 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f935 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0201 	mvn.w	r2, #1
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fc fe00 	bl	8000180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa77 	bl	8003a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8f9 	bl	80037ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0220 	mvn.w	r2, #32
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa42 	bl	8003a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIM_ConfigClockSource+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e0b3      	b.n	800378c <HAL_TIM_ConfigClockSource+0x180>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365c:	d03e      	beq.n	80036dc <HAL_TIM_ConfigClockSource+0xd0>
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	f200 8087 	bhi.w	8003774 <HAL_TIM_ConfigClockSource+0x168>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366a:	f000 8085 	beq.w	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	d87f      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 8003674:	2b70      	cmp	r3, #112	; 0x70
 8003676:	d01a      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0xa2>
 8003678:	2b70      	cmp	r3, #112	; 0x70
 800367a:	d87b      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 800367c:	2b60      	cmp	r3, #96	; 0x60
 800367e:	d050      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x116>
 8003680:	2b60      	cmp	r3, #96	; 0x60
 8003682:	d877      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 8003684:	2b50      	cmp	r3, #80	; 0x50
 8003686:	d03c      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0xf6>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d873      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d058      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x136>
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d86f      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 8003694:	2b30      	cmp	r3, #48	; 0x30
 8003696:	d064      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x156>
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d86b      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 800369c:	2b20      	cmp	r3, #32
 800369e:	d060      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x156>
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d867      	bhi.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d05c      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x156>
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d05a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036ac:	e062      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f000 f966 	bl	800398e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
      break;
 80036da:	e04e      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f000 f94f 	bl	800398e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036fe:	609a      	str	r2, [r3, #8]
      break;
 8003700:	e03b      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	461a      	mov	r2, r3
 8003710:	f000 f8c6 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2150      	movs	r1, #80	; 0x50
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f91d 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003720:	e02b      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	461a      	mov	r2, r3
 8003730:	f000 f8e4 	bl	80038fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2160      	movs	r1, #96	; 0x60
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f90d 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003740:	e01b      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	461a      	mov	r2, r3
 8003750:	f000 f8a6 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2140      	movs	r1, #64	; 0x40
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f8fd 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003760:	e00b      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f000 f8f4 	bl	800395a <TIM_ITRx_SetConfig>
        break;
 8003772:	e002      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003778:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <TIM_Base_SetConfig+0xb8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a26      	ldr	r2, [pc, #152]	; (8003898 <TIM_Base_SetConfig+0xbc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a25      	ldr	r2, [pc, #148]	; (800389c <TIM_Base_SetConfig+0xc0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <TIM_Base_SetConfig+0xb8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00b      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d007      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <TIM_Base_SetConfig+0xbc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <TIM_Base_SetConfig+0xc0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d108      	bne.n	8003850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <TIM_Base_SetConfig+0xb8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d103      	bne.n	8003884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	615a      	str	r2, [r3, #20]
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0201 	bic.w	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 030a 	bic.w	r3, r3, #10
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003926:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e046      	b.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d009      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800

08003a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003aac:	b084      	sub	sp, #16
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	f107 0014 	add.w	r0, r7, #20
 8003aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	b004      	add	sp, #16
 8003aca:	4770      	bx	lr

08003acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003adc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ae0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4013      	ands	r3, r2
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b44:	b084      	sub	sp, #16
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	f107 0014 	add.w	r0, r7, #20
 8003b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	b004      	add	sp, #16
 8003b82:	4770      	bx	lr

08003b84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b09b      	sub	sp, #108	; 0x6c
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	78db      	ldrb	r3, [r3, #3]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d81f      	bhi.n	8003bf6 <USB_ActivateEndpoint+0x72>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <USB_ActivateEndpoint+0x38>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003bff 	.word	0x08003bff
 8003bc8:	08003bdb 	.word	0x08003bdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bd8:	e012      	b.n	8003c00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003be2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003be6:	e00b      	b.n	8003c00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003be8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bf4:	e004      	b.n	8003c00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003bfc:	e000      	b.n	8003c00 <USB_ActivateEndpoint+0x7c>
      break;
 8003bfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	441a      	add	r2, r3
 8003c50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	7b1b      	ldrb	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 8149 	bne.w	8003f04 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8084 	beq.w	8003d84 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	011a      	lsls	r2, r3, #4
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	88db      	ldrh	r3, [r3, #6]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	81fb      	strh	r3, [r7, #14]
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <USB_ActivateEndpoint+0x17c>
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	81bb      	strh	r3, [r7, #12]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	441a      	add	r2, r3
 8003cea:	89bb      	ldrh	r3, [r7, #12]
 8003cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d020      	beq.n	8003d4a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1e:	813b      	strh	r3, [r7, #8]
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	f083 0320 	eor.w	r3, r3, #32
 8003d26:	813b      	strh	r3, [r7, #8]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	441a      	add	r2, r3
 8003d32:	893b      	ldrh	r3, [r7, #8]
 8003d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	8013      	strh	r3, [r2, #0]
 8003d48:	e27f      	b.n	800424a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	441a      	add	r2, r3
 8003d6c:	897b      	ldrh	r3, [r7, #10]
 8003d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	8013      	strh	r3, [r2, #0]
 8003d82:	e262      	b.n	800424a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	4413      	add	r3, r2
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	011a      	lsls	r2, r3, #4
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	88db      	ldrh	r3, [r3, #6]
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	4413      	add	r3, r2
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	011a      	lsls	r2, r3, #4
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d112      	bne.n	8003e0a <USB_ActivateEndpoint+0x286>
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	e02f      	b.n	8003e6a <USB_ActivateEndpoint+0x2e6>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e10:	d813      	bhi.n	8003e3a <USB_ActivateEndpoint+0x2b6>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <USB_ActivateEndpoint+0x2a8>
 8003e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e28:	3301      	adds	r3, #1
 8003e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	e017      	b.n	8003e6a <USB_ActivateEndpoint+0x2e6>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <USB_ActivateEndpoint+0x2d0>
 8003e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e50:	3b01      	subs	r3, #1
 8003e52:	663b      	str	r3, [r7, #96]	; 0x60
 8003e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	83fb      	strh	r3, [r7, #30]
 8003e78:	8bfb      	ldrh	r3, [r7, #30]
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01b      	beq.n	8003eba <USB_ActivateEndpoint+0x336>
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e98:	83bb      	strh	r3, [r7, #28]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	8bbb      	ldrh	r3, [r7, #28]
 8003ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed0:	837b      	strh	r3, [r7, #26]
 8003ed2:	8b7b      	ldrh	r3, [r7, #26]
 8003ed4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ed8:	837b      	strh	r3, [r7, #26]
 8003eda:	8b7b      	ldrh	r3, [r7, #26]
 8003edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ee0:	837b      	strh	r3, [r7, #26]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8b7b      	ldrh	r3, [r7, #26]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]
 8003f02:	e1a2      	b.n	800424a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f34:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f50:	4413      	add	r3, r2
 8003f52:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	011a      	lsls	r2, r3, #4
 8003f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f62:	657b      	str	r3, [r7, #84]	; 0x54
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	891b      	ldrh	r3, [r3, #8]
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	653b      	str	r3, [r7, #80]	; 0x50
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f84:	4413      	add	r3, r2
 8003f86:	653b      	str	r3, [r7, #80]	; 0x50
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	011a      	lsls	r2, r3, #4
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	895b      	ldrh	r3, [r3, #10]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 8091 	bne.w	80040d4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01b      	beq.n	8004002 <USB_ActivateEndpoint+0x47e>
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	441a      	add	r2, r3
 8003fec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004010:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01b      	beq.n	8004052 <USB_ActivateEndpoint+0x4ce>
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	86bb      	strh	r3, [r7, #52]	; 0x34
 800406a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800406c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004070:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004072:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004074:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004078:	86bb      	strh	r3, [r7, #52]	; 0x34
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]
 80040d2:	e0ba      	b.n	800424a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01d      	beq.n	800412c <USB_ActivateEndpoint+0x5a8>
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800413c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01d      	beq.n	8004184 <USB_ActivateEndpoint+0x600>
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004180:	b29b      	uxth	r3, r3
 8004182:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	78db      	ldrb	r3, [r3, #3]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d024      	beq.n	80041d6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041aa:	f083 0320 	eor.w	r3, r3, #32
 80041ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
 80041d4:	e01d      	b.n	8004212 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80041fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420e:	b29b      	uxth	r3, r3
 8004210:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004228:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800424a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800424e:	4618      	mov	r0, r3
 8004250:	376c      	adds	r7, #108	; 0x6c
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004258:	b480      	push	{r7}
 800425a:	b08d      	sub	sp, #52	; 0x34
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	7b1b      	ldrb	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 808e 	bne.w	8004388 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	785b      	ldrb	r3, [r3, #1]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d044      	beq.n	80042fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	81bb      	strh	r3, [r7, #12]
 8004282:	89bb      	ldrh	r3, [r7, #12]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <USB_DeactivateEndpoint+0x6c>
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	817b      	strh	r3, [r7, #10]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042da:	813b      	strh	r3, [r7, #8]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	893b      	ldrh	r3, [r7, #8]
 80042e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	8013      	strh	r3, [r2, #0]
 80042fc:	e192      	b.n	8004624 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	827b      	strh	r3, [r7, #18]
 800430c:	8a7b      	ldrh	r3, [r7, #18]
 800430e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01b      	beq.n	800434e <USB_DeactivateEndpoint+0xf6>
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	823b      	strh	r3, [r7, #16]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	441a      	add	r2, r3
 8004338:	8a3b      	ldrh	r3, [r7, #16]
 800433a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434a:	b29b      	uxth	r3, r3
 800434c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004364:	81fb      	strh	r3, [r7, #14]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	89fb      	ldrh	r3, [r7, #14]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]
 8004386:	e14d      	b.n	8004624 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 80a5 	bne.w	80044dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	843b      	strh	r3, [r7, #32]
 80043a0:	8c3b      	ldrh	r3, [r7, #32]
 80043a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01b      	beq.n	80043e2 <USB_DeactivateEndpoint+0x18a>
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c0:	83fb      	strh	r3, [r7, #30]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	441a      	add	r2, r3
 80043cc:	8bfb      	ldrh	r3, [r7, #30]
 80043ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	83bb      	strh	r3, [r7, #28]
 80043f0:	8bbb      	ldrh	r3, [r7, #28]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01b      	beq.n	8004432 <USB_DeactivateEndpoint+0x1da>
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	837b      	strh	r3, [r7, #26]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	8b7b      	ldrh	r3, [r7, #26]
 800441e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004448:	833b      	strh	r3, [r7, #24]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	441a      	add	r2, r3
 8004454:	8b3b      	ldrh	r3, [r7, #24]
 8004456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004462:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004466:	b29b      	uxth	r3, r3
 8004468:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004480:	82fb      	strh	r3, [r7, #22]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	8afb      	ldrh	r3, [r7, #22]
 800448e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449e:	b29b      	uxth	r3, r3
 80044a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	82bb      	strh	r3, [r7, #20]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	441a      	add	r2, r3
 80044c4:	8abb      	ldrh	r3, [r7, #20]
 80044c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]
 80044da:	e0a3      	b.n	8004624 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <USB_DeactivateEndpoint+0x2d4>
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	b29b      	uxth	r3, r3
 800452a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	857b      	strh	r3, [r7, #42]	; 0x2a
 800453a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <USB_DeactivateEndpoint+0x324>
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	853b      	strh	r3, [r7, #40]	; 0x28
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004592:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	847b      	strh	r3, [r7, #34]	; 0x22
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3734      	adds	r7, #52	; 0x34
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0c4      	sub	sp, #272	; 0x110
 8004634:	af00      	add	r7, sp, #0
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	6018      	str	r0, [r3, #0]
 800463a:	463b      	mov	r3, r7
 800463c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 8557 	bne.w	80050f8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800464a:	463b      	mov	r3, r7
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d905      	bls.n	8004666 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800465a:	463b      	mov	r3, r7
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004664:	e004      	b.n	8004670 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	7b1b      	ldrb	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d12c      	bne.n	80046d4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6959      	ldr	r1, [r3, #20]
 8004680:	463b      	mov	r3, r7
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	88da      	ldrh	r2, [r3, #6]
 8004686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468a:	b29b      	uxth	r3, r3
 800468c:	1d38      	adds	r0, r7, #4
 800468e:	6800      	ldr	r0, [r0, #0]
 8004690:	f001 fa2c 	bl	8005aec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	463b      	mov	r3, r7
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	011a      	lsls	r2, r3, #4
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	4413      	add	r3, r2
 80046b8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	f000 bcdd 	b.w	800508e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80046d4:	463b      	mov	r3, r7
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	78db      	ldrb	r3, [r3, #3]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 8347 	bne.w	8004d6e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80046e0:	463b      	mov	r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a1a      	ldr	r2, [r3, #32]
 80046e6:	463b      	mov	r3, r7
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f240 82eb 	bls.w	8004cc8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	463b      	mov	r3, r7
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	463b      	mov	r3, r7
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004740:	1ad2      	subs	r2, r2, r3
 8004742:	463b      	mov	r3, r7
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	463b      	mov	r3, r7
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8159 	beq.w	8004a16 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d164      	bne.n	800483e <USB_EPStartXfer+0x20e>
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	4413      	add	r3, r2
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478c:	463b      	mov	r3, r7
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	011a      	lsls	r2, r3, #4
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	4413      	add	r3, r2
 8004798:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d112      	bne.n	80047cc <USB_EPStartXfer+0x19c>
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	e054      	b.n	8004876 <USB_EPStartXfer+0x246>
 80047cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d0:	2b3e      	cmp	r3, #62	; 0x3e
 80047d2:	d817      	bhi.n	8004804 <USB_EPStartXfer+0x1d4>
 80047d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d004      	beq.n	80047f4 <USB_EPStartXfer+0x1c4>
 80047ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ee:	3301      	adds	r3, #1
 80047f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	e038      	b.n	8004876 <USB_EPStartXfer+0x246>
 8004804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800480e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <USB_EPStartXfer+0x1f4>
 800481a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481e:	3b01      	subs	r3, #1
 8004820:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004828:	b29b      	uxth	r3, r3
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004836:	b29a      	uxth	r2, r3
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e01b      	b.n	8004876 <USB_EPStartXfer+0x246>
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d116      	bne.n	8004876 <USB_EPStartXfer+0x246>
 8004848:	1d3b      	adds	r3, r7, #4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004850:	b29b      	uxth	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	4413      	add	r3, r2
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
 800485a:	463b      	mov	r3, r7
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	011a      	lsls	r2, r3, #4
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	4413      	add	r3, r2
 8004866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004870:	b29a      	uxth	r2, r3
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004876:	463b      	mov	r3, r7
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	895b      	ldrh	r3, [r3, #10]
 800487c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004880:	463b      	mov	r3, r7
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6959      	ldr	r1, [r3, #20]
 8004886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488a:	b29b      	uxth	r3, r3
 800488c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004890:	1d38      	adds	r0, r7, #4
 8004892:	6800      	ldr	r0, [r0, #0]
 8004894:	f001 f92a 	bl	8005aec <USB_WritePMA>
            ep->xfer_buff += len;
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a2:	441a      	add	r2, r3
 80048a4:	463b      	mov	r3, r7
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d909      	bls.n	80048ce <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c4:	1ad2      	subs	r2, r2, r3
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	621a      	str	r2, [r3, #32]
 80048cc:	e008      	b.n	80048e0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80048ce:	463b      	mov	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80048d8:	463b      	mov	r3, r7
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048e0:	463b      	mov	r3, r7
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d164      	bne.n	80049b4 <USB_EPStartXfer+0x384>
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	1d3b      	adds	r3, r7, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	463b      	mov	r3, r7
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	011a      	lsls	r2, r3, #4
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d112      	bne.n	8004942 <USB_EPStartXfer+0x312>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004926:	b29a      	uxth	r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493a:	b29a      	uxth	r2, r3
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	801a      	strh	r2, [r3, #0]
 8004940:	e057      	b.n	80049f2 <USB_EPStartXfer+0x3c2>
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	2b3e      	cmp	r3, #62	; 0x3e
 8004948:	d817      	bhi.n	800497a <USB_EPStartXfer+0x34a>
 800494a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <USB_EPStartXfer+0x33a>
 8004960:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004964:	3301      	adds	r3, #1
 8004966:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800496a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800496e:	b29b      	uxth	r3, r3
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	b29a      	uxth	r2, r3
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	e03b      	b.n	80049f2 <USB_EPStartXfer+0x3c2>
 800497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <USB_EPStartXfer+0x36a>
 8004990:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004994:	3b01      	subs	r3, #1
 8004996:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800499a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e01e      	b.n	80049f2 <USB_EPStartXfer+0x3c2>
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d119      	bne.n	80049f2 <USB_EPStartXfer+0x3c2>
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	4413      	add	r3, r2
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	463b      	mov	r3, r7
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049f2:	463b      	mov	r3, r7
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	891b      	ldrh	r3, [r3, #8]
 80049f8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049fc:	463b      	mov	r3, r7
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6959      	ldr	r1, [r3, #20]
 8004a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a0c:	1d38      	adds	r0, r7, #4
 8004a0e:	6800      	ldr	r0, [r0, #0]
 8004a10:	f001 f86c 	bl	8005aec <USB_WritePMA>
 8004a14:	e33b      	b.n	800508e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a16:	463b      	mov	r3, r7
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d164      	bne.n	8004aea <USB_EPStartXfer+0x4ba>
 8004a20:	1d3b      	adds	r3, r7, #4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a34:	4413      	add	r3, r2
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a38:	463b      	mov	r3, r7
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	011a      	lsls	r2, r3, #4
 8004a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a42:	4413      	add	r3, r2
 8004a44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d112      	bne.n	8004a78 <USB_EPStartXfer+0x448>
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	e057      	b.n	8004b28 <USB_EPStartXfer+0x4f8>
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7e:	d817      	bhi.n	8004ab0 <USB_EPStartXfer+0x480>
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <USB_EPStartXfer+0x470>
 8004a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	029b      	lsls	r3, r3, #10
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	e03b      	b.n	8004b28 <USB_EPStartXfer+0x4f8>
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <USB_EPStartXfer+0x4a0>
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	e01e      	b.n	8004b28 <USB_EPStartXfer+0x4f8>
 8004aea:	463b      	mov	r3, r7
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d119      	bne.n	8004b28 <USB_EPStartXfer+0x4f8>
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	657b      	str	r3, [r7, #84]	; 0x54
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b08:	4413      	add	r3, r2
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	011a      	lsls	r2, r3, #4
 8004b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b16:	4413      	add	r3, r2
 8004b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b28:	463b      	mov	r3, r7
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	891b      	ldrh	r3, [r3, #8]
 8004b2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6959      	ldr	r1, [r3, #20]
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b42:	1d38      	adds	r0, r7, #4
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	f000 ffd1 	bl	8005aec <USB_WritePMA>
            ep->xfer_buff += len;
 8004b4a:	463b      	mov	r3, r7
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b54:	441a      	add	r2, r3
 8004b56:	463b      	mov	r3, r7
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	463b      	mov	r3, r7
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d909      	bls.n	8004b80 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	621a      	str	r2, [r3, #32]
 8004b7e:	e008      	b.n	8004b92 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b80:	463b      	mov	r3, r7
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b92:	1d3b      	adds	r3, r7, #4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	647b      	str	r3, [r7, #68]	; 0x44
 8004b98:	463b      	mov	r3, r7
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d164      	bne.n	8004c6c <USB_EPStartXfer+0x63c>
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb6:	4413      	add	r3, r2
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bba:	463b      	mov	r3, r7
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d112      	bne.n	8004bfa <USB_EPStartXfer+0x5ca>
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e054      	b.n	8004ca4 <USB_EPStartXfer+0x674>
 8004bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8004c00:	d817      	bhi.n	8004c32 <USB_EPStartXfer+0x602>
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d004      	beq.n	8004c22 <USB_EPStartXfer+0x5f2>
 8004c18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e038      	b.n	8004ca4 <USB_EPStartXfer+0x674>
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <USB_EPStartXfer+0x622>
 8004c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	029b      	lsls	r3, r3, #10
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	e01b      	b.n	8004ca4 <USB_EPStartXfer+0x674>
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d116      	bne.n	8004ca4 <USB_EPStartXfer+0x674>
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c84:	4413      	add	r3, r2
 8004c86:	647b      	str	r3, [r7, #68]	; 0x44
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	011a      	lsls	r2, r3, #4
 8004c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c92:	4413      	add	r3, r2
 8004c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c98:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	895b      	ldrh	r3, [r3, #10]
 8004caa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6959      	ldr	r1, [r3, #20]
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004cbe:	1d38      	adds	r0, r7, #4
 8004cc0:	6800      	ldr	r0, [r0, #0]
 8004cc2:	f000 ff13 	bl	8005aec <USB_WritePMA>
 8004cc6:	e1e2      	b.n	800508e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004cc8:	463b      	mov	r3, r7
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2a:	4413      	add	r3, r2
 8004d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	011a      	lsls	r2, r3, #4
 8004d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	891b      	ldrh	r3, [r3, #8]
 8004d50:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6959      	ldr	r1, [r3, #20]
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d64:	1d38      	adds	r0, r7, #4
 8004d66:	6800      	ldr	r0, [r0, #0]
 8004d68:	f000 fec0 	bl	8005aec <USB_WritePMA>
 8004d6c:	e18f      	b.n	800508e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	463b      	mov	r3, r7
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 808f 	beq.w	8004ea8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d90:	463b      	mov	r3, r7
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d164      	bne.n	8004e64 <USB_EPStartXfer+0x834>
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dae:	4413      	add	r3, r2
 8004db0:	673b      	str	r3, [r7, #112]	; 0x70
 8004db2:	463b      	mov	r3, r7
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d112      	bne.n	8004df2 <USB_EPStartXfer+0x7c2>
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e054      	b.n	8004e9c <USB_EPStartXfer+0x86c>
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df6:	2b3e      	cmp	r3, #62	; 0x3e
 8004df8:	d817      	bhi.n	8004e2a <USB_EPStartXfer+0x7fa>
 8004dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <USB_EPStartXfer+0x7ea>
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	3301      	adds	r3, #1
 8004e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	029b      	lsls	r3, r3, #10
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e038      	b.n	8004e9c <USB_EPStartXfer+0x86c>
 8004e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <USB_EPStartXfer+0x81a>
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	3b01      	subs	r3, #1
 8004e46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	029b      	lsls	r3, r3, #10
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	e01b      	b.n	8004e9c <USB_EPStartXfer+0x86c>
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d116      	bne.n	8004e9c <USB_EPStartXfer+0x86c>
 8004e6e:	1d3b      	adds	r3, r7, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7c:	4413      	add	r3, r2
 8004e7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e80:	463b      	mov	r3, r7
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	011a      	lsls	r2, r3, #4
 8004e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e90:	677b      	str	r3, [r7, #116]	; 0x74
 8004e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	895b      	ldrh	r3, [r3, #10]
 8004ea2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004ea6:	e097      	b.n	8004fd8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d168      	bne.n	8004f84 <USB_EPStartXfer+0x954>
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eca:	4413      	add	r3, r2
 8004ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	011a      	lsls	r2, r3, #4
 8004ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004edc:	4413      	add	r3, r2
 8004ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d112      	bne.n	8004f12 <USB_EPStartXfer+0x8e2>
 8004eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e05d      	b.n	8004fce <USB_EPStartXfer+0x99e>
 8004f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f16:	2b3e      	cmp	r3, #62	; 0x3e
 8004f18:	d817      	bhi.n	8004f4a <USB_EPStartXfer+0x91a>
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <USB_EPStartXfer+0x90a>
 8004f30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f34:	3301      	adds	r3, #1
 8004f36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	e041      	b.n	8004fce <USB_EPStartXfer+0x99e>
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <USB_EPStartXfer+0x93a>
 8004f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f64:	3b01      	subs	r3, #1
 8004f66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	029b      	lsls	r3, r3, #10
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e024      	b.n	8004fce <USB_EPStartXfer+0x99e>
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d11f      	bne.n	8004fce <USB_EPStartXfer+0x99e>
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fac:	463b      	mov	r3, r7
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	011a      	lsls	r2, r3, #4
 8004fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004fce:	463b      	mov	r3, r7
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	891b      	ldrh	r3, [r3, #8]
 8004fd4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fd8:	463b      	mov	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6959      	ldr	r1, [r3, #20]
 8004fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004fe8:	1d38      	adds	r0, r7, #4
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	f000 fd7e 	bl	8005aec <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d122      	bne.n	8005040 <USB_EPStartXfer+0xa10>
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	463b      	mov	r3, r7
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005014:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	463b      	mov	r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
 800503e:	e026      	b.n	800508e <USB_EPStartXfer+0xa5e>
 8005040:	463b      	mov	r3, r7
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d121      	bne.n	800508e <USB_EPStartXfer+0xa5e>
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800507a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508a:	b29b      	uxth	r3, r3
 800508c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	463b      	mov	r3, r7
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f107 020e 	add.w	r2, r7, #14
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ac:	8013      	strh	r3, [r2, #0]
 80050ae:	f107 030e 	add.w	r3, r7, #14
 80050b2:	f107 020e 	add.w	r2, r7, #14
 80050b6:	8812      	ldrh	r2, [r2, #0]
 80050b8:	f082 0210 	eor.w	r2, r2, #16
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	f107 030e 	add.w	r3, r7, #14
 80050c2:	f107 020e 	add.w	r2, r7, #14
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	f082 0220 	eor.w	r2, r2, #32
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	463b      	mov	r3, r7
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	f107 030e 	add.w	r3, r7, #14
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]
 80050f6:	e3b5      	b.n	8005864 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80050f8:	463b      	mov	r3, r7
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	7b1b      	ldrb	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 8090 	bne.w	8005224 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	463b      	mov	r3, r7
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d90e      	bls.n	8005132 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005114:	463b      	mov	r3, r7
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800511e:	463b      	mov	r3, r7
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005128:	1ad2      	subs	r2, r2, r3
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	619a      	str	r2, [r3, #24]
 8005130:	e008      	b.n	8005144 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005154:	b29b      	uxth	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800515c:	4413      	add	r3, r2
 800515e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	011a      	lsls	r2, r3, #4
 800516a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800516e:	4413      	add	r3, r2
 8005170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d116      	bne.n	80051ae <USB_EPStartXfer+0xb7e>
 8005180:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800518c:	b29a      	uxth	r2, r3
 800518e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e32c      	b.n	8005808 <USB_EPStartXfer+0x11d8>
 80051ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b2:	2b3e      	cmp	r3, #62	; 0x3e
 80051b4:	d818      	bhi.n	80051e8 <USB_EPStartXfer+0xbb8>
 80051b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <USB_EPStartXfer+0xba6>
 80051cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051d0:	3301      	adds	r3, #1
 80051d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051da:	b29b      	uxth	r3, r3
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e30f      	b.n	8005808 <USB_EPStartXfer+0x11d8>
 80051e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <USB_EPStartXfer+0xbd8>
 80051fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005202:	3b01      	subs	r3, #1
 8005204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005208:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800520c:	b29b      	uxth	r3, r3
 800520e:	029b      	lsls	r3, r3, #10
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521a:	b29a      	uxth	r2, r3
 800521c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e2f1      	b.n	8005808 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	78db      	ldrb	r3, [r3, #3]
 800522a:	2b02      	cmp	r3, #2
 800522c:	f040 818f 	bne.w	800554e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d175      	bne.n	8005326 <USB_EPStartXfer+0xcf6>
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005252:	4413      	add	r3, r2
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	011a      	lsls	r2, r3, #4
 8005260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005264:	4413      	add	r3, r2
 8005266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800526a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d116      	bne.n	80052a6 <USB_EPStartXfer+0xc76>
 8005278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005284:	b29a      	uxth	r2, r3
 8005286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529c:	b29a      	uxth	r2, r3
 800529e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e065      	b.n	8005372 <USB_EPStartXfer+0xd42>
 80052a6:	463b      	mov	r3, r7
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b3e      	cmp	r3, #62	; 0x3e
 80052ae:	d81a      	bhi.n	80052e6 <USB_EPStartXfer+0xcb6>
 80052b0:	463b      	mov	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <USB_EPStartXfer+0xca4>
 80052ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052ce:	3301      	adds	r3, #1
 80052d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052d8:	b29b      	uxth	r3, r3
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	b29a      	uxth	r2, r3
 80052de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	e045      	b.n	8005372 <USB_EPStartXfer+0xd42>
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <USB_EPStartXfer+0xcda>
 8005300:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005304:	3b01      	subs	r3, #1
 8005306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800530a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800530e:	b29b      	uxth	r3, r3
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	b29b      	uxth	r3, r3
 8005314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800531c:	b29a      	uxth	r2, r3
 800531e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e025      	b.n	8005372 <USB_EPStartXfer+0xd42>
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d120      	bne.n	8005372 <USB_EPStartXfer+0xd42>
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005340:	b29b      	uxth	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005348:	4413      	add	r3, r2
 800534a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800534e:	463b      	mov	r3, r7
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	011a      	lsls	r2, r3, #4
 8005356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800535a:	4413      	add	r3, r2
 800535c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	b29a      	uxth	r2, r3
 800536c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800537a:	463b      	mov	r3, r7
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d175      	bne.n	8005470 <USB_EPStartXfer+0xe40>
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800539c:	4413      	add	r3, r2
 800539e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053a2:	463b      	mov	r3, r7
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	011a      	lsls	r2, r3, #4
 80053aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d116      	bne.n	80053f0 <USB_EPStartXfer+0xdc0>
 80053c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e061      	b.n	80054b4 <USB_EPStartXfer+0xe84>
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b3e      	cmp	r3, #62	; 0x3e
 80053f8:	d81a      	bhi.n	8005430 <USB_EPStartXfer+0xe00>
 80053fa:	463b      	mov	r3, r7
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005406:	463b      	mov	r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <USB_EPStartXfer+0xdee>
 8005414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005418:	3301      	adds	r3, #1
 800541a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e041      	b.n	80054b4 <USB_EPStartXfer+0xe84>
 8005430:	463b      	mov	r3, r7
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <USB_EPStartXfer+0xe24>
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	3b01      	subs	r3, #1
 8005450:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005458:	b29b      	uxth	r3, r3
 800545a:	029b      	lsls	r3, r3, #10
 800545c:	b29b      	uxth	r3, r3
 800545e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005466:	b29a      	uxth	r2, r3
 8005468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	e021      	b.n	80054b4 <USB_EPStartXfer+0xe84>
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d11c      	bne.n	80054b4 <USB_EPStartXfer+0xe84>
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800548a:	4413      	add	r3, r2
 800548c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	011a      	lsls	r2, r3, #4
 8005498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800549c:	4413      	add	r3, r2
 800549e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054a6:	463b      	mov	r3, r7
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80054b4:	463b      	mov	r3, r7
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 81a4 	beq.w	8005808 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80054d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <USB_EPStartXfer+0xebc>
 80054e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10d      	bne.n	8005508 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80054ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80054f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f040 8187 	bne.w	8005808 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80054fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 8180 	bne.w	8005808 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005526:	1d3b      	adds	r3, r7, #4
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	463b      	mov	r3, r7
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]
 800554c:	e15c      	b.n	8005808 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800554e:	463b      	mov	r3, r7
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	78db      	ldrb	r3, [r3, #3]
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 8155 	bne.w	8005804 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	463b      	mov	r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	429a      	cmp	r2, r3
 8005568:	d90e      	bls.n	8005588 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005574:	463b      	mov	r3, r7
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	463b      	mov	r3, r7
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	619a      	str	r2, [r3, #24]
 8005586:	e008      	b.n	800559a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005592:	463b      	mov	r3, r7
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d16f      	bne.n	8005684 <USB_EPStartXfer+0x1054>
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055bc:	4413      	add	r3, r2
 80055be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	011a      	lsls	r2, r3, #4
 80055ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d116      	bne.n	800560e <USB_EPStartXfer+0xfde>
 80055e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005604:	b29a      	uxth	r2, r3
 8005606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	e05f      	b.n	80056ce <USB_EPStartXfer+0x109e>
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005612:	2b3e      	cmp	r3, #62	; 0x3e
 8005614:	d818      	bhi.n	8005648 <USB_EPStartXfer+0x1018>
 8005616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <USB_EPStartXfer+0x1006>
 800562c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005630:	3301      	adds	r3, #1
 8005632:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563a:	b29b      	uxth	r3, r3
 800563c:	029b      	lsls	r3, r3, #10
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e042      	b.n	80056ce <USB_EPStartXfer+0x109e>
 8005648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <USB_EPStartXfer+0x1038>
 800565e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005662:	3b01      	subs	r3, #1
 8005664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566c:	b29b      	uxth	r3, r3
 800566e:	029b      	lsls	r3, r3, #10
 8005670:	b29b      	uxth	r3, r3
 8005672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567a:	b29a      	uxth	r2, r3
 800567c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e024      	b.n	80056ce <USB_EPStartXfer+0x109e>
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d11f      	bne.n	80056ce <USB_EPStartXfer+0x109e>
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569e:	b29b      	uxth	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a6:	4413      	add	r3, r2
 80056a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	011a      	lsls	r2, r3, #4
 80056b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d16f      	bne.n	80057c0 <USB_EPStartXfer+0x1190>
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056f8:	4413      	add	r3, r2
 80056fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	011a      	lsls	r2, r3, #4
 8005706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800570a:	4413      	add	r3, r2
 800570c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <USB_EPStartXfer+0x111a>
 800571c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005728:	b29a      	uxth	r2, r3
 800572a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005740:	b29a      	uxth	r2, r3
 8005742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	e05e      	b.n	8005808 <USB_EPStartXfer+0x11d8>
 800574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574e:	2b3e      	cmp	r3, #62	; 0x3e
 8005750:	d818      	bhi.n	8005784 <USB_EPStartXfer+0x1154>
 8005752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800575c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <USB_EPStartXfer+0x1142>
 8005768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800576c:	3301      	adds	r3, #1
 800576e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	b29b      	uxth	r3, r3
 8005778:	029b      	lsls	r3, r3, #10
 800577a:	b29a      	uxth	r2, r3
 800577c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e041      	b.n	8005808 <USB_EPStartXfer+0x11d8>
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800578e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <USB_EPStartXfer+0x1174>
 800579a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800579e:	3b01      	subs	r3, #1
 80057a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	029b      	lsls	r3, r3, #10
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e023      	b.n	8005808 <USB_EPStartXfer+0x11d8>
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d11e      	bne.n	8005808 <USB_EPStartXfer+0x11d8>
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057da:	4413      	add	r3, r2
 80057dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	011a      	lsls	r2, r3, #4
 80057e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ec:	4413      	add	r3, r2
 80057ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e001      	b.n	8005808 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e02e      	b.n	8005866 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005826:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800582a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800582e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005832:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005836:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800583a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	463b      	mov	r3, r7
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	81bb      	strh	r3, [r7, #12]
 800589a:	89bb      	ldrh	r3, [r7, #12]
 800589c:	f083 0310 	eor.w	r3, r3, #16
 80058a0:	81bb      	strh	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	89bb      	ldrh	r3, [r7, #12]
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	e01f      	b.n	8005904 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	81fb      	strh	r3, [r7, #14]
 80058dc:	89fb      	ldrh	r3, [r7, #14]
 80058de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058e2:	81fb      	strh	r3, [r7, #14]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	7b1b      	ldrb	r3, [r3, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f040 809d 	bne.w	8005a5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d04c      	beq.n	80059c6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	823b      	strh	r3, [r7, #16]
 800593a:	8a3b      	ldrh	r3, [r7, #16]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01b      	beq.n	800597c <USB_EPClearStall+0x6c>
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	81fb      	strh	r3, [r7, #14]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d06c      	beq.n	8005a5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599a:	81bb      	strh	r3, [r7, #12]
 800599c:	89bb      	ldrh	r3, [r7, #12]
 800599e:	f083 0320 	eor.w	r3, r3, #32
 80059a2:	81bb      	strh	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	89bb      	ldrh	r3, [r7, #12]
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]
 80059c4:	e04b      	b.n	8005a5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	82fb      	strh	r3, [r7, #22]
 80059d4:	8afb      	ldrh	r3, [r7, #22]
 80059d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01b      	beq.n	8005a16 <USB_EPClearStall+0x106>
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f4:	82bb      	strh	r3, [r7, #20]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	441a      	add	r2, r3
 8005a00:	8abb      	ldrh	r3, [r7, #20]
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	827b      	strh	r3, [r7, #18]
 8005a2e:	8a7b      	ldrh	r3, [r7, #18]
 8005a30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a34:	827b      	strh	r3, [r7, #18]
 8005a36:	8a7b      	ldrh	r3, [r7, #18]
 8005a38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a3c:	827b      	strh	r3, [r7, #18]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	8a7b      	ldrh	r3, [r7, #18]
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2280      	movs	r2, #128	; 0x80
 8005a80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b08d      	sub	sp, #52	; 0x34
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4611      	mov	r1, r2
 8005af8:	461a      	mov	r2, r3
 8005afa:	460b      	mov	r3, r1
 8005afc:	80fb      	strh	r3, [r7, #6]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	3301      	adds	r3, #1
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	005a      	lsls	r2, r3, #1
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b24:	e01e      	b.n	8005b64 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	3301      	adds	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	3302      	adds	r3, #2
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	3302      	adds	r3, #2
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	3b01      	subs	r3, #1
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1dd      	bne.n	8005b26 <USB_WritePMA+0x3a>
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	3734      	adds	r7, #52	; 0x34
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b08b      	sub	sp, #44	; 0x2c
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	4611      	mov	r1, r2
 8005b82:	461a      	mov	r2, r3
 8005b84:	460b      	mov	r3, r1
 8005b86:	80fb      	strh	r3, [r7, #6]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005b8c:	88bb      	ldrh	r3, [r7, #4]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	005a      	lsls	r2, r3, #1
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	e01b      	b.n	8005be8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	3302      	adds	r3, #2
 8005bbc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	3302      	adds	r3, #2
 8005be0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	3b01      	subs	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e0      	bne.n	8005bb0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005bee:	88bb      	ldrh	r3, [r7, #4]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	701a      	strb	r2, [r3, #0]
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	372c      	adds	r7, #44	; 0x2c
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7c1b      	ldrb	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d115      	bne.n	8005c58 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c30:	2202      	movs	r2, #2
 8005c32:	2181      	movs	r1, #129	; 0x81
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fe30 	bl	800789a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c44:	2202      	movs	r2, #2
 8005c46:	2101      	movs	r1, #1
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 fe26 	bl	800789a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005c56:	e012      	b.n	8005c7e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c58:	2340      	movs	r3, #64	; 0x40
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	2181      	movs	r1, #129	; 0x81
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fe1b 	bl	800789a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	2101      	movs	r1, #1
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fe12 	bl	800789a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c7e:	2308      	movs	r3, #8
 8005c80:	2203      	movs	r2, #3
 8005c82:	2182      	movs	r1, #130	; 0x82
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fe08 	bl	800789a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c94:	f001 ff28 	bl	8007ae8 <USBD_static_malloc>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
 8005cae:	e026      	b.n	8005cfe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	7c1b      	ldrb	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fec8 	bl	8007a7c <USBD_LL_PrepareReceive>
 8005cec:	e007      	b.n	8005cfe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 febf 	bl	8007a7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d18:	2181      	movs	r1, #129	; 0x81
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 fde3 	bl	80078e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d26:	2101      	movs	r1, #1
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fddc 	bl	80078e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d36:	2182      	movs	r1, #130	; 0x82
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 fdd4 	bl	80078e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00e      	beq.n	8005d6c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 fece 	bl	8007b00 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d039      	beq.n	8005e14 <USBD_CDC_Setup+0x9e>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d17f      	bne.n	8005ea4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	88db      	ldrh	r3, [r3, #6]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d029      	beq.n	8005e00 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da11      	bge.n	8005dda <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005dc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	88d2      	ldrh	r2, [r2, #6]
 8005dc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005dca:	6939      	ldr	r1, [r7, #16]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	88db      	ldrh	r3, [r3, #6]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 f9d9 	bl	800718a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005dd8:	e06b      	b.n	8005eb2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	785a      	ldrb	r2, [r3, #1]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	88db      	ldrh	r3, [r3, #6]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005df0:	6939      	ldr	r1, [r7, #16]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	88db      	ldrh	r3, [r3, #6]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 f9f4 	bl	80071e6 <USBD_CtlPrepareRx>
      break;
 8005dfe:	e058      	b.n	8005eb2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	7850      	ldrb	r0, [r2, #1]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	4798      	blx	r3
      break;
 8005e12:	e04e      	b.n	8005eb2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b0b      	cmp	r3, #11
 8005e1a:	d02e      	beq.n	8005e7a <USBD_CDC_Setup+0x104>
 8005e1c:	2b0b      	cmp	r3, #11
 8005e1e:	dc38      	bgt.n	8005e92 <USBD_CDC_Setup+0x11c>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <USBD_CDC_Setup+0xb4>
 8005e24:	2b0a      	cmp	r3, #10
 8005e26:	d014      	beq.n	8005e52 <USBD_CDC_Setup+0xdc>
 8005e28:	e033      	b.n	8005e92 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d107      	bne.n	8005e44 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005e34:	f107 030c 	add.w	r3, r7, #12
 8005e38:	2202      	movs	r2, #2
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f9a4 	bl	800718a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e42:	e02e      	b.n	8005ea2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 f935 	bl	80070b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e50:	e027      	b.n	8005ea2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d107      	bne.n	8005e6c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e5c:	f107 030f 	add.w	r3, r7, #15
 8005e60:	2201      	movs	r2, #1
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 f990 	bl	800718a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e6a:	e01a      	b.n	8005ea2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 f921 	bl	80070b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	75fb      	strb	r3, [r7, #23]
          break;
 8005e78:	e013      	b.n	8005ea2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d00d      	beq.n	8005ea0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 f915 	bl	80070b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e90:	e006      	b.n	8005ea0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 f90e 	bl	80070b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e9e:	e000      	b.n	8005ea2 <USBD_CDC_Setup+0x12c>
          break;
 8005ea0:	bf00      	nop
      }
      break;
 8005ea2:	e006      	b.n	8005eb2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 f905 	bl	80070b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005eac:	2302      	movs	r3, #2
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	bf00      	nop
  }

  return ret;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ed6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d03a      	beq.n	8005f58 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	331c      	adds	r3, #28
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d029      	beq.n	8005f4c <USBD_CDC_DataIn+0x90>
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	440b      	add	r3, r1
 8005f06:	331c      	adds	r3, #28
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	78f9      	ldrb	r1, [r7, #3]
 8005f0c:	68b8      	ldr	r0, [r7, #8]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4403      	add	r3, r0
 8005f18:	3338      	adds	r3, #56	; 0x38
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f20:	fb03 f301 	mul.w	r3, r3, r1
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d110      	bne.n	8005f4c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	331c      	adds	r3, #28
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f3e:	78f9      	ldrb	r1, [r7, #3]
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fd76 	bl	8007a36 <USBD_LL_Transmit>
 8005f4a:	e003      	b.n	8005f54 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fda1 	bl	8007ac2 <USBD_LL_GetRxDataSize>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4798      	blx	r3

    return USBD_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d015      	beq.n	8005ffe <USBD_CDC_EP0_RxReady+0x46>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005fd8:	2bff      	cmp	r3, #255	; 0xff
 8005fda:	d010      	beq.n	8005ffe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005fea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ff2:	b292      	uxth	r2, r2
 8005ff4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	22ff      	movs	r2, #255	; 0xff
 8005ffa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2243      	movs	r2, #67	; 0x43
 8006014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000094 	.word	0x20000094

08006028 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2243      	movs	r2, #67	; 0x43
 8006034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006036:	4b03      	ldr	r3, [pc, #12]	; (8006044 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000050 	.word	0x20000050

08006048 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2243      	movs	r2, #67	; 0x43
 8006054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006056:	4b03      	ldr	r3, [pc, #12]	; (8006064 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	200000d8 	.word	0x200000d8

08006068 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	220a      	movs	r2, #10
 8006074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	2000000c 	.word	0x2000000c

08006088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006092:	2302      	movs	r3, #2
 8006094:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d017      	beq.n	8006156 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7c1b      	ldrb	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006138:	2101      	movs	r1, #1
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fc9e 	bl	8007a7c <USBD_LL_PrepareReceive>
 8006140:	e007      	b.n	8006152 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	2101      	movs	r1, #1
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fc95 	bl	8007a7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006174:	2302      	movs	r3, #2
 8006176:	e01a      	b.n	80061ae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	79fa      	ldrb	r2, [r7, #7]
 80061a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 fb02 	bl	80077b0 <USBD_LL_Init>

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d006      	beq.n	80061d8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
 80061d6:	e001      	b.n	80061dc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80061d8:	2302      	movs	r3, #2
 80061da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fb37 	bl	8007864 <USBD_LL_Start>

  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006220:	2302      	movs	r3, #2
 8006222:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	4611      	mov	r1, r2
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	4611      	mov	r1, r2
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fed7 	bl	800703e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d016      	beq.n	80062e2 <USBD_LL_SetupStage+0x6a>
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d81c      	bhi.n	80062f2 <USBD_LL_SetupStage+0x7a>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <USBD_LL_SetupStage+0x4a>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d008      	beq.n	80062d2 <USBD_LL_SetupStage+0x5a>
 80062c0:	e017      	b.n	80062f2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9ca 	bl	8006664 <USBD_StdDevReq>
      break;
 80062d0:	e01a      	b.n	8006308 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa2c 	bl	8006738 <USBD_StdItfReq>
      break;
 80062e0:	e012      	b.n	8006308 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa6c 	bl	80067c8 <USBD_StdEPReq>
      break;
 80062f0:	e00a      	b.n	8006308 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fb0f 	bl	8007924 <USBD_LL_StallEP>
      break;
 8006306:	bf00      	nop
  }

  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	460b      	mov	r3, r1
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006320:	7afb      	ldrb	r3, [r7, #11]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d14b      	bne.n	80063be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800632c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006334:	2b03      	cmp	r3, #3
 8006336:	d134      	bne.n	80063a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	429a      	cmp	r2, r3
 8006342:	d919      	bls.n	8006378 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800635a:	429a      	cmp	r2, r3
 800635c:	d203      	bcs.n	8006366 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006362:	b29b      	uxth	r3, r3
 8006364:	e002      	b.n	800636c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 ff56 	bl	8007222 <USBD_CtlContinueRx>
 8006376:	e038      	b.n	80063ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800638a:	2b03      	cmp	r3, #3
 800638c:	d105      	bne.n	800639a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 ff53 	bl	8007246 <USBD_CtlSendStatus>
 80063a0:	e023      	b.n	80063ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063a8:	2b05      	cmp	r3, #5
 80063aa:	d11e      	bne.n	80063ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80063b4:	2100      	movs	r1, #0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f001 fab4 	bl	8007924 <USBD_LL_StallEP>
 80063bc:	e015      	b.n	80063ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00d      	beq.n	80063e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d108      	bne.n	80063e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	7afa      	ldrb	r2, [r7, #11]
 80063de:	4611      	mov	r1, r2
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	4798      	blx	r3
 80063e4:	e001      	b.n	80063ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063e6:	2302      	movs	r3, #2
 80063e8:	e000      	b.n	80063ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	460b      	mov	r3, r1
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d17f      	bne.n	8006508 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3314      	adds	r3, #20
 800640c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006414:	2b02      	cmp	r3, #2
 8006416:	d15c      	bne.n	80064d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	429a      	cmp	r2, r3
 8006422:	d915      	bls.n	8006450 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fec0 	bl	80071c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006442:	2300      	movs	r3, #0
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f001 fb17 	bl	8007a7c <USBD_LL_PrepareReceive>
 800644e:	e04e      	b.n	80064ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	6912      	ldr	r2, [r2, #16]
 8006458:	fbb3 f1f2 	udiv	r1, r3, r2
 800645c:	fb02 f201 	mul.w	r2, r2, r1
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d11c      	bne.n	80064a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800646e:	429a      	cmp	r2, r3
 8006470:	d316      	bcc.n	80064a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800647c:	429a      	cmp	r2, r3
 800647e:	d20f      	bcs.n	80064a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fe9c 	bl	80071c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006492:	2300      	movs	r3, #0
 8006494:	2200      	movs	r2, #0
 8006496:	2100      	movs	r1, #0
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f001 faef 	bl	8007a7c <USBD_LL_PrepareReceive>
 800649e:	e026      	b.n	80064ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d105      	bne.n	80064c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 fa2d 	bl	8007924 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fece 	bl	800726c <USBD_CtlReceiveStatus>
 80064d0:	e00d      	b.n	80064ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d004      	beq.n	80064e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f001 fa1b 	bl	8007924 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d11d      	bne.n	8006534 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fe81 	bl	8006200 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006506:	e015      	b.n	8006534 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800651a:	2b03      	cmp	r3, #3
 800651c:	d108      	bne.n	8006530 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	7afa      	ldrb	r2, [r7, #11]
 8006528:	4611      	mov	r1, r2
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	4798      	blx	r3
 800652e:	e001      	b.n	8006534 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006530:	2302      	movs	r3, #2
 8006532:	e000      	b.n	8006536 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 f9a4 	bl	800789a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	2200      	movs	r2, #0
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 f996 	bl	800789a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2240      	movs	r2, #64	; 0x40
 8006578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6852      	ldr	r2, [r2, #4]
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	4611      	mov	r1, r2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
  }

  return USBD_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr

080065de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2204      	movs	r2, #4
 80065f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr

08006606 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006614:	2b04      	cmp	r3, #4
 8006616:	d105      	bne.n	8006624 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663e:	2b03      	cmp	r3, #3
 8006640:	d10b      	bne.n	800665a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d005      	beq.n	800668a <USBD_StdDevReq+0x26>
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d84f      	bhi.n	8006722 <USBD_StdDevReq+0xbe>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <USBD_StdDevReq+0x36>
 8006686:	2b20      	cmp	r3, #32
 8006688:	d14b      	bne.n	8006722 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
      break;
 8006698:	e048      	b.n	800672c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b09      	cmp	r3, #9
 80066a0:	d839      	bhi.n	8006716 <USBD_StdDevReq+0xb2>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USBD_StdDevReq+0x44>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066f9 	.word	0x080066f9
 80066ac:	0800670d 	.word	0x0800670d
 80066b0:	08006717 	.word	0x08006717
 80066b4:	08006703 	.word	0x08006703
 80066b8:	08006717 	.word	0x08006717
 80066bc:	080066db 	.word	0x080066db
 80066c0:	080066d1 	.word	0x080066d1
 80066c4:	08006717 	.word	0x08006717
 80066c8:	080066ef 	.word	0x080066ef
 80066cc:	080066e5 	.word	0x080066e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f9dc 	bl	8006a90 <USBD_GetDescriptor>
          break;
 80066d8:	e022      	b.n	8006720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fb3f 	bl	8006d60 <USBD_SetAddress>
          break;
 80066e2:	e01d      	b.n	8006720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb7e 	bl	8006de8 <USBD_SetConfig>
          break;
 80066ec:	e018      	b.n	8006720 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fc07 	bl	8006f04 <USBD_GetConfig>
          break;
 80066f6:	e013      	b.n	8006720 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc37 	bl	8006f6e <USBD_GetStatus>
          break;
 8006700:	e00e      	b.n	8006720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fc65 	bl	8006fd4 <USBD_SetFeature>
          break;
 800670a:	e009      	b.n	8006720 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fc74 	bl	8006ffc <USBD_ClrFeature>
          break;
 8006714:	e004      	b.n	8006720 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fccc 	bl	80070b6 <USBD_CtlError>
          break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e004      	b.n	800672c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fcc6 	bl	80070b6 <USBD_CtlError>
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop

08006738 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d005      	beq.n	800675e <USBD_StdItfReq+0x26>
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d82e      	bhi.n	80067b4 <USBD_StdItfReq+0x7c>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <USBD_StdItfReq+0x26>
 800675a:	2b20      	cmp	r3, #32
 800675c:	d12a      	bne.n	80067b4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006764:	3b01      	subs	r3, #1
 8006766:	2b02      	cmp	r3, #2
 8006768:	d81d      	bhi.n	80067a6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	889b      	ldrh	r3, [r3, #4]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d813      	bhi.n	800679c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	88db      	ldrh	r3, [r3, #6]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d110      	bne.n	80067b0 <USBD_StdItfReq+0x78>
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fd56 	bl	8007246 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800679a:	e009      	b.n	80067b0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fc89 	bl	80070b6 <USBD_CtlError>
          break;
 80067a4:	e004      	b.n	80067b0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fc84 	bl	80070b6 <USBD_CtlError>
          break;
 80067ae:	e000      	b.n	80067b2 <USBD_StdItfReq+0x7a>
          break;
 80067b0:	bf00      	nop
      }
      break;
 80067b2:	e004      	b.n	80067be <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fc7d 	bl	80070b6 <USBD_CtlError>
      break;
 80067bc:	bf00      	nop
  }

  return USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	889b      	ldrh	r3, [r3, #4]
 80067da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	d007      	beq.n	80067f8 <USBD_StdEPReq+0x30>
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	f200 8146 	bhi.w	8006a7a <USBD_StdEPReq+0x2b2>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <USBD_StdEPReq+0x40>
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	f040 8141 	bne.w	8006a7a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
      break;
 8006806:	e13d      	b.n	8006a84 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006810:	2b20      	cmp	r3, #32
 8006812:	d10a      	bne.n	800682a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	4603      	mov	r3, r0
 8006824:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	e12d      	b.n	8006a86 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d007      	beq.n	8006842 <USBD_StdEPReq+0x7a>
 8006832:	2b03      	cmp	r3, #3
 8006834:	f300 811b 	bgt.w	8006a6e <USBD_StdEPReq+0x2a6>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d072      	beq.n	8006922 <USBD_StdEPReq+0x15a>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d03a      	beq.n	80068b6 <USBD_StdEPReq+0xee>
 8006840:	e115      	b.n	8006a6e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006848:	2b02      	cmp	r3, #2
 800684a:	d002      	beq.n	8006852 <USBD_StdEPReq+0x8a>
 800684c:	2b03      	cmp	r3, #3
 800684e:	d015      	beq.n	800687c <USBD_StdEPReq+0xb4>
 8006850:	e02b      	b.n	80068aa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <USBD_StdEPReq+0xaa>
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d009      	beq.n	8006872 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 f85e 	bl	8007924 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f85a 	bl	8007924 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006870:	e020      	b.n	80068b4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fc1e 	bl	80070b6 <USBD_CtlError>
              break;
 800687a:	e01b      	b.n	80068b4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	885b      	ldrh	r3, [r3, #2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10e      	bne.n	80068a2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <USBD_StdEPReq+0xda>
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b80      	cmp	r3, #128	; 0x80
 800688e:	d008      	beq.n	80068a2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	88db      	ldrh	r3, [r3, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 f841 	bl	8007924 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fccf 	bl	8007246 <USBD_CtlSendStatus>

              break;
 80068a8:	e004      	b.n	80068b4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc02 	bl	80070b6 <USBD_CtlError>
              break;
 80068b2:	bf00      	nop
          }
          break;
 80068b4:	e0e0      	b.n	8006a78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d002      	beq.n	80068c6 <USBD_StdEPReq+0xfe>
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d015      	beq.n	80068f0 <USBD_StdEPReq+0x128>
 80068c4:	e026      	b.n	8006914 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <USBD_StdEPReq+0x11e>
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d009      	beq.n	80068e6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80068d2:	7bbb      	ldrb	r3, [r7, #14]
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 f824 	bl	8007924 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 f820 	bl	8007924 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068e4:	e01c      	b.n	8006920 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fbe4 	bl	80070b6 <USBD_CtlError>
              break;
 80068ee:	e017      	b.n	8006920 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	885b      	ldrh	r3, [r3, #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d112      	bne.n	800691e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 f82b 	bl	8007962 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc9a 	bl	8007246 <USBD_CtlSendStatus>
              }
              break;
 8006912:	e004      	b.n	800691e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fbcd 	bl	80070b6 <USBD_CtlError>
              break;
 800691c:	e000      	b.n	8006920 <USBD_StdEPReq+0x158>
              break;
 800691e:	bf00      	nop
          }
          break;
 8006920:	e0aa      	b.n	8006a78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006928:	2b02      	cmp	r3, #2
 800692a:	d002      	beq.n	8006932 <USBD_StdEPReq+0x16a>
 800692c:	2b03      	cmp	r3, #3
 800692e:	d032      	beq.n	8006996 <USBD_StdEPReq+0x1ce>
 8006930:	e097      	b.n	8006a62 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <USBD_StdEPReq+0x180>
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d004      	beq.n	8006948 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fbb8 	bl	80070b6 <USBD_CtlError>
                break;
 8006946:	e091      	b.n	8006a6c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	da0b      	bge.n	8006968 <USBD_StdEPReq+0x1a0>
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	3310      	adds	r3, #16
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4413      	add	r3, r2
 8006964:	3304      	adds	r3, #4
 8006966:	e00b      	b.n	8006980 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	3304      	adds	r3, #4
 8006980:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2202      	movs	r2, #2
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fbfb 	bl	800718a <USBD_CtlSendData>
              break;
 8006994:	e06a      	b.n	8006a6c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da11      	bge.n	80069c2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3318      	adds	r3, #24
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d117      	bne.n	80069e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fb7b 	bl	80070b6 <USBD_CtlError>
                  break;
 80069c0:	e054      	b.n	8006a6c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb68 	bl	80070b6 <USBD_CtlError>
                  break;
 80069e6:	e041      	b.n	8006a6c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da0b      	bge.n	8006a08 <USBD_StdEPReq+0x240>
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	3310      	adds	r3, #16
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	4413      	add	r3, r2
 8006a04:	3304      	adds	r3, #4
 8006a06:	e00b      	b.n	8006a20 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <USBD_StdEPReq+0x266>
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d103      	bne.n	8006a36 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e00e      	b.n	8006a54 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 ffb0 	bl	80079a0 <USBD_LL_IsStallEP>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e002      	b.n	8006a54 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2202      	movs	r2, #2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fb95 	bl	800718a <USBD_CtlSendData>
              break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fb26 	bl	80070b6 <USBD_CtlError>
              break;
 8006a6a:	bf00      	nop
          }
          break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fb20 	bl	80070b6 <USBD_CtlError>
          break;
 8006a76:	bf00      	nop
      }
      break;
 8006a78:	e004      	b.n	8006a84 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb1a 	bl	80070b6 <USBD_CtlError>
      break;
 8006a82:	bf00      	nop
  }

  return ret;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	f200 8128 	bhi.w	8006d06 <USBD_GetDescriptor+0x276>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <USBD_GetDescriptor+0x2c>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006af1 	.word	0x08006af1
 8006ac4:	08006b31 	.word	0x08006b31
 8006ac8:	08006d07 	.word	0x08006d07
 8006acc:	08006d07 	.word	0x08006d07
 8006ad0:	08006ca7 	.word	0x08006ca7
 8006ad4:	08006cd3 	.word	0x08006cd3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	7c12      	ldrb	r2, [r2, #16]
 8006ae4:	f107 0108 	add.w	r1, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
      break;
 8006aee:	e112      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7c1b      	ldrb	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f107 0208 	add.w	r2, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	2202      	movs	r2, #2
 8006b10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b12:	e100      	b.n	8006d16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	f107 0208 	add.w	r2, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e0f2      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	885b      	ldrh	r3, [r3, #2]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	f200 80ac 	bhi.w	8006c94 <USBD_GetDescriptor+0x204>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <USBD_GetDescriptor+0xb4>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b5d 	.word	0x08006b5d
 8006b48:	08006b91 	.word	0x08006b91
 8006b4c:	08006bc5 	.word	0x08006bc5
 8006b50:	08006bf9 	.word	0x08006bf9
 8006b54:	08006c2d 	.word	0x08006c2d
 8006b58:	08006c61 	.word	0x08006c61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7c12      	ldrb	r2, [r2, #16]
 8006b74:	f107 0108 	add.w	r1, r7, #8
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7e:	e091      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa97 	bl	80070b6 <USBD_CtlError>
            err++;
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8e:	e089      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	7c12      	ldrb	r2, [r2, #16]
 8006ba8:	f107 0108 	add.w	r1, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bb2:	e077      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa7d 	bl	80070b6 <USBD_CtlError>
            err++;
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bc2:	e06f      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006be6:	e05d      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa63 	bl	80070b6 <USBD_CtlError>
            err++;
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bf6:	e055      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	7c12      	ldrb	r2, [r2, #16]
 8006c10:	f107 0108 	add.w	r1, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c1a:	e043      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa49 	bl	80070b6 <USBD_CtlError>
            err++;
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	3301      	adds	r3, #1
 8006c28:	72fb      	strb	r3, [r7, #11]
          break;
 8006c2a:	e03b      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	7c12      	ldrb	r2, [r2, #16]
 8006c44:	f107 0108 	add.w	r1, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c4e:	e029      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa2f 	bl	80070b6 <USBD_CtlError>
            err++;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c5e:	e021      	b.n	8006ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	7c12      	ldrb	r2, [r2, #16]
 8006c78:	f107 0108 	add.w	r1, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c82:	e00f      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa15 	bl	80070b6 <USBD_CtlError>
            err++;
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	72fb      	strb	r3, [r7, #11]
          break;
 8006c92:	e007      	b.n	8006ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa0d 	bl	80070b6 <USBD_CtlError>
          err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006ca2:	e038      	b.n	8006d16 <USBD_GetDescriptor+0x286>
 8006ca4:	e037      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7c1b      	ldrb	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	f107 0208 	add.w	r2, r7, #8
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4798      	blx	r3
 8006cbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cc0:	e029      	b.n	8006d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9f6 	bl	80070b6 <USBD_CtlError>
        err++;
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	72fb      	strb	r3, [r7, #11]
      break;
 8006cd0:	e021      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10d      	bne.n	8006cf6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	f107 0208 	add.w	r2, r7, #8
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4798      	blx	r3
 8006cea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cf4:	e00f      	b.n	8006d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f9dc 	bl	80070b6 <USBD_CtlError>
        err++;
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	3301      	adds	r3, #1
 8006d02:	72fb      	strb	r3, [r7, #11]
      break;
 8006d04:	e007      	b.n	8006d16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f9d4 	bl	80070b6 <USBD_CtlError>
      err++;
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	3301      	adds	r3, #1
 8006d12:	72fb      	strb	r3, [r7, #11]
      break;
 8006d14:	bf00      	nop
  }

  if (err != 0U)
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11c      	bne.n	8006d56 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006d1c:	893b      	ldrh	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d011      	beq.n	8006d46 <USBD_GetDescriptor+0x2b6>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	88db      	ldrh	r3, [r3, #6]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	88da      	ldrh	r2, [r3, #6]
 8006d2e:	893b      	ldrh	r3, [r7, #8]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bf28      	it	cs
 8006d34:	4613      	movcs	r3, r2
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d3a:	893b      	ldrh	r3, [r7, #8]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa22 	bl	800718a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88db      	ldrh	r3, [r3, #6]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa79 	bl	8007246 <USBD_CtlSendStatus>
 8006d54:	e000      	b.n	8006d58 <USBD_GetDescriptor+0x2c8>
    return;
 8006d56:	bf00      	nop
    }
  }
}
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	889b      	ldrh	r3, [r3, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d130      	bne.n	8006dd4 <USBD_SetAddress+0x74>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d12c      	bne.n	8006dd4 <USBD_SetAddress+0x74>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	885b      	ldrh	r3, [r3, #2]
 8006d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d80:	d828      	bhi.n	8006dd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	885b      	ldrh	r3, [r3, #2]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d104      	bne.n	8006da2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f98b 	bl	80070b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da0:	e01d      	b.n	8006dde <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7bfa      	ldrb	r2, [r7, #15]
 8006da6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fe22 	bl	80079f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fa46 	bl	8007246 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc8:	e009      	b.n	8006dde <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	e004      	b.n	8006dde <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f96d 	bl	80070b6 <USBD_CtlError>
  }
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	885b      	ldrh	r3, [r3, #2]
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	4b41      	ldr	r3, [pc, #260]	; (8006f00 <USBD_SetConfig+0x118>)
 8006dfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006dfc:	4b40      	ldr	r3, [pc, #256]	; (8006f00 <USBD_SetConfig+0x118>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d904      	bls.n	8006e0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f955 	bl	80070b6 <USBD_CtlError>
 8006e0c:	e075      	b.n	8006efa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d002      	beq.n	8006e1e <USBD_SetConfig+0x36>
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d023      	beq.n	8006e64 <USBD_SetConfig+0x7c>
 8006e1c:	e062      	b.n	8006ee4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006e1e:	4b38      	ldr	r3, [pc, #224]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d01a      	beq.n	8006e5c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006e26:	4b36      	ldr	r3, [pc, #216]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e38:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f9e8 	bl	8006214 <USBD_SetClassConfig>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d104      	bne.n	8006e54 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f932 	bl	80070b6 <USBD_CtlError>
            return;
 8006e52:	e052      	b.n	8006efa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f9f6 	bl	8007246 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e5a:	e04e      	b.n	8006efa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f9f2 	bl	8007246 <USBD_CtlSendStatus>
        break;
 8006e62:	e04a      	b.n	8006efa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006e64:	4b26      	ldr	r3, [pc, #152]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d112      	bne.n	8006e92 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006e74:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006e7e:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff f9e4 	bl	8006252 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9db 	bl	8007246 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e90:	e033      	b.n	8006efa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006e92:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <USBD_SetConfig+0x118>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d01d      	beq.n	8006edc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f9d2 	bl	8006252 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006eae:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <USBD_SetConfig+0x118>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <USBD_SetConfig+0x118>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff f9a8 	bl	8006214 <USBD_SetClassConfig>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d104      	bne.n	8006ed4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f8f2 	bl	80070b6 <USBD_CtlError>
            return;
 8006ed2:	e012      	b.n	8006efa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f9b6 	bl	8007246 <USBD_CtlSendStatus>
        break;
 8006eda:	e00e      	b.n	8006efa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9b2 	bl	8007246 <USBD_CtlSendStatus>
        break;
 8006ee2:	e00a      	b.n	8006efa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8e5 	bl	80070b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006eec:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <USBD_SetConfig+0x118>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff f9ad 	bl	8006252 <USBD_ClrClassConfig>
        break;
 8006ef8:	bf00      	nop
    }
  }
}
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000224 	.word	0x20000224

08006f04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d004      	beq.n	8006f20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8cc 	bl	80070b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f1e:	e022      	b.n	8006f66 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	dc02      	bgt.n	8006f30 <USBD_GetConfig+0x2c>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	dc03      	bgt.n	8006f36 <USBD_GetConfig+0x32>
 8006f2e:	e015      	b.n	8006f5c <USBD_GetConfig+0x58>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d00b      	beq.n	8006f4c <USBD_GetConfig+0x48>
 8006f34:	e012      	b.n	8006f5c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	2201      	movs	r2, #1
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f920 	bl	800718a <USBD_CtlSendData>
        break;
 8006f4a:	e00c      	b.n	8006f66 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	2201      	movs	r2, #1
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f918 	bl	800718a <USBD_CtlSendData>
        break;
 8006f5a:	e004      	b.n	8006f66 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8a9 	bl	80070b6 <USBD_CtlError>
        break;
 8006f64:	bf00      	nop
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d81e      	bhi.n	8006fc2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	88db      	ldrh	r3, [r3, #6]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d004      	beq.n	8006f96 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f891 	bl	80070b6 <USBD_CtlError>
        break;
 8006f94:	e01a      	b.n	8006fcc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8e5 	bl	800718a <USBD_CtlSendData>
      break;
 8006fc0:	e004      	b.n	8006fcc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f876 	bl	80070b6 <USBD_CtlError>
      break;
 8006fca:	bf00      	nop
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d106      	bne.n	8006ff4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f929 	bl	8007246 <USBD_CtlSendStatus>
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700c:	3b01      	subs	r3, #1
 800700e:	2b02      	cmp	r3, #2
 8007010:	d80b      	bhi.n	800702a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10c      	bne.n	8007034 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f90f 	bl	8007246 <USBD_CtlSendStatus>
      }
      break;
 8007028:	e004      	b.n	8007034 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f842 	bl	80070b6 <USBD_CtlError>
      break;
 8007032:	e000      	b.n	8007036 <USBD_ClrFeature+0x3a>
      break;
 8007034:	bf00      	nop
  }
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	785a      	ldrb	r2, [r3, #1]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	3302      	adds	r3, #2
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b29a      	uxth	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	3303      	adds	r3, #3
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	b29b      	uxth	r3, r3
 800706c:	4413      	add	r3, r2
 800706e:	b29a      	uxth	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	3304      	adds	r3, #4
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b29a      	uxth	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	3305      	adds	r3, #5
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	b29b      	uxth	r3, r3
 8007088:	4413      	add	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	3306      	adds	r3, #6
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b29a      	uxth	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	3307      	adds	r3, #7
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	80da      	strh	r2, [r3, #6]

}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr

080070b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc2e 	bl	8007924 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80070c8:	2100      	movs	r1, #0
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fc2a 	bl	8007924 <USBD_LL_StallEP>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d032      	beq.n	8007154 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f834 	bl	800715c <USBD_GetLen>
 80070f4:	4603      	mov	r3, r0
 80070f6:	3301      	adds	r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	75fa      	strb	r2, [r7, #23]
 8007108:	461a      	mov	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	7812      	ldrb	r2, [r2, #0]
 8007112:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	75fa      	strb	r2, [r7, #23]
 800711a:	461a      	mov	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4413      	add	r3, r2
 8007120:	2203      	movs	r2, #3
 8007122:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007124:	e012      	b.n	800714c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	60fa      	str	r2, [r7, #12]
 800712c:	7dfa      	ldrb	r2, [r7, #23]
 800712e:	1c51      	adds	r1, r2, #1
 8007130:	75f9      	strb	r1, [r7, #23]
 8007132:	4611      	mov	r1, r2
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	440a      	add	r2, r1
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	75fa      	strb	r2, [r7, #23]
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4413      	add	r3, r2
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e8      	bne.n	8007126 <USBD_GetString+0x4e>
    }
  }
}
 8007154:	bf00      	nop
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007168:	e005      	b.n	8007176 <USBD_GetLen+0x1a>
  {
    len++;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	3301      	adds	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3301      	adds	r3, #1
 8007174:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f5      	bne.n	800716a <USBD_GetLen+0xe>
  }

  return len;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	4613      	mov	r3, r2
 8007196:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2202      	movs	r2, #2
 800719c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	2100      	movs	r1, #0
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fc3f 	bl	8007a36 <USBD_LL_Transmit>

  return USBD_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	2100      	movs	r1, #0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fc2d 	bl	8007a36 <USBD_LL_Transmit>

  return USBD_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	4613      	mov	r3, r2
 80071f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2203      	movs	r2, #3
 80071f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071fc:	88fa      	ldrh	r2, [r7, #6]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007204:	88fa      	ldrh	r2, [r7, #6]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	2100      	movs	r1, #0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fc32 	bl	8007a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	4613      	mov	r3, r2
 800722e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fc20 	bl	8007a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2204      	movs	r2, #4
 8007252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007256:	2300      	movs	r3, #0
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fbea 	bl	8007a36 <USBD_LL_Transmit>

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2205      	movs	r2, #5
 8007278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800727c:	2300      	movs	r3, #0
 800727e:	2200      	movs	r2, #0
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fbfa 	bl	8007a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007298:	2200      	movs	r2, #0
 800729a:	4912      	ldr	r1, [pc, #72]	; (80072e4 <MX_USB_DEVICE_Init+0x50>)
 800729c:	4812      	ldr	r0, [pc, #72]	; (80072e8 <MX_USB_DEVICE_Init+0x54>)
 800729e:	f7fe ff5f 	bl	8006160 <USBD_Init>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072a8:	f7f9 f8c2 	bl	8000430 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80072ac:	490f      	ldr	r1, [pc, #60]	; (80072ec <MX_USB_DEVICE_Init+0x58>)
 80072ae:	480e      	ldr	r0, [pc, #56]	; (80072e8 <MX_USB_DEVICE_Init+0x54>)
 80072b0:	f7fe ff81 	bl	80061b6 <USBD_RegisterClass>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072ba:	f7f9 f8b9 	bl	8000430 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80072be:	490c      	ldr	r1, [pc, #48]	; (80072f0 <MX_USB_DEVICE_Init+0x5c>)
 80072c0:	4809      	ldr	r0, [pc, #36]	; (80072e8 <MX_USB_DEVICE_Init+0x54>)
 80072c2:	f7fe fee1 	bl	8006088 <USBD_CDC_RegisterInterface>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072cc:	f7f9 f8b0 	bl	8000430 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <MX_USB_DEVICE_Init+0x54>)
 80072d2:	f7fe ff89 	bl	80061e8 <USBD_Start>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072dc:	f7f9 f8a8 	bl	8000430 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	2000012c 	.word	0x2000012c
 80072e8:	2000049c 	.word	0x2000049c
 80072ec:	20000018 	.word	0x20000018
 80072f0:	2000011c 	.word	0x2000011c

080072f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072f8:	2200      	movs	r2, #0
 80072fa:	4905      	ldr	r1, [pc, #20]	; (8007310 <CDC_Init_FS+0x1c>)
 80072fc:	4805      	ldr	r0, [pc, #20]	; (8007314 <CDC_Init_FS+0x20>)
 80072fe:	f7fe fed9 	bl	80060b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007302:	4905      	ldr	r1, [pc, #20]	; (8007318 <CDC_Init_FS+0x24>)
 8007304:	4803      	ldr	r0, [pc, #12]	; (8007314 <CDC_Init_FS+0x20>)
 8007306:	f7fe feee 	bl	80060e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800730a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800730c:	4618      	mov	r0, r3
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000b48 	.word	0x20000b48
 8007314:	2000049c 	.word	0x2000049c
 8007318:	20000760 	.word	0x20000760

0800731c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007320:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007322:	4618      	mov	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr
	...

0800732c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	6039      	str	r1, [r7, #0]
 8007336:	71fb      	strb	r3, [r7, #7]
 8007338:	4613      	mov	r3, r2
 800733a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	2b23      	cmp	r3, #35	; 0x23
 8007340:	d84a      	bhi.n	80073d8 <CDC_Control_FS+0xac>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <CDC_Control_FS+0x1c>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	080073d9 	.word	0x080073d9
 800734c:	080073d9 	.word	0x080073d9
 8007350:	080073d9 	.word	0x080073d9
 8007354:	080073d9 	.word	0x080073d9
 8007358:	080073d9 	.word	0x080073d9
 800735c:	080073d9 	.word	0x080073d9
 8007360:	080073d9 	.word	0x080073d9
 8007364:	080073d9 	.word	0x080073d9
 8007368:	080073d9 	.word	0x080073d9
 800736c:	080073d9 	.word	0x080073d9
 8007370:	080073d9 	.word	0x080073d9
 8007374:	080073d9 	.word	0x080073d9
 8007378:	080073d9 	.word	0x080073d9
 800737c:	080073d9 	.word	0x080073d9
 8007380:	080073d9 	.word	0x080073d9
 8007384:	080073d9 	.word	0x080073d9
 8007388:	080073d9 	.word	0x080073d9
 800738c:	080073d9 	.word	0x080073d9
 8007390:	080073d9 	.word	0x080073d9
 8007394:	080073d9 	.word	0x080073d9
 8007398:	080073d9 	.word	0x080073d9
 800739c:	080073d9 	.word	0x080073d9
 80073a0:	080073d9 	.word	0x080073d9
 80073a4:	080073d9 	.word	0x080073d9
 80073a8:	080073d9 	.word	0x080073d9
 80073ac:	080073d9 	.word	0x080073d9
 80073b0:	080073d9 	.word	0x080073d9
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	080073d9 	.word	0x080073d9
 80073c4:	080073d9 	.word	0x080073d9
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073d9 	.word	0x080073d9
 80073d0:	080073d9 	.word	0x080073d9
 80073d4:	080073d9 	.word	0x080073d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80073d8:	bf00      	nop
  }

  return (USBD_OK);
 80073da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop

080073e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4805      	ldr	r0, [pc, #20]	; (800740c <CDC_Receive_FS+0x24>)
 80073f6:	f7fe fe76 	bl	80060e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073fa:	4804      	ldr	r0, [pc, #16]	; (800740c <CDC_Receive_FS+0x24>)
 80073fc:	f7fe fe86 	bl	800610c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007400:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	2000049c 	.word	0x2000049c

08007410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2212      	movs	r2, #18
 8007420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007422:	4b03      	ldr	r3, [pc, #12]	; (8007430 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000148 	.word	0x20000148

08007434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2204      	movs	r2, #4
 8007444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007446:	4b03      	ldr	r3, [pc, #12]	; (8007454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	2000015c 	.word	0x2000015c

08007458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4907      	ldr	r1, [pc, #28]	; (800748c <USBD_FS_ProductStrDescriptor+0x34>)
 800746e:	4808      	ldr	r0, [pc, #32]	; (8007490 <USBD_FS_ProductStrDescriptor+0x38>)
 8007470:	f7ff fe32 	bl	80070d8 <USBD_GetString>
 8007474:	e004      	b.n	8007480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4904      	ldr	r1, [pc, #16]	; (800748c <USBD_FS_ProductStrDescriptor+0x34>)
 800747a:	4805      	ldr	r0, [pc, #20]	; (8007490 <USBD_FS_ProductStrDescriptor+0x38>)
 800747c:	f7ff fe2c 	bl	80070d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	; (800748c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000f30 	.word	0x20000f30
 8007490:	08008ad4 	.word	0x08008ad4

08007494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4904      	ldr	r1, [pc, #16]	; (80074b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074a4:	4804      	ldr	r0, [pc, #16]	; (80074b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074a6:	f7ff fe17 	bl	80070d8 <USBD_GetString>
  return USBD_StrDesc;
 80074aa:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000f30 	.word	0x20000f30
 80074b8:	08008aec 	.word	0x08008aec

080074bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	221a      	movs	r2, #26
 80074cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074ce:	f000 f843 	bl	8007558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074d2:	4b02      	ldr	r3, [pc, #8]	; (80074dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000160 	.word	0x20000160

080074e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4907      	ldr	r1, [pc, #28]	; (8007514 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074f6:	4808      	ldr	r0, [pc, #32]	; (8007518 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074f8:	f7ff fdee 	bl	80070d8 <USBD_GetString>
 80074fc:	e004      	b.n	8007508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4904      	ldr	r1, [pc, #16]	; (8007514 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007502:	4805      	ldr	r0, [pc, #20]	; (8007518 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007504:	f7ff fde8 	bl	80070d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007508:	4b02      	ldr	r3, [pc, #8]	; (8007514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000f30 	.word	0x20000f30
 8007518:	08008b00 	.word	0x08008b00

0800751c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4907      	ldr	r1, [pc, #28]	; (8007550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007532:	4808      	ldr	r0, [pc, #32]	; (8007554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007534:	f7ff fdd0 	bl	80070d8 <USBD_GetString>
 8007538:	e004      	b.n	8007544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4904      	ldr	r1, [pc, #16]	; (8007550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800753e:	4805      	ldr	r0, [pc, #20]	; (8007554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007540:	f7ff fdca 	bl	80070d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000f30 	.word	0x20000f30
 8007554:	08008b0c 	.word	0x08008b0c

08007558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <Get_SerialNum+0x44>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <Get_SerialNum+0x48>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800756a:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <Get_SerialNum+0x4c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800757e:	2208      	movs	r2, #8
 8007580:	4909      	ldr	r1, [pc, #36]	; (80075a8 <Get_SerialNum+0x50>)
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f814 	bl	80075b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007588:	2204      	movs	r2, #4
 800758a:	4908      	ldr	r1, [pc, #32]	; (80075ac <Get_SerialNum+0x54>)
 800758c:	68b8      	ldr	r0, [r7, #8]
 800758e:	f000 f80f 	bl	80075b0 <IntToUnicode>
  }
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	1ffff7e8 	.word	0x1ffff7e8
 80075a0:	1ffff7ec 	.word	0x1ffff7ec
 80075a4:	1ffff7f0 	.word	0x1ffff7f0
 80075a8:	20000162 	.word	0x20000162
 80075ac:	20000172 	.word	0x20000172

080075b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]
 80075c6:	e027      	b.n	8007618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	0f1b      	lsrs	r3, r3, #28
 80075cc:	2b09      	cmp	r3, #9
 80075ce:	d80b      	bhi.n	80075e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	0f1b      	lsrs	r3, r3, #28
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4619      	mov	r1, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	440b      	add	r3, r1
 80075e0:	3230      	adds	r2, #48	; 0x30
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e00a      	b.n	80075fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	0f1b      	lsrs	r3, r3, #28
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4619      	mov	r1, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	440b      	add	r3, r1
 80075f8:	3237      	adds	r2, #55	; 0x37
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	3301      	adds	r3, #1
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	3301      	adds	r3, #1
 8007616:	75fb      	strb	r3, [r7, #23]
 8007618:	7dfa      	ldrb	r2, [r7, #23]
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	429a      	cmp	r2, r3
 800761e:	d3d3      	bcc.n	80075c8 <IntToUnicode+0x18>
  }
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr

0800762c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a0d      	ldr	r2, [pc, #52]	; (8007670 <HAL_PCD_MspInit+0x44>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d113      	bne.n	8007666 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <HAL_PCD_MspInit+0x48>)
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	4a0c      	ldr	r2, [pc, #48]	; (8007674 <HAL_PCD_MspInit+0x48>)
 8007644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007648:	61d3      	str	r3, [r2, #28]
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <HAL_PCD_MspInit+0x48>)
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007656:	2200      	movs	r2, #0
 8007658:	2100      	movs	r1, #0
 800765a:	2014      	movs	r0, #20
 800765c:	f7f9 fbf9 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007660:	2014      	movs	r0, #20
 8007662:	f7f9 fc12 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	40005c00 	.word	0x40005c00
 8007674:	40021000 	.word	0x40021000

08007678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800768c:	4619      	mov	r1, r3
 800768e:	4610      	mov	r0, r2
 8007690:	f7fe fdf2 	bl	8006278 <USBD_LL_SetupStage>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	4619      	mov	r1, r3
 80076c6:	f7fe fe24 	bl	8006312 <USBD_LL_DataOutStage>
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4613      	mov	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	440b      	add	r3, r1
 80076f2:	333c      	adds	r3, #60	; 0x3c
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	4619      	mov	r1, r3
 80076fa:	f7fe fe7b 	bl	80063f4 <USBD_LL_DataInStage>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe ff8b 	bl	8006630 <USBD_LL_SOF>
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800772a:	2301      	movs	r3, #1
 800772c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d001      	beq.n	800773a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007736:	f7f8 fe7b 	bl	8000430 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007740:	7bfa      	ldrb	r2, [r7, #15]
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe ff3b 	bl	80065c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe fef4 	bl	800653e <USBD_LL_Reset>
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe ff35 	bl	80065de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <HAL_PCD_SuspendCallback+0x30>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	4a03      	ldr	r2, [pc, #12]	; (8007790 <HAL_PCD_SuspendCallback+0x30>)
 8007782:	f043 0306 	orr.w	r3, r3, #6
 8007786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	e000ed00 	.word	0xe000ed00

08007794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe ff2f 	bl	8006606 <USBD_LL_Resume>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80077b8:	4a28      	ldr	r2, [pc, #160]	; (800785c <USBD_LL_Init+0xac>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a26      	ldr	r2, [pc, #152]	; (800785c <USBD_LL_Init+0xac>)
 80077c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80077c8:	4b24      	ldr	r3, [pc, #144]	; (800785c <USBD_LL_Init+0xac>)
 80077ca:	4a25      	ldr	r2, [pc, #148]	; (8007860 <USBD_LL_Init+0xb0>)
 80077cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80077ce:	4b23      	ldr	r3, [pc, #140]	; (800785c <USBD_LL_Init+0xac>)
 80077d0:	2208      	movs	r2, #8
 80077d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80077d4:	4b21      	ldr	r3, [pc, #132]	; (800785c <USBD_LL_Init+0xac>)
 80077d6:	2202      	movs	r2, #2
 80077d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80077da:	4b20      	ldr	r3, [pc, #128]	; (800785c <USBD_LL_Init+0xac>)
 80077dc:	2200      	movs	r2, #0
 80077de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <USBD_LL_Init+0xac>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80077e6:	4b1d      	ldr	r3, [pc, #116]	; (800785c <USBD_LL_Init+0xac>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80077ec:	481b      	ldr	r0, [pc, #108]	; (800785c <USBD_LL_Init+0xac>)
 80077ee:	f7f9 fd33 	bl	8001258 <HAL_PCD_Init>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80077f8:	f7f8 fe1a 	bl	8000430 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007802:	2318      	movs	r3, #24
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	f7fb f875 	bl	80028f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007812:	2358      	movs	r3, #88	; 0x58
 8007814:	2200      	movs	r2, #0
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	f7fb f86d 	bl	80028f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007822:	23c0      	movs	r3, #192	; 0xc0
 8007824:	2200      	movs	r2, #0
 8007826:	2181      	movs	r1, #129	; 0x81
 8007828:	f7fb f865 	bl	80028f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007832:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007836:	2200      	movs	r2, #0
 8007838:	2101      	movs	r1, #1
 800783a:	f7fb f85c 	bl	80028f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007848:	2200      	movs	r2, #0
 800784a:	2182      	movs	r1, #130	; 0x82
 800784c:	f7fb f853 	bl	80028f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20001130 	.word	0x20001130
 8007860:	40005c00 	.word	0x40005c00

08007864 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800787a:	4618      	mov	r0, r3
 800787c:	f7f9 fdf7 	bl	800146e <HAL_PCD_Start>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f94e 	bl	8007b28 <USBD_Get_USB_Status>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007890:	7bbb      	ldrb	r3, [r7, #14]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	461a      	mov	r2, r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	70fb      	strb	r3, [r7, #3]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70bb      	strb	r3, [r7, #2]
 80078b0:	4613      	mov	r3, r2
 80078b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078c2:	78bb      	ldrb	r3, [r7, #2]
 80078c4:	883a      	ldrh	r2, [r7, #0]
 80078c6:	78f9      	ldrb	r1, [r7, #3]
 80078c8:	f7f9 ff71 	bl	80017ae <HAL_PCD_EP_Open>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f928 	bl	8007b28 <USBD_Get_USB_Status>
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7f9 ffb8 	bl	800187a <HAL_PCD_EP_Close>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	4618      	mov	r0, r3
 8007912:	f000 f909 	bl	8007b28 <USBD_Get_USB_Status>
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800791a:	7bbb      	ldrb	r3, [r7, #14]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f7fa f878 	bl	8001a38 <HAL_PCD_EP_SetStall>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f8ea 	bl	8007b28 <USBD_Get_USB_Status>
 8007954:	4603      	mov	r3, r0
 8007956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007958:	7bbb      	ldrb	r3, [r7, #14]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800797c:	78fa      	ldrb	r2, [r7, #3]
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f7fa f8b9 	bl	8001af8 <HAL_PCD_EP_ClrStall>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f8cb 	bl	8007b28 <USBD_Get_USB_Status>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007996:	7bbb      	ldrb	r3, [r7, #14]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da0c      	bge.n	80079d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	440b      	add	r3, r1
 80079d0:	3302      	adds	r3, #2
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	e00b      	b.n	80079ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	440b      	add	r3, r1
 80079e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80079ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr

080079f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7f9 fea4 	bl	8001764 <HAL_PCD_SetAddress>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f880 	bl	8007b28 <USBD_Get_USB_Status>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	461a      	mov	r2, r3
 8007a42:	460b      	mov	r3, r1
 8007a44:	72fb      	strb	r3, [r7, #11]
 8007a46:	4613      	mov	r3, r2
 8007a48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a58:	893b      	ldrh	r3, [r7, #8]
 8007a5a:	7af9      	ldrb	r1, [r7, #11]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	f7f9 ffa8 	bl	80019b2 <HAL_PCD_EP_Transmit>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f85d 	bl	8007b28 <USBD_Get_USB_Status>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a72:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	461a      	mov	r2, r3
 8007a88:	460b      	mov	r3, r1
 8007a8a:	72fb      	strb	r3, [r7, #11]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a9e:	893b      	ldrh	r3, [r7, #8]
 8007aa0:	7af9      	ldrb	r1, [r7, #11]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	f7f9 ff31 	bl	800190a <HAL_PCD_EP_Receive>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f83a 	bl	8007b28 <USBD_Get_USB_Status>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ab8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7f9 ff53 	bl	8001984 <HAL_PCD_EP_GetRxCount>
 8007ade:	4603      	mov	r3, r0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <USBD_static_malloc+0x14>)
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr
 8007afc:	20000228 	.word	0x20000228

08007b00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr

08007b12 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d817      	bhi.n	8007b6c <USBD_Get_USB_Status+0x44>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <USBD_Get_USB_Status+0x1c>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b5b 	.word	0x08007b5b
 8007b4c:	08007b61 	.word	0x08007b61
 8007b50:	08007b67 	.word	0x08007b67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
    break;
 8007b58:	e00b      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5e:	e008      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
    break;
 8007b64:	e005      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b66:	2302      	movs	r3, #2
 8007b68:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6a:	e002      	b.n	8007b72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b70:	bf00      	nop
  }
  return usb_status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop

08007b80 <__errno>:
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <__errno+0x8>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000017c 	.word	0x2000017c

08007b8c <__libc_init_array>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	2600      	movs	r6, #0
 8007b90:	4d0c      	ldr	r5, [pc, #48]	; (8007bc4 <__libc_init_array+0x38>)
 8007b92:	4c0d      	ldr	r4, [pc, #52]	; (8007bc8 <__libc_init_array+0x3c>)
 8007b94:	1b64      	subs	r4, r4, r5
 8007b96:	10a4      	asrs	r4, r4, #2
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	d109      	bne.n	8007bb0 <__libc_init_array+0x24>
 8007b9c:	f000 ff82 	bl	8008aa4 <_init>
 8007ba0:	2600      	movs	r6, #0
 8007ba2:	4d0a      	ldr	r5, [pc, #40]	; (8007bcc <__libc_init_array+0x40>)
 8007ba4:	4c0a      	ldr	r4, [pc, #40]	; (8007bd0 <__libc_init_array+0x44>)
 8007ba6:	1b64      	subs	r4, r4, r5
 8007ba8:	10a4      	asrs	r4, r4, #2
 8007baa:	42a6      	cmp	r6, r4
 8007bac:	d105      	bne.n	8007bba <__libc_init_array+0x2e>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb4:	4798      	blx	r3
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7ee      	b.n	8007b98 <__libc_init_array+0xc>
 8007bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbe:	4798      	blx	r3
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	e7f2      	b.n	8007baa <__libc_init_array+0x1e>
 8007bc4:	08008bc4 	.word	0x08008bc4
 8007bc8:	08008bc4 	.word	0x08008bc4
 8007bcc:	08008bc4 	.word	0x08008bc4
 8007bd0:	08008bc8 	.word	0x08008bc8

08007bd4 <memset>:
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	4402      	add	r2, r0
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d100      	bne.n	8007bde <memset+0xa>
 8007bdc:	4770      	bx	lr
 8007bde:	f803 1b01 	strb.w	r1, [r3], #1
 8007be2:	e7f9      	b.n	8007bd8 <memset+0x4>

08007be4 <iprintf>:
 8007be4:	b40f      	push	{r0, r1, r2, r3}
 8007be6:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <iprintf+0x2c>)
 8007be8:	b513      	push	{r0, r1, r4, lr}
 8007bea:	681c      	ldr	r4, [r3, #0]
 8007bec:	b124      	cbz	r4, 8007bf8 <iprintf+0x14>
 8007bee:	69a3      	ldr	r3, [r4, #24]
 8007bf0:	b913      	cbnz	r3, 8007bf8 <iprintf+0x14>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 f866 	bl	8007cc4 <__sinit>
 8007bf8:	ab05      	add	r3, sp, #20
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	9a04      	ldr	r2, [sp, #16]
 8007bfe:	68a1      	ldr	r1, [r4, #8]
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	f000 f981 	bl	8007f08 <_vfiprintf_r>
 8007c06:	b002      	add	sp, #8
 8007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0c:	b004      	add	sp, #16
 8007c0e:	4770      	bx	lr
 8007c10:	2000017c 	.word	0x2000017c

08007c14 <std>:
 8007c14:	2300      	movs	r3, #0
 8007c16:	b510      	push	{r4, lr}
 8007c18:	4604      	mov	r4, r0
 8007c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c22:	6083      	str	r3, [r0, #8]
 8007c24:	8181      	strh	r1, [r0, #12]
 8007c26:	6643      	str	r3, [r0, #100]	; 0x64
 8007c28:	81c2      	strh	r2, [r0, #14]
 8007c2a:	6183      	str	r3, [r0, #24]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	2208      	movs	r2, #8
 8007c30:	305c      	adds	r0, #92	; 0x5c
 8007c32:	f7ff ffcf 	bl	8007bd4 <memset>
 8007c36:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <std+0x38>)
 8007c38:	6224      	str	r4, [r4, #32]
 8007c3a:	6263      	str	r3, [r4, #36]	; 0x24
 8007c3c:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <std+0x3c>)
 8007c3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c40:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <std+0x40>)
 8007c42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <std+0x44>)
 8007c46:	6323      	str	r3, [r4, #48]	; 0x30
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	bf00      	nop
 8007c4c:	080084b5 	.word	0x080084b5
 8007c50:	080084d7 	.word	0x080084d7
 8007c54:	0800850f 	.word	0x0800850f
 8007c58:	08008533 	.word	0x08008533

08007c5c <_cleanup_r>:
 8007c5c:	4901      	ldr	r1, [pc, #4]	; (8007c64 <_cleanup_r+0x8>)
 8007c5e:	f000 b8af 	b.w	8007dc0 <_fwalk_reent>
 8007c62:	bf00      	nop
 8007c64:	0800880d 	.word	0x0800880d

08007c68 <__sfmoreglue>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	2568      	movs	r5, #104	; 0x68
 8007c6c:	1e4a      	subs	r2, r1, #1
 8007c6e:	4355      	muls	r5, r2
 8007c70:	460e      	mov	r6, r1
 8007c72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c76:	f000 f8c5 	bl	8007e04 <_malloc_r>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	b140      	cbz	r0, 8007c90 <__sfmoreglue+0x28>
 8007c7e:	2100      	movs	r1, #0
 8007c80:	e9c0 1600 	strd	r1, r6, [r0]
 8007c84:	300c      	adds	r0, #12
 8007c86:	60a0      	str	r0, [r4, #8]
 8007c88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c8c:	f7ff ffa2 	bl	8007bd4 <memset>
 8007c90:	4620      	mov	r0, r4
 8007c92:	bd70      	pop	{r4, r5, r6, pc}

08007c94 <__sfp_lock_acquire>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__sfp_lock_acquire+0x8>)
 8007c96:	f000 b8b3 	b.w	8007e00 <__retarget_lock_acquire_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20001424 	.word	0x20001424

08007ca0 <__sfp_lock_release>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__sfp_lock_release+0x8>)
 8007ca2:	f000 b8ae 	b.w	8007e02 <__retarget_lock_release_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	20001424 	.word	0x20001424

08007cac <__sinit_lock_acquire>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__sinit_lock_acquire+0x8>)
 8007cae:	f000 b8a7 	b.w	8007e00 <__retarget_lock_acquire_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	2000141f 	.word	0x2000141f

08007cb8 <__sinit_lock_release>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	; (8007cc0 <__sinit_lock_release+0x8>)
 8007cba:	f000 b8a2 	b.w	8007e02 <__retarget_lock_release_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	2000141f 	.word	0x2000141f

08007cc4 <__sinit>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	f7ff fff0 	bl	8007cac <__sinit_lock_acquire>
 8007ccc:	69a3      	ldr	r3, [r4, #24]
 8007cce:	b11b      	cbz	r3, 8007cd8 <__sinit+0x14>
 8007cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd4:	f7ff bff0 	b.w	8007cb8 <__sinit_lock_release>
 8007cd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cdc:	6523      	str	r3, [r4, #80]	; 0x50
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <__sinit+0x68>)
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <__sinit+0x6c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	bf08      	it	eq
 8007cea:	2301      	moveq	r3, #1
 8007cec:	4620      	mov	r0, r4
 8007cee:	bf08      	it	eq
 8007cf0:	61a3      	streq	r3, [r4, #24]
 8007cf2:	f000 f81f 	bl	8007d34 <__sfp>
 8007cf6:	6060      	str	r0, [r4, #4]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 f81b 	bl	8007d34 <__sfp>
 8007cfe:	60a0      	str	r0, [r4, #8]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 f817 	bl	8007d34 <__sfp>
 8007d06:	2200      	movs	r2, #0
 8007d08:	2104      	movs	r1, #4
 8007d0a:	60e0      	str	r0, [r4, #12]
 8007d0c:	6860      	ldr	r0, [r4, #4]
 8007d0e:	f7ff ff81 	bl	8007c14 <std>
 8007d12:	2201      	movs	r2, #1
 8007d14:	2109      	movs	r1, #9
 8007d16:	68a0      	ldr	r0, [r4, #8]
 8007d18:	f7ff ff7c 	bl	8007c14 <std>
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	2112      	movs	r1, #18
 8007d20:	68e0      	ldr	r0, [r4, #12]
 8007d22:	f7ff ff77 	bl	8007c14 <std>
 8007d26:	2301      	movs	r3, #1
 8007d28:	61a3      	str	r3, [r4, #24]
 8007d2a:	e7d1      	b.n	8007cd0 <__sinit+0xc>
 8007d2c:	08008b2c 	.word	0x08008b2c
 8007d30:	08007c5d 	.word	0x08007c5d

08007d34 <__sfp>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	4607      	mov	r7, r0
 8007d38:	f7ff ffac 	bl	8007c94 <__sfp_lock_acquire>
 8007d3c:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <__sfp+0x84>)
 8007d3e:	681e      	ldr	r6, [r3, #0]
 8007d40:	69b3      	ldr	r3, [r6, #24]
 8007d42:	b913      	cbnz	r3, 8007d4a <__sfp+0x16>
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ffbd 	bl	8007cc4 <__sinit>
 8007d4a:	3648      	adds	r6, #72	; 0x48
 8007d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	d503      	bpl.n	8007d5c <__sfp+0x28>
 8007d54:	6833      	ldr	r3, [r6, #0]
 8007d56:	b30b      	cbz	r3, 8007d9c <__sfp+0x68>
 8007d58:	6836      	ldr	r6, [r6, #0]
 8007d5a:	e7f7      	b.n	8007d4c <__sfp+0x18>
 8007d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d60:	b9d5      	cbnz	r5, 8007d98 <__sfp+0x64>
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <__sfp+0x88>)
 8007d64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d68:	60e3      	str	r3, [r4, #12]
 8007d6a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d6c:	f000 f847 	bl	8007dfe <__retarget_lock_init_recursive>
 8007d70:	f7ff ff96 	bl	8007ca0 <__sfp_lock_release>
 8007d74:	2208      	movs	r2, #8
 8007d76:	4629      	mov	r1, r5
 8007d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d80:	6025      	str	r5, [r4, #0]
 8007d82:	61a5      	str	r5, [r4, #24]
 8007d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d88:	f7ff ff24 	bl	8007bd4 <memset>
 8007d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d94:	4620      	mov	r0, r4
 8007d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d98:	3468      	adds	r4, #104	; 0x68
 8007d9a:	e7d9      	b.n	8007d50 <__sfp+0x1c>
 8007d9c:	2104      	movs	r1, #4
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f7ff ff62 	bl	8007c68 <__sfmoreglue>
 8007da4:	4604      	mov	r4, r0
 8007da6:	6030      	str	r0, [r6, #0]
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1d5      	bne.n	8007d58 <__sfp+0x24>
 8007dac:	f7ff ff78 	bl	8007ca0 <__sfp_lock_release>
 8007db0:	230c      	movs	r3, #12
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	e7ee      	b.n	8007d94 <__sfp+0x60>
 8007db6:	bf00      	nop
 8007db8:	08008b2c 	.word	0x08008b2c
 8007dbc:	ffff0001 	.word	0xffff0001

08007dc0 <_fwalk_reent>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	4688      	mov	r8, r1
 8007dc8:	2700      	movs	r7, #0
 8007dca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd2:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd6:	d505      	bpl.n	8007de4 <_fwalk_reent+0x24>
 8007dd8:	6824      	ldr	r4, [r4, #0]
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d1f7      	bne.n	8007dce <_fwalk_reent+0xe>
 8007dde:	4638      	mov	r0, r7
 8007de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de4:	89ab      	ldrh	r3, [r5, #12]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d907      	bls.n	8007dfa <_fwalk_reent+0x3a>
 8007dea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dee:	3301      	adds	r3, #1
 8007df0:	d003      	beq.n	8007dfa <_fwalk_reent+0x3a>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4630      	mov	r0, r6
 8007df6:	47c0      	blx	r8
 8007df8:	4307      	orrs	r7, r0
 8007dfa:	3568      	adds	r5, #104	; 0x68
 8007dfc:	e7e9      	b.n	8007dd2 <_fwalk_reent+0x12>

08007dfe <__retarget_lock_init_recursive>:
 8007dfe:	4770      	bx	lr

08007e00 <__retarget_lock_acquire_recursive>:
 8007e00:	4770      	bx	lr

08007e02 <__retarget_lock_release_recursive>:
 8007e02:	4770      	bx	lr

08007e04 <_malloc_r>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	1ccd      	adds	r5, r1, #3
 8007e08:	f025 0503 	bic.w	r5, r5, #3
 8007e0c:	3508      	adds	r5, #8
 8007e0e:	2d0c      	cmp	r5, #12
 8007e10:	bf38      	it	cc
 8007e12:	250c      	movcc	r5, #12
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	4606      	mov	r6, r0
 8007e18:	db01      	blt.n	8007e1e <_malloc_r+0x1a>
 8007e1a:	42a9      	cmp	r1, r5
 8007e1c:	d903      	bls.n	8007e26 <_malloc_r+0x22>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	2000      	movs	r0, #0
 8007e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e26:	f000 fdb1 	bl	800898c <__malloc_lock>
 8007e2a:	4921      	ldr	r1, [pc, #132]	; (8007eb0 <_malloc_r+0xac>)
 8007e2c:	680a      	ldr	r2, [r1, #0]
 8007e2e:	4614      	mov	r4, r2
 8007e30:	b99c      	cbnz	r4, 8007e5a <_malloc_r+0x56>
 8007e32:	4f20      	ldr	r7, [pc, #128]	; (8007eb4 <_malloc_r+0xb0>)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	b923      	cbnz	r3, 8007e42 <_malloc_r+0x3e>
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f000 fb2a 	bl	8008494 <_sbrk_r>
 8007e40:	6038      	str	r0, [r7, #0]
 8007e42:	4629      	mov	r1, r5
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 fb25 	bl	8008494 <_sbrk_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	d123      	bne.n	8007e96 <_malloc_r+0x92>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	4630      	mov	r0, r6
 8007e52:	6033      	str	r3, [r6, #0]
 8007e54:	f000 fda0 	bl	8008998 <__malloc_unlock>
 8007e58:	e7e3      	b.n	8007e22 <_malloc_r+0x1e>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	1b5b      	subs	r3, r3, r5
 8007e5e:	d417      	bmi.n	8007e90 <_malloc_r+0x8c>
 8007e60:	2b0b      	cmp	r3, #11
 8007e62:	d903      	bls.n	8007e6c <_malloc_r+0x68>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	441c      	add	r4, r3
 8007e68:	6025      	str	r5, [r4, #0]
 8007e6a:	e004      	b.n	8007e76 <_malloc_r+0x72>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	42a2      	cmp	r2, r4
 8007e70:	bf0c      	ite	eq
 8007e72:	600b      	streq	r3, [r1, #0]
 8007e74:	6053      	strne	r3, [r2, #4]
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 fd8e 	bl	8008998 <__malloc_unlock>
 8007e7c:	f104 000b 	add.w	r0, r4, #11
 8007e80:	1d23      	adds	r3, r4, #4
 8007e82:	f020 0007 	bic.w	r0, r0, #7
 8007e86:	1ac2      	subs	r2, r0, r3
 8007e88:	d0cc      	beq.n	8007e24 <_malloc_r+0x20>
 8007e8a:	1a1b      	subs	r3, r3, r0
 8007e8c:	50a3      	str	r3, [r4, r2]
 8007e8e:	e7c9      	b.n	8007e24 <_malloc_r+0x20>
 8007e90:	4622      	mov	r2, r4
 8007e92:	6864      	ldr	r4, [r4, #4]
 8007e94:	e7cc      	b.n	8007e30 <_malloc_r+0x2c>
 8007e96:	1cc4      	adds	r4, r0, #3
 8007e98:	f024 0403 	bic.w	r4, r4, #3
 8007e9c:	42a0      	cmp	r0, r4
 8007e9e:	d0e3      	beq.n	8007e68 <_malloc_r+0x64>
 8007ea0:	1a21      	subs	r1, r4, r0
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f000 faf6 	bl	8008494 <_sbrk_r>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d1dd      	bne.n	8007e68 <_malloc_r+0x64>
 8007eac:	e7cf      	b.n	8007e4e <_malloc_r+0x4a>
 8007eae:	bf00      	nop
 8007eb0:	20000448 	.word	0x20000448
 8007eb4:	2000044c 	.word	0x2000044c

08007eb8 <__sfputc_r>:
 8007eb8:	6893      	ldr	r3, [r2, #8]
 8007eba:	b410      	push	{r4}
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	6093      	str	r3, [r2, #8]
 8007ec2:	da07      	bge.n	8007ed4 <__sfputc_r+0x1c>
 8007ec4:	6994      	ldr	r4, [r2, #24]
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	db01      	blt.n	8007ece <__sfputc_r+0x16>
 8007eca:	290a      	cmp	r1, #10
 8007ecc:	d102      	bne.n	8007ed4 <__sfputc_r+0x1c>
 8007ece:	bc10      	pop	{r4}
 8007ed0:	f000 bb34 	b.w	800853c <__swbuf_r>
 8007ed4:	6813      	ldr	r3, [r2, #0]
 8007ed6:	1c58      	adds	r0, r3, #1
 8007ed8:	6010      	str	r0, [r2, #0]
 8007eda:	7019      	strb	r1, [r3, #0]
 8007edc:	4608      	mov	r0, r1
 8007ede:	bc10      	pop	{r4}
 8007ee0:	4770      	bx	lr

08007ee2 <__sfputs_r>:
 8007ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	4614      	mov	r4, r2
 8007eea:	18d5      	adds	r5, r2, r3
 8007eec:	42ac      	cmp	r4, r5
 8007eee:	d101      	bne.n	8007ef4 <__sfputs_r+0x12>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e007      	b.n	8007f04 <__sfputs_r+0x22>
 8007ef4:	463a      	mov	r2, r7
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efc:	f7ff ffdc 	bl	8007eb8 <__sfputc_r>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d1f3      	bne.n	8007eec <__sfputs_r+0xa>
 8007f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f08 <_vfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	4614      	mov	r4, r2
 8007f10:	4698      	mov	r8, r3
 8007f12:	4606      	mov	r6, r0
 8007f14:	b09d      	sub	sp, #116	; 0x74
 8007f16:	b118      	cbz	r0, 8007f20 <_vfiprintf_r+0x18>
 8007f18:	6983      	ldr	r3, [r0, #24]
 8007f1a:	b90b      	cbnz	r3, 8007f20 <_vfiprintf_r+0x18>
 8007f1c:	f7ff fed2 	bl	8007cc4 <__sinit>
 8007f20:	4b89      	ldr	r3, [pc, #548]	; (8008148 <_vfiprintf_r+0x240>)
 8007f22:	429d      	cmp	r5, r3
 8007f24:	d11b      	bne.n	8007f5e <_vfiprintf_r+0x56>
 8007f26:	6875      	ldr	r5, [r6, #4]
 8007f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f2a:	07d9      	lsls	r1, r3, #31
 8007f2c:	d405      	bmi.n	8007f3a <_vfiprintf_r+0x32>
 8007f2e:	89ab      	ldrh	r3, [r5, #12]
 8007f30:	059a      	lsls	r2, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_vfiprintf_r+0x32>
 8007f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f36:	f7ff ff63 	bl	8007e00 <__retarget_lock_acquire_recursive>
 8007f3a:	89ab      	ldrh	r3, [r5, #12]
 8007f3c:	071b      	lsls	r3, r3, #28
 8007f3e:	d501      	bpl.n	8007f44 <_vfiprintf_r+0x3c>
 8007f40:	692b      	ldr	r3, [r5, #16]
 8007f42:	b9eb      	cbnz	r3, 8007f80 <_vfiprintf_r+0x78>
 8007f44:	4629      	mov	r1, r5
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 fb5c 	bl	8008604 <__swsetup_r>
 8007f4c:	b1c0      	cbz	r0, 8007f80 <_vfiprintf_r+0x78>
 8007f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f50:	07dc      	lsls	r4, r3, #31
 8007f52:	d50e      	bpl.n	8007f72 <_vfiprintf_r+0x6a>
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295
 8007f58:	b01d      	add	sp, #116	; 0x74
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	4b7b      	ldr	r3, [pc, #492]	; (800814c <_vfiprintf_r+0x244>)
 8007f60:	429d      	cmp	r5, r3
 8007f62:	d101      	bne.n	8007f68 <_vfiprintf_r+0x60>
 8007f64:	68b5      	ldr	r5, [r6, #8]
 8007f66:	e7df      	b.n	8007f28 <_vfiprintf_r+0x20>
 8007f68:	4b79      	ldr	r3, [pc, #484]	; (8008150 <_vfiprintf_r+0x248>)
 8007f6a:	429d      	cmp	r5, r3
 8007f6c:	bf08      	it	eq
 8007f6e:	68f5      	ldreq	r5, [r6, #12]
 8007f70:	e7da      	b.n	8007f28 <_vfiprintf_r+0x20>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	0598      	lsls	r0, r3, #22
 8007f76:	d4ed      	bmi.n	8007f54 <_vfiprintf_r+0x4c>
 8007f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f7a:	f7ff ff42 	bl	8007e02 <__retarget_lock_release_recursive>
 8007f7e:	e7e9      	b.n	8007f54 <_vfiprintf_r+0x4c>
 8007f80:	2300      	movs	r3, #0
 8007f82:	9309      	str	r3, [sp, #36]	; 0x24
 8007f84:	2320      	movs	r3, #32
 8007f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8a:	2330      	movs	r3, #48	; 0x30
 8007f8c:	f04f 0901 	mov.w	r9, #1
 8007f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008154 <_vfiprintf_r+0x24c>
 8007f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	469a      	mov	sl, r3
 8007fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa4:	b10a      	cbz	r2, 8007faa <_vfiprintf_r+0xa2>
 8007fa6:	2a25      	cmp	r2, #37	; 0x25
 8007fa8:	d1f9      	bne.n	8007f9e <_vfiprintf_r+0x96>
 8007faa:	ebba 0b04 	subs.w	fp, sl, r4
 8007fae:	d00b      	beq.n	8007fc8 <_vfiprintf_r+0xc0>
 8007fb0:	465b      	mov	r3, fp
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f7ff ff93 	bl	8007ee2 <__sfputs_r>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	f000 80aa 	beq.w	8008116 <_vfiprintf_r+0x20e>
 8007fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc4:	445a      	add	r2, fp
 8007fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80a2 	beq.w	8008116 <_vfiprintf_r+0x20e>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fdc:	f10a 0a01 	add.w	sl, sl, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	9307      	str	r3, [sp, #28]
 8007fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8007fea:	4654      	mov	r4, sl
 8007fec:	2205      	movs	r2, #5
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	4858      	ldr	r0, [pc, #352]	; (8008154 <_vfiprintf_r+0x24c>)
 8007ff4:	f000 fcbc 	bl	8008970 <memchr>
 8007ff8:	9a04      	ldr	r2, [sp, #16]
 8007ffa:	b9d8      	cbnz	r0, 8008034 <_vfiprintf_r+0x12c>
 8007ffc:	06d1      	lsls	r1, r2, #27
 8007ffe:	bf44      	itt	mi
 8008000:	2320      	movmi	r3, #32
 8008002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008006:	0713      	lsls	r3, r2, #28
 8008008:	bf44      	itt	mi
 800800a:	232b      	movmi	r3, #43	; 0x2b
 800800c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008010:	f89a 3000 	ldrb.w	r3, [sl]
 8008014:	2b2a      	cmp	r3, #42	; 0x2a
 8008016:	d015      	beq.n	8008044 <_vfiprintf_r+0x13c>
 8008018:	4654      	mov	r4, sl
 800801a:	2000      	movs	r0, #0
 800801c:	f04f 0c0a 	mov.w	ip, #10
 8008020:	9a07      	ldr	r2, [sp, #28]
 8008022:	4621      	mov	r1, r4
 8008024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008028:	3b30      	subs	r3, #48	; 0x30
 800802a:	2b09      	cmp	r3, #9
 800802c:	d94e      	bls.n	80080cc <_vfiprintf_r+0x1c4>
 800802e:	b1b0      	cbz	r0, 800805e <_vfiprintf_r+0x156>
 8008030:	9207      	str	r2, [sp, #28]
 8008032:	e014      	b.n	800805e <_vfiprintf_r+0x156>
 8008034:	eba0 0308 	sub.w	r3, r0, r8
 8008038:	fa09 f303 	lsl.w	r3, r9, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	46a2      	mov	sl, r4
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	e7d2      	b.n	8007fea <_vfiprintf_r+0xe2>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	1d19      	adds	r1, r3, #4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	9103      	str	r1, [sp, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	bfbb      	ittet	lt
 8008050:	425b      	neglt	r3, r3
 8008052:	f042 0202 	orrlt.w	r2, r2, #2
 8008056:	9307      	strge	r3, [sp, #28]
 8008058:	9307      	strlt	r3, [sp, #28]
 800805a:	bfb8      	it	lt
 800805c:	9204      	strlt	r2, [sp, #16]
 800805e:	7823      	ldrb	r3, [r4, #0]
 8008060:	2b2e      	cmp	r3, #46	; 0x2e
 8008062:	d10c      	bne.n	800807e <_vfiprintf_r+0x176>
 8008064:	7863      	ldrb	r3, [r4, #1]
 8008066:	2b2a      	cmp	r3, #42	; 0x2a
 8008068:	d135      	bne.n	80080d6 <_vfiprintf_r+0x1ce>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	3402      	adds	r4, #2
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	9203      	str	r2, [sp, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfb8      	it	lt
 8008078:	f04f 33ff 	movlt.w	r3, #4294967295
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008164 <_vfiprintf_r+0x25c>
 8008082:	2203      	movs	r2, #3
 8008084:	4650      	mov	r0, sl
 8008086:	7821      	ldrb	r1, [r4, #0]
 8008088:	f000 fc72 	bl	8008970 <memchr>
 800808c:	b140      	cbz	r0, 80080a0 <_vfiprintf_r+0x198>
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	eba0 000a 	sub.w	r0, r0, sl
 8008094:	fa03 f000 	lsl.w	r0, r3, r0
 8008098:	9b04      	ldr	r3, [sp, #16]
 800809a:	3401      	adds	r4, #1
 800809c:	4303      	orrs	r3, r0
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a4:	2206      	movs	r2, #6
 80080a6:	482c      	ldr	r0, [pc, #176]	; (8008158 <_vfiprintf_r+0x250>)
 80080a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ac:	f000 fc60 	bl	8008970 <memchr>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d03f      	beq.n	8008134 <_vfiprintf_r+0x22c>
 80080b4:	4b29      	ldr	r3, [pc, #164]	; (800815c <_vfiprintf_r+0x254>)
 80080b6:	bb1b      	cbnz	r3, 8008100 <_vfiprintf_r+0x1f8>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	3307      	adds	r3, #7
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	3308      	adds	r3, #8
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	443b      	add	r3, r7
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ca:	e767      	b.n	8007f9c <_vfiprintf_r+0x94>
 80080cc:	460c      	mov	r4, r1
 80080ce:	2001      	movs	r0, #1
 80080d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d4:	e7a5      	b.n	8008022 <_vfiprintf_r+0x11a>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f04f 0c0a 	mov.w	ip, #10
 80080dc:	4619      	mov	r1, r3
 80080de:	3401      	adds	r4, #1
 80080e0:	9305      	str	r3, [sp, #20]
 80080e2:	4620      	mov	r0, r4
 80080e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e8:	3a30      	subs	r2, #48	; 0x30
 80080ea:	2a09      	cmp	r2, #9
 80080ec:	d903      	bls.n	80080f6 <_vfiprintf_r+0x1ee>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0c5      	beq.n	800807e <_vfiprintf_r+0x176>
 80080f2:	9105      	str	r1, [sp, #20]
 80080f4:	e7c3      	b.n	800807e <_vfiprintf_r+0x176>
 80080f6:	4604      	mov	r4, r0
 80080f8:	2301      	movs	r3, #1
 80080fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fe:	e7f0      	b.n	80080e2 <_vfiprintf_r+0x1da>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	462a      	mov	r2, r5
 8008106:	4630      	mov	r0, r6
 8008108:	4b15      	ldr	r3, [pc, #84]	; (8008160 <_vfiprintf_r+0x258>)
 800810a:	a904      	add	r1, sp, #16
 800810c:	f3af 8000 	nop.w
 8008110:	4607      	mov	r7, r0
 8008112:	1c78      	adds	r0, r7, #1
 8008114:	d1d6      	bne.n	80080c4 <_vfiprintf_r+0x1bc>
 8008116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008118:	07d9      	lsls	r1, r3, #31
 800811a:	d405      	bmi.n	8008128 <_vfiprintf_r+0x220>
 800811c:	89ab      	ldrh	r3, [r5, #12]
 800811e:	059a      	lsls	r2, r3, #22
 8008120:	d402      	bmi.n	8008128 <_vfiprintf_r+0x220>
 8008122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008124:	f7ff fe6d 	bl	8007e02 <__retarget_lock_release_recursive>
 8008128:	89ab      	ldrh	r3, [r5, #12]
 800812a:	065b      	lsls	r3, r3, #25
 800812c:	f53f af12 	bmi.w	8007f54 <_vfiprintf_r+0x4c>
 8008130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008132:	e711      	b.n	8007f58 <_vfiprintf_r+0x50>
 8008134:	ab03      	add	r3, sp, #12
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	462a      	mov	r2, r5
 800813a:	4630      	mov	r0, r6
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <_vfiprintf_r+0x258>)
 800813e:	a904      	add	r1, sp, #16
 8008140:	f000 f882 	bl	8008248 <_printf_i>
 8008144:	e7e4      	b.n	8008110 <_vfiprintf_r+0x208>
 8008146:	bf00      	nop
 8008148:	08008b50 	.word	0x08008b50
 800814c:	08008b70 	.word	0x08008b70
 8008150:	08008b30 	.word	0x08008b30
 8008154:	08008b90 	.word	0x08008b90
 8008158:	08008b9a 	.word	0x08008b9a
 800815c:	00000000 	.word	0x00000000
 8008160:	08007ee3 	.word	0x08007ee3
 8008164:	08008b96 	.word	0x08008b96

08008168 <_printf_common>:
 8008168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816c:	4616      	mov	r6, r2
 800816e:	4699      	mov	r9, r3
 8008170:	688a      	ldr	r2, [r1, #8]
 8008172:	690b      	ldr	r3, [r1, #16]
 8008174:	4607      	mov	r7, r0
 8008176:	4293      	cmp	r3, r2
 8008178:	bfb8      	it	lt
 800817a:	4613      	movlt	r3, r2
 800817c:	6033      	str	r3, [r6, #0]
 800817e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008182:	460c      	mov	r4, r1
 8008184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008188:	b10a      	cbz	r2, 800818e <_printf_common+0x26>
 800818a:	3301      	adds	r3, #1
 800818c:	6033      	str	r3, [r6, #0]
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	0699      	lsls	r1, r3, #26
 8008192:	bf42      	ittt	mi
 8008194:	6833      	ldrmi	r3, [r6, #0]
 8008196:	3302      	addmi	r3, #2
 8008198:	6033      	strmi	r3, [r6, #0]
 800819a:	6825      	ldr	r5, [r4, #0]
 800819c:	f015 0506 	ands.w	r5, r5, #6
 80081a0:	d106      	bne.n	80081b0 <_printf_common+0x48>
 80081a2:	f104 0a19 	add.w	sl, r4, #25
 80081a6:	68e3      	ldr	r3, [r4, #12]
 80081a8:	6832      	ldr	r2, [r6, #0]
 80081aa:	1a9b      	subs	r3, r3, r2
 80081ac:	42ab      	cmp	r3, r5
 80081ae:	dc28      	bgt.n	8008202 <_printf_common+0x9a>
 80081b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081b4:	1e13      	subs	r3, r2, #0
 80081b6:	6822      	ldr	r2, [r4, #0]
 80081b8:	bf18      	it	ne
 80081ba:	2301      	movne	r3, #1
 80081bc:	0692      	lsls	r2, r2, #26
 80081be:	d42d      	bmi.n	800821c <_printf_common+0xb4>
 80081c0:	4649      	mov	r1, r9
 80081c2:	4638      	mov	r0, r7
 80081c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c8:	47c0      	blx	r8
 80081ca:	3001      	adds	r0, #1
 80081cc:	d020      	beq.n	8008210 <_printf_common+0xa8>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	68e5      	ldr	r5, [r4, #12]
 80081d2:	f003 0306 	and.w	r3, r3, #6
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	bf18      	it	ne
 80081da:	2500      	movne	r5, #0
 80081dc:	6832      	ldr	r2, [r6, #0]
 80081de:	f04f 0600 	mov.w	r6, #0
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	bf08      	it	eq
 80081e6:	1aad      	subeq	r5, r5, r2
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	bf08      	it	eq
 80081ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bfc4      	itt	gt
 80081f4:	1a9b      	subgt	r3, r3, r2
 80081f6:	18ed      	addgt	r5, r5, r3
 80081f8:	341a      	adds	r4, #26
 80081fa:	42b5      	cmp	r5, r6
 80081fc:	d11a      	bne.n	8008234 <_printf_common+0xcc>
 80081fe:	2000      	movs	r0, #0
 8008200:	e008      	b.n	8008214 <_printf_common+0xac>
 8008202:	2301      	movs	r3, #1
 8008204:	4652      	mov	r2, sl
 8008206:	4649      	mov	r1, r9
 8008208:	4638      	mov	r0, r7
 800820a:	47c0      	blx	r8
 800820c:	3001      	adds	r0, #1
 800820e:	d103      	bne.n	8008218 <_printf_common+0xb0>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008218:	3501      	adds	r5, #1
 800821a:	e7c4      	b.n	80081a6 <_printf_common+0x3e>
 800821c:	2030      	movs	r0, #48	; 0x30
 800821e:	18e1      	adds	r1, r4, r3
 8008220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800822a:	4422      	add	r2, r4
 800822c:	3302      	adds	r3, #2
 800822e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008232:	e7c5      	b.n	80081c0 <_printf_common+0x58>
 8008234:	2301      	movs	r3, #1
 8008236:	4622      	mov	r2, r4
 8008238:	4649      	mov	r1, r9
 800823a:	4638      	mov	r0, r7
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d0e6      	beq.n	8008210 <_printf_common+0xa8>
 8008242:	3601      	adds	r6, #1
 8008244:	e7d9      	b.n	80081fa <_printf_common+0x92>
	...

08008248 <_printf_i>:
 8008248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	460c      	mov	r4, r1
 800824e:	7e27      	ldrb	r7, [r4, #24]
 8008250:	4691      	mov	r9, r2
 8008252:	2f78      	cmp	r7, #120	; 0x78
 8008254:	4680      	mov	r8, r0
 8008256:	469a      	mov	sl, r3
 8008258:	990c      	ldr	r1, [sp, #48]	; 0x30
 800825a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800825e:	d807      	bhi.n	8008270 <_printf_i+0x28>
 8008260:	2f62      	cmp	r7, #98	; 0x62
 8008262:	d80a      	bhi.n	800827a <_printf_i+0x32>
 8008264:	2f00      	cmp	r7, #0
 8008266:	f000 80d9 	beq.w	800841c <_printf_i+0x1d4>
 800826a:	2f58      	cmp	r7, #88	; 0x58
 800826c:	f000 80a4 	beq.w	80083b8 <_printf_i+0x170>
 8008270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008278:	e03a      	b.n	80082f0 <_printf_i+0xa8>
 800827a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800827e:	2b15      	cmp	r3, #21
 8008280:	d8f6      	bhi.n	8008270 <_printf_i+0x28>
 8008282:	a001      	add	r0, pc, #4	; (adr r0, 8008288 <_printf_i+0x40>)
 8008284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008288:	080082e1 	.word	0x080082e1
 800828c:	080082f5 	.word	0x080082f5
 8008290:	08008271 	.word	0x08008271
 8008294:	08008271 	.word	0x08008271
 8008298:	08008271 	.word	0x08008271
 800829c:	08008271 	.word	0x08008271
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	08008271 	.word	0x08008271
 80082a8:	08008271 	.word	0x08008271
 80082ac:	08008271 	.word	0x08008271
 80082b0:	08008271 	.word	0x08008271
 80082b4:	08008403 	.word	0x08008403
 80082b8:	08008325 	.word	0x08008325
 80082bc:	080083e5 	.word	0x080083e5
 80082c0:	08008271 	.word	0x08008271
 80082c4:	08008271 	.word	0x08008271
 80082c8:	08008425 	.word	0x08008425
 80082cc:	08008271 	.word	0x08008271
 80082d0:	08008325 	.word	0x08008325
 80082d4:	08008271 	.word	0x08008271
 80082d8:	08008271 	.word	0x08008271
 80082dc:	080083ed 	.word	0x080083ed
 80082e0:	680b      	ldr	r3, [r1, #0]
 80082e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	600a      	str	r2, [r1, #0]
 80082ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0a4      	b.n	800843e <_printf_i+0x1f6>
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	6808      	ldr	r0, [r1, #0]
 80082f8:	062e      	lsls	r6, r5, #24
 80082fa:	f100 0304 	add.w	r3, r0, #4
 80082fe:	d50a      	bpl.n	8008316 <_printf_i+0xce>
 8008300:	6805      	ldr	r5, [r0, #0]
 8008302:	600b      	str	r3, [r1, #0]
 8008304:	2d00      	cmp	r5, #0
 8008306:	da03      	bge.n	8008310 <_printf_i+0xc8>
 8008308:	232d      	movs	r3, #45	; 0x2d
 800830a:	426d      	negs	r5, r5
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	230a      	movs	r3, #10
 8008312:	485e      	ldr	r0, [pc, #376]	; (800848c <_printf_i+0x244>)
 8008314:	e019      	b.n	800834a <_printf_i+0x102>
 8008316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800831a:	6805      	ldr	r5, [r0, #0]
 800831c:	600b      	str	r3, [r1, #0]
 800831e:	bf18      	it	ne
 8008320:	b22d      	sxthne	r5, r5
 8008322:	e7ef      	b.n	8008304 <_printf_i+0xbc>
 8008324:	680b      	ldr	r3, [r1, #0]
 8008326:	6825      	ldr	r5, [r4, #0]
 8008328:	1d18      	adds	r0, r3, #4
 800832a:	6008      	str	r0, [r1, #0]
 800832c:	0628      	lsls	r0, r5, #24
 800832e:	d501      	bpl.n	8008334 <_printf_i+0xec>
 8008330:	681d      	ldr	r5, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0xf2>
 8008334:	0669      	lsls	r1, r5, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0xe8>
 8008338:	881d      	ldrh	r5, [r3, #0]
 800833a:	2f6f      	cmp	r7, #111	; 0x6f
 800833c:	bf0c      	ite	eq
 800833e:	2308      	moveq	r3, #8
 8008340:	230a      	movne	r3, #10
 8008342:	4852      	ldr	r0, [pc, #328]	; (800848c <_printf_i+0x244>)
 8008344:	2100      	movs	r1, #0
 8008346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800834a:	6866      	ldr	r6, [r4, #4]
 800834c:	2e00      	cmp	r6, #0
 800834e:	bfa8      	it	ge
 8008350:	6821      	ldrge	r1, [r4, #0]
 8008352:	60a6      	str	r6, [r4, #8]
 8008354:	bfa4      	itt	ge
 8008356:	f021 0104 	bicge.w	r1, r1, #4
 800835a:	6021      	strge	r1, [r4, #0]
 800835c:	b90d      	cbnz	r5, 8008362 <_printf_i+0x11a>
 800835e:	2e00      	cmp	r6, #0
 8008360:	d04d      	beq.n	80083fe <_printf_i+0x1b6>
 8008362:	4616      	mov	r6, r2
 8008364:	fbb5 f1f3 	udiv	r1, r5, r3
 8008368:	fb03 5711 	mls	r7, r3, r1, r5
 800836c:	5dc7      	ldrb	r7, [r0, r7]
 800836e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008372:	462f      	mov	r7, r5
 8008374:	42bb      	cmp	r3, r7
 8008376:	460d      	mov	r5, r1
 8008378:	d9f4      	bls.n	8008364 <_printf_i+0x11c>
 800837a:	2b08      	cmp	r3, #8
 800837c:	d10b      	bne.n	8008396 <_printf_i+0x14e>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	07df      	lsls	r7, r3, #31
 8008382:	d508      	bpl.n	8008396 <_printf_i+0x14e>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	6861      	ldr	r1, [r4, #4]
 8008388:	4299      	cmp	r1, r3
 800838a:	bfde      	ittt	le
 800838c:	2330      	movle	r3, #48	; 0x30
 800838e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008392:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008396:	1b92      	subs	r2, r2, r6
 8008398:	6122      	str	r2, [r4, #16]
 800839a:	464b      	mov	r3, r9
 800839c:	4621      	mov	r1, r4
 800839e:	4640      	mov	r0, r8
 80083a0:	f8cd a000 	str.w	sl, [sp]
 80083a4:	aa03      	add	r2, sp, #12
 80083a6:	f7ff fedf 	bl	8008168 <_printf_common>
 80083aa:	3001      	adds	r0, #1
 80083ac:	d14c      	bne.n	8008448 <_printf_i+0x200>
 80083ae:	f04f 30ff 	mov.w	r0, #4294967295
 80083b2:	b004      	add	sp, #16
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	4834      	ldr	r0, [pc, #208]	; (800848c <_printf_i+0x244>)
 80083ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083be:	680e      	ldr	r6, [r1, #0]
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80083c6:	061f      	lsls	r7, r3, #24
 80083c8:	600e      	str	r6, [r1, #0]
 80083ca:	d514      	bpl.n	80083f6 <_printf_i+0x1ae>
 80083cc:	07d9      	lsls	r1, r3, #31
 80083ce:	bf44      	itt	mi
 80083d0:	f043 0320 	orrmi.w	r3, r3, #32
 80083d4:	6023      	strmi	r3, [r4, #0]
 80083d6:	b91d      	cbnz	r5, 80083e0 <_printf_i+0x198>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	f023 0320 	bic.w	r3, r3, #32
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	2310      	movs	r3, #16
 80083e2:	e7af      	b.n	8008344 <_printf_i+0xfc>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	f043 0320 	orr.w	r3, r3, #32
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	2378      	movs	r3, #120	; 0x78
 80083ee:	4828      	ldr	r0, [pc, #160]	; (8008490 <_printf_i+0x248>)
 80083f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083f4:	e7e3      	b.n	80083be <_printf_i+0x176>
 80083f6:	065e      	lsls	r6, r3, #25
 80083f8:	bf48      	it	mi
 80083fa:	b2ad      	uxthmi	r5, r5
 80083fc:	e7e6      	b.n	80083cc <_printf_i+0x184>
 80083fe:	4616      	mov	r6, r2
 8008400:	e7bb      	b.n	800837a <_printf_i+0x132>
 8008402:	680b      	ldr	r3, [r1, #0]
 8008404:	6826      	ldr	r6, [r4, #0]
 8008406:	1d1d      	adds	r5, r3, #4
 8008408:	6960      	ldr	r0, [r4, #20]
 800840a:	600d      	str	r5, [r1, #0]
 800840c:	0635      	lsls	r5, r6, #24
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	d501      	bpl.n	8008416 <_printf_i+0x1ce>
 8008412:	6018      	str	r0, [r3, #0]
 8008414:	e002      	b.n	800841c <_printf_i+0x1d4>
 8008416:	0671      	lsls	r1, r6, #25
 8008418:	d5fb      	bpl.n	8008412 <_printf_i+0x1ca>
 800841a:	8018      	strh	r0, [r3, #0]
 800841c:	2300      	movs	r3, #0
 800841e:	4616      	mov	r6, r2
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	e7ba      	b.n	800839a <_printf_i+0x152>
 8008424:	680b      	ldr	r3, [r1, #0]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	600a      	str	r2, [r1, #0]
 800842a:	681e      	ldr	r6, [r3, #0]
 800842c:	2100      	movs	r1, #0
 800842e:	4630      	mov	r0, r6
 8008430:	6862      	ldr	r2, [r4, #4]
 8008432:	f000 fa9d 	bl	8008970 <memchr>
 8008436:	b108      	cbz	r0, 800843c <_printf_i+0x1f4>
 8008438:	1b80      	subs	r0, r0, r6
 800843a:	6060      	str	r0, [r4, #4]
 800843c:	6863      	ldr	r3, [r4, #4]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	2300      	movs	r3, #0
 8008442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008446:	e7a8      	b.n	800839a <_printf_i+0x152>
 8008448:	4632      	mov	r2, r6
 800844a:	4649      	mov	r1, r9
 800844c:	4640      	mov	r0, r8
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	47d0      	blx	sl
 8008452:	3001      	adds	r0, #1
 8008454:	d0ab      	beq.n	80083ae <_printf_i+0x166>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	079b      	lsls	r3, r3, #30
 800845a:	d413      	bmi.n	8008484 <_printf_i+0x23c>
 800845c:	68e0      	ldr	r0, [r4, #12]
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	4298      	cmp	r0, r3
 8008462:	bfb8      	it	lt
 8008464:	4618      	movlt	r0, r3
 8008466:	e7a4      	b.n	80083b2 <_printf_i+0x16a>
 8008468:	2301      	movs	r3, #1
 800846a:	4632      	mov	r2, r6
 800846c:	4649      	mov	r1, r9
 800846e:	4640      	mov	r0, r8
 8008470:	47d0      	blx	sl
 8008472:	3001      	adds	r0, #1
 8008474:	d09b      	beq.n	80083ae <_printf_i+0x166>
 8008476:	3501      	adds	r5, #1
 8008478:	68e3      	ldr	r3, [r4, #12]
 800847a:	9903      	ldr	r1, [sp, #12]
 800847c:	1a5b      	subs	r3, r3, r1
 800847e:	42ab      	cmp	r3, r5
 8008480:	dcf2      	bgt.n	8008468 <_printf_i+0x220>
 8008482:	e7eb      	b.n	800845c <_printf_i+0x214>
 8008484:	2500      	movs	r5, #0
 8008486:	f104 0619 	add.w	r6, r4, #25
 800848a:	e7f5      	b.n	8008478 <_printf_i+0x230>
 800848c:	08008ba1 	.word	0x08008ba1
 8008490:	08008bb2 	.word	0x08008bb2

08008494 <_sbrk_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	2300      	movs	r3, #0
 8008498:	4d05      	ldr	r5, [pc, #20]	; (80084b0 <_sbrk_r+0x1c>)
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	f7f8 fb18 	bl	8000ad4 <_sbrk>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_sbrk_r+0x1a>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_sbrk_r+0x1a>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	20001428 	.word	0x20001428

080084b4 <__sread>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	460c      	mov	r4, r1
 80084b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084bc:	f000 fabe 	bl	8008a3c <_read_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	bfab      	itete	ge
 80084c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084c6:	89a3      	ldrhlt	r3, [r4, #12]
 80084c8:	181b      	addge	r3, r3, r0
 80084ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ce:	bfac      	ite	ge
 80084d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084d2:	81a3      	strhlt	r3, [r4, #12]
 80084d4:	bd10      	pop	{r4, pc}

080084d6 <__swrite>:
 80084d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084da:	461f      	mov	r7, r3
 80084dc:	898b      	ldrh	r3, [r1, #12]
 80084de:	4605      	mov	r5, r0
 80084e0:	05db      	lsls	r3, r3, #23
 80084e2:	460c      	mov	r4, r1
 80084e4:	4616      	mov	r6, r2
 80084e6:	d505      	bpl.n	80084f4 <__swrite+0x1e>
 80084e8:	2302      	movs	r3, #2
 80084ea:	2200      	movs	r2, #0
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	f000 f9c8 	bl	8008884 <_lseek_r>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	4632      	mov	r2, r6
 80084f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	4628      	mov	r0, r5
 8008500:	463b      	mov	r3, r7
 8008502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	f000 b869 	b.w	80085e0 <_write_r>

0800850e <__sseek>:
 800850e:	b510      	push	{r4, lr}
 8008510:	460c      	mov	r4, r1
 8008512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008516:	f000 f9b5 	bl	8008884 <_lseek_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	bf15      	itete	ne
 8008520:	6560      	strne	r0, [r4, #84]	; 0x54
 8008522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strheq	r3, [r4, #12]
 800852c:	bf18      	it	ne
 800852e:	81a3      	strhne	r3, [r4, #12]
 8008530:	bd10      	pop	{r4, pc}

08008532 <__sclose>:
 8008532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008536:	f000 b8d3 	b.w	80086e0 <_close_r>
	...

0800853c <__swbuf_r>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	460e      	mov	r6, r1
 8008540:	4614      	mov	r4, r2
 8008542:	4605      	mov	r5, r0
 8008544:	b118      	cbz	r0, 800854e <__swbuf_r+0x12>
 8008546:	6983      	ldr	r3, [r0, #24]
 8008548:	b90b      	cbnz	r3, 800854e <__swbuf_r+0x12>
 800854a:	f7ff fbbb 	bl	8007cc4 <__sinit>
 800854e:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <__swbuf_r+0x98>)
 8008550:	429c      	cmp	r4, r3
 8008552:	d12b      	bne.n	80085ac <__swbuf_r+0x70>
 8008554:	686c      	ldr	r4, [r5, #4]
 8008556:	69a3      	ldr	r3, [r4, #24]
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	071a      	lsls	r2, r3, #28
 800855e:	d52f      	bpl.n	80085c0 <__swbuf_r+0x84>
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	b36b      	cbz	r3, 80085c0 <__swbuf_r+0x84>
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	6820      	ldr	r0, [r4, #0]
 8008568:	b2f6      	uxtb	r6, r6
 800856a:	1ac0      	subs	r0, r0, r3
 800856c:	6963      	ldr	r3, [r4, #20]
 800856e:	4637      	mov	r7, r6
 8008570:	4283      	cmp	r3, r0
 8008572:	dc04      	bgt.n	800857e <__swbuf_r+0x42>
 8008574:	4621      	mov	r1, r4
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f948 	bl	800880c <_fflush_r>
 800857c:	bb30      	cbnz	r0, 80085cc <__swbuf_r+0x90>
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	3001      	adds	r0, #1
 8008582:	3b01      	subs	r3, #1
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	701e      	strb	r6, [r3, #0]
 800858e:	6963      	ldr	r3, [r4, #20]
 8008590:	4283      	cmp	r3, r0
 8008592:	d004      	beq.n	800859e <__swbuf_r+0x62>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	07db      	lsls	r3, r3, #31
 8008598:	d506      	bpl.n	80085a8 <__swbuf_r+0x6c>
 800859a:	2e0a      	cmp	r6, #10
 800859c:	d104      	bne.n	80085a8 <__swbuf_r+0x6c>
 800859e:	4621      	mov	r1, r4
 80085a0:	4628      	mov	r0, r5
 80085a2:	f000 f933 	bl	800880c <_fflush_r>
 80085a6:	b988      	cbnz	r0, 80085cc <__swbuf_r+0x90>
 80085a8:	4638      	mov	r0, r7
 80085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <__swbuf_r+0x9c>)
 80085ae:	429c      	cmp	r4, r3
 80085b0:	d101      	bne.n	80085b6 <__swbuf_r+0x7a>
 80085b2:	68ac      	ldr	r4, [r5, #8]
 80085b4:	e7cf      	b.n	8008556 <__swbuf_r+0x1a>
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <__swbuf_r+0xa0>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	bf08      	it	eq
 80085bc:	68ec      	ldreq	r4, [r5, #12]
 80085be:	e7ca      	b.n	8008556 <__swbuf_r+0x1a>
 80085c0:	4621      	mov	r1, r4
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f81e 	bl	8008604 <__swsetup_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d0cb      	beq.n	8008564 <__swbuf_r+0x28>
 80085cc:	f04f 37ff 	mov.w	r7, #4294967295
 80085d0:	e7ea      	b.n	80085a8 <__swbuf_r+0x6c>
 80085d2:	bf00      	nop
 80085d4:	08008b50 	.word	0x08008b50
 80085d8:	08008b70 	.word	0x08008b70
 80085dc:	08008b30 	.word	0x08008b30

080085e0 <_write_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	2200      	movs	r2, #0
 80085ea:	4d05      	ldr	r5, [pc, #20]	; (8008600 <_write_r+0x20>)
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f7f8 fa23 	bl	8000a3a <_write>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_write_r+0x1e>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_write_r+0x1e>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20001428 	.word	0x20001428

08008604 <__swsetup_r>:
 8008604:	4b32      	ldr	r3, [pc, #200]	; (80086d0 <__swsetup_r+0xcc>)
 8008606:	b570      	push	{r4, r5, r6, lr}
 8008608:	681d      	ldr	r5, [r3, #0]
 800860a:	4606      	mov	r6, r0
 800860c:	460c      	mov	r4, r1
 800860e:	b125      	cbz	r5, 800861a <__swsetup_r+0x16>
 8008610:	69ab      	ldr	r3, [r5, #24]
 8008612:	b913      	cbnz	r3, 800861a <__swsetup_r+0x16>
 8008614:	4628      	mov	r0, r5
 8008616:	f7ff fb55 	bl	8007cc4 <__sinit>
 800861a:	4b2e      	ldr	r3, [pc, #184]	; (80086d4 <__swsetup_r+0xd0>)
 800861c:	429c      	cmp	r4, r3
 800861e:	d10f      	bne.n	8008640 <__swsetup_r+0x3c>
 8008620:	686c      	ldr	r4, [r5, #4]
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008628:	0719      	lsls	r1, r3, #28
 800862a:	d42c      	bmi.n	8008686 <__swsetup_r+0x82>
 800862c:	06dd      	lsls	r5, r3, #27
 800862e:	d411      	bmi.n	8008654 <__swsetup_r+0x50>
 8008630:	2309      	movs	r3, #9
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008638:	f04f 30ff 	mov.w	r0, #4294967295
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	e03e      	b.n	80086be <__swsetup_r+0xba>
 8008640:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <__swsetup_r+0xd4>)
 8008642:	429c      	cmp	r4, r3
 8008644:	d101      	bne.n	800864a <__swsetup_r+0x46>
 8008646:	68ac      	ldr	r4, [r5, #8]
 8008648:	e7eb      	b.n	8008622 <__swsetup_r+0x1e>
 800864a:	4b24      	ldr	r3, [pc, #144]	; (80086dc <__swsetup_r+0xd8>)
 800864c:	429c      	cmp	r4, r3
 800864e:	bf08      	it	eq
 8008650:	68ec      	ldreq	r4, [r5, #12]
 8008652:	e7e6      	b.n	8008622 <__swsetup_r+0x1e>
 8008654:	0758      	lsls	r0, r3, #29
 8008656:	d512      	bpl.n	800867e <__swsetup_r+0x7a>
 8008658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800865a:	b141      	cbz	r1, 800866e <__swsetup_r+0x6a>
 800865c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008660:	4299      	cmp	r1, r3
 8008662:	d002      	beq.n	800866a <__swsetup_r+0x66>
 8008664:	4630      	mov	r0, r6
 8008666:	f000 f99d 	bl	80089a4 <_free_r>
 800866a:	2300      	movs	r3, #0
 800866c:	6363      	str	r3, [r4, #52]	; 0x34
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	2300      	movs	r3, #0
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f043 0308 	orr.w	r3, r3, #8
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	b94b      	cbnz	r3, 800869e <__swsetup_r+0x9a>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008694:	d003      	beq.n	800869e <__swsetup_r+0x9a>
 8008696:	4621      	mov	r1, r4
 8008698:	4630      	mov	r0, r6
 800869a:	f000 f929 	bl	80088f0 <__smakebuf_r>
 800869e:	89a0      	ldrh	r0, [r4, #12]
 80086a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086a4:	f010 0301 	ands.w	r3, r0, #1
 80086a8:	d00a      	beq.n	80086c0 <__swsetup_r+0xbc>
 80086aa:	2300      	movs	r3, #0
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	6963      	ldr	r3, [r4, #20]
 80086b0:	425b      	negs	r3, r3
 80086b2:	61a3      	str	r3, [r4, #24]
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	b943      	cbnz	r3, 80086ca <__swsetup_r+0xc6>
 80086b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086bc:	d1ba      	bne.n	8008634 <__swsetup_r+0x30>
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	0781      	lsls	r1, r0, #30
 80086c2:	bf58      	it	pl
 80086c4:	6963      	ldrpl	r3, [r4, #20]
 80086c6:	60a3      	str	r3, [r4, #8]
 80086c8:	e7f4      	b.n	80086b4 <__swsetup_r+0xb0>
 80086ca:	2000      	movs	r0, #0
 80086cc:	e7f7      	b.n	80086be <__swsetup_r+0xba>
 80086ce:	bf00      	nop
 80086d0:	2000017c 	.word	0x2000017c
 80086d4:	08008b50 	.word	0x08008b50
 80086d8:	08008b70 	.word	0x08008b70
 80086dc:	08008b30 	.word	0x08008b30

080086e0 <_close_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	2300      	movs	r3, #0
 80086e4:	4d05      	ldr	r5, [pc, #20]	; (80086fc <_close_r+0x1c>)
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7f8 f9c1 	bl	8000a72 <_close>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_close_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_close_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20001428 	.word	0x20001428

08008700 <__sflush_r>:
 8008700:	898a      	ldrh	r2, [r1, #12]
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	4605      	mov	r5, r0
 8008708:	0710      	lsls	r0, r2, #28
 800870a:	460c      	mov	r4, r1
 800870c:	d458      	bmi.n	80087c0 <__sflush_r+0xc0>
 800870e:	684b      	ldr	r3, [r1, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc05      	bgt.n	8008720 <__sflush_r+0x20>
 8008714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	dc02      	bgt.n	8008720 <__sflush_r+0x20>
 800871a:	2000      	movs	r0, #0
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008722:	2e00      	cmp	r6, #0
 8008724:	d0f9      	beq.n	800871a <__sflush_r+0x1a>
 8008726:	2300      	movs	r3, #0
 8008728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800872c:	682f      	ldr	r7, [r5, #0]
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	d032      	beq.n	8008798 <__sflush_r+0x98>
 8008732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	075a      	lsls	r2, r3, #29
 8008738:	d505      	bpl.n	8008746 <__sflush_r+0x46>
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	1ac0      	subs	r0, r0, r3
 800873e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008740:	b10b      	cbz	r3, 8008746 <__sflush_r+0x46>
 8008742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008744:	1ac0      	subs	r0, r0, r3
 8008746:	2300      	movs	r3, #0
 8008748:	4602      	mov	r2, r0
 800874a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874c:	4628      	mov	r0, r5
 800874e:	6a21      	ldr	r1, [r4, #32]
 8008750:	47b0      	blx	r6
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	d106      	bne.n	8008766 <__sflush_r+0x66>
 8008758:	6829      	ldr	r1, [r5, #0]
 800875a:	291d      	cmp	r1, #29
 800875c:	d82c      	bhi.n	80087b8 <__sflush_r+0xb8>
 800875e:	4a2a      	ldr	r2, [pc, #168]	; (8008808 <__sflush_r+0x108>)
 8008760:	40ca      	lsrs	r2, r1
 8008762:	07d6      	lsls	r6, r2, #31
 8008764:	d528      	bpl.n	80087b8 <__sflush_r+0xb8>
 8008766:	2200      	movs	r2, #0
 8008768:	6062      	str	r2, [r4, #4]
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	04d9      	lsls	r1, r3, #19
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	d504      	bpl.n	800877c <__sflush_r+0x7c>
 8008772:	1c42      	adds	r2, r0, #1
 8008774:	d101      	bne.n	800877a <__sflush_r+0x7a>
 8008776:	682b      	ldr	r3, [r5, #0]
 8008778:	b903      	cbnz	r3, 800877c <__sflush_r+0x7c>
 800877a:	6560      	str	r0, [r4, #84]	; 0x54
 800877c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800877e:	602f      	str	r7, [r5, #0]
 8008780:	2900      	cmp	r1, #0
 8008782:	d0ca      	beq.n	800871a <__sflush_r+0x1a>
 8008784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008788:	4299      	cmp	r1, r3
 800878a:	d002      	beq.n	8008792 <__sflush_r+0x92>
 800878c:	4628      	mov	r0, r5
 800878e:	f000 f909 	bl	80089a4 <_free_r>
 8008792:	2000      	movs	r0, #0
 8008794:	6360      	str	r0, [r4, #52]	; 0x34
 8008796:	e7c1      	b.n	800871c <__sflush_r+0x1c>
 8008798:	6a21      	ldr	r1, [r4, #32]
 800879a:	2301      	movs	r3, #1
 800879c:	4628      	mov	r0, r5
 800879e:	47b0      	blx	r6
 80087a0:	1c41      	adds	r1, r0, #1
 80087a2:	d1c7      	bne.n	8008734 <__sflush_r+0x34>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0c4      	beq.n	8008734 <__sflush_r+0x34>
 80087aa:	2b1d      	cmp	r3, #29
 80087ac:	d001      	beq.n	80087b2 <__sflush_r+0xb2>
 80087ae:	2b16      	cmp	r3, #22
 80087b0:	d101      	bne.n	80087b6 <__sflush_r+0xb6>
 80087b2:	602f      	str	r7, [r5, #0]
 80087b4:	e7b1      	b.n	800871a <__sflush_r+0x1a>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	e7ad      	b.n	800871c <__sflush_r+0x1c>
 80087c0:	690f      	ldr	r7, [r1, #16]
 80087c2:	2f00      	cmp	r7, #0
 80087c4:	d0a9      	beq.n	800871a <__sflush_r+0x1a>
 80087c6:	0793      	lsls	r3, r2, #30
 80087c8:	bf18      	it	ne
 80087ca:	2300      	movne	r3, #0
 80087cc:	680e      	ldr	r6, [r1, #0]
 80087ce:	bf08      	it	eq
 80087d0:	694b      	ldreq	r3, [r1, #20]
 80087d2:	eba6 0807 	sub.w	r8, r6, r7
 80087d6:	600f      	str	r7, [r1, #0]
 80087d8:	608b      	str	r3, [r1, #8]
 80087da:	f1b8 0f00 	cmp.w	r8, #0
 80087de:	dd9c      	ble.n	800871a <__sflush_r+0x1a>
 80087e0:	4643      	mov	r3, r8
 80087e2:	463a      	mov	r2, r7
 80087e4:	4628      	mov	r0, r5
 80087e6:	6a21      	ldr	r1, [r4, #32]
 80087e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087ea:	47b0      	blx	r6
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dc06      	bgt.n	80087fe <__sflush_r+0xfe>
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	e78e      	b.n	800871c <__sflush_r+0x1c>
 80087fe:	4407      	add	r7, r0
 8008800:	eba8 0800 	sub.w	r8, r8, r0
 8008804:	e7e9      	b.n	80087da <__sflush_r+0xda>
 8008806:	bf00      	nop
 8008808:	20400001 	.word	0x20400001

0800880c <_fflush_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	690b      	ldr	r3, [r1, #16]
 8008810:	4605      	mov	r5, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b913      	cbnz	r3, 800881c <_fflush_r+0x10>
 8008816:	2500      	movs	r5, #0
 8008818:	4628      	mov	r0, r5
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	b118      	cbz	r0, 8008826 <_fflush_r+0x1a>
 800881e:	6983      	ldr	r3, [r0, #24]
 8008820:	b90b      	cbnz	r3, 8008826 <_fflush_r+0x1a>
 8008822:	f7ff fa4f 	bl	8007cc4 <__sinit>
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <_fflush_r+0x6c>)
 8008828:	429c      	cmp	r4, r3
 800882a:	d11b      	bne.n	8008864 <_fflush_r+0x58>
 800882c:	686c      	ldr	r4, [r5, #4]
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0ef      	beq.n	8008816 <_fflush_r+0xa>
 8008836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008838:	07d0      	lsls	r0, r2, #31
 800883a:	d404      	bmi.n	8008846 <_fflush_r+0x3a>
 800883c:	0599      	lsls	r1, r3, #22
 800883e:	d402      	bmi.n	8008846 <_fflush_r+0x3a>
 8008840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008842:	f7ff fadd 	bl	8007e00 <__retarget_lock_acquire_recursive>
 8008846:	4628      	mov	r0, r5
 8008848:	4621      	mov	r1, r4
 800884a:	f7ff ff59 	bl	8008700 <__sflush_r>
 800884e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008850:	4605      	mov	r5, r0
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d4e0      	bmi.n	8008818 <_fflush_r+0xc>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	059b      	lsls	r3, r3, #22
 800885a:	d4dd      	bmi.n	8008818 <_fflush_r+0xc>
 800885c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800885e:	f7ff fad0 	bl	8007e02 <__retarget_lock_release_recursive>
 8008862:	e7d9      	b.n	8008818 <_fflush_r+0xc>
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <_fflush_r+0x70>)
 8008866:	429c      	cmp	r4, r3
 8008868:	d101      	bne.n	800886e <_fflush_r+0x62>
 800886a:	68ac      	ldr	r4, [r5, #8]
 800886c:	e7df      	b.n	800882e <_fflush_r+0x22>
 800886e:	4b04      	ldr	r3, [pc, #16]	; (8008880 <_fflush_r+0x74>)
 8008870:	429c      	cmp	r4, r3
 8008872:	bf08      	it	eq
 8008874:	68ec      	ldreq	r4, [r5, #12]
 8008876:	e7da      	b.n	800882e <_fflush_r+0x22>
 8008878:	08008b50 	.word	0x08008b50
 800887c:	08008b70 	.word	0x08008b70
 8008880:	08008b30 	.word	0x08008b30

08008884 <_lseek_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	4611      	mov	r1, r2
 800888c:	2200      	movs	r2, #0
 800888e:	4d05      	ldr	r5, [pc, #20]	; (80088a4 <_lseek_r+0x20>)
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f7f8 f911 	bl	8000aba <_lseek>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_lseek_r+0x1e>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_lseek_r+0x1e>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20001428 	.word	0x20001428

080088a8 <__swhatbuf_r>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	460e      	mov	r6, r1
 80088ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b0:	4614      	mov	r4, r2
 80088b2:	2900      	cmp	r1, #0
 80088b4:	461d      	mov	r5, r3
 80088b6:	b096      	sub	sp, #88	; 0x58
 80088b8:	da07      	bge.n	80088ca <__swhatbuf_r+0x22>
 80088ba:	2300      	movs	r3, #0
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	89b3      	ldrh	r3, [r6, #12]
 80088c0:	061a      	lsls	r2, r3, #24
 80088c2:	d410      	bmi.n	80088e6 <__swhatbuf_r+0x3e>
 80088c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c8:	e00e      	b.n	80088e8 <__swhatbuf_r+0x40>
 80088ca:	466a      	mov	r2, sp
 80088cc:	f000 f8c8 	bl	8008a60 <_fstat_r>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dbf2      	blt.n	80088ba <__swhatbuf_r+0x12>
 80088d4:	9a01      	ldr	r2, [sp, #4]
 80088d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088de:	425a      	negs	r2, r3
 80088e0:	415a      	adcs	r2, r3
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	e7ee      	b.n	80088c4 <__swhatbuf_r+0x1c>
 80088e6:	2340      	movs	r3, #64	; 0x40
 80088e8:	2000      	movs	r0, #0
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	b016      	add	sp, #88	; 0x58
 80088ee:	bd70      	pop	{r4, r5, r6, pc}

080088f0 <__smakebuf_r>:
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088f4:	079d      	lsls	r5, r3, #30
 80088f6:	4606      	mov	r6, r0
 80088f8:	460c      	mov	r4, r1
 80088fa:	d507      	bpl.n	800890c <__smakebuf_r+0x1c>
 80088fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	6123      	str	r3, [r4, #16]
 8008904:	2301      	movs	r3, #1
 8008906:	6163      	str	r3, [r4, #20]
 8008908:	b002      	add	sp, #8
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	466a      	mov	r2, sp
 800890e:	ab01      	add	r3, sp, #4
 8008910:	f7ff ffca 	bl	80088a8 <__swhatbuf_r>
 8008914:	9900      	ldr	r1, [sp, #0]
 8008916:	4605      	mov	r5, r0
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff fa73 	bl	8007e04 <_malloc_r>
 800891e:	b948      	cbnz	r0, 8008934 <__smakebuf_r+0x44>
 8008920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d4ef      	bmi.n	8008908 <__smakebuf_r+0x18>
 8008928:	f023 0303 	bic.w	r3, r3, #3
 800892c:	f043 0302 	orr.w	r3, r3, #2
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	e7e3      	b.n	80088fc <__smakebuf_r+0xc>
 8008934:	4b0d      	ldr	r3, [pc, #52]	; (800896c <__smakebuf_r+0x7c>)
 8008936:	62b3      	str	r3, [r6, #40]	; 0x28
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	6020      	str	r0, [r4, #0]
 800893c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	9b00      	ldr	r3, [sp, #0]
 8008944:	6120      	str	r0, [r4, #16]
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	9b01      	ldr	r3, [sp, #4]
 800894a:	b15b      	cbz	r3, 8008964 <__smakebuf_r+0x74>
 800894c:	4630      	mov	r0, r6
 800894e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008952:	f000 f897 	bl	8008a84 <_isatty_r>
 8008956:	b128      	cbz	r0, 8008964 <__smakebuf_r+0x74>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f023 0303 	bic.w	r3, r3, #3
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	89a0      	ldrh	r0, [r4, #12]
 8008966:	4305      	orrs	r5, r0
 8008968:	81a5      	strh	r5, [r4, #12]
 800896a:	e7cd      	b.n	8008908 <__smakebuf_r+0x18>
 800896c:	08007c5d 	.word	0x08007c5d

08008970 <memchr>:
 8008970:	4603      	mov	r3, r0
 8008972:	b510      	push	{r4, lr}
 8008974:	b2c9      	uxtb	r1, r1
 8008976:	4402      	add	r2, r0
 8008978:	4293      	cmp	r3, r2
 800897a:	4618      	mov	r0, r3
 800897c:	d101      	bne.n	8008982 <memchr+0x12>
 800897e:	2000      	movs	r0, #0
 8008980:	e003      	b.n	800898a <memchr+0x1a>
 8008982:	7804      	ldrb	r4, [r0, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	428c      	cmp	r4, r1
 8008988:	d1f6      	bne.n	8008978 <memchr+0x8>
 800898a:	bd10      	pop	{r4, pc}

0800898c <__malloc_lock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_lock+0x8>)
 800898e:	f7ff ba37 	b.w	8007e00 <__retarget_lock_acquire_recursive>
 8008992:	bf00      	nop
 8008994:	20001420 	.word	0x20001420

08008998 <__malloc_unlock>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__malloc_unlock+0x8>)
 800899a:	f7ff ba32 	b.w	8007e02 <__retarget_lock_release_recursive>
 800899e:	bf00      	nop
 80089a0:	20001420 	.word	0x20001420

080089a4 <_free_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4605      	mov	r5, r0
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d043      	beq.n	8008a34 <_free_r+0x90>
 80089ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b0:	1f0c      	subs	r4, r1, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfb8      	it	lt
 80089b6:	18e4      	addlt	r4, r4, r3
 80089b8:	f7ff ffe8 	bl	800898c <__malloc_lock>
 80089bc:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <_free_r+0x94>)
 80089be:	6813      	ldr	r3, [r2, #0]
 80089c0:	4610      	mov	r0, r2
 80089c2:	b933      	cbnz	r3, 80089d2 <_free_r+0x2e>
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	6014      	str	r4, [r2, #0]
 80089c8:	4628      	mov	r0, r5
 80089ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ce:	f7ff bfe3 	b.w	8008998 <__malloc_unlock>
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	d90a      	bls.n	80089ec <_free_r+0x48>
 80089d6:	6821      	ldr	r1, [r4, #0]
 80089d8:	1862      	adds	r2, r4, r1
 80089da:	4293      	cmp	r3, r2
 80089dc:	bf01      	itttt	eq
 80089de:	681a      	ldreq	r2, [r3, #0]
 80089e0:	685b      	ldreq	r3, [r3, #4]
 80089e2:	1852      	addeq	r2, r2, r1
 80089e4:	6022      	streq	r2, [r4, #0]
 80089e6:	6063      	str	r3, [r4, #4]
 80089e8:	6004      	str	r4, [r0, #0]
 80089ea:	e7ed      	b.n	80089c8 <_free_r+0x24>
 80089ec:	461a      	mov	r2, r3
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	b10b      	cbz	r3, 80089f6 <_free_r+0x52>
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	d9fa      	bls.n	80089ec <_free_r+0x48>
 80089f6:	6811      	ldr	r1, [r2, #0]
 80089f8:	1850      	adds	r0, r2, r1
 80089fa:	42a0      	cmp	r0, r4
 80089fc:	d10b      	bne.n	8008a16 <_free_r+0x72>
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	4401      	add	r1, r0
 8008a02:	1850      	adds	r0, r2, r1
 8008a04:	4283      	cmp	r3, r0
 8008a06:	6011      	str	r1, [r2, #0]
 8008a08:	d1de      	bne.n	80089c8 <_free_r+0x24>
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4401      	add	r1, r0
 8008a10:	6011      	str	r1, [r2, #0]
 8008a12:	6053      	str	r3, [r2, #4]
 8008a14:	e7d8      	b.n	80089c8 <_free_r+0x24>
 8008a16:	d902      	bls.n	8008a1e <_free_r+0x7a>
 8008a18:	230c      	movs	r3, #12
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	e7d4      	b.n	80089c8 <_free_r+0x24>
 8008a1e:	6820      	ldr	r0, [r4, #0]
 8008a20:	1821      	adds	r1, r4, r0
 8008a22:	428b      	cmp	r3, r1
 8008a24:	bf01      	itttt	eq
 8008a26:	6819      	ldreq	r1, [r3, #0]
 8008a28:	685b      	ldreq	r3, [r3, #4]
 8008a2a:	1809      	addeq	r1, r1, r0
 8008a2c:	6021      	streq	r1, [r4, #0]
 8008a2e:	6063      	str	r3, [r4, #4]
 8008a30:	6054      	str	r4, [r2, #4]
 8008a32:	e7c9      	b.n	80089c8 <_free_r+0x24>
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	bf00      	nop
 8008a38:	20000448 	.word	0x20000448

08008a3c <_read_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	2200      	movs	r2, #0
 8008a46:	4d05      	ldr	r5, [pc, #20]	; (8008a5c <_read_r+0x20>)
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f7f7 ffd8 	bl	8000a00 <_read>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_read_r+0x1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_read_r+0x1e>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	20001428 	.word	0x20001428

08008a60 <_fstat_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	2300      	movs	r3, #0
 8008a64:	4d06      	ldr	r5, [pc, #24]	; (8008a80 <_fstat_r+0x20>)
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	602b      	str	r3, [r5, #0]
 8008a6e:	f7f8 f80b 	bl	8000a88 <_fstat>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	d102      	bne.n	8008a7c <_fstat_r+0x1c>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b103      	cbz	r3, 8008a7c <_fstat_r+0x1c>
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
 8008a7e:	bf00      	nop
 8008a80:	20001428 	.word	0x20001428

08008a84 <_isatty_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	2300      	movs	r3, #0
 8008a88:	4d05      	ldr	r5, [pc, #20]	; (8008aa0 <_isatty_r+0x1c>)
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7f8 f809 	bl	8000aa6 <_isatty>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_isatty_r+0x1a>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_isatty_r+0x1a>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20001428 	.word	0x20001428

08008aa4 <_init>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr

08008ab0 <_fini>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr
