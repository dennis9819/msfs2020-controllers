
altimeter_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a450  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f8  0800a7f8  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7f8  0800a7f8  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7f8  0800a7f8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000210  0800aa10  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  0800aa10  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e5c  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7a  00000000  00000000  0003a095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  0003ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c157  00000000  00000000  0003fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015788  00000000  00000000  0005bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e95c  00000000  00000000  000716a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d4  00000000  00000000  00100058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a548 	.word	0x0800a548

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800a548 	.word	0x0800a548

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	; 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__aeabi_d2iz>:
 8000740:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000744:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000748:	d215      	bcs.n	8000776 <__aeabi_d2iz+0x36>
 800074a:	d511      	bpl.n	8000770 <__aeabi_d2iz+0x30>
 800074c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000750:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000754:	d912      	bls.n	800077c <__aeabi_d2iz+0x3c>
 8000756:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800075a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000762:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000766:	fa23 f002 	lsr.w	r0, r3, r2
 800076a:	bf18      	it	ne
 800076c:	4240      	negne	r0, r0
 800076e:	4770      	bx	lr
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	4770      	bx	lr
 8000776:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800077a:	d105      	bne.n	8000788 <__aeabi_d2iz+0x48>
 800077c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000780:	bf08      	it	eq
 8000782:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <protoInit>:
	}
	uint8_t txBuf[] = "-ALIVE\n";
	//CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
}

void protoInit(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

	uint8_t *txBuf = malloc(32);
 8000796:	2020      	movs	r0, #32
 8000798:	f008 f8c0 	bl	800891c <malloc>
 800079c:	4603      	mov	r3, r0
 800079e:	607b      	str	r3, [r7, #4]
	sprintf(txBuf,"EV CONNECTED 0x%04x\n",device_type);
 80007a0:	2306      	movs	r3, #6
 80007a2:	461a      	mov	r2, r3
 80007a4:	490b      	ldr	r1, [pc, #44]	; (80007d4 <protoInit+0x44>)
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f008 f9a4 	bl	8008af4 <siprintf>
	CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fcd9 	bl	8000164 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f007 fca7 	bl	800810c <CDC_Transmit_FS>
	memset(&txBuf[0], 0, sizeof(txBuf));
 80007be:	2204      	movs	r2, #4
 80007c0:	2100      	movs	r1, #0
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f008 f8c0 	bl	8008948 <memset>

	//init steppers
	homeAll();
 80007c8:	f000 fdd0 	bl	800136c <homeAll>


}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	0800a570 	.word	0x0800a570

080007d8 <protoSetAlt>:

void protoSetAlt(uint8_t* Buf, uint32_t *Len){
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	466b      	mov	r3, sp
 80007e4:	461d      	mov	r5, r3
	uint32_t length = *Len -7;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b07      	subs	r3, #7
 80007ec:	617b      	str	r3, [r7, #20]
	char number[length];
 80007ee:	697c      	ldr	r4, [r7, #20]
 80007f0:	4623      	mov	r3, r4
 80007f2:	3b01      	subs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4620      	mov	r0, r4
 80007f8:	f04f 0100 	mov.w	r1, #0
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	00cb      	lsls	r3, r1, #3
 8000806:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800080a:	00c2      	lsls	r2, r0, #3
 800080c:	4620      	mov	r0, r4
 800080e:	f04f 0100 	mov.w	r1, #0
 8000812:	f04f 0200 	mov.w	r2, #0
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	00cb      	lsls	r3, r1, #3
 800081c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000820:	00c2      	lsls	r2, r0, #3
 8000822:	1de3      	adds	r3, r4, #7
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	ebad 0d03 	sub.w	sp, sp, r3
 800082c:	466b      	mov	r3, sp
 800082e:	3300      	adds	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
	long int val;
	memcpy( number, &Buf[6], length );
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3306      	adds	r3, #6
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	4619      	mov	r1, r3
 800083c:	f008 f876 	bl	800892c <memcpy>
	sscanf(number, "%d", &val);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f107 0208 	add.w	r2, r7, #8
 8000846:	4906      	ldr	r1, [pc, #24]	; (8000860 <protoSetAlt+0x88>)
 8000848:	4618      	mov	r0, r3
 800084a:	f008 f973 	bl	8008b34 <siscanf>
	inst_set_alt(val);
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f8a1 	bl	8000998 <inst_set_alt>
 8000856:	46ad      	mov	sp, r5

	//uint8_t txBuf[] = "+RT OK";
	//CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bdb0      	pop	{r4, r5, r7, pc}
 8000860:	0800a588 	.word	0x0800a588

08000864 <usb_data_rx>:
char RESP_INIT[]	= "INIT\n";
char RESP_ALT[]	= "S ALT";
char RESP_IDENT[]	= "GS IDENT\n";
char RESP_TYPE[]	= "GS TYPE\n";

void usb_data_rx(uint8_t* Buf, uint32_t *Len){
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
	if (strcmp((const char *)Buf, RESP_INIT) == 0)
 800086e:	4944      	ldr	r1, [pc, #272]	; (8000980 <usb_data_rx+0x11c>)
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fc6d 	bl	8000150 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d109      	bne.n	8000890 <usb_data_rx+0x2c>
	{
		protoInit();
 800087c:	f7ff ff88 	bl	8000790 <protoInit>
		memset(&Buf[0], 0, *Len);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f008 f85d 	bl	8008948 <memset>
		return;
 800088e:	e074      	b.n	800097a <usb_data_rx+0x116>
	}
	if (strcmp((const char *)Buf, RESP_IDENT) == 0)
 8000890:	493c      	ldr	r1, [pc, #240]	; (8000984 <usb_data_rx+0x120>)
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fc5c 	bl	8000150 <strcmp>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d11a      	bne.n	80008d4 <usb_data_rx+0x70>
	{
		uint8_t *txBuf = malloc(32);
 800089e:	2020      	movs	r0, #32
 80008a0:	f008 f83c 	bl	800891c <malloc>
 80008a4:	4603      	mov	r3, r0
 80008a6:	623b      	str	r3, [r7, #32]
		sprintf(txBuf,"+0x%04x\n+RT OK\n",0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	4937      	ldr	r1, [pc, #220]	; (8000988 <usb_data_rx+0x124>)
 80008ac:	6a38      	ldr	r0, [r7, #32]
 80008ae:	f008 f921 	bl	8008af4 <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 80008b2:	6a38      	ldr	r0, [r7, #32]
 80008b4:	f7ff fc56 	bl	8000164 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	6a38      	ldr	r0, [r7, #32]
 80008c0:	f007 fc24 	bl	800810c <CDC_Transmit_FS>
		memset(&Buf[0], 0, *Len);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f008 f83b 	bl	8008948 <memset>
		return;
 80008d2:	e052      	b.n	800097a <usb_data_rx+0x116>
	}
	if (strcmp((const char *)Buf, RESP_TYPE) == 0)
 80008d4:	492d      	ldr	r1, [pc, #180]	; (800098c <usb_data_rx+0x128>)
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fc3a 	bl	8000150 <strcmp>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d11b      	bne.n	800091a <usb_data_rx+0xb6>
	{
		uint8_t *txBuf = malloc(32);
 80008e2:	2020      	movs	r0, #32
 80008e4:	f008 f81a 	bl	800891c <malloc>
 80008e8:	4603      	mov	r3, r0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(txBuf,"+0x%04x\n+RT OK\n",device_type);
 80008ec:	2306      	movs	r3, #6
 80008ee:	461a      	mov	r2, r3
 80008f0:	4925      	ldr	r1, [pc, #148]	; (8000988 <usb_data_rx+0x124>)
 80008f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008f4:	f008 f8fe 	bl	8008af4 <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 80008f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008fa:	f7ff fc33 	bl	8000164 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29b      	uxth	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000906:	f007 fc01 	bl	800810c <CDC_Transmit_FS>
		memset(&Buf[0], 0, *Len);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f008 f818 	bl	8008948 <memset>
		return;
 8000918:	e02f      	b.n	800097a <usb_data_rx+0x116>
	}
	if (strncmp((const char *)Buf, RESP_ALT,5) == 0)
 800091a:	2205      	movs	r2, #5
 800091c:	491c      	ldr	r1, [pc, #112]	; (8000990 <usb_data_rx+0x12c>)
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f008 f977 	bl	8008c12 <strncmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10b      	bne.n	8000942 <usb_data_rx+0xde>
	{
		protoSetAlt(Buf,Len);
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff53 	bl	80007d8 <protoSetAlt>
		memset(&Buf[0], 0, *Len);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f008 f804 	bl	8008948 <memset>
		return;
 8000940:	e01b      	b.n	800097a <usb_data_rx+0x116>
	}
	uint8_t txBuf[] = "-RT INVALID_COMMAND";
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <usb_data_rx+0x130>)
 8000944:	f107 040c 	add.w	r4, r7, #12
 8000948:	461d      	mov	r5, r3
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	6023      	str	r3, [r4, #0]
	memset(&Buf[0], 0, *Len);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f007 fff4 	bl	8008948 <memset>
	CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fbfd 	bl	8000164 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f007 fbc9 	bl	800810c <CDC_Transmit_FS>
}
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bdb0      	pop	{r4, r5, r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000010 	.word	0x20000010
 8000988:	0800a58c 	.word	0x0800a58c
 800098c:	2000001c 	.word	0x2000001c
 8000990:	20000008 	.word	0x20000008
 8000994:	0800a59c 	.word	0x0800a59c

08000998 <inst_set_alt>:

inst_set_qnh(float val){
	INST_QNH_VAL = val;
}

inst_set_alt(long int val){
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	INST_ALT_VAL = val;
 80009a0:	4a33      	ldr	r2, [pc, #204]	; (8000a70 <inst_set_alt+0xd8>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]


	long int req_steps_001 = val * step_calib_001;
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fe60 	bl	800066c <__aeabi_i2d>
 80009ac:	a32a      	add	r3, pc, #168	; (adr r3, 8000a58 <inst_set_alt+0xc0>)
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	f7ff fbdf 	bl	8000174 <__aeabi_dmul>
 80009b6:	4602      	mov	r2, r0
 80009b8:	460b      	mov	r3, r1
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	f7ff febf 	bl	8000740 <__aeabi_d2iz>
 80009c2:	4603      	mov	r3, r0
 80009c4:	617b      	str	r3, [r7, #20]
	long int req_steps_010 = val * step_calib_010;
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe50 	bl	800066c <__aeabi_i2d>
 80009cc:	a324      	add	r3, pc, #144	; (adr r3, 8000a60 <inst_set_alt+0xc8>)
 80009ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d2:	f7ff fbcf 	bl	8000174 <__aeabi_dmul>
 80009d6:	4602      	mov	r2, r0
 80009d8:	460b      	mov	r3, r1
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	f7ff feaf 	bl	8000740 <__aeabi_d2iz>
 80009e2:	4603      	mov	r3, r0
 80009e4:	613b      	str	r3, [r7, #16]
	long int req_steps_100 = val * step_calib_100;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fe40 	bl	800066c <__aeabi_i2d>
 80009ec:	a31e      	add	r3, pc, #120	; (adr r3, 8000a68 <inst_set_alt+0xd0>)
 80009ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f2:	f7ff fbbf 	bl	8000174 <__aeabi_dmul>
 80009f6:	4602      	mov	r2, r0
 80009f8:	460b      	mov	r3, r1
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	f7ff fe9f 	bl	8000740 <__aeabi_d2iz>
 8000a02:	4603      	mov	r3, r0
 8000a04:	60fb      	str	r3, [r7, #12]

	moveStepper(0,req_steps_001-STEPS_001_CURR);
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <inst_set_alt+0xdc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f9e5 	bl	8000de0 <moveStepper>
	moveStepper(2,(req_steps_010-STEPS_010_CURR) * (-1));
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <inst_set_alt+0xe0>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2002      	movs	r0, #2
 8000a22:	f000 f9dd 	bl	8000de0 <moveStepper>
	moveStepper(3,(req_steps_100-STEPS_100_CURR) * (-1));
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <inst_set_alt+0xe4>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f9d5 	bl	8000de0 <moveStepper>

	STEPS_001_CURR = req_steps_001;
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <inst_set_alt+0xdc>)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	6013      	str	r3, [r2, #0]
	STEPS_010_CURR = req_steps_010;
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <inst_set_alt+0xe0>)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	6013      	str	r3, [r2, #0]
	STEPS_100_CURR = req_steps_100;
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <inst_set_alt+0xe4>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6013      	str	r3, [r2, #0]

	printf("debug");
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <inst_set_alt+0xe8>)
 8000a4a:	f008 f82b 	bl	8008aa4 <iprintf>
}
 8000a4e:	bf00      	nop
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	93f819ab 	.word	0x93f819ab
 8000a5c:	4010771e 	.word	0x4010771e
 8000a60:	ecc02911 	.word	0xecc02911
 8000a64:	3fda5830 	.word	0x3fda5830
 8000a68:	570020da 	.word	0x570020da
 8000a6c:	3fa5135a 	.word	0x3fa5135a
 8000a70:	2000022c 	.word	0x2000022c
 8000a74:	20000238 	.word	0x20000238
 8000a78:	20000234 	.word	0x20000234
 8000a7c:	20000230 	.word	0x20000230
 8000a80:	0800a5b0 	.word	0x0800a5b0

08000a84 <USB_DEVICE_MasterHardReset>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void USB_DEVICE_MasterHardReset(void)


{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0


    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <USB_DEVICE_MasterHardReset+0x40>)
 8000aa2:	f001 f843 	bl	8001b2c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <USB_DEVICE_MasterHardReset+0x40>)
 8000aae:	f001 f9d8 	bl	8001e62 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab6:	f000 ff07 	bl	80018c8 <HAL_Delay>

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 fe9a 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f832 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 f8dc 	bl	8000c90 <MX_GPIO_Init>
  USB_DEVICE_MasterHardReset();
 8000ad8:	f7ff ffd4 	bl	8000a84 <USB_DEVICE_MasterHardReset>
  MX_USB_DEVICE_Init();
 8000adc:	f007 fa40 	bl	8007f60 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ae0:	f000 f886 	bl	8000bf0 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(200);
 8000ae4:	20c8      	movs	r0, #200	; 0xc8
 8000ae6:	f000 feef 	bl	80018c8 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aee:	4802      	ldr	r0, [pc, #8]	; (8000af8 <main+0x30>)
 8000af0:	f001 f9cf 	bl	8001e92 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000af4:	e7f6      	b.n	8000ae4 <main+0x1c>
 8000af6:	bf00      	nop
 8000af8:	40011000 	.word	0x40011000

08000afc <HAL_TIM_PeriodElapsedCallback>:

uint16_t cdc_isr_prescaler = 1600;
uint16_t cdc_isr_timer = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	stepperServiceRoutine();
 8000b04:	f000 f9aa 	bl	8000e5c <stepperServiceRoutine>

	cdc_isr_timer ++;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b12:	801a      	strh	r2, [r3, #0]
	if (cdc_isr_timer == cdc_isr_prescaler){
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b16:	881a      	ldrh	r2, [r3, #0]
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d102      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x2a>
		cdc_isr_timer = 0;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	801a      	strh	r2, [r3, #0]
		//heartbeatISR();
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000023c 	.word	0x2000023c
 8000b34:	20000026 	.word	0x20000026

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b42:	2228      	movs	r2, #40	; 0x28
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fefe 	bl	8008948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 fd2a 	bl	80035e8 <HAL_RCC_OscConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b9a:	f000 f91b 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 ff94 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bc6:	f000 f905 	bl	8000dd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 f8ee 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000be2:	f000 f8f7 	bl	8000dd4 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	; 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c16:	220a      	movs	r2, #10
 8000c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c36:	f003 f975 	bl	8003f24 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c40:	f000 f8c8 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c52:	f003 fb11 	bl	8004278 <HAL_TIM_ConfigClockSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c5c:	f000 f8ba 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c6e:	f003 fce3 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 f8ac 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <MX_TIM2_Init+0x9c>)
 8000c7e:	f003 f9a1 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000494 	.word	0x20000494

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a46      	ldr	r2, [pc, #280]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b44      	ldr	r3, [pc, #272]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0320 	and.w	r3, r3, #32
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a3a      	ldr	r2, [pc, #232]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <MX_GPIO_Init+0x134>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	482f      	ldr	r0, [pc, #188]	; (8000dc8 <MX_GPIO_Init+0x138>)
 8000d0c:	f001 f8a9 	bl	8001e62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 8000d10:	2200      	movs	r2, #0
 8000d12:	21ff      	movs	r1, #255	; 0xff
 8000d14:	482d      	ldr	r0, [pc, #180]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000d16:	f001 f8a4 	bl	8001e62 <HAL_GPIO_WritePin>
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f24f 11e0 	movw	r1, #61920	; 0xf1e0
 8000d20:	482b      	ldr	r0, [pc, #172]	; (8000dd0 <MX_GPIO_Init+0x140>)
 8000d22:	f001 f89e 	bl	8001e62 <HAL_GPIO_WritePin>
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0x138>)
 8000d40:	f000 fef4 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_A1_Pin M3_A2_Pin M3_B1_Pin M3_B2_Pin
                           M4_A1_Pin M4_A2_Pin M4_B1_Pin M4_B2_Pin */
  GPIO_InitStruct.Pin = M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 8000d44:	23ff      	movs	r3, #255	; 0xff
 8000d46:	613b      	str	r3, [r7, #16]
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000d5c:	f000 fee6 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A1_Pin M1_A2_Pin M1_B1_Pin M1_B2_Pin
                           M2_A1_Pin M2_A2_Pin M2_B1_Pin M2_B2_Pin */
  GPIO_InitStruct.Pin = M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 8000d60:	f24f 13e0 	movw	r3, #61920	; 0xf1e0
 8000d64:	613b      	str	r3, [r7, #16]
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <MX_GPIO_Init+0x140>)
 8000d7a:	f000 fed7 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin  */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000d98:	f000 fec8 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_2_Pin HAL_3_Pin HAL_4_Pin HAL_1_Pin */
  GPIO_InitStruct.Pin = HAL_3_Pin|HAL_4_Pin|HAL_1_Pin|HAL_2_Pin;
 8000d9c:	f640 6302 	movw	r3, #3586	; 0xe02
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_GPIO_Init+0x140>)
 8000db6:	f000 feb9 	bl	8001b2c <HAL_GPIO_Init>

}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <moveStepper>:

int dly_step = 10;

int homing = 0;

void moveStepper(int id, int steps) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d827      	bhi.n	8000e40 <moveStepper+0x60>
 8000df0:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <moveStepper+0x18>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000e09 	.word	0x08000e09
 8000dfc:	08000e17 	.word	0x08000e17
 8000e00:	08000e25 	.word	0x08000e25
 8000e04:	08000e33 	.word	0x08000e33
	switch(id){
		case 0: stepper_1_change += steps; break;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <moveStepper+0x6c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <moveStepper+0x6c>)
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e014      	b.n	8000e40 <moveStepper+0x60>
		case 1: stepper_2_change += steps; break;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <moveStepper+0x70>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <moveStepper+0x70>)
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e00d      	b.n	8000e40 <moveStepper+0x60>
		case 2: stepper_3_change += steps; break;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <moveStepper+0x74>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <moveStepper+0x74>)
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e006      	b.n	8000e40 <moveStepper+0x60>
		case 3: stepper_4_change += steps; break;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <moveStepper+0x78>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <moveStepper+0x78>)
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	bf00      	nop
	}
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000240 	.word	0x20000240
 8000e50:	20000244 	.word	0x20000244
 8000e54:	20000248 	.word	0x20000248
 8000e58:	2000024c 	.word	0x2000024c

08000e5c <stepperServiceRoutine>:

void stepperServiceRoutine(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	if (homing > 0){
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <stepperServiceRoutine+0x1c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	dd02      	ble.n	8000e6e <stepperServiceRoutine+0x12>
		homeISR();
 8000e68:	f000 f92c 	bl	80010c4 <homeISR>
	}else{
		doStepISR();
	}

}
 8000e6c:	e001      	b.n	8000e72 <stepperServiceRoutine+0x16>
		doStepISR();
 8000e6e:	f000 f805 	bl	8000e7c <doStepISR>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000260 	.word	0x20000260

08000e7c <doStepISR>:

void doStepISR(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af02      	add	r7, sp, #8
	if (stepper_1_change > 0){
 8000e82:	4b86      	ldr	r3, [pc, #536]	; (800109c <doStepISR+0x220>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dd1f      	ble.n	8000eca <doStepISR+0x4e>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <doStepISR+0x224>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea2:	4880      	ldr	r0, [pc, #512]	; (80010a4 <doStepISR+0x228>)
 8000ea4:	f000 fa70 	bl	8001388 <doStep>
		stepper_1_change --;
 8000ea8:	4b7c      	ldr	r3, [pc, #496]	; (800109c <doStepISR+0x220>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a7b      	ldr	r2, [pc, #492]	; (800109c <doStepISR+0x220>)
 8000eb0:	6013      	str	r3, [r2, #0]
		stepper_1_state ++;
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <doStepISR+0x224>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a79      	ldr	r2, [pc, #484]	; (80010a0 <doStepISR+0x224>)
 8000eba:	6013      	str	r3, [r2, #0]
		if (stepper_1_state == 8){stepper_1_state = 0;}
 8000ebc:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <doStepISR+0x224>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d102      	bne.n	8000eca <doStepISR+0x4e>
 8000ec4:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <doStepISR+0x224>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
	}
	if (stepper_1_change < 0){
 8000eca:	4b74      	ldr	r3, [pc, #464]	; (800109c <doStepISR+0x220>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da1f      	bge.n	8000f12 <doStepISR+0x96>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <doStepISR+0x224>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	486e      	ldr	r0, [pc, #440]	; (80010a4 <doStepISR+0x228>)
 8000eec:	f000 fa4c 	bl	8001388 <doStep>
		stepper_1_change ++;
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <doStepISR+0x220>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a69      	ldr	r2, [pc, #420]	; (800109c <doStepISR+0x220>)
 8000ef8:	6013      	str	r3, [r2, #0]
		stepper_1_state --;
 8000efa:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <doStepISR+0x224>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <doStepISR+0x224>)
 8000f02:	6013      	str	r3, [r2, #0]
		if (stepper_1_state < 0){stepper_1_state = 7;}
 8000f04:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <doStepISR+0x224>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da02      	bge.n	8000f12 <doStepISR+0x96>
 8000f0c:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <doStepISR+0x224>)
 8000f0e:	2207      	movs	r2, #7
 8000f10:	601a      	str	r2, [r3, #0]
	}

	if (stepper_2_change > 0){
 8000f12:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <doStepISR+0x22c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dd1c      	ble.n	8000f54 <doStepISR+0xd8>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 8000f1a:	4b64      	ldr	r3, [pc, #400]	; (80010ac <doStepISR+0x230>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	485d      	ldr	r0, [pc, #372]	; (80010a4 <doStepISR+0x228>)
 8000f2e:	f000 fa2b 	bl	8001388 <doStep>
		stepper_2_change --;
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <doStepISR+0x22c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a5b      	ldr	r2, [pc, #364]	; (80010a8 <doStepISR+0x22c>)
 8000f3a:	6013      	str	r3, [r2, #0]
		stepper_2_state ++;
 8000f3c:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <doStepISR+0x230>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a5a      	ldr	r2, [pc, #360]	; (80010ac <doStepISR+0x230>)
 8000f44:	6013      	str	r3, [r2, #0]
		if (stepper_2_state == 8){stepper_2_state = 0;}
 8000f46:	4b59      	ldr	r3, [pc, #356]	; (80010ac <doStepISR+0x230>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d102      	bne.n	8000f54 <doStepISR+0xd8>
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <doStepISR+0x230>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
	}
	if (stepper_2_change < 0){
 8000f54:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <doStepISR+0x22c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da1c      	bge.n	8000f96 <doStepISR+0x11a>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 8000f5c:	4b53      	ldr	r3, [pc, #332]	; (80010ac <doStepISR+0x230>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	484d      	ldr	r0, [pc, #308]	; (80010a4 <doStepISR+0x228>)
 8000f70:	f000 fa0a 	bl	8001388 <doStep>
		stepper_2_change ++;
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <doStepISR+0x22c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <doStepISR+0x22c>)
 8000f7c:	6013      	str	r3, [r2, #0]
		stepper_2_state --;
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <doStepISR+0x230>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <doStepISR+0x230>)
 8000f86:	6013      	str	r3, [r2, #0]
		if (stepper_2_state < 0){stepper_2_state = 7;}
 8000f88:	4b48      	ldr	r3, [pc, #288]	; (80010ac <doStepISR+0x230>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da02      	bge.n	8000f96 <doStepISR+0x11a>
 8000f90:	4b46      	ldr	r3, [pc, #280]	; (80010ac <doStepISR+0x230>)
 8000f92:	2207      	movs	r2, #7
 8000f94:	601a      	str	r2, [r3, #0]
	}

	if (stepper_3_change > 0){
 8000f96:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <doStepISR+0x234>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	dd1b      	ble.n	8000fd6 <doStepISR+0x15a>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <doStepISR+0x238>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2304      	movs	r3, #4
 8000faa:	2202      	movs	r2, #2
 8000fac:	2101      	movs	r1, #1
 8000fae:	4842      	ldr	r0, [pc, #264]	; (80010b8 <doStepISR+0x23c>)
 8000fb0:	f000 f9ea 	bl	8001388 <doStep>
		stepper_3_change --;
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <doStepISR+0x234>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <doStepISR+0x234>)
 8000fbc:	6013      	str	r3, [r2, #0]
		stepper_3_state ++;
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <doStepISR+0x238>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a3b      	ldr	r2, [pc, #236]	; (80010b4 <doStepISR+0x238>)
 8000fc6:	6013      	str	r3, [r2, #0]
		if (stepper_3_state == 8){stepper_3_state = 0;}
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <doStepISR+0x238>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d102      	bne.n	8000fd6 <doStepISR+0x15a>
 8000fd0:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <doStepISR+0x238>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
	}
	if (stepper_3_change < 0){
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <doStepISR+0x234>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da1b      	bge.n	8001016 <doStepISR+0x19a>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin, M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 8000fde:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <doStepISR+0x238>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2304      	movs	r3, #4
 8000fea:	2202      	movs	r2, #2
 8000fec:	2101      	movs	r1, #1
 8000fee:	4832      	ldr	r0, [pc, #200]	; (80010b8 <doStepISR+0x23c>)
 8000ff0:	f000 f9ca 	bl	8001388 <doStep>
		stepper_3_change ++;
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <doStepISR+0x234>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <doStepISR+0x234>)
 8000ffc:	6013      	str	r3, [r2, #0]
		stepper_3_state --;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <doStepISR+0x238>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <doStepISR+0x238>)
 8001006:	6013      	str	r3, [r2, #0]
		if (stepper_3_state < 0){stepper_3_state = 7;}
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <doStepISR+0x238>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	da02      	bge.n	8001016 <doStepISR+0x19a>
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <doStepISR+0x238>)
 8001012:	2207      	movs	r2, #7
 8001014:	601a      	str	r2, [r3, #0]
	}

	if (stepper_4_change > 0){
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <doStepISR+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	dd1b      	ble.n	8001056 <doStepISR+0x1da>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <doStepISR+0x244>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	2220      	movs	r2, #32
 800102c:	2110      	movs	r1, #16
 800102e:	4822      	ldr	r0, [pc, #136]	; (80010b8 <doStepISR+0x23c>)
 8001030:	f000 f9aa 	bl	8001388 <doStep>
		stepper_4_change --;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <doStepISR+0x240>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a20      	ldr	r2, [pc, #128]	; (80010bc <doStepISR+0x240>)
 800103c:	6013      	str	r3, [r2, #0]
		stepper_4_state ++;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <doStepISR+0x244>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <doStepISR+0x244>)
 8001046:	6013      	str	r3, [r2, #0]
		if (stepper_4_state == 8){stepper_4_state = 0;}
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <doStepISR+0x244>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d102      	bne.n	8001056 <doStepISR+0x1da>
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <doStepISR+0x244>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	}
	if (stepper_4_change < 0){
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <doStepISR+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da1b      	bge.n	8001096 <doStepISR+0x21a>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <doStepISR+0x244>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2340      	movs	r3, #64	; 0x40
 800106a:	2220      	movs	r2, #32
 800106c:	2110      	movs	r1, #16
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <doStepISR+0x23c>)
 8001070:	f000 f98a 	bl	8001388 <doStep>
		stepper_4_change ++;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <doStepISR+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <doStepISR+0x240>)
 800107c:	6013      	str	r3, [r2, #0]
		stepper_4_state --;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <doStepISR+0x244>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3b01      	subs	r3, #1
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <doStepISR+0x244>)
 8001086:	6013      	str	r3, [r2, #0]
		if (stepper_4_state < 0){stepper_4_state = 7;}
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <doStepISR+0x244>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	da02      	bge.n	8001096 <doStepISR+0x21a>
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <doStepISR+0x244>)
 8001092:	2207      	movs	r2, #7
 8001094:	601a      	str	r2, [r3, #0]
	}

}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000240 	.word	0x20000240
 80010a0:	20000250 	.word	0x20000250
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	20000244 	.word	0x20000244
 80010ac:	20000254 	.word	0x20000254
 80010b0:	20000248 	.word	0x20000248
 80010b4:	20000258 	.word	0x20000258
 80010b8:	40010800 	.word	0x40010800
 80010bc:	2000024c 	.word	0x2000024c
 80010c0:	2000025c 	.word	0x2000025c

080010c4 <homeISR>:

void homeISR(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af02      	add	r7, sp, #8
	//stepper1 100
	if (homing == 1){
 80010ca:	4b98      	ldr	r3, [pc, #608]	; (800132c <homeISR+0x268>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d137      	bne.n	8001142 <homeISR+0x7e>
		if (stepper_1_change == 0){
 80010d2:	4b97      	ldr	r3, [pc, #604]	; (8001330 <homeISR+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d131      	bne.n	800113e <homeISR+0x7a>
			printf("home s1");
 80010da:	4896      	ldr	r0, [pc, #600]	; (8001334 <homeISR+0x270>)
 80010dc:	f007 fce2 	bl	8008aa4 <iprintf>
			if(HAL_GPIO_ReadPin(HAL_1_GPIO_Port, HAL_1_Pin)){
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	4894      	ldr	r0, [pc, #592]	; (8001338 <homeISR+0x274>)
 80010e6:	f000 fea5 	bl	8001e34 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01b      	beq.n	8001128 <homeISR+0x64>
				doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <homeISR+0x278>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001108:	488b      	ldr	r0, [pc, #556]	; (8001338 <homeISR+0x274>)
 800110a:	f000 f93d 	bl	8001388 <doStep>
				stepper_1_state --;
 800110e:	4b8b      	ldr	r3, [pc, #556]	; (800133c <homeISR+0x278>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	4a89      	ldr	r2, [pc, #548]	; (800133c <homeISR+0x278>)
 8001116:	6013      	str	r3, [r2, #0]
				if (stepper_1_state < 0){stepper_1_state = 7;}
 8001118:	4b88      	ldr	r3, [pc, #544]	; (800133c <homeISR+0x278>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	da10      	bge.n	8001142 <homeISR+0x7e>
 8001120:	4b86      	ldr	r3, [pc, #536]	; (800133c <homeISR+0x278>)
 8001122:	2207      	movs	r2, #7
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e00c      	b.n	8001142 <homeISR+0x7e>
			}else{
				homing ++;
 8001128:	4b80      	ldr	r3, [pc, #512]	; (800132c <homeISR+0x268>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a7f      	ldr	r2, [pc, #508]	; (800132c <homeISR+0x268>)
 8001130:	6013      	str	r3, [r2, #0]
				moveStepper(0,-160);
 8001132:	f06f 019f 	mvn.w	r1, #159	; 0x9f
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fe52 	bl	8000de0 <moveStepper>
 800113c:	e001      	b.n	8001142 <homeISR+0x7e>
			}
		}else{
			doStepISR();
 800113e:	f7ff fe9d 	bl	8000e7c <doStepISR>

		}
	}
	if (homing == 2){
 8001142:	4b7a      	ldr	r3, [pc, #488]	; (800132c <homeISR+0x268>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d110      	bne.n	800116c <homeISR+0xa8>
		//stepper1
		if (stepper_1_change == 0){
 800114a:	4b79      	ldr	r3, [pc, #484]	; (8001330 <homeISR+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10a      	bne.n	8001168 <homeISR+0xa4>
			moveStepper(1,500);
 8001152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fe42 	bl	8000de0 <moveStepper>
			homing ++;
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <homeISR+0x268>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a72      	ldr	r2, [pc, #456]	; (800132c <homeISR+0x268>)
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e001      	b.n	800116c <homeISR+0xa8>
		}else{
			doStepISR();
 8001168:	f7ff fe88 	bl	8000e7c <doStepISR>

		}
	}

	//stepper2 QNH
	if (homing == 3){
 800116c:	4b6f      	ldr	r3, [pc, #444]	; (800132c <homeISR+0x268>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d133      	bne.n	80011dc <homeISR+0x118>
		if (stepper_2_change == 0){
 8001174:	4b72      	ldr	r3, [pc, #456]	; (8001340 <homeISR+0x27c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d12d      	bne.n	80011d8 <homeISR+0x114>
			printf("home s2");
 800117c:	4871      	ldr	r0, [pc, #452]	; (8001344 <homeISR+0x280>)
 800117e:	f007 fc91 	bl	8008aa4 <iprintf>
			if(HAL_GPIO_ReadPin(HAL_2_GPIO_Port, HAL_2_Pin)){
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	486c      	ldr	r0, [pc, #432]	; (8001338 <homeISR+0x274>)
 8001188:	f000 fe54 	bl	8001e34 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d018      	beq.n	80011c4 <homeISR+0x100>
				doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 8001192:	4b6d      	ldr	r3, [pc, #436]	; (8001348 <homeISR+0x284>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	2240      	movs	r2, #64	; 0x40
 80011a2:	2120      	movs	r1, #32
 80011a4:	4864      	ldr	r0, [pc, #400]	; (8001338 <homeISR+0x274>)
 80011a6:	f000 f8ef 	bl	8001388 <doStep>
				stepper_2_state --;
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <homeISR+0x284>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a65      	ldr	r2, [pc, #404]	; (8001348 <homeISR+0x284>)
 80011b2:	6013      	str	r3, [r2, #0]
				if (stepper_2_state < 0){stepper_2_state = 7;}
 80011b4:	4b64      	ldr	r3, [pc, #400]	; (8001348 <homeISR+0x284>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da0f      	bge.n	80011dc <homeISR+0x118>
 80011bc:	4b62      	ldr	r3, [pc, #392]	; (8001348 <homeISR+0x284>)
 80011be:	2207      	movs	r2, #7
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00b      	b.n	80011dc <homeISR+0x118>
			}else{
				homing ++;
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <homeISR+0x268>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a58      	ldr	r2, [pc, #352]	; (800132c <homeISR+0x268>)
 80011cc:	6013      	str	r3, [r2, #0]
				moveStepper(1,-5450);
 80011ce:	495f      	ldr	r1, [pc, #380]	; (800134c <homeISR+0x288>)
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fe05 	bl	8000de0 <moveStepper>
 80011d6:	e001      	b.n	80011dc <homeISR+0x118>
			}
		}else{
			doStepISR();
 80011d8:	f7ff fe50 	bl	8000e7c <doStepISR>

		}
	}
	if (homing == 4){
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <homeISR+0x268>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d110      	bne.n	8001206 <homeISR+0x142>
		//stepper2
		if (stepper_2_change == 0){
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <homeISR+0x27c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10a      	bne.n	8001202 <homeISR+0x13e>
			moveStepper(2,500);
 80011ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff fdf5 	bl	8000de0 <moveStepper>
			homing ++;
 80011f6:	4b4d      	ldr	r3, [pc, #308]	; (800132c <homeISR+0x268>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <homeISR+0x268>)
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e001      	b.n	8001206 <homeISR+0x142>
		}else{
			doStepISR();
 8001202:	f7ff fe3b 	bl	8000e7c <doStepISR>

		}
	}

	//stepper3 1k
	if (homing == 5){
 8001206:	4b49      	ldr	r3, [pc, #292]	; (800132c <homeISR+0x268>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d132      	bne.n	8001274 <homeISR+0x1b0>
		if (stepper_3_change == 0){
 800120e:	4b50      	ldr	r3, [pc, #320]	; (8001350 <homeISR+0x28c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d12c      	bne.n	8001270 <homeISR+0x1ac>
			printf("home s3");
 8001216:	484f      	ldr	r0, [pc, #316]	; (8001354 <homeISR+0x290>)
 8001218:	f007 fc44 	bl	8008aa4 <iprintf>
			if(HAL_GPIO_ReadPin(HAL_3_GPIO_Port, HAL_3_Pin)){
 800121c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001220:	4845      	ldr	r0, [pc, #276]	; (8001338 <homeISR+0x274>)
 8001222:	f000 fe07 	bl	8001e34 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d017      	beq.n	800125c <homeISR+0x198>
				doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 800122c:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <homeISR+0x294>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2308      	movs	r3, #8
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2304      	movs	r3, #4
 8001238:	2202      	movs	r2, #2
 800123a:	2101      	movs	r1, #1
 800123c:	4847      	ldr	r0, [pc, #284]	; (800135c <homeISR+0x298>)
 800123e:	f000 f8a3 	bl	8001388 <doStep>
				stepper_3_state --;
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <homeISR+0x294>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3b01      	subs	r3, #1
 8001248:	4a43      	ldr	r2, [pc, #268]	; (8001358 <homeISR+0x294>)
 800124a:	6013      	str	r3, [r2, #0]
				if (stepper_3_state < 0){stepper_3_state = 7;}
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <homeISR+0x294>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	da0f      	bge.n	8001274 <homeISR+0x1b0>
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <homeISR+0x294>)
 8001256:	2207      	movs	r2, #7
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e00b      	b.n	8001274 <homeISR+0x1b0>
			}else{
				homing ++;
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <homeISR+0x268>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <homeISR+0x268>)
 8001264:	6013      	str	r3, [r2, #0]
				moveStepper(2,0);
 8001266:	2100      	movs	r1, #0
 8001268:	2002      	movs	r0, #2
 800126a:	f7ff fdb9 	bl	8000de0 <moveStepper>
 800126e:	e001      	b.n	8001274 <homeISR+0x1b0>
			}
		}else{
			doStepISR();
 8001270:	f7ff fe04 	bl	8000e7c <doStepISR>

		}
	}
	if (homing == 6){
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <homeISR+0x268>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d10f      	bne.n	800129c <homeISR+0x1d8>
		//stepper2
		if (stepper_3_change == 0){
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <homeISR+0x28c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <homeISR+0x1d4>
			moveStepper(3,-500);
 8001284:	4936      	ldr	r1, [pc, #216]	; (8001360 <homeISR+0x29c>)
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff fdaa 	bl	8000de0 <moveStepper>
			homing ++;
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <homeISR+0x268>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a26      	ldr	r2, [pc, #152]	; (800132c <homeISR+0x268>)
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e001      	b.n	800129c <homeISR+0x1d8>
		}else{
			doStepISR();
 8001298:	f7ff fdf0 	bl	8000e7c <doStepISR>

		}
	}
	//stepper4 10k
	if (homing == 7){
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <homeISR+0x268>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	d131      	bne.n	8001308 <homeISR+0x244>
		if (stepper_4_change == 0){
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <homeISR+0x2a0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12b      	bne.n	8001304 <homeISR+0x240>
			printf("home s3");
 80012ac:	4829      	ldr	r0, [pc, #164]	; (8001354 <homeISR+0x290>)
 80012ae:	f007 fbf9 	bl	8008aa4 <iprintf>
			if(HAL_GPIO_ReadPin(HAL_4_GPIO_Port, HAL_4_Pin)){
 80012b2:	2102      	movs	r1, #2
 80012b4:	4820      	ldr	r0, [pc, #128]	; (8001338 <homeISR+0x274>)
 80012b6:	f000 fdbd 	bl	8001e34 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d017      	beq.n	80012f0 <homeISR+0x22c>
				doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <homeISR+0x2a4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2340      	movs	r3, #64	; 0x40
 80012cc:	2220      	movs	r2, #32
 80012ce:	2110      	movs	r1, #16
 80012d0:	4822      	ldr	r0, [pc, #136]	; (800135c <homeISR+0x298>)
 80012d2:	f000 f859 	bl	8001388 <doStep>
				stepper_4_state ++;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <homeISR+0x2a4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <homeISR+0x2a4>)
 80012de:	6013      	str	r3, [r2, #0]
				if (stepper_4_state == 8){stepper_4_state = 0;}
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <homeISR+0x2a4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d10f      	bne.n	8001308 <homeISR+0x244>
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <homeISR+0x2a4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00b      	b.n	8001308 <homeISR+0x244>
			}else{
				homing ++;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <homeISR+0x268>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <homeISR+0x268>)
 80012f8:	6013      	str	r3, [r2, #0]
				moveStepper(3,200);
 80012fa:	21c8      	movs	r1, #200	; 0xc8
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff fd6f 	bl	8000de0 <moveStepper>
 8001302:	e001      	b.n	8001308 <homeISR+0x244>
			}
		}else{
			doStepISR();
 8001304:	f7ff fdba 	bl	8000e7c <doStepISR>

		}
	}
	if (homing == 8){
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <homeISR+0x268>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d109      	bne.n	8001324 <homeISR+0x260>
		//stepper2
		if (stepper_4_change == 0){
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <homeISR+0x2a0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <homeISR+0x25c>
			homing = 0;
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <homeISR+0x268>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
		}else{
			doStepISR();

		}
	}
}
 800131e:	e001      	b.n	8001324 <homeISR+0x260>
			doStepISR();
 8001320:	f7ff fdac 	bl	8000e7c <doStepISR>
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000260 	.word	0x20000260
 8001330:	20000240 	.word	0x20000240
 8001334:	0800a5b8 	.word	0x0800a5b8
 8001338:	40010c00 	.word	0x40010c00
 800133c:	20000250 	.word	0x20000250
 8001340:	20000244 	.word	0x20000244
 8001344:	0800a5c0 	.word	0x0800a5c0
 8001348:	20000254 	.word	0x20000254
 800134c:	ffffeab6 	.word	0xffffeab6
 8001350:	20000248 	.word	0x20000248
 8001354:	0800a5c8 	.word	0x0800a5c8
 8001358:	20000258 	.word	0x20000258
 800135c:	40010800 	.word	0x40010800
 8001360:	fffffe0c 	.word	0xfffffe0c
 8001364:	2000024c 	.word	0x2000024c
 8001368:	2000025c 	.word	0x2000025c

0800136c <homeAll>:



void homeAll(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	moveStepper(0,500);
 8001370:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fd33 	bl	8000de0 <moveStepper>
	//stepper_2_change = 600;
	//stepper_3_change = 600;
	//stepper_4_change = 600;
	homing = 1;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <homeAll+0x18>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
	//while(homing > 0){
		//wait
	//}
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000260 	.word	0x20000260

08001388 <doStep>:

void doStep(GPIO_TypeDef *PORT, uint16_t  PIN1, uint16_t  PIN2, uint16_t  PIN3, uint16_t  PIN4, int step){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	817b      	strh	r3, [r7, #10]
 800139a:	460b      	mov	r3, r1
 800139c:	813b      	strh	r3, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	f200 80db 	bhi.w	8001560 <doStep+0x1d8>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <doStep+0x28>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013d1 	.word	0x080013d1
 80013b4:	08001403 	.word	0x08001403
 80013b8:	08001435 	.word	0x08001435
 80013bc:	08001467 	.word	0x08001467
 80013c0:	08001499 	.word	0x08001499
 80013c4:	080014cb 	.word	0x080014cb
 80013c8:	080014fd 	.word	0x080014fd
 80013cc:	0800152f 	.word	0x0800152f
	switch(step){
		case 0:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 80013d0:	897b      	ldrh	r3, [r7, #10]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fd43 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80013dc:	893b      	ldrh	r3, [r7, #8]
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 fd3d 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 fd37 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80013f4:	8b3b      	ldrh	r3, [r7, #24]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 fd31 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 8001400:	e0ae      	b.n	8001560 <doStep+0x1d8>
		case 1:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 fd2a 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 800140e:	893b      	ldrh	r3, [r7, #8]
 8001410:	2201      	movs	r2, #1
 8001412:	4619      	mov	r1, r3
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 fd24 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fd1e 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8001426:	8b3b      	ldrh	r3, [r7, #24]
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 fd18 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 8001432:	e095      	b.n	8001560 <doStep+0x1d8>
		case 2:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001434:	897b      	ldrh	r3, [r7, #10]
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 fd11 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 8001440:	893b      	ldrh	r3, [r7, #8]
 8001442:	2201      	movs	r2, #1
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fd0b 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 fd05 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8001458:	8b3b      	ldrh	r3, [r7, #24]
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fcff 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 8001464:	e07c      	b.n	8001560 <doStep+0x1d8>
		case 3:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001466:	897b      	ldrh	r3, [r7, #10]
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 fcf8 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 8001472:	893b      	ldrh	r3, [r7, #8]
 8001474:	2201      	movs	r2, #1
 8001476:	4619      	mov	r1, r3
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fcf2 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 fcec 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 800148a:	8b3b      	ldrh	r3, [r7, #24]
 800148c:	2200      	movs	r2, #0
 800148e:	4619      	mov	r1, r3
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fce6 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 8001496:	e063      	b.n	8001560 <doStep+0x1d8>
		case 4:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001498:	897b      	ldrh	r3, [r7, #10]
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fcdf 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80014a4:	893b      	ldrh	r3, [r7, #8]
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 fcd9 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4619      	mov	r1, r3
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 fcd3 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80014bc:	8b3b      	ldrh	r3, [r7, #24]
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fccd 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 80014c8:	e04a      	b.n	8001560 <doStep+0x1d8>
		case 5:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fcc6 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fcc0 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fcba 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 80014ee:	8b3b      	ldrh	r3, [r7, #24]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fcb4 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 80014fa:	e031      	b.n	8001560 <doStep+0x1d8>
		case 6:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fcad 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fca7 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fca1 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 8001520:	8b3b      	ldrh	r3, [r7, #24]
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 fc9b 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 800152c:	e018      	b.n	8001560 <doStep+0x1d8>
		case 7:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 800152e:	897b      	ldrh	r3, [r7, #10]
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 fc94 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 800153a:	893b      	ldrh	r3, [r7, #8]
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 fc8e 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 fc88 	bl	8001e62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 8001552:	8b3b      	ldrh	r3, [r7, #24]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fc82 	bl	8001e62 <HAL_GPIO_WritePin>
			break;
 800155e:	bf00      	nop
		}
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_MspInit+0x40>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_MspInit+0x40>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_MspInit+0x40>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_MspInit+0x40>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_MspInit+0x40>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_MspInit+0x40>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015bc:	d113      	bne.n	80015e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_TIM_Base_MspInit+0x44>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_TIM_Base_MspInit+0x44>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_TIM_Base_MspInit+0x44>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	201c      	movs	r0, #28
 80015dc:	f000 fa6f 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e0:	201c      	movs	r0, #28
 80015e2:	f000 fa88 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 f929 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800164a:	f000 fd6c 	bl	8002126 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20001174 	.word	0x20001174

08001658 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM2_IRQHandler+0x10>)
 800165e:	f002 fd03 	bl	8004068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000494 	.word	0x20000494

0800166c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167e:	f3af 8000 	nop.w
 8001682:	4601      	mov	r1, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf0      	blt.n	800167e <_read+0x12>
	}

return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e009      	b.n	80016cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf1      	blt.n	80016b8 <_write+0x12>
	}
	return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_close>:

int _close(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001704:	605a      	str	r2, [r3, #4]
	return 0;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_isatty>:

int _isatty(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	return 1;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
	return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f007 f8aa 	bl	80088c8 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20005000 	.word	0x20005000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	20000264 	.word	0x20000264
 80017a8:	20001470 	.word	0x20001470

080017ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017ba:	e003      	b.n	80017c4 <LoopCopyDataInit>

080017bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017c2:	3104      	adds	r1, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017cc:	d3f6      	bcc.n	80017bc <CopyDataInit>
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017d0:	e002      	b.n	80017d8 <LoopFillZerobss>

080017d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017d4:	f842 3b04 	str.w	r3, [r2], #4

080017d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017dc:	d3f9      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017de:	f7ff ffe5 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f007 f877 	bl	80088d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e6:	f7ff f96f 	bl	8000ac8 <main>
  bx lr
 80017ea:	4770      	bx	lr
  ldr r3, =_sidata
 80017ec:	0800a800 	.word	0x0800a800
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017f4:	20000210 	.word	0x20000210
  ldr r2, =_sbss
 80017f8:	20000210 	.word	0x20000210
  ldr r3, = _ebss
 80017fc:	20001470 	.word	0x20001470

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x28>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f947 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fea2 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f95f 	bl	8001b12 <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 f927 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000028 	.word	0x20000028
 8001888:	20000030 	.word	0x20000030
 800188c:	2000002c 	.word	0x2000002c

08001890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x1c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x20>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_IncTick+0x20>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000030 	.word	0x20000030
 80018b0:	200004dc 	.word	0x200004dc

080018b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <HAL_GetTick+0x10>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	200004dc 	.word	0x200004dc

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffe0 	bl	80018b4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000030 	.word	0x20000030

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <__NVIC_EnableIRQ+0x34>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff90 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff2d 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad0:	f7ff ff42 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff ff90 	bl	8001a00 <NVIC_EncodePriority>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff5f 	bl	80019ac <__NVIC_SetPriority>
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff35 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffa2 	bl	8001a64 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b08b      	sub	sp, #44	; 0x2c
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	e169      	b.n	8001e14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b40:	2201      	movs	r2, #1
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8158 	bne.w	8001e0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4a9a      	ldr	r2, [pc, #616]	; (8001dcc <HAL_GPIO_Init+0x2a0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d05e      	beq.n	8001c26 <HAL_GPIO_Init+0xfa>
 8001b68:	4a98      	ldr	r2, [pc, #608]	; (8001dcc <HAL_GPIO_Init+0x2a0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d875      	bhi.n	8001c5a <HAL_GPIO_Init+0x12e>
 8001b6e:	4a98      	ldr	r2, [pc, #608]	; (8001dd0 <HAL_GPIO_Init+0x2a4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d058      	beq.n	8001c26 <HAL_GPIO_Init+0xfa>
 8001b74:	4a96      	ldr	r2, [pc, #600]	; (8001dd0 <HAL_GPIO_Init+0x2a4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d86f      	bhi.n	8001c5a <HAL_GPIO_Init+0x12e>
 8001b7a:	4a96      	ldr	r2, [pc, #600]	; (8001dd4 <HAL_GPIO_Init+0x2a8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d052      	beq.n	8001c26 <HAL_GPIO_Init+0xfa>
 8001b80:	4a94      	ldr	r2, [pc, #592]	; (8001dd4 <HAL_GPIO_Init+0x2a8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d869      	bhi.n	8001c5a <HAL_GPIO_Init+0x12e>
 8001b86:	4a94      	ldr	r2, [pc, #592]	; (8001dd8 <HAL_GPIO_Init+0x2ac>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d04c      	beq.n	8001c26 <HAL_GPIO_Init+0xfa>
 8001b8c:	4a92      	ldr	r2, [pc, #584]	; (8001dd8 <HAL_GPIO_Init+0x2ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d863      	bhi.n	8001c5a <HAL_GPIO_Init+0x12e>
 8001b92:	4a92      	ldr	r2, [pc, #584]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d046      	beq.n	8001c26 <HAL_GPIO_Init+0xfa>
 8001b98:	4a90      	ldr	r2, [pc, #576]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d85d      	bhi.n	8001c5a <HAL_GPIO_Init+0x12e>
 8001b9e:	2b12      	cmp	r3, #18
 8001ba0:	d82a      	bhi.n	8001bf8 <HAL_GPIO_Init+0xcc>
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d859      	bhi.n	8001c5a <HAL_GPIO_Init+0x12e>
 8001ba6:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <HAL_GPIO_Init+0x80>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001c27 	.word	0x08001c27
 8001bb0:	08001c01 	.word	0x08001c01
 8001bb4:	08001c13 	.word	0x08001c13
 8001bb8:	08001c55 	.word	0x08001c55
 8001bbc:	08001c5b 	.word	0x08001c5b
 8001bc0:	08001c5b 	.word	0x08001c5b
 8001bc4:	08001c5b 	.word	0x08001c5b
 8001bc8:	08001c5b 	.word	0x08001c5b
 8001bcc:	08001c5b 	.word	0x08001c5b
 8001bd0:	08001c5b 	.word	0x08001c5b
 8001bd4:	08001c5b 	.word	0x08001c5b
 8001bd8:	08001c5b 	.word	0x08001c5b
 8001bdc:	08001c5b 	.word	0x08001c5b
 8001be0:	08001c5b 	.word	0x08001c5b
 8001be4:	08001c5b 	.word	0x08001c5b
 8001be8:	08001c5b 	.word	0x08001c5b
 8001bec:	08001c5b 	.word	0x08001c5b
 8001bf0:	08001c09 	.word	0x08001c09
 8001bf4:	08001c1d 	.word	0x08001c1d
 8001bf8:	4a79      	ldr	r2, [pc, #484]	; (8001de0 <HAL_GPIO_Init+0x2b4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bfe:	e02c      	b.n	8001c5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e029      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	e024      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	3308      	adds	r3, #8
 8001c18:	623b      	str	r3, [r7, #32]
          break;
 8001c1a:	e01f      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	330c      	adds	r3, #12
 8001c22:	623b      	str	r3, [r7, #32]
          break;
 8001c24:	e01a      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	623b      	str	r3, [r7, #32]
          break;
 8001c32:	e013      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	611a      	str	r2, [r3, #16]
          break;
 8001c46:	e009      	b.n	8001c5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	615a      	str	r2, [r3, #20]
          break;
 8001c52:	e003      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x130>
          break;
 8001c5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	d801      	bhi.n	8001c66 <HAL_GPIO_Init+0x13a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	e001      	b.n	8001c6a <HAL_GPIO_Init+0x13e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2bff      	cmp	r3, #255	; 0xff
 8001c70:	d802      	bhi.n	8001c78 <HAL_GPIO_Init+0x14c>
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	e002      	b.n	8001c7e <HAL_GPIO_Init+0x152>
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	3b08      	subs	r3, #8
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	210f      	movs	r1, #15
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	401a      	ands	r2, r3
 8001c90:	6a39      	ldr	r1, [r7, #32]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80b1 	beq.w	8001e0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <HAL_GPIO_Init+0x2b8>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_GPIO_Init+0x2b8>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <HAL_GPIO_Init+0x2b8>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_GPIO_Init+0x2bc>)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a40      	ldr	r2, [pc, #256]	; (8001dec <HAL_GPIO_Init+0x2c0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_GPIO_Init+0x1ec>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3f      	ldr	r2, [pc, #252]	; (8001df0 <HAL_GPIO_Init+0x2c4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00d      	beq.n	8001d14 <HAL_GPIO_Init+0x1e8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <HAL_GPIO_Init+0x2c8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d007      	beq.n	8001d10 <HAL_GPIO_Init+0x1e4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3d      	ldr	r2, [pc, #244]	; (8001df8 <HAL_GPIO_Init+0x2cc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_GPIO_Init+0x1e0>
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x1ee>
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	e004      	b.n	8001d1a <HAL_GPIO_Init+0x1ee>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x1ee>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_GPIO_Init+0x1ee>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d2a:	492f      	ldr	r1, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x2bc>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	492c      	ldr	r1, [pc, #176]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4928      	ldr	r1, [pc, #160]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4922      	ldr	r1, [pc, #136]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	491e      	ldr	r1, [pc, #120]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4918      	ldr	r1, [pc, #96]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4914      	ldr	r1, [pc, #80]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d021      	beq.n	8001e00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	490e      	ldr	r1, [pc, #56]	; (8001dfc <HAL_GPIO_Init+0x2d0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
 8001dc8:	e021      	b.n	8001e0e <HAL_GPIO_Init+0x2e2>
 8001dca:	bf00      	nop
 8001dcc:	10320000 	.word	0x10320000
 8001dd0:	10310000 	.word	0x10310000
 8001dd4:	10220000 	.word	0x10220000
 8001dd8:	10210000 	.word	0x10210000
 8001ddc:	10120000 	.word	0x10120000
 8001de0:	10110000 	.word	0x10110000
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40010800 	.word	0x40010800
 8001df0:	40010c00 	.word	0x40010c00
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40011400 	.word	0x40011400
 8001dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4909      	ldr	r1, [pc, #36]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	3301      	adds	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f ae8e 	bne.w	8001b40 <HAL_GPIO_Init+0x14>
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	372c      	adds	r7, #44	; 0x2c
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	807b      	strh	r3, [r7, #2]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e72:	787b      	ldrb	r3, [r7, #1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e78:	887a      	ldrh	r2, [r7, #2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e7e:	e003      	b.n	8001e88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	041a      	lsls	r2, r3, #16
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af06      	add	r7, sp, #24
 8001eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0fd      	b.n	80020d2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f006 fa42 	bl	8008374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fc31 	bl	8004764 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	687e      	ldr	r6, [r7, #4]
 8001f0a:	466d      	mov	r5, sp
 8001f0c:	f106 0410 	add.w	r4, r6, #16
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	602b      	str	r3, [r5, #0]
 8001f18:	1d33      	adds	r3, r6, #4
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f002 fbfb 	bl	8004718 <USB_CoreInit>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0ce      	b.n	80020d2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fc2c 	bl	8004798 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e04c      	b.n	8001fe0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	3301      	adds	r3, #1
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	b298      	uxth	r0, r3
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3336      	adds	r3, #54	; 0x36
 8001f84:	4602      	mov	r2, r0
 8001f86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	3303      	adds	r3, #3
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	3338      	adds	r3, #56	; 0x38
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	333c      	adds	r3, #60	; 0x3c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3340      	adds	r3, #64	; 0x40
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3ad      	bcc.n	8001f46 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e044      	b.n	800207a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d3b5      	bcc.n	8001ff0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	687e      	ldr	r6, [r7, #4]
 800208c:	466d      	mov	r5, sp
 800208e:	f106 0410 	add.w	r4, r6, #16
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	602b      	str	r3, [r5, #0]
 800209a:	1d33      	adds	r3, r6, #4
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f002 fb86 	bl	80047b0 <USB_DevInit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00d      	b.n	80020d2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fb20 	bl	8006710 <USB_DevDisconnect>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_Start+0x16>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e016      	b.n	800211e <HAL_PCD_Start+0x44>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fb1b 	bl	8004738 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002102:	2101      	movs	r1, #1
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f006 fba8 	bl	800885a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 faf4 	bl	80066fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 faf6 	bl	8006724 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002142:	d102      	bne.n	800214a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fb61 	bl	800280c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 fae8 	bl	8006724 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d112      	bne.n	8002186 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	b292      	uxth	r2, r2
 8002174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f006 f976 	bl	800846a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f925 	bl	80023d0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f004 faca 	bl	8006724 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800219a:	d10b      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ae:	b292      	uxth	r2, r2
 80021b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 fab3 	bl	8006724 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	d10b      	bne.n	80021e2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021dc:	b292      	uxth	r2, r2
 80021de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fa9c 	bl	8006724 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f6:	d126      	bne.n	8002246 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002218:	b29a      	uxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0208 	bic.w	r2, r2, #8
 8002222:	b292      	uxth	r2, r2
 8002224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f006 f957 	bl	80084dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002240:	b292      	uxth	r2, r2
 8002242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fa6a 	bl	8006724 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225a:	f040 8084 	bne.w	8002366 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800225e:	2300      	movs	r3, #0
 8002260:	77fb      	strb	r3, [r7, #31]
 8002262:	e011      	b.n	8002288 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	441a      	add	r2, r3
 8002270:	7ffb      	ldrb	r3, [r7, #31]
 8002272:	8812      	ldrh	r2, [r2, #0]
 8002274:	b292      	uxth	r2, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f107 0120 	add.w	r1, r7, #32
 800227c:	440b      	add	r3, r1
 800227e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	3301      	adds	r3, #1
 8002286:	77fb      	strb	r3, [r7, #31]
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	2b07      	cmp	r3, #7
 800228c:	d9ea      	bls.n	8002264 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	b292      	uxth	r2, r2
 80022a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	b292      	uxth	r2, r2
 80022ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80022be:	bf00      	nop
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f6      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e4:	b292      	uxth	r2, r2
 80022e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	77fb      	strb	r3, [r7, #31]
 80022ee:	e010      	b.n	8002312 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80022f0:	7ffb      	ldrb	r3, [r7, #31]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4611      	mov	r1, r2
 80022f8:	7ffa      	ldrb	r2, [r7, #31]
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	440a      	add	r2, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	f107 0120 	add.w	r1, r7, #32
 8002304:	440b      	add	r3, r1
 8002306:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800230a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800230c:	7ffb      	ldrb	r3, [r7, #31]
 800230e:	3301      	adds	r3, #1
 8002310:	77fb      	strb	r3, [r7, #31]
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b07      	cmp	r3, #7
 8002316:	d9eb      	bls.n	80022f0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	b292      	uxth	r2, r2
 800232c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002342:	b292      	uxth	r2, r2
 8002344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0204 	orr.w	r2, r2, #4
 800235a:	b292      	uxth	r2, r2
 800235c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f006 f8a1 	bl	80084a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f004 f9da 	bl	8006724 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237a:	d10e      	bne.n	800239a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800238e:	b292      	uxth	r2, r2
 8002390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f006 f85a 	bl	800844e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 f9c0 	bl	8006724 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ae:	d10b      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c2:	b292      	uxth	r2, r2
 80023c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_PCD_SetAddress+0x1a>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e013      	b.n	8002412 <HAL_PCD_SetAddress+0x42>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f004 f967 	bl	80066d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	4608      	mov	r0, r1
 8002424:	4611      	mov	r1, r2
 8002426:	461a      	mov	r2, r3
 8002428:	4603      	mov	r3, r0
 800242a:	70fb      	strb	r3, [r7, #3]
 800242c:	460b      	mov	r3, r1
 800242e:	803b      	strh	r3, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da0e      	bge.n	800245e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	705a      	strb	r2, [r3, #1]
 800245c:	e00e      	b.n	800247c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 0207 	and.w	r2, r3, #7
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002488:	883a      	ldrh	r2, [r7, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	78ba      	ldrb	r2, [r7, #2]
 8002492:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024a6:	78bb      	ldrb	r3, [r7, #2]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d102      	bne.n	80024b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_EP_Open+0xa6>
 80024bc:	2302      	movs	r3, #2
 80024be:	e00e      	b.n	80024de <HAL_PCD_EP_Open+0xc4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 f98e 	bl	80047f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80024dc:	7afb      	ldrb	r3, [r7, #11]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da0e      	bge.n	8002518 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
 8002516:	e00e      	b.n	8002536 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 0207 	and.w	r2, r3, #7
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_PCD_EP_Close+0x6a>
 800254c:	2302      	movs	r3, #2
 800254e:	e00e      	b.n	800256e <HAL_PCD_EP_Close+0x88>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fcb0 	bl	8004ec4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	f003 0207 	and.w	r2, r3, #7
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fe62 	bl	800529c <USB_EPStartXfer>
 80025d8:	e005      	b.n	80025e6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6979      	ldr	r1, [r7, #20]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 fe5b 	bl	800529c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	460b      	mov	r3, r1
 800262c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2201      	movs	r2, #1
 8002668:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	b2da      	uxtb	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fe08 	bl	800529c <USB_EPStartXfer>
 800268c:	e005      	b.n	800269a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6979      	ldr	r1, [r7, #20]
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fe01 	bl	800529c <USB_EPStartXfer>
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 0207 	and.w	r2, r3, #7
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d901      	bls.n	80026c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04c      	b.n	800275c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da0e      	bge.n	80026e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	705a      	strb	r2, [r3, #1]
 80026e6:	e00c      	b.n	8002702 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_PCD_EP_SetStall+0x7e>
 800271e:	2302      	movs	r3, #2
 8002720:	e01c      	b.n	800275c <HAL_PCD_EP_SetStall+0xb8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	4618      	mov	r0, r3
 8002732:	f003 fed3 	bl	80064dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	2b00      	cmp	r3, #0
 800273e:	d108      	bne.n	8002752 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f003 fff8 	bl	8006742 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d901      	bls.n	8002782 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e040      	b.n	8002804 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002786:	2b00      	cmp	r3, #0
 8002788:	da0e      	bge.n	80027a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	705a      	strb	r2, [r3, #1]
 80027a6:	e00e      	b.n	80027c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 0207 	and.w	r2, r3, #7
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_PCD_EP_ClrStall+0x82>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e00e      	b.n	8002804 <HAL_PCD_EP_ClrStall+0xa0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fec1 	bl	800657c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002814:	e2df      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800281e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002820:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800282c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 8158 	bne.w	8002ae6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002836:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d152      	bne.n	80028e6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	81fb      	strh	r3, [r7, #14]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002860:	b29b      	uxth	r3, r3
 8002862:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3328      	adds	r3, #40	; 0x28
 8002868:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	3302      	adds	r3, #2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4413      	add	r3, r2
 8002888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	441a      	add	r2, r3
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028a4:	2100      	movs	r1, #0
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f005 fdb7 	bl	800841a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 828e 	beq.w	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 8289 	bne.w	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b292      	uxth	r2, r2
 80028d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028e4:	e277      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d034      	beq.n	800296a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	3306      	adds	r3, #6
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800293e:	b29b      	uxth	r3, r3
 8002940:	f003 ff4f 	bl	80067e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29a      	uxth	r2, r3
 800294c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002950:	4013      	ands	r3, r2
 8002952:	823b      	strh	r3, [r7, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	8a3a      	ldrh	r2, [r7, #16]
 800295a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800295e:	b292      	uxth	r2, r2
 8002960:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f005 fd2c 	bl	80083c0 <HAL_PCD_SetupStageCallback>
 8002968:	e235      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800296a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800296e:	2b00      	cmp	r3, #0
 8002970:	f280 8231 	bge.w	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29a      	uxth	r2, r3
 800297c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002980:	4013      	ands	r3, r2
 8002982:	83bb      	strh	r3, [r7, #28]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	8bba      	ldrh	r2, [r7, #28]
 800298a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298e:	b292      	uxth	r2, r2
 8002990:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	3306      	adds	r3, #6
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <PCD_EP_ISR_Handler+0x1ee>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	6959      	ldr	r1, [r3, #20]
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f003 feff 	bl	80067e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	441a      	add	r2, r3
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029f2:	2100      	movs	r1, #0
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f005 fcf5 	bl	80083e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d112      	bne.n	8002a48 <PCD_EP_ISR_Handler+0x23c>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e02f      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x29c>
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a4e:	d813      	bhi.n	8002a78 <PCD_EP_ISR_Handler+0x26c>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <PCD_EP_ISR_Handler+0x25e>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	3301      	adds	r3, #1
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	e017      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x29c>
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <PCD_EP_ISR_Handler+0x286>
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab8:	827b      	strh	r3, [r7, #18]
 8002aba:	8a7b      	ldrh	r3, [r7, #18]
 8002abc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ac0:	827b      	strh	r3, [r7, #18]
 8002ac2:	8a7b      	ldrh	r3, [r7, #18]
 8002ac4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ac8:	827b      	strh	r3, [r7, #18]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	8a7b      	ldrh	r3, [r7, #18]
 8002ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	8013      	strh	r3, [r2, #0]
 8002ae4:	e177      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002af8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f280 80ea 	bge.w	8002cd6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b18:	4013      	ands	r3, r2
 8002b1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b30:	b292      	uxth	r2, r2
 8002b32:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	7b1b      	ldrb	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d122      	bne.n	8002b98 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	3306      	adds	r3, #6
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002b7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8087 	beq.w	8002c92 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	6959      	ldr	r1, [r3, #20]
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	88da      	ldrh	r2, [r3, #6]
 8002b90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b92:	f003 fe26 	bl	80067e2 <USB_ReadPMA>
 8002b96:	e07c      	b.n	8002c92 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	78db      	ldrb	r3, [r3, #3]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d108      	bne.n	8002bb2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ba0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f923 	bl	8002df2 <HAL_PCD_EP_DB_Receive>
 8002bac:	4603      	mov	r3, r0
 8002bae:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002bb0:	e06f      	b.n	8002c92 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bcc:	847b      	strh	r3, [r7, #34]	; 0x22
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	441a      	add	r2, r3
 8002bdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d021      	beq.n	8002c50 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3302      	adds	r3, #2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c34:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02a      	beq.n	8002c92 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	891a      	ldrh	r2, [r3, #8]
 8002c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c4a:	f003 fdca 	bl	80067e2 <USB_ReadPMA>
 8002c4e:	e020      	b.n	8002c92 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	3306      	adds	r3, #6
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	6959      	ldr	r1, [r3, #20]
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	895a      	ldrh	r2, [r3, #10]
 8002c8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c8e:	f003 fda8 	bl	80067e2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c98:	441a      	add	r2, r3
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <PCD_EP_ISR_Handler+0x4b0>
 8002cb2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d206      	bcs.n	8002cca <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f005 fb8e 	bl	80083e4 <HAL_PCD_DataOutStageCallback>
 8002cc8:	e005      	b.n	8002cd6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fae3 	bl	800529c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d07a      	beq.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	843b      	strh	r3, [r7, #32]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	441a      	add	r2, r3
 8002d1e:	8c3b      	ldrh	r3, [r7, #32]
 8002d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	78db      	ldrb	r3, [r3, #3]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d108      	bne.n	8002d46 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d146      	bne.n	8002dca <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d141      	bne.n	8002dca <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	8bfb      	ldrh	r3, [r7, #30]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d906      	bls.n	8002d88 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	8bfb      	ldrh	r3, [r7, #30]
 8002d80:	1ad2      	subs	r2, r2, r3
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	619a      	str	r2, [r3, #24]
 8002d86:	e002      	b.n	8002d8e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f005 fb3c 	bl	800841a <HAL_PCD_DataInStageCallback>
 8002da2:	e018      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	8bfb      	ldrh	r3, [r7, #30]
 8002daa:	441a      	add	r2, r3
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	8bfb      	ldrh	r3, [r7, #30]
 8002db6:	441a      	add	r2, r3
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f002 fa6a 	bl	800529c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002dc8:	e005      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f91b 	bl	800300c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f6ff ad17 	blt.w	8002816 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3738      	adds	r7, #56	; 0x38
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b088      	sub	sp, #32
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d07e      	beq.n	8002f08 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	8b7b      	ldrh	r3, [r7, #26]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d306      	bcc.n	8002e4c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	8b7b      	ldrh	r3, [r7, #26]
 8002e44:	1ad2      	subs	r2, r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	619a      	str	r2, [r3, #24]
 8002e4a:	e002      	b.n	8002e52 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d123      	bne.n	8002ea2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	833b      	strh	r3, [r7, #24]
 8002e76:	8b3b      	ldrh	r3, [r7, #24]
 8002e78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e7c:	833b      	strh	r3, [r7, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	8b3b      	ldrh	r3, [r7, #24]
 8002e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01f      	beq.n	8002eec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	82fb      	strh	r3, [r7, #22]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	8afb      	ldrh	r3, [r7, #22]
 8002ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002eec:	8b7b      	ldrh	r3, [r7, #26]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6959      	ldr	r1, [r3, #20]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	891a      	ldrh	r2, [r3, #8]
 8002f00:	8b7b      	ldrh	r3, [r7, #26]
 8002f02:	f003 fc6e 	bl	80067e2 <USB_ReadPMA>
 8002f06:	e07c      	b.n	8003002 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	8b7b      	ldrh	r3, [r7, #26]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d306      	bcc.n	8002f4a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	8b7b      	ldrh	r3, [r7, #26]
 8002f42:	1ad2      	subs	r2, r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	619a      	str	r2, [r3, #24]
 8002f48:	e002      	b.n	8002f50 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d123      	bne.n	8002fa0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	83fb      	strh	r3, [r7, #30]
 8002f74:	8bfb      	ldrh	r3, [r7, #30]
 8002f76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f7a:	83fb      	strh	r3, [r7, #30]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	441a      	add	r2, r3
 8002f8a:	8bfb      	ldrh	r3, [r7, #30]
 8002f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11f      	bne.n	8002fea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	83bb      	strh	r3, [r7, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	8bbb      	ldrh	r3, [r7, #28]
 8002fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fea:	8b7b      	ldrh	r3, [r7, #26]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6959      	ldr	r1, [r3, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	895a      	ldrh	r2, [r3, #10]
 8002ffc:	8b7b      	ldrh	r3, [r7, #26]
 8002ffe:	f003 fbf0 	bl	80067e2 <USB_ReadPMA>
    }
  }

  return count;
 8003002:	8b7b      	ldrh	r3, [r7, #26]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b094      	sub	sp, #80	; 0x50
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8138 	beq.w	8003296 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	3302      	adds	r3, #2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800305a:	429a      	cmp	r2, r3
 800305c:	d907      	bls.n	800306e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	619a      	str	r2, [r3, #24]
 800306c:	e002      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d12c      	bne.n	80030d6 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4619      	mov	r1, r3
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f005 f9c9 	bl	800841a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 823a 	beq.w	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	82fb      	strh	r3, [r7, #22]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	8afb      	ldrh	r3, [r7, #22]
 80030c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8013      	strh	r3, [r2, #0]
 80030d4:	e218      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01f      	beq.n	8003120 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800310c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	b29b      	uxth	r3, r3
 800311e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003126:	2b01      	cmp	r3, #1
 8003128:	f040 81ee 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003134:	441a      	add	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003142:	441a      	add	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	429a      	cmp	r2, r3
 8003152:	d309      	bcc.n	8003168 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6a1a      	ldr	r2, [r3, #32]
 800315e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003160:	1ad2      	subs	r2, r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	621a      	str	r2, [r3, #32]
 8003166:	e015      	b.n	8003194 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8003170:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003174:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800317e:	e009      	b.n	8003194 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d155      	bne.n	8003248 <HAL_PCD_EP_DB_Transmit+0x23c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	011a      	lsls	r2, r3, #4
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d112      	bne.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	e047      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x274>
 80031f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f2:	2b3e      	cmp	r3, #62	; 0x3e
 80031f4:	d811      	bhi.n	800321a <HAL_PCD_EP_DB_Transmit+0x20e>
 80031f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_PCD_EP_DB_Transmit+0x200>
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	3301      	adds	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	b29b      	uxth	r3, r3
 8003210:	029b      	lsls	r3, r3, #10
 8003212:	b29a      	uxth	r2, r3
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	e032      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x274>
 800321a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_PCD_EP_DB_Transmit+0x224>
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	3b01      	subs	r3, #1
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	b29b      	uxth	r3, r3
 8003234:	029b      	lsls	r3, r3, #10
 8003236:	b29b      	uxth	r3, r3
 8003238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003240:	b29a      	uxth	r2, r3
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	e01b      	b.n	8003280 <HAL_PCD_EP_DB_Transmit+0x274>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d117      	bne.n	8003280 <HAL_PCD_EP_DB_Transmit+0x274>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	4413      	add	r3, r2
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	011a      	lsls	r2, r3, #4
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	4413      	add	r3, r2
 8003272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327a:	b29a      	uxth	r2, r3
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6959      	ldr	r1, [r3, #20]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	891a      	ldrh	r2, [r3, #8]
 800328c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328e:	b29b      	uxth	r3, r3
 8003290:	f003 fa62 	bl	8006758 <USB_WritePMA>
 8003294:	e138      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	3306      	adds	r3, #6
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d307      	bcc.n	80032de <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032d6:	1ad2      	subs	r2, r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	619a      	str	r2, [r3, #24]
 80032dc:	e002      	b.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d12e      	bne.n	800334a <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f005 f891 	bl	800841a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 8102 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	441a      	add	r2, r3
 8003330:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800333c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]
 8003348:	e0de      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11f      	bne.n	8003394 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	b29b      	uxth	r3, r3
 8003392:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80b4 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033a8:	441a      	add	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033b6:	441a      	add	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d309      	bcc.n	80033dc <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d4:	1ad2      	subs	r2, r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	621a      	str	r2, [r3, #32]
 80033da:	e015      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80033e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033f2:	e009      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	643b      	str	r3, [r7, #64]	; 0x40
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	785b      	ldrb	r3, [r3, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d155      	bne.n	80034c2 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	63bb      	str	r3, [r7, #56]	; 0x38
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003424:	b29b      	uxth	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	4413      	add	r3, r2
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	011a      	lsls	r2, r3, #4
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	4413      	add	r3, r2
 8003438:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
 800343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003440:	2b00      	cmp	r3, #0
 8003442:	d112      	bne.n	800346a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800344e:	b29a      	uxth	r2, r3
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003462:	b29a      	uxth	r2, r3
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	e044      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800346a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346c:	2b3e      	cmp	r3, #62	; 0x3e
 800346e:	d811      	bhi.n	8003494 <HAL_PCD_EP_DB_Transmit+0x488>
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003482:	3301      	adds	r3, #1
 8003484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	b29b      	uxth	r3, r3
 800348a:	029b      	lsls	r3, r3, #10
 800348c:	b29a      	uxth	r2, r3
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e02f      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_EP_DB_Transmit+0x49e>
 80034a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a6:	3b01      	subs	r3, #1
 80034a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	e018      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d114      	bne.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d8:	4413      	add	r3, r2
 80034da:	643b      	str	r3, [r7, #64]	; 0x40
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	011a      	lsls	r2, r3, #4
 80034e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e4:	4413      	add	r3, r2
 80034e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6959      	ldr	r1, [r3, #20]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	895a      	ldrh	r2, [r3, #10]
 8003500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003502:	b29b      	uxth	r3, r3
 8003504:	f003 f928 	bl	8006758 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003522:	82bb      	strh	r3, [r7, #20]
 8003524:	8abb      	ldrh	r3, [r7, #20]
 8003526:	f083 0310 	eor.w	r3, r3, #16
 800352a:	82bb      	strh	r3, [r7, #20]
 800352c:	8abb      	ldrh	r3, [r7, #20]
 800352e:	f083 0320 	eor.w	r3, r3, #32
 8003532:	82bb      	strh	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	8abb      	ldrh	r3, [r7, #20]
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3750      	adds	r7, #80	; 0x50
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003562:	b480      	push	{r7}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	817b      	strh	r3, [r7, #10]
 8003570:	4613      	mov	r3, r2
 8003572:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e009      	b.n	80035ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	80da      	strh	r2, [r3, #6]
 80035c0:	e00b      	b.n	80035da <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2201      	movs	r2, #1
 80035c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e26c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003608:	4b92      	ldr	r3, [pc, #584]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00c      	beq.n	800362e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003614:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d112      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
 8003620:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d10b      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362e:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06c      	beq.n	8003714 <HAL_RCC_OscConfig+0x12c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d168      	bne.n	8003714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e246      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x76>
 8003650:	4b80      	ldr	r3, [pc, #512]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7f      	ldr	r2, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e02e      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b7b      	ldr	r3, [pc, #492]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7a      	ldr	r2, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b78      	ldr	r3, [pc, #480]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a77      	ldr	r2, [pc, #476]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0xbc>
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a71      	ldr	r2, [pc, #452]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6e      	ldr	r2, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 80036a4:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6a      	ldr	r2, [pc, #424]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe f8f6 	bl	80018b4 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe f8f2 	bl	80018b4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1fa      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xe4>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe f8e2 	bl	80018b4 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe f8de 	bl	80018b4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1e6      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x10c>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11c      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
 800373a:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1ba      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4939      	ldr	r1, [pc, #228]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	e03a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800377c:	4b36      	ldr	r3, [pc, #216]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe f897 	bl	80018b4 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378a:	f7fe f893 	bl	80018b4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e19b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4927      	ldr	r1, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037be:	4b26      	ldr	r3, [pc, #152]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe f876 	bl	80018b4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fe f872 	bl	80018b4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e17a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03a      	beq.n	800386c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <HAL_RCC_OscConfig+0x274>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fe f856 	bl	80018b4 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7fe f852 	bl	80018b4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e15a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800382a:	2001      	movs	r0, #1
 800382c:	f000 faa6 	bl	8003d7c <RCC_Delay>
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_OscConfig+0x274>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003838:	f7fe f83c 	bl	80018b4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fe f838 	bl	80018b4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d908      	bls.n	8003860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e140      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	42420000 	.word	0x42420000
 800385c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b9e      	ldr	r3, [pc, #632]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e9      	bne.n	8003840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a6 	beq.w	80039c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b97      	ldr	r3, [pc, #604]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4b94      	ldr	r3, [pc, #592]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a93      	ldr	r2, [pc, #588]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	61d3      	str	r3, [r2, #28]
 8003896:	4b91      	ldr	r3, [pc, #580]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4b8e      	ldr	r3, [pc, #568]	; (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b2:	4b8b      	ldr	r3, [pc, #556]	; (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a8a      	ldr	r2, [pc, #552]	; (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fd fff9 	bl	80018b4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fd fff5 	bl	80018b4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	; 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0fd      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <HAL_RCC_OscConfig+0x4f8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x312>
 80038ec:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a7a      	ldr	r2, [pc, #488]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x334>
 8003902:	4b76      	ldr	r3, [pc, #472]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a75      	ldr	r2, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4b73      	ldr	r3, [pc, #460]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a72      	ldr	r2, [pc, #456]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x356>
 8003924:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a6c      	ldr	r2, [pc, #432]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a69      	ldr	r2, [pc, #420]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a66      	ldr	r2, [pc, #408]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b64      	ldr	r3, [pc, #400]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a63      	ldr	r2, [pc, #396]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7fd ffa9 	bl	80018b4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd ffa5 	bl	80018b4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0ab      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b57      	ldr	r3, [pc, #348]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x37e>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fd ff93 	bl	80018b4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fd ff8f 	bl	80018b4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e095      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	4b4c      	ldr	r3, [pc, #304]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4b48      	ldr	r3, [pc, #288]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4a47      	ldr	r2, [pc, #284]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8081 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b42      	ldr	r3, [pc, #264]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d061      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d146      	bne.n	8003a72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <HAL_RCC_OscConfig+0x4fc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fd ff63 	bl	80018b4 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd ff5f 	bl	80018b4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e067      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d108      	bne.n	8003a2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a1a:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	492d      	ldr	r1, [pc, #180]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a19      	ldr	r1, [r3, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	4927      	ldr	r1, [pc, #156]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_OscConfig+0x4fc>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd ff33 	bl	80018b4 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd ff2f 	bl	80018b4 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e037      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x46a>
 8003a70:	e02f      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <HAL_RCC_OscConfig+0x4fc>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fd ff1c 	bl	80018b4 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd ff18 	bl	80018b4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e020      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x498>
 8003a9e:	e018      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e013      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	42420060 	.word	0x42420060

08003ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0d0      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d910      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 0207 	bic.w	r2, r3, #7
 8003b12:	4965      	ldr	r1, [pc, #404]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b8      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a52      	ldr	r2, [pc, #328]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	494d      	ldr	r1, [pc, #308]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d040      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d115      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e073      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e06b      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	4b39      	ldr	r3, [pc, #228]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4936      	ldr	r1, [pc, #216]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fe6c 	bl	80018b4 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fd fe68 	bl	80018b4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e053      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d210      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	4922      	ldr	r1, [pc, #136]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e032      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4916      	ldr	r1, [pc, #88]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	490e      	ldr	r1, [pc, #56]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c76:	f000 f821 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490a      	ldr	r1, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fdca 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	0800a634 	.word	0x0800a634
 8003cb4:	20000028 	.word	0x20000028
 8003cb8:	2000002c 	.word	0x2000002c

08003cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	b490      	push	{r4, r7}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cc4:	1d3c      	adds	r4, r7, #4
 8003cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ccc:	f240 2301 	movw	r3, #513	; 0x201
 8003cd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ce6:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d002      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x40>
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x46>
 8003cfa:	e02d      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfe:	623b      	str	r3, [r7, #32]
      break;
 8003d00:	e02d      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	0c9b      	lsrs	r3, r3, #18
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d0e:	4413      	add	r3, r2
 8003d10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c5b      	lsrs	r3, r3, #17
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d2e:	4413      	add	r3, r2
 8003d30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3a:	fb02 f203 	mul.w	r2, r2, r3
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e004      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	623b      	str	r3, [r7, #32]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5a:	623b      	str	r3, [r7, #32]
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc90      	pop	{r4, r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	0800a5d0 	.word	0x0800a5d0
 8003d70:	40021000 	.word	0x40021000
 8003d74:	007a1200 	.word	0x007a1200
 8003d78:	003d0900 	.word	0x003d0900

08003d7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <RCC_Delay+0x34>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <RCC_Delay+0x38>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0a5b      	lsrs	r3, r3, #9
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d98:	bf00      	nop
  }
  while (Delay --);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1e5a      	subs	r2, r3, #1
 8003d9e:	60fa      	str	r2, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f9      	bne.n	8003d98 <RCC_Delay+0x1c>
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	20000028 	.word	0x20000028
 8003db4:	10624dd3 	.word	0x10624dd3

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d07d      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de4:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4a4b      	ldr	r2, [pc, #300]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	61d3      	str	r3, [r2, #28]
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d118      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0c:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e18:	f7fd fd4c 	bl	80018b4 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	e008      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fd fd48 	bl	80018b4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e06d      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b3a      	ldr	r3, [pc, #232]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d027      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e66:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e72:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fd fd17 	bl	80018b4 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fd fd13 	bl	80018b4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e036      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ee      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4917      	ldr	r1, [pc, #92]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ece:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	490b      	ldr	r1, [pc, #44]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	42420440 	.word	0x42420440

08003f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd fb2e 	bl	80015ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 fa70 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e03a      	b.n	8004052 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_TIM_Base_Start_IT+0x98>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x58>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d009      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x58>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <HAL_TIM_Base_Start_IT+0x9c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x58>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_TIM_Base_Start_IT+0xa0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d111      	bne.n	8004040 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b06      	cmp	r3, #6
 800402c:	d010      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e007      	b.n	8004050 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800

08004068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0202 	mvn.w	r2, #2
 8004094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9b1 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9a4 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9b3 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0204 	mvn.w	r2, #4
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f987 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f97a 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f989 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b08      	cmp	r3, #8
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0208 	mvn.w	r2, #8
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2204      	movs	r2, #4
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f95d 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f950 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f95f 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b10      	cmp	r3, #16
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b10      	cmp	r3, #16
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0210 	mvn.w	r2, #16
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2208      	movs	r2, #8
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f933 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f926 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f935 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0201 	mvn.w	r2, #1
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc fc88 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b80      	cmp	r3, #128	; 0x80
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa77 	bl	8004706 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d107      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8f9 	bl	8004436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b20      	cmp	r3, #32
 8004250:	d10e      	bne.n	8004270 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b20      	cmp	r3, #32
 800425e:	d107      	bne.n	8004270 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0220 	mvn.w	r2, #32
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa42 	bl	80046f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIM_ConfigClockSource+0x18>
 800428c:	2302      	movs	r3, #2
 800428e:	e0b3      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x180>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c8:	d03e      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0xd0>
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	f200 8087 	bhi.w	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	f000 8085 	beq.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d87f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042e0:	2b70      	cmp	r3, #112	; 0x70
 80042e2:	d01a      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xa2>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d87b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042e8:	2b60      	cmp	r3, #96	; 0x60
 80042ea:	d050      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x116>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d877      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042f0:	2b50      	cmp	r3, #80	; 0x50
 80042f2:	d03c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0xf6>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d873      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d058      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x136>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d86f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 8004300:	2b30      	cmp	r3, #48	; 0x30
 8004302:	d064      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d86b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d060      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d867      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
 8004314:	2b10      	cmp	r3, #16
 8004316:	d05a      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004318:	e062      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f000 f966 	bl	80045fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800433c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	609a      	str	r2, [r3, #8]
      break;
 8004346:	e04e      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f000 f94f 	bl	80045fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436a:	609a      	str	r2, [r3, #8]
      break;
 800436c:	e03b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 f8c6 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2150      	movs	r1, #80	; 0x50
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f91d 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 800438c:	e02b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	461a      	mov	r2, r3
 800439c:	f000 f8e4 	bl	8004568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2160      	movs	r1, #96	; 0x60
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f90d 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e01b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f8a6 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f8fd 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e00b      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 f8f4 	bl	80045c6 <TIM_ITRx_SetConfig>
        break;
 80043de:	e002      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a29      	ldr	r2, [pc, #164]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a26      	ldr	r2, [pc, #152]	; (8004504 <TIM_Base_SetConfig+0xbc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a25      	ldr	r2, [pc, #148]	; (8004508 <TIM_Base_SetConfig+0xc0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <TIM_Base_SetConfig+0xbc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a18      	ldr	r2, [pc, #96]	; (8004508 <TIM_Base_SetConfig+0xc0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800

0800450c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 030a 	bic.w	r3, r3, #10
 8004548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 0210 	bic.w	r2, r3, #16
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	031b      	lsls	r3, r3, #12
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	621a      	str	r2, [r3, #32]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f043 0307 	orr.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	609a      	str	r2, [r3, #8]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	431a      	orrs	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	609a      	str	r2, [r3, #8]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e046      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d009      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10c      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800

080046f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004718:	b084      	sub	sp, #16
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	f107 0014 	add.w	r0, r7, #20
 8004726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	b004      	add	sp, #16
 8004736:	4770      	bx	lr

08004738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004748:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800474c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800476c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004770:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	b29b      	uxth	r3, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	b29b      	uxth	r3, r3
 8004782:	4013      	ands	r3, r2
 8004784:	b29a      	uxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047b0:	b084      	sub	sp, #16
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	f107 0014 	add.w	r0, r7, #20
 80047be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	b004      	add	sp, #16
 80047ee:	4770      	bx	lr

080047f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b09b      	sub	sp, #108	; 0x6c
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	78db      	ldrb	r3, [r3, #3]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d81f      	bhi.n	8004862 <USB_ActivateEndpoint+0x72>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <USB_ActivateEndpoint+0x38>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004839 	.word	0x08004839
 800482c:	08004855 	.word	0x08004855
 8004830:	0800486b 	.word	0x0800486b
 8004834:	08004847 	.word	0x08004847
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004838:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800483c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004840:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004844:	e012      	b.n	800486c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004846:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800484a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800484e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004852:	e00b      	b.n	800486c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004854:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800485c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004860:	e004      	b.n	800486c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004868:	e000      	b.n	800486c <USB_ActivateEndpoint+0x7c>
      break;
 800486a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	7b1b      	ldrb	r3, [r3, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 8149 	bne.w	8004b70 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8084 	beq.w	80049f0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	011a      	lsls	r2, r3, #4
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	88db      	ldrh	r3, [r3, #6]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	81fb      	strh	r3, [r7, #14]
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01b      	beq.n	800496c <USB_ActivateEndpoint+0x17c>
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	81bb      	strh	r3, [r7, #12]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	89bb      	ldrh	r3, [r7, #12]
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	78db      	ldrb	r3, [r3, #3]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d020      	beq.n	80049b6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498a:	813b      	strh	r3, [r7, #8]
 800498c:	893b      	ldrh	r3, [r7, #8]
 800498e:	f083 0320 	eor.w	r3, r3, #32
 8004992:	813b      	strh	r3, [r7, #8]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	893b      	ldrh	r3, [r7, #8]
 80049a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8013      	strh	r3, [r2, #0]
 80049b4:	e27f      	b.n	8004eb6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049cc:	817b      	strh	r3, [r7, #10]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	897b      	ldrh	r3, [r7, #10]
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
 80049ee:	e262      	b.n	8004eb6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	4413      	add	r3, r2
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	88db      	ldrh	r3, [r3, #6]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	4413      	add	r3, r2
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	4413      	add	r3, r2
 8004a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d112      	bne.n	8004a76 <USB_ActivateEndpoint+0x286>
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	e02f      	b.n	8004ad6 <USB_ActivateEndpoint+0x2e6>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7c:	d813      	bhi.n	8004aa6 <USB_ActivateEndpoint+0x2b6>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	663b      	str	r3, [r7, #96]	; 0x60
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <USB_ActivateEndpoint+0x2a8>
 8004a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a94:	3301      	adds	r3, #1
 8004a96:	663b      	str	r3, [r7, #96]	; 0x60
 8004a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e017      	b.n	8004ad6 <USB_ActivateEndpoint+0x2e6>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <USB_ActivateEndpoint+0x2d0>
 8004aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004abc:	3b01      	subs	r3, #1
 8004abe:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	83fb      	strh	r3, [r7, #30]
 8004ae4:	8bfb      	ldrh	r3, [r7, #30]
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01b      	beq.n	8004b26 <USB_ActivateEndpoint+0x336>
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	83bb      	strh	r3, [r7, #28]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8bbb      	ldrh	r3, [r7, #28]
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	837b      	strh	r3, [r7, #26]
 8004b3e:	8b7b      	ldrh	r3, [r7, #26]
 8004b40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b44:	837b      	strh	r3, [r7, #26]
 8004b46:	8b7b      	ldrh	r3, [r7, #26]
 8004b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b4c:	837b      	strh	r3, [r7, #26]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8b7b      	ldrh	r3, [r7, #26]
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
 8004b6e:	e1a2      	b.n	8004eb6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bbc:	4413      	add	r3, r2
 8004bbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bce:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	891b      	ldrh	r3, [r3, #8]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	653b      	str	r3, [r7, #80]	; 0x50
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf0:	4413      	add	r3, r2
 8004bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	011a      	lsls	r2, r3, #4
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	895b      	ldrh	r3, [r3, #10]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 8091 	bne.w	8004d40 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004c2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01b      	beq.n	8004c6e <USB_ActivateEndpoint+0x47e>
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01b      	beq.n	8004cbe <USB_ActivateEndpoint+0x4ce>
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004cd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004cde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ce0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ce4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	441a      	add	r2, r3
 8004d28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8013      	strh	r3, [r2, #0]
 8004d3e:	e0ba      	b.n	8004eb6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01d      	beq.n	8004d98 <USB_ActivateEndpoint+0x5a8>
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004da8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01d      	beq.n	8004df0 <USB_ActivateEndpoint+0x600>
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d024      	beq.n	8004e42 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e16:	f083 0320 	eor.w	r3, r3, #32
 8004e1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
 8004e40:	e01d      	b.n	8004e7e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004eb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	376c      	adds	r7, #108	; 0x6c
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b08d      	sub	sp, #52	; 0x34
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	7b1b      	ldrb	r3, [r3, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 808e 	bne.w	8004ff4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d044      	beq.n	8004f6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	81bb      	strh	r3, [r7, #12]
 8004eee:	89bb      	ldrh	r3, [r7, #12]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <USB_DeactivateEndpoint+0x6c>
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	817b      	strh	r3, [r7, #10]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	813b      	strh	r3, [r7, #8]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	893b      	ldrh	r3, [r7, #8]
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]
 8004f68:	e192      	b.n	8005290 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	827b      	strh	r3, [r7, #18]
 8004f78:	8a7b      	ldrh	r3, [r7, #18]
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01b      	beq.n	8004fba <USB_DeactivateEndpoint+0xf6>
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	823b      	strh	r3, [r7, #16]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8a3b      	ldrh	r3, [r7, #16]
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	81fb      	strh	r3, [r7, #14]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	89fb      	ldrh	r3, [r7, #14]
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]
 8004ff2:	e14d      	b.n	8005290 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f040 80a5 	bne.w	8005148 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	843b      	strh	r3, [r7, #32]
 800500c:	8c3b      	ldrh	r3, [r7, #32]
 800500e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01b      	beq.n	800504e <USB_DeactivateEndpoint+0x18a>
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	83fb      	strh	r3, [r7, #30]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8bfb      	ldrh	r3, [r7, #30]
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	83bb      	strh	r3, [r7, #28]
 800505c:	8bbb      	ldrh	r3, [r7, #28]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01b      	beq.n	800509e <USB_DeactivateEndpoint+0x1da>
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	837b      	strh	r3, [r7, #26]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	8b7b      	ldrh	r3, [r7, #26]
 800508a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005096:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	833b      	strh	r3, [r7, #24]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	8b3b      	ldrh	r3, [r7, #24]
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	82fb      	strh	r3, [r7, #22]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	8afb      	ldrh	r3, [r7, #22]
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005124:	82bb      	strh	r3, [r7, #20]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	8abb      	ldrh	r3, [r7, #20]
 8005132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	b29b      	uxth	r3, r3
 8005144:	8013      	strh	r3, [r2, #0]
 8005146:	e0a3      	b.n	8005290 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <USB_DeactivateEndpoint+0x2d4>
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80051a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <USB_DeactivateEndpoint+0x324>
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800520c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	b29b      	uxth	r3, r3
 800521e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005236:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005254:	b29b      	uxth	r3, r3
 8005256:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3734      	adds	r7, #52	; 0x34
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b0c4      	sub	sp, #272	; 0x110
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	6018      	str	r0, [r3, #0]
 80052a6:	463b      	mov	r3, r7
 80052a8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052aa:	463b      	mov	r3, r7
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 8557 	bne.w	8005d64 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052b6:	463b      	mov	r3, r7
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699a      	ldr	r2, [r3, #24]
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d905      	bls.n	80052d2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052d0:	e004      	b.n	80052dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80052d2:	463b      	mov	r3, r7
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052dc:	463b      	mov	r3, r7
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	7b1b      	ldrb	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d12c      	bne.n	8005340 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6959      	ldr	r1, [r3, #20]
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	88da      	ldrh	r2, [r3, #6]
 80052f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	1d38      	adds	r0, r7, #4
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	f001 fa2c 	bl	8006758 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	011a      	lsls	r2, r3, #4
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005328:	f107 0310 	add.w	r3, r7, #16
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005332:	b29a      	uxth	r2, r3
 8005334:	f107 0310 	add.w	r3, r7, #16
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	f000 bcdd 	b.w	8005cfa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	78db      	ldrb	r3, [r3, #3]
 8005346:	2b02      	cmp	r3, #2
 8005348:	f040 8347 	bne.w	80059da <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	429a      	cmp	r2, r3
 800535a:	f240 82eb 	bls.w	8005934 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	463b      	mov	r3, r7
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800539a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053a2:	463b      	mov	r3, r7
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ac:	1ad2      	subs	r2, r2, r3
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8159 	beq.w	8005682 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d164      	bne.n	80054aa <USB_EPStartXfer+0x20e>
 80053e0:	1d3b      	adds	r3, r7, #4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	4413      	add	r3, r2
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	011a      	lsls	r2, r3, #4
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	4413      	add	r3, r2
 8005404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d112      	bne.n	8005438 <USB_EPStartXfer+0x19c>
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541c:	b29a      	uxth	r2, r3
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005430:	b29a      	uxth	r2, r3
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e054      	b.n	80054e2 <USB_EPStartXfer+0x246>
 8005438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543c:	2b3e      	cmp	r3, #62	; 0x3e
 800543e:	d817      	bhi.n	8005470 <USB_EPStartXfer+0x1d4>
 8005440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800544a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <USB_EPStartXfer+0x1c4>
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	3301      	adds	r3, #1
 800545c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	b29b      	uxth	r3, r3
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	b29a      	uxth	r2, r3
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	e038      	b.n	80054e2 <USB_EPStartXfer+0x246>
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800547a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	2b00      	cmp	r3, #0
 8005484:	d104      	bne.n	8005490 <USB_EPStartXfer+0x1f4>
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548a:	3b01      	subs	r3, #1
 800548c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005494:	b29b      	uxth	r3, r3
 8005496:	029b      	lsls	r3, r3, #10
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	e01b      	b.n	80054e2 <USB_EPStartXfer+0x246>
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d116      	bne.n	80054e2 <USB_EPStartXfer+0x246>
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	4413      	add	r3, r2
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
 80054c6:	463b      	mov	r3, r7
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	011a      	lsls	r2, r3, #4
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	4413      	add	r3, r2
 80054d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054d6:	633b      	str	r3, [r7, #48]	; 0x30
 80054d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054e2:	463b      	mov	r3, r7
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	895b      	ldrh	r3, [r3, #10]
 80054e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6959      	ldr	r1, [r3, #20]
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054fc:	1d38      	adds	r0, r7, #4
 80054fe:	6800      	ldr	r0, [r0, #0]
 8005500:	f001 f92a 	bl	8006758 <USB_WritePMA>
            ep->xfer_buff += len;
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550e:	441a      	add	r2, r3
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	429a      	cmp	r2, r3
 8005524:	d909      	bls.n	800553a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005530:	1ad2      	subs	r2, r2, r3
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	621a      	str	r2, [r3, #32]
 8005538:	e008      	b.n	800554c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2200      	movs	r2, #0
 800554a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800554c:	463b      	mov	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d164      	bne.n	8005620 <USB_EPStartXfer+0x384>
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d112      	bne.n	80055ae <USB_EPStartXfer+0x312>
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005592:	b29a      	uxth	r2, r3
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e057      	b.n	800565e <USB_EPStartXfer+0x3c2>
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b2:	2b3e      	cmp	r3, #62	; 0x3e
 80055b4:	d817      	bhi.n	80055e6 <USB_EPStartXfer+0x34a>
 80055b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <USB_EPStartXfer+0x33a>
 80055cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055d0:	3301      	adds	r3, #1
 80055d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29a      	uxth	r2, r3
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e03b      	b.n	800565e <USB_EPStartXfer+0x3c2>
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <USB_EPStartXfer+0x36a>
 80055fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005600:	3b01      	subs	r3, #1
 8005602:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005606:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800560a:	b29b      	uxth	r3, r3
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	b29b      	uxth	r3, r3
 8005610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005618:	b29a      	uxth	r2, r3
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e01e      	b.n	800565e <USB_EPStartXfer+0x3c2>
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d119      	bne.n	800565e <USB_EPStartXfer+0x3c2>
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	4413      	add	r3, r2
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	011a      	lsls	r2, r3, #4
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	4413      	add	r3, r2
 800564e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005652:	623b      	str	r3, [r7, #32]
 8005654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005658:	b29a      	uxth	r2, r3
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	891b      	ldrh	r3, [r3, #8]
 8005664:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6959      	ldr	r1, [r3, #20]
 800566e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005672:	b29b      	uxth	r3, r3
 8005674:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005678:	1d38      	adds	r0, r7, #4
 800567a:	6800      	ldr	r0, [r0, #0]
 800567c:	f001 f86c 	bl	8006758 <USB_WritePMA>
 8005680:	e33b      	b.n	8005cfa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d164      	bne.n	8005756 <USB_EPStartXfer+0x4ba>
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	4413      	add	r3, r2
 80056a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	011a      	lsls	r2, r3, #4
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d112      	bne.n	80056e4 <USB_EPStartXfer+0x448>
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e057      	b.n	8005794 <USB_EPStartXfer+0x4f8>
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ea:	d817      	bhi.n	800571c <USB_EPStartXfer+0x480>
 80056ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <USB_EPStartXfer+0x470>
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005706:	3301      	adds	r3, #1
 8005708:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800570c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005710:	b29b      	uxth	r3, r3
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	b29a      	uxth	r2, r3
 8005716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e03b      	b.n	8005794 <USB_EPStartXfer+0x4f8>
 800571c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <USB_EPStartXfer+0x4a0>
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005736:	3b01      	subs	r3, #1
 8005738:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800573c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005740:	b29b      	uxth	r3, r3
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	b29b      	uxth	r3, r3
 8005746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574e:	b29a      	uxth	r2, r3
 8005750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e01e      	b.n	8005794 <USB_EPStartXfer+0x4f8>
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d119      	bne.n	8005794 <USB_EPStartXfer+0x4f8>
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	657b      	str	r3, [r7, #84]	; 0x54
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005774:	4413      	add	r3, r2
 8005776:	657b      	str	r3, [r7, #84]	; 0x54
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	011a      	lsls	r2, r3, #4
 8005780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005782:	4413      	add	r3, r2
 8005784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005788:	653b      	str	r3, [r7, #80]	; 0x50
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	b29a      	uxth	r2, r3
 8005790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005792:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	891b      	ldrh	r3, [r3, #8]
 800579a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057ae:	1d38      	adds	r0, r7, #4
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f000 ffd1 	bl	8006758 <USB_WritePMA>
            ep->xfer_buff += len;
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c0:	441a      	add	r2, r3
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d909      	bls.n	80057ec <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	621a      	str	r2, [r3, #32]
 80057ea:	e008      	b.n	80057fe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80057f6:	463b      	mov	r3, r7
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	647b      	str	r3, [r7, #68]	; 0x44
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d164      	bne.n	80058d8 <USB_EPStartXfer+0x63c>
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581c:	b29b      	uxth	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	4413      	add	r3, r2
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	011a      	lsls	r2, r3, #4
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005830:	4413      	add	r3, r2
 8005832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d112      	bne.n	8005866 <USB_EPStartXfer+0x5ca>
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584a:	b29a      	uxth	r2, r3
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e054      	b.n	8005910 <USB_EPStartXfer+0x674>
 8005866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800586a:	2b3e      	cmp	r3, #62	; 0x3e
 800586c:	d817      	bhi.n	800589e <USB_EPStartXfer+0x602>
 800586e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <USB_EPStartXfer+0x5f2>
 8005884:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005888:	3301      	adds	r3, #1
 800588a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800588e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005892:	b29b      	uxth	r3, r3
 8005894:	029b      	lsls	r3, r3, #10
 8005896:	b29a      	uxth	r2, r3
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e038      	b.n	8005910 <USB_EPStartXfer+0x674>
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <USB_EPStartXfer+0x622>
 80058b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058b8:	3b01      	subs	r3, #1
 80058ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	029b      	lsls	r3, r3, #10
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e01b      	b.n	8005910 <USB_EPStartXfer+0x674>
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d116      	bne.n	8005910 <USB_EPStartXfer+0x674>
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f0:	4413      	add	r3, r2
 80058f2:	647b      	str	r3, [r7, #68]	; 0x44
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fe:	4413      	add	r3, r2
 8005900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005904:	643b      	str	r3, [r7, #64]	; 0x40
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590a:	b29a      	uxth	r2, r3
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	895b      	ldrh	r3, [r3, #10]
 8005916:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6959      	ldr	r1, [r3, #20]
 8005920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005924:	b29b      	uxth	r3, r3
 8005926:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800592a:	1d38      	adds	r0, r7, #4
 800592c:	6800      	ldr	r0, [r0, #0]
 800592e:	f000 ff13 	bl	8006758 <USB_WritePMA>
 8005932:	e1e2      	b.n	8005cfa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	441a      	add	r2, r3
 800596a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800596e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597e:	b29b      	uxth	r3, r3
 8005980:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	663b      	str	r3, [r7, #96]	; 0x60
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005996:	4413      	add	r3, r2
 8005998:	663b      	str	r3, [r7, #96]	; 0x60
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	011a      	lsls	r2, r3, #4
 80059a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	891b      	ldrh	r3, [r3, #8]
 80059bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6959      	ldr	r1, [r3, #20]
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059d0:	1d38      	adds	r0, r7, #4
 80059d2:	6800      	ldr	r0, [r0, #0]
 80059d4:	f000 fec0 	bl	8006758 <USB_WritePMA>
 80059d8:	e18f      	b.n	8005cfa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	463b      	mov	r3, r7
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 808f 	beq.w	8005b14 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d164      	bne.n	8005ad0 <USB_EPStartXfer+0x834>
 8005a06:	1d3b      	adds	r3, r7, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1a:	4413      	add	r3, r2
 8005a1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d112      	bne.n	8005a5e <USB_EPStartXfer+0x7c2>
 8005a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e054      	b.n	8005b08 <USB_EPStartXfer+0x86c>
 8005a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a62:	2b3e      	cmp	r3, #62	; 0x3e
 8005a64:	d817      	bhi.n	8005a96 <USB_EPStartXfer+0x7fa>
 8005a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <USB_EPStartXfer+0x7ea>
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e038      	b.n	8005b08 <USB_EPStartXfer+0x86c>
 8005a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <USB_EPStartXfer+0x81a>
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e01b      	b.n	8005b08 <USB_EPStartXfer+0x86c>
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d116      	bne.n	8005b08 <USB_EPStartXfer+0x86c>
 8005ada:	1d3b      	adds	r3, r7, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae8:	4413      	add	r3, r2
 8005aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aec:	463b      	mov	r3, r7
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	011a      	lsls	r2, r3, #4
 8005af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005afc:	677b      	str	r3, [r7, #116]	; 0x74
 8005afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	895b      	ldrh	r3, [r3, #10]
 8005b0e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005b12:	e097      	b.n	8005c44 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b14:	463b      	mov	r3, r7
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d168      	bne.n	8005bf0 <USB_EPStartXfer+0x954>
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b36:	4413      	add	r3, r2
 8005b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	011a      	lsls	r2, r3, #4
 8005b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b48:	4413      	add	r3, r2
 8005b4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d112      	bne.n	8005b7e <USB_EPStartXfer+0x8e2>
 8005b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e05d      	b.n	8005c3a <USB_EPStartXfer+0x99e>
 8005b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b82:	2b3e      	cmp	r3, #62	; 0x3e
 8005b84:	d817      	bhi.n	8005bb6 <USB_EPStartXfer+0x91a>
 8005b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <USB_EPStartXfer+0x90a>
 8005b9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e041      	b.n	8005c3a <USB_EPStartXfer+0x99e>
 8005bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <USB_EPStartXfer+0x93a>
 8005bcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e024      	b.n	8005c3a <USB_EPStartXfer+0x99e>
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11f      	bne.n	8005c3a <USB_EPStartXfer+0x99e>
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c12:	4413      	add	r3, r2
 8005c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	891b      	ldrh	r3, [r3, #8]
 8005c40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c44:	463b      	mov	r3, r7
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6959      	ldr	r1, [r3, #20]
 8005c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c54:	1d38      	adds	r0, r7, #4
 8005c56:	6800      	ldr	r0, [r0, #0]
 8005c58:	f000 fd7e 	bl	8006758 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d122      	bne.n	8005cac <USB_EPStartXfer+0xa10>
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005c84:	1d3b      	adds	r3, r7, #4
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	441a      	add	r2, r3
 8005c92:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]
 8005caa:	e026      	b.n	8005cfa <USB_EPStartXfer+0xa5e>
 8005cac:	463b      	mov	r3, r7
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d121      	bne.n	8005cfa <USB_EPStartXfer+0xa5e>
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	463b      	mov	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f107 020e 	add.w	r2, r7, #14
 8005d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d18:	8013      	strh	r3, [r2, #0]
 8005d1a:	f107 030e 	add.w	r3, r7, #14
 8005d1e:	f107 020e 	add.w	r2, r7, #14
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	f082 0210 	eor.w	r2, r2, #16
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	f107 030e 	add.w	r3, r7, #14
 8005d2e:	f107 020e 	add.w	r2, r7, #14
 8005d32:	8812      	ldrh	r2, [r2, #0]
 8005d34:	f082 0220 	eor.w	r2, r2, #32
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	f107 030e 	add.w	r3, r7, #14
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
 8005d62:	e3b5      	b.n	80064d0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	7b1b      	ldrb	r3, [r3, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 8090 	bne.w	8005e90 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d90e      	bls.n	8005d9e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	619a      	str	r2, [r3, #24]
 8005d9c:	e008      	b.n	8005db0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005db0:	1d3b      	adds	r3, r7, #4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dc8:	4413      	add	r3, r2
 8005dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d116      	bne.n	8005e1a <USB_EPStartXfer+0xb7e>
 8005dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e32c      	b.n	8006474 <USB_EPStartXfer+0x11d8>
 8005e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e20:	d818      	bhi.n	8005e54 <USB_EPStartXfer+0xbb8>
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <USB_EPStartXfer+0xba6>
 8005e38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e30f      	b.n	8006474 <USB_EPStartXfer+0x11d8>
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <USB_EPStartXfer+0xbd8>
 8005e6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	029b      	lsls	r3, r3, #10
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e2f1      	b.n	8006474 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	78db      	ldrb	r3, [r3, #3]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	f040 818f 	bne.w	80061ba <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d175      	bne.n	8005f92 <USB_EPStartXfer+0xcf6>
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eda:	463b      	mov	r3, r7
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d116      	bne.n	8005f12 <USB_EPStartXfer+0xc76>
 8005ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e065      	b.n	8005fde <USB_EPStartXfer+0xd42>
 8005f12:	463b      	mov	r3, r7
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b3e      	cmp	r3, #62	; 0x3e
 8005f1a:	d81a      	bhi.n	8005f52 <USB_EPStartXfer+0xcb6>
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <USB_EPStartXfer+0xca4>
 8005f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e045      	b.n	8005fde <USB_EPStartXfer+0xd42>
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <USB_EPStartXfer+0xcda>
 8005f6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f70:	3b01      	subs	r3, #1
 8005f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e025      	b.n	8005fde <USB_EPStartXfer+0xd42>
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d120      	bne.n	8005fde <USB_EPStartXfer+0xd42>
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fba:	463b      	mov	r3, r7
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d175      	bne.n	80060dc <USB_EPStartXfer+0xe40>
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006008:	4413      	add	r3, r2
 800600a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	011a      	lsls	r2, r3, #4
 8006016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800601a:	4413      	add	r3, r2
 800601c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d116      	bne.n	800605c <USB_EPStartXfer+0xdc0>
 800602e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e061      	b.n	8006120 <USB_EPStartXfer+0xe84>
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b3e      	cmp	r3, #62	; 0x3e
 8006064:	d81a      	bhi.n	800609c <USB_EPStartXfer+0xe00>
 8006066:	463b      	mov	r3, r7
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <USB_EPStartXfer+0xdee>
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e041      	b.n	8006120 <USB_EPStartXfer+0xe84>
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <USB_EPStartXfer+0xe24>
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	3b01      	subs	r3, #1
 80060bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	029b      	lsls	r3, r3, #10
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e021      	b.n	8006120 <USB_EPStartXfer+0xe84>
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d11c      	bne.n	8006120 <USB_EPStartXfer+0xe84>
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060f6:	4413      	add	r3, r2
 80060f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	011a      	lsls	r2, r3, #4
 8006104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006108:	4413      	add	r3, r2
 800610a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800610e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	b29a      	uxth	r2, r3
 800611a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800611e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 81a4 	beq.w	8006474 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	463b      	mov	r3, r7
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006140:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <USB_EPStartXfer+0xebc>
 800614c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10d      	bne.n	8006174 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006158:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800615c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 8187 	bne.w	8006474 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006166:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 8180 	bne.w	8006474 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80061a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8013      	strh	r3, [r2, #0]
 80061b8:	e15c      	b.n	8006474 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	78db      	ldrb	r3, [r3, #3]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	f040 8155 	bne.w	8006470 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d90e      	bls.n	80061f4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	619a      	str	r2, [r3, #24]
 80061f2:	e008      	b.n	8006206 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80061f4:	463b      	mov	r3, r7
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d16f      	bne.n	80062f0 <USB_EPStartXfer+0x1054>
 8006210:	1d3b      	adds	r3, r7, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006218:	1d3b      	adds	r3, r7, #4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006220:	b29b      	uxth	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006228:	4413      	add	r3, r2
 800622a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	011a      	lsls	r2, r3, #4
 8006236:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800623a:	4413      	add	r3, r2
 800623c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d116      	bne.n	800627a <USB_EPStartXfer+0xfde>
 800624c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006258:	b29a      	uxth	r2, r3
 800625a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006270:	b29a      	uxth	r2, r3
 8006272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	e05f      	b.n	800633a <USB_EPStartXfer+0x109e>
 800627a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627e:	2b3e      	cmp	r3, #62	; 0x3e
 8006280:	d818      	bhi.n	80062b4 <USB_EPStartXfer+0x1018>
 8006282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800628c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <USB_EPStartXfer+0x1006>
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629c:	3301      	adds	r3, #1
 800629e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e042      	b.n	800633a <USB_EPStartXfer+0x109e>
 80062b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <USB_EPStartXfer+0x1038>
 80062ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ce:	3b01      	subs	r3, #1
 80062d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d8:	b29b      	uxth	r3, r3
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	b29b      	uxth	r3, r3
 80062de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e024      	b.n	800633a <USB_EPStartXfer+0x109e>
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d11f      	bne.n	800633a <USB_EPStartXfer+0x109e>
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006312:	4413      	add	r3, r2
 8006314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	011a      	lsls	r2, r3, #4
 8006320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006324:	4413      	add	r3, r2
 8006326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800632a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800632e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d16f      	bne.n	800642c <USB_EPStartXfer+0x1190>
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635c:	b29b      	uxth	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006364:	4413      	add	r3, r2
 8006366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	011a      	lsls	r2, r3, #4
 8006372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006376:	4413      	add	r3, r2
 8006378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800637c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d116      	bne.n	80063b6 <USB_EPStartXfer+0x111a>
 8006388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e05e      	b.n	8006474 <USB_EPStartXfer+0x11d8>
 80063b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ba:	2b3e      	cmp	r3, #62	; 0x3e
 80063bc:	d818      	bhi.n	80063f0 <USB_EPStartXfer+0x1154>
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <USB_EPStartXfer+0x1142>
 80063d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d8:	3301      	adds	r3, #1
 80063da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	029b      	lsls	r3, r3, #10
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e041      	b.n	8006474 <USB_EPStartXfer+0x11d8>
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <USB_EPStartXfer+0x1174>
 8006406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800640a:	3b01      	subs	r3, #1
 800640c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006414:	b29b      	uxth	r3, r3
 8006416:	029b      	lsls	r3, r3, #10
 8006418:	b29b      	uxth	r3, r3
 800641a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006422:	b29a      	uxth	r2, r3
 8006424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	e023      	b.n	8006474 <USB_EPStartXfer+0x11d8>
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d11e      	bne.n	8006474 <USB_EPStartXfer+0x11d8>
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643e:	b29b      	uxth	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006446:	4413      	add	r3, r2
 8006448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	011a      	lsls	r2, r3, #4
 8006454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006458:	4413      	add	r3, r2
 800645a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800645e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	b29a      	uxth	r2, r3
 8006468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	e001      	b.n	8006474 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e02e      	b.n	80064d2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006492:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006496:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800649a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800649e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80064bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d020      	beq.n	8006530 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	81bb      	strh	r3, [r7, #12]
 8006506:	89bb      	ldrh	r3, [r7, #12]
 8006508:	f083 0310 	eor.w	r3, r3, #16
 800650c:	81bb      	strh	r3, [r7, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	89bb      	ldrh	r3, [r7, #12]
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]
 800652e:	e01f      	b.n	8006570 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	81fb      	strh	r3, [r7, #14]
 8006548:	89fb      	ldrh	r3, [r7, #14]
 800654a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800654e:	81fb      	strh	r3, [r7, #14]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	89fb      	ldrh	r3, [r7, #14]
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	7b1b      	ldrb	r3, [r3, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	f040 809d 	bne.w	80066ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d04c      	beq.n	8006632 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	823b      	strh	r3, [r7, #16]
 80065a6:	8a3b      	ldrh	r3, [r7, #16]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01b      	beq.n	80065e8 <USB_EPClearStall+0x6c>
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c6:	81fb      	strh	r3, [r7, #14]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	89fb      	ldrh	r3, [r7, #14]
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	78db      	ldrb	r3, [r3, #3]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d06c      	beq.n	80066ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006606:	81bb      	strh	r3, [r7, #12]
 8006608:	89bb      	ldrh	r3, [r7, #12]
 800660a:	f083 0320 	eor.w	r3, r3, #32
 800660e:	81bb      	strh	r3, [r7, #12]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	89bb      	ldrh	r3, [r7, #12]
 800661c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662c:	b29b      	uxth	r3, r3
 800662e:	8013      	strh	r3, [r2, #0]
 8006630:	e04b      	b.n	80066ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	82fb      	strh	r3, [r7, #22]
 8006640:	8afb      	ldrh	r3, [r7, #22]
 8006642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01b      	beq.n	8006682 <USB_EPClearStall+0x106>
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006660:	82bb      	strh	r3, [r7, #20]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	441a      	add	r2, r3
 800666c:	8abb      	ldrh	r3, [r7, #20]
 800666e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800667a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667e:	b29b      	uxth	r3, r3
 8006680:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006698:	827b      	strh	r3, [r7, #18]
 800669a:	8a7b      	ldrh	r3, [r7, #18]
 800669c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066a0:	827b      	strh	r3, [r7, #18]
 80066a2:	8a7b      	ldrh	r3, [r7, #18]
 80066a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066a8:	827b      	strh	r3, [r7, #18]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8a7b      	ldrh	r3, [r7, #18]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006732:	b29b      	uxth	r3, r3
 8006734:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006758:	b480      	push	{r7}
 800675a:	b08d      	sub	sp, #52	; 0x34
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	80fb      	strh	r3, [r7, #6]
 800676a:	4613      	mov	r3, r2
 800676c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800676e:	88bb      	ldrh	r3, [r7, #4]
 8006770:	3301      	adds	r3, #1
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	005a      	lsls	r2, r3, #1
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006790:	e01e      	b.n	80067d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	3302      	adds	r3, #2
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	3302      	adds	r3, #2
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	3301      	adds	r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	3b01      	subs	r3, #1
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1dd      	bne.n	8006792 <USB_WritePMA+0x3a>
  }
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	3734      	adds	r7, #52	; 0x34
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b08b      	sub	sp, #44	; 0x2c
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	4611      	mov	r1, r2
 80067ee:	461a      	mov	r2, r3
 80067f0:	460b      	mov	r3, r1
 80067f2:	80fb      	strh	r3, [r7, #6]
 80067f4:	4613      	mov	r3, r2
 80067f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067f8:	88bb      	ldrh	r3, [r7, #4]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	005a      	lsls	r2, r3, #1
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006814:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
 800681a:	e01b      	b.n	8006854 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	3302      	adds	r3, #2
 8006828:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	3301      	adds	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	b2da      	uxtb	r2, r3
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	3301      	adds	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	3302      	adds	r3, #2
 800684c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	3b01      	subs	r3, #1
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e0      	bne.n	800681c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800685a:	88bb      	ldrh	r3, [r7, #4]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	701a      	strb	r2, [r3, #0]
  }
}
 8006876:	bf00      	nop
 8006878:	372c      	adds	r7, #44	; 0x2c
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d115      	bne.n	80068c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689c:	2202      	movs	r2, #2
 800689e:	2181      	movs	r1, #129	; 0x81
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fe9e 	bl	80085e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b0:	2202      	movs	r2, #2
 80068b2:	2101      	movs	r1, #1
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fe94 	bl	80085e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80068c2:	e012      	b.n	80068ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	2202      	movs	r2, #2
 80068c8:	2181      	movs	r1, #129	; 0x81
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fe89 	bl	80085e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068d6:	2340      	movs	r3, #64	; 0x40
 80068d8:	2202      	movs	r2, #2
 80068da:	2101      	movs	r1, #1
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fe80 	bl	80085e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068ea:	2308      	movs	r3, #8
 80068ec:	2203      	movs	r2, #3
 80068ee:	2182      	movs	r1, #130	; 0x82
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fe76 	bl	80085e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006900:	f001 ff96 	bl	8008830 <USBD_static_malloc>
 8006904:	4602      	mov	r2, r0
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006916:	2301      	movs	r3, #1
 8006918:	73fb      	strb	r3, [r7, #15]
 800691a:	e026      	b.n	800696a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7c1b      	ldrb	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800694c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006950:	2101      	movs	r1, #1
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 ff36 	bl	80087c4 <USBD_LL_PrepareReceive>
 8006958:	e007      	b.n	800696a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2101      	movs	r1, #1
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 ff2d 	bl	80087c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006984:	2181      	movs	r1, #129	; 0x81
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fe51 	bl	800862e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fe4a 	bl	800862e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069a2:	2182      	movs	r1, #130	; 0x82
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fe42 	bl	800862e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 ff3c 	bl	8008848 <USBD_static_free>
    pdev->pClassData = NULL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d039      	beq.n	8006a80 <USBD_CDC_Setup+0x9e>
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d17f      	bne.n	8006b10 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d029      	beq.n	8006a6c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da11      	bge.n	8006a46 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	88d2      	ldrh	r2, [r2, #6]
 8006a34:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a36:	6939      	ldr	r1, [r7, #16]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	88db      	ldrh	r3, [r3, #6]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fa09 	bl	8007e56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a44:	e06b      	b.n	8006b1e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	785a      	ldrb	r2, [r3, #1]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	88db      	ldrh	r3, [r3, #6]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a5c:	6939      	ldr	r1, [r7, #16]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	88db      	ldrh	r3, [r3, #6]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fa24 	bl	8007eb2 <USBD_CtlPrepareRx>
      break;
 8006a6a:	e058      	b.n	8006b1e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	7850      	ldrb	r0, [r2, #1]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	4798      	blx	r3
      break;
 8006a7e:	e04e      	b.n	8006b1e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b0b      	cmp	r3, #11
 8006a86:	d02e      	beq.n	8006ae6 <USBD_CDC_Setup+0x104>
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	dc38      	bgt.n	8006afe <USBD_CDC_Setup+0x11c>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <USBD_CDC_Setup+0xb4>
 8006a90:	2b0a      	cmp	r3, #10
 8006a92:	d014      	beq.n	8006abe <USBD_CDC_Setup+0xdc>
 8006a94:	e033      	b.n	8006afe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d107      	bne.n	8006ab0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006aa0:	f107 030c 	add.w	r3, r7, #12
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f9d4 	bl	8007e56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aae:	e02e      	b.n	8006b0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f965 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	75fb      	strb	r3, [r7, #23]
          break;
 8006abc:	e027      	b.n	8006b0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d107      	bne.n	8006ad8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ac8:	f107 030f 	add.w	r3, r7, #15
 8006acc:	2201      	movs	r2, #1
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f9c0 	bl	8007e56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ad6:	e01a      	b.n	8006b0e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 f951 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae4:	e013      	b.n	8006b0e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d00d      	beq.n	8006b0c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f945 	bl	8007d82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006af8:	2302      	movs	r3, #2
 8006afa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006afc:	e006      	b.n	8006b0c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 f93e 	bl	8007d82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b06:	2302      	movs	r3, #2
 8006b08:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0a:	e000      	b.n	8006b0e <USBD_CDC_Setup+0x12c>
          break;
 8006b0c:	bf00      	nop
      }
      break;
 8006b0e:	e006      	b.n	8006b1e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 f935 	bl	8007d82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	bf00      	nop
  }

  return ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b42:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03a      	beq.n	8006bc4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	331c      	adds	r3, #28
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d029      	beq.n	8006bb8 <USBD_CDC_DataIn+0x90>
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	331c      	adds	r3, #28
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	78f9      	ldrb	r1, [r7, #3]
 8006b78:	68b8      	ldr	r0, [r7, #8]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	4403      	add	r3, r0
 8006b84:	3338      	adds	r3, #56	; 0x38
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b8c:	fb03 f301 	mul.w	r3, r3, r1
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d110      	bne.n	8006bb8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	331c      	adds	r3, #28
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006baa:	78f9      	ldrb	r1, [r7, #3]
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 fde4 	bl	800877e <USBD_LL_Transmit>
 8006bb6:	e003      	b.n	8006bc0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fe0f 	bl	800880a <USBD_LL_GetRxDataSize>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c12:	4611      	mov	r1, r2
 8006c14:	4798      	blx	r3

    return USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e000      	b.n	8006c1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006c1a:	2302      	movs	r3, #2
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d015      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x46>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	d010      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c5e:	b292      	uxth	r2, r2
 8006c60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2243      	movs	r2, #67	; 0x43
 8006c80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	200000bc 	.word	0x200000bc

08006c94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2243      	movs	r2, #67	; 0x43
 8006ca0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ca2:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bc80      	pop	{r7}
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20000078 	.word	0x20000078

08006cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2243      	movs	r2, #67	; 0x43
 8006cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	20000100 	.word	0x20000100

08006cd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000034 	.word	0x20000034

08006cf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01c      	beq.n	8006dcc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2181      	movs	r1, #129	; 0x81
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fcdd 	bl	800877e <USBD_LL_Transmit>

      return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e002      	b.n	8006dce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006dcc:	2302      	movs	r3, #2
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7c1b      	ldrb	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fcdd 	bl	80087c4 <USBD_LL_PrepareReceive>
 8006e0a:	e007      	b.n	8006e1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fcd4 	bl	80087c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	4613      	mov	r3, r2
 8006e36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e01a      	b.n	8006e78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	79fa      	ldrb	r2, [r7, #7]
 8006e6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f001 fb41 	bl	80084f8 <USBD_LL_Init>

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	e001      	b.n	8006ea6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fb76 	bl	80085ac <USBD_LL_Start>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	78fa      	ldrb	r2, [r7, #3]
 8006f02:	4611      	mov	r1, r2
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	78fa      	ldrb	r2, [r7, #3]
 8006f32:	4611      	mov	r1, r2
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3

  return USBD_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fed8 	bl	8007d0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f68:	461a      	mov	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d016      	beq.n	8006fac <USBD_LL_SetupStage+0x6a>
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d81c      	bhi.n	8006fbc <USBD_LL_SetupStage+0x7a>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <USBD_LL_SetupStage+0x4a>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d008      	beq.n	8006f9c <USBD_LL_SetupStage+0x5a>
 8006f8a:	e017      	b.n	8006fbc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f9cb 	bl	8007330 <USBD_StdDevReq>
      break;
 8006f9a:	e01a      	b.n	8006fd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa2d 	bl	8007404 <USBD_StdItfReq>
      break;
 8006faa:	e012      	b.n	8006fd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa6d 	bl	8007494 <USBD_StdEPReq>
      break;
 8006fba:	e00a      	b.n	8006fd2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fb4e 	bl	800866c <USBD_LL_StallEP>
      break;
 8006fd0:	bf00      	nop
  }

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d14b      	bne.n	8007088 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ff6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d134      	bne.n	800706c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	d919      	bls.n	8007042 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007024:	429a      	cmp	r2, r3
 8007026:	d203      	bcs.n	8007030 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800702c:	b29b      	uxth	r3, r3
 800702e:	e002      	b.n	8007036 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 ff57 	bl	8007eee <USBD_CtlContinueRx>
 8007040:	e038      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007054:	2b03      	cmp	r3, #3
 8007056:	d105      	bne.n	8007064 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 ff54 	bl	8007f12 <USBD_CtlSendStatus>
 800706a:	e023      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007072:	2b05      	cmp	r3, #5
 8007074:	d11e      	bne.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 faf3 	bl	800866c <USBD_LL_StallEP>
 8007086:	e015      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800709a:	2b03      	cmp	r3, #3
 800709c:	d108      	bne.n	80070b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	7afa      	ldrb	r2, [r7, #11]
 80070a8:	4611      	mov	r1, r2
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	4798      	blx	r3
 80070ae:	e001      	b.n	80070b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e000      	b.n	80070b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	460b      	mov	r3, r1
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d17f      	bne.n	80071d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3314      	adds	r3, #20
 80070d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d15c      	bne.n	800719c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d915      	bls.n	800711a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	1ad2      	subs	r2, r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fec1 	bl	8007e8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f001 fb56 	bl	80087c4 <USBD_LL_PrepareReceive>
 8007118:	e04e      	b.n	80071b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	6912      	ldr	r2, [r2, #16]
 8007122:	fbb3 f1f2 	udiv	r1, r3, r2
 8007126:	fb02 f201 	mul.w	r2, r2, r1
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11c      	bne.n	800716a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007138:	429a      	cmp	r2, r3
 800713a:	d316      	bcc.n	800716a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007146:	429a      	cmp	r2, r3
 8007148:	d20f      	bcs.n	800716a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fe9d 	bl	8007e8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800715c:	2300      	movs	r3, #0
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 fb2e 	bl	80087c4 <USBD_LL_PrepareReceive>
 8007168:	e026      	b.n	80071b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800717c:	2b03      	cmp	r3, #3
 800717e:	d105      	bne.n	800718c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fa6c 	bl	800866c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fecf 	bl	8007f38 <USBD_CtlReceiveStatus>
 800719a:	e00d      	b.n	80071b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d004      	beq.n	80071b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f001 fa5a 	bl	800866c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d11d      	bne.n	80071fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fe81 	bl	8006eca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071d0:	e015      	b.n	80071fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d108      	bne.n	80071fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	7afa      	ldrb	r2, [r7, #11]
 80071f2:	4611      	mov	r1, r2
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	4798      	blx	r3
 80071f8:	e001      	b.n	80071fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	2200      	movs	r2, #0
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f9e3 	bl	80085e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800722c:	2340      	movs	r3, #64	; 0x40
 800722e:	2200      	movs	r2, #0
 8007230:	2180      	movs	r1, #128	; 0x80
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 f9d5 	bl	80085e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2240      	movs	r2, #64	; 0x40
 8007242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	4611      	mov	r1, r2
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2204      	movs	r2, #4
 80072c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d105      	bne.n	80072ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr

080072fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007308:	2b03      	cmp	r3, #3
 800730a:	d10b      	bne.n	8007324 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d005      	beq.n	8007356 <USBD_StdDevReq+0x26>
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	d84f      	bhi.n	80073ee <USBD_StdDevReq+0xbe>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <USBD_StdDevReq+0x36>
 8007352:	2b20      	cmp	r3, #32
 8007354:	d14b      	bne.n	80073ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
      break;
 8007364:	e048      	b.n	80073f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b09      	cmp	r3, #9
 800736c:	d839      	bhi.n	80073e2 <USBD_StdDevReq+0xb2>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <USBD_StdDevReq+0x44>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073d9 	.word	0x080073d9
 800737c:	080073e3 	.word	0x080073e3
 8007380:	080073cf 	.word	0x080073cf
 8007384:	080073e3 	.word	0x080073e3
 8007388:	080073a7 	.word	0x080073a7
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073e3 	.word	0x080073e3
 8007394:	080073bb 	.word	0x080073bb
 8007398:	080073b1 	.word	0x080073b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f9dc 	bl	800775c <USBD_GetDescriptor>
          break;
 80073a4:	e022      	b.n	80073ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb3f 	bl	8007a2c <USBD_SetAddress>
          break;
 80073ae:	e01d      	b.n	80073ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fb7e 	bl	8007ab4 <USBD_SetConfig>
          break;
 80073b8:	e018      	b.n	80073ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc07 	bl	8007bd0 <USBD_GetConfig>
          break;
 80073c2:	e013      	b.n	80073ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fc37 	bl	8007c3a <USBD_GetStatus>
          break;
 80073cc:	e00e      	b.n	80073ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fc65 	bl	8007ca0 <USBD_SetFeature>
          break;
 80073d6:	e009      	b.n	80073ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fc74 	bl	8007cc8 <USBD_ClrFeature>
          break;
 80073e0:	e004      	b.n	80073ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fccc 	bl	8007d82 <USBD_CtlError>
          break;
 80073ea:	bf00      	nop
      }
      break;
 80073ec:	e004      	b.n	80073f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fcc6 	bl	8007d82 <USBD_CtlError>
      break;
 80073f6:	bf00      	nop
  }

  return ret;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop

08007404 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d005      	beq.n	800742a <USBD_StdItfReq+0x26>
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d82e      	bhi.n	8007480 <USBD_StdItfReq+0x7c>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <USBD_StdItfReq+0x26>
 8007426:	2b20      	cmp	r3, #32
 8007428:	d12a      	bne.n	8007480 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007430:	3b01      	subs	r3, #1
 8007432:	2b02      	cmp	r3, #2
 8007434:	d81d      	bhi.n	8007472 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	889b      	ldrh	r3, [r3, #4]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d813      	bhi.n	8007468 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	88db      	ldrh	r3, [r3, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d110      	bne.n	800747c <USBD_StdItfReq+0x78>
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10d      	bne.n	800747c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fd56 	bl	8007f12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007466:	e009      	b.n	800747c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fc89 	bl	8007d82 <USBD_CtlError>
          break;
 8007470:	e004      	b.n	800747c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc84 	bl	8007d82 <USBD_CtlError>
          break;
 800747a:	e000      	b.n	800747e <USBD_StdItfReq+0x7a>
          break;
 800747c:	bf00      	nop
      }
      break;
 800747e:	e004      	b.n	800748a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fc7d 	bl	8007d82 <USBD_CtlError>
      break;
 8007488:	bf00      	nop
  }

  return USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d007      	beq.n	80074c4 <USBD_StdEPReq+0x30>
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	f200 8146 	bhi.w	8007746 <USBD_StdEPReq+0x2b2>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <USBD_StdEPReq+0x40>
 80074be:	2b20      	cmp	r3, #32
 80074c0:	f040 8141 	bne.w	8007746 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
      break;
 80074d2:	e13d      	b.n	8007750 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d10a      	bne.n	80074f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	e12d      	b.n	8007752 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d007      	beq.n	800750e <USBD_StdEPReq+0x7a>
 80074fe:	2b03      	cmp	r3, #3
 8007500:	f300 811b 	bgt.w	800773a <USBD_StdEPReq+0x2a6>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d072      	beq.n	80075ee <USBD_StdEPReq+0x15a>
 8007508:	2b01      	cmp	r3, #1
 800750a:	d03a      	beq.n	8007582 <USBD_StdEPReq+0xee>
 800750c:	e115      	b.n	800773a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	2b02      	cmp	r3, #2
 8007516:	d002      	beq.n	800751e <USBD_StdEPReq+0x8a>
 8007518:	2b03      	cmp	r3, #3
 800751a:	d015      	beq.n	8007548 <USBD_StdEPReq+0xb4>
 800751c:	e02b      	b.n	8007576 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <USBD_StdEPReq+0xaa>
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b80      	cmp	r3, #128	; 0x80
 8007528:	d009      	beq.n	800753e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 f89c 	bl	800866c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f898 	bl	800866c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800753c:	e020      	b.n	8007580 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc1e 	bl	8007d82 <USBD_CtlError>
              break;
 8007546:	e01b      	b.n	8007580 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10e      	bne.n	800756e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <USBD_StdEPReq+0xda>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b80      	cmp	r3, #128	; 0x80
 800755a:	d008      	beq.n	800756e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f87f 	bl	800866c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fccf 	bl	8007f12 <USBD_CtlSendStatus>

              break;
 8007574:	e004      	b.n	8007580 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc02 	bl	8007d82 <USBD_CtlError>
              break;
 800757e:	bf00      	nop
          }
          break;
 8007580:	e0e0      	b.n	8007744 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007588:	2b02      	cmp	r3, #2
 800758a:	d002      	beq.n	8007592 <USBD_StdEPReq+0xfe>
 800758c:	2b03      	cmp	r3, #3
 800758e:	d015      	beq.n	80075bc <USBD_StdEPReq+0x128>
 8007590:	e026      	b.n	80075e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <USBD_StdEPReq+0x11e>
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d009      	beq.n	80075b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 f862 	bl	800866c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075a8:	2180      	movs	r1, #128	; 0x80
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f85e 	bl	800866c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075b0:	e01c      	b.n	80075ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fbe4 	bl	8007d82 <USBD_CtlError>
              break;
 80075ba:	e017      	b.n	80075ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d112      	bne.n	80075ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f869 	bl	80086aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc9a 	bl	8007f12 <USBD_CtlSendStatus>
              }
              break;
 80075de:	e004      	b.n	80075ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fbcd 	bl	8007d82 <USBD_CtlError>
              break;
 80075e8:	e000      	b.n	80075ec <USBD_StdEPReq+0x158>
              break;
 80075ea:	bf00      	nop
          }
          break;
 80075ec:	e0aa      	b.n	8007744 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d002      	beq.n	80075fe <USBD_StdEPReq+0x16a>
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d032      	beq.n	8007662 <USBD_StdEPReq+0x1ce>
 80075fc:	e097      	b.n	800772e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <USBD_StdEPReq+0x180>
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d004      	beq.n	8007614 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fbb8 	bl	8007d82 <USBD_CtlError>
                break;
 8007612:	e091      	b.n	8007738 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	da0b      	bge.n	8007634 <USBD_StdEPReq+0x1a0>
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	3310      	adds	r3, #16
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	3304      	adds	r3, #4
 8007632:	e00b      	b.n	800764c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	4413      	add	r3, r2
 800764a:	3304      	adds	r3, #4
 800764c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2202      	movs	r2, #2
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fbfb 	bl	8007e56 <USBD_CtlSendData>
              break;
 8007660:	e06a      	b.n	8007738 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	da11      	bge.n	800768e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 020f 	and.w	r2, r3, #15
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	3318      	adds	r3, #24
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d117      	bne.n	80076b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fb7b 	bl	8007d82 <USBD_CtlError>
                  break;
 800768c:	e054      	b.n	8007738 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	f003 020f 	and.w	r2, r3, #15
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fb68 	bl	8007d82 <USBD_CtlError>
                  break;
 80076b2:	e041      	b.n	8007738 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da0b      	bge.n	80076d4 <USBD_StdEPReq+0x240>
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	3310      	adds	r3, #16
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	3304      	adds	r3, #4
 80076d2:	e00b      	b.n	80076ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	3304      	adds	r3, #4
 80076ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <USBD_StdEPReq+0x266>
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b80      	cmp	r3, #128	; 0x80
 80076f8:	d103      	bne.n	8007702 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e00e      	b.n	8007720 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 ffee 	bl	80086e8 <USBD_LL_IsStallEP>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2201      	movs	r2, #1
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	e002      	b.n	8007720 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2202      	movs	r2, #2
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fb95 	bl	8007e56 <USBD_CtlSendData>
              break;
 800772c:	e004      	b.n	8007738 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fb26 	bl	8007d82 <USBD_CtlError>
              break;
 8007736:	bf00      	nop
          }
          break;
 8007738:	e004      	b.n	8007744 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb20 	bl	8007d82 <USBD_CtlError>
          break;
 8007742:	bf00      	nop
      }
      break;
 8007744:	e004      	b.n	8007750 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fb1a 	bl	8007d82 <USBD_CtlError>
      break;
 800774e:	bf00      	nop
  }

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	2b06      	cmp	r3, #6
 800777e:	f200 8128 	bhi.w	80079d2 <USBD_GetDescriptor+0x276>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <USBD_GetDescriptor+0x2c>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077a5 	.word	0x080077a5
 800778c:	080077bd 	.word	0x080077bd
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080079d3 	.word	0x080079d3
 8007798:	080079d3 	.word	0x080079d3
 800779c:	08007973 	.word	0x08007973
 80077a0:	0800799f 	.word	0x0800799f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
      break;
 80077ba:	e112      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7c1b      	ldrb	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10d      	bne.n	80077e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	f107 0208 	add.w	r2, r7, #8
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	2202      	movs	r2, #2
 80077dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077de:	e100      	b.n	80079e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	f107 0208 	add.w	r2, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e0f2      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b05      	cmp	r3, #5
 8007804:	f200 80ac 	bhi.w	8007960 <USBD_GetDescriptor+0x204>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <USBD_GetDescriptor+0xb4>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007829 	.word	0x08007829
 8007814:	0800785d 	.word	0x0800785d
 8007818:	08007891 	.word	0x08007891
 800781c:	080078c5 	.word	0x080078c5
 8007820:	080078f9 	.word	0x080078f9
 8007824:	0800792d 	.word	0x0800792d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e091      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa97 	bl	8007d82 <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e089      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e077      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa7d 	bl	8007d82 <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e06f      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e05d      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa63 	bl	8007d82 <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e055      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e043      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa49 	bl	8007d82 <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e03b      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7c12      	ldrb	r2, [r2, #16]
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791a:	e029      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa2f 	bl	8007d82 <USBD_CtlError>
            err++;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	3301      	adds	r3, #1
 8007928:	72fb      	strb	r3, [r7, #11]
          break;
 800792a:	e021      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	7c12      	ldrb	r2, [r2, #16]
 8007944:	f107 0108 	add.w	r1, r7, #8
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800794e:	e00f      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa15 	bl	8007d82 <USBD_CtlError>
            err++;
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	3301      	adds	r3, #1
 800795c:	72fb      	strb	r3, [r7, #11]
          break;
 800795e:	e007      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa0d 	bl	8007d82 <USBD_CtlError>
          err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800796e:	e038      	b.n	80079e2 <USBD_GetDescriptor+0x286>
 8007970:	e037      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7c1b      	ldrb	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	f107 0208 	add.w	r2, r7, #8
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
 800798a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800798c:	e029      	b.n	80079e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9f6 	bl	8007d82 <USBD_CtlError>
        err++;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	3301      	adds	r3, #1
 800799a:	72fb      	strb	r3, [r7, #11]
      break;
 800799c:	e021      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7c1b      	ldrb	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10d      	bne.n	80079c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ae:	f107 0208 	add.w	r2, r7, #8
 80079b2:	4610      	mov	r0, r2
 80079b4:	4798      	blx	r3
 80079b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	2207      	movs	r2, #7
 80079be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079c0:	e00f      	b.n	80079e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9dc 	bl	8007d82 <USBD_CtlError>
        err++;
 80079ca:	7afb      	ldrb	r3, [r7, #11]
 80079cc:	3301      	adds	r3, #1
 80079ce:	72fb      	strb	r3, [r7, #11]
      break;
 80079d0:	e007      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9d4 	bl	8007d82 <USBD_CtlError>
      err++;
 80079da:	7afb      	ldrb	r3, [r7, #11]
 80079dc:	3301      	adds	r3, #1
 80079de:	72fb      	strb	r3, [r7, #11]
      break;
 80079e0:	bf00      	nop
  }

  if (err != 0U)
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d11c      	bne.n	8007a22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079e8:	893b      	ldrh	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d011      	beq.n	8007a12 <USBD_GetDescriptor+0x2b6>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	88da      	ldrh	r2, [r3, #6]
 80079fa:	893b      	ldrh	r3, [r7, #8]
 80079fc:	4293      	cmp	r3, r2
 80079fe:	bf28      	it	cs
 8007a00:	4613      	movcs	r3, r2
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a06:	893b      	ldrh	r3, [r7, #8]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa22 	bl	8007e56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	88db      	ldrh	r3, [r3, #6]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa79 	bl	8007f12 <USBD_CtlSendStatus>
 8007a20:	e000      	b.n	8007a24 <USBD_GetDescriptor+0x2c8>
    return;
 8007a22:	bf00      	nop
    }
  }
}
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop

08007a2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	889b      	ldrh	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d130      	bne.n	8007aa0 <USBD_SetAddress+0x74>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d12c      	bne.n	8007aa0 <USBD_SetAddress+0x74>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	885b      	ldrh	r3, [r3, #2]
 8007a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a4c:	d828      	bhi.n	8007aa0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	885b      	ldrh	r3, [r3, #2]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d104      	bne.n	8007a6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f98b 	bl	8007d82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6c:	e01d      	b.n	8007aaa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	7bfa      	ldrb	r2, [r7, #15]
 8007a72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fe60 	bl	8008740 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa46 	bl	8007f12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a94:	e009      	b.n	8007aaa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9e:	e004      	b.n	8007aaa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f96d 	bl	8007d82 <USBD_CtlError>
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	4b41      	ldr	r3, [pc, #260]	; (8007bcc <USBD_SetConfig+0x118>)
 8007ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ac8:	4b40      	ldr	r3, [pc, #256]	; (8007bcc <USBD_SetConfig+0x118>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d904      	bls.n	8007ada <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f955 	bl	8007d82 <USBD_CtlError>
 8007ad8:	e075      	b.n	8007bc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d002      	beq.n	8007aea <USBD_SetConfig+0x36>
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d023      	beq.n	8007b30 <USBD_SetConfig+0x7c>
 8007ae8:	e062      	b.n	8007bb0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007aea:	4b38      	ldr	r3, [pc, #224]	; (8007bcc <USBD_SetConfig+0x118>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01a      	beq.n	8007b28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007af2:	4b36      	ldr	r3, [pc, #216]	; (8007bcc <USBD_SetConfig+0x118>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2203      	movs	r2, #3
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b04:	4b31      	ldr	r3, [pc, #196]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff f9e7 	bl	8006ede <USBD_SetClassConfig>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d104      	bne.n	8007b20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f932 	bl	8007d82 <USBD_CtlError>
            return;
 8007b1e:	e052      	b.n	8007bc6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9f6 	bl	8007f12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b26:	e04e      	b.n	8007bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9f2 	bl	8007f12 <USBD_CtlSendStatus>
        break;
 8007b2e:	e04a      	b.n	8007bc6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b30:	4b26      	ldr	r3, [pc, #152]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d112      	bne.n	8007b5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b40:	4b22      	ldr	r3, [pc, #136]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b4a:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff f9e3 	bl	8006f1c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9db 	bl	8007f12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b5c:	e033      	b.n	8007bc6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d01d      	beq.n	8007ba8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff f9d1 	bl	8006f1c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b7a:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b84:	4b11      	ldr	r3, [pc, #68]	; (8007bcc <USBD_SetConfig+0x118>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff f9a7 	bl	8006ede <USBD_SetClassConfig>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d104      	bne.n	8007ba0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8f2 	bl	8007d82 <USBD_CtlError>
            return;
 8007b9e:	e012      	b.n	8007bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f9b6 	bl	8007f12 <USBD_CtlSendStatus>
        break;
 8007ba6:	e00e      	b.n	8007bc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f9b2 	bl	8007f12 <USBD_CtlSendStatus>
        break;
 8007bae:	e00a      	b.n	8007bc6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f8e5 	bl	8007d82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <USBD_SetConfig+0x118>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff f9ac 	bl	8006f1c <USBD_ClrClassConfig>
        break;
 8007bc4:	bf00      	nop
    }
  }
}
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20000268 	.word	0x20000268

08007bd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	88db      	ldrh	r3, [r3, #6]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d004      	beq.n	8007bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8cc 	bl	8007d82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bea:	e022      	b.n	8007c32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	dc02      	bgt.n	8007bfc <USBD_GetConfig+0x2c>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dc03      	bgt.n	8007c02 <USBD_GetConfig+0x32>
 8007bfa:	e015      	b.n	8007c28 <USBD_GetConfig+0x58>
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d00b      	beq.n	8007c18 <USBD_GetConfig+0x48>
 8007c00:	e012      	b.n	8007c28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f920 	bl	8007e56 <USBD_CtlSendData>
        break;
 8007c16:	e00c      	b.n	8007c32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f918 	bl	8007e56 <USBD_CtlSendData>
        break;
 8007c26:	e004      	b.n	8007c32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f8a9 	bl	8007d82 <USBD_CtlError>
        break;
 8007c30:	bf00      	nop
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d81e      	bhi.n	8007c8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	88db      	ldrh	r3, [r3, #6]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d004      	beq.n	8007c62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f891 	bl	8007d82 <USBD_CtlError>
        break;
 8007c60:	e01a      	b.n	8007c98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f043 0202 	orr.w	r2, r3, #2
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	330c      	adds	r3, #12
 8007c82:	2202      	movs	r2, #2
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f8e5 	bl	8007e56 <USBD_CtlSendData>
      break;
 8007c8c:	e004      	b.n	8007c98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f876 	bl	8007d82 <USBD_CtlError>
      break;
 8007c96:	bf00      	nop
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f929 	bl	8007f12 <USBD_CtlSendStatus>
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d80b      	bhi.n	8007cf6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	885b      	ldrh	r3, [r3, #2]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d10c      	bne.n	8007d00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f90f 	bl	8007f12 <USBD_CtlSendStatus>
      }
      break;
 8007cf4:	e004      	b.n	8007d00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f842 	bl	8007d82 <USBD_CtlError>
      break;
 8007cfe:	e000      	b.n	8007d02 <USBD_ClrFeature+0x3a>
      break;
 8007d00:	bf00      	nop
  }
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781a      	ldrb	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	785a      	ldrb	r2, [r3, #1]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	3302      	adds	r3, #2
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	3303      	adds	r3, #3
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4413      	add	r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	3304      	adds	r3, #4
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3305      	adds	r3, #5
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	4413      	add	r3, r2
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	3306      	adds	r3, #6
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	3307      	adds	r3, #7
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	4413      	add	r3, r2
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	80da      	strh	r2, [r3, #6]

}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bc80      	pop	{r7}
 8007d80:	4770      	bx	lr

08007d82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d8c:	2180      	movs	r1, #128	; 0x80
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fc6c 	bl	800866c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d94:	2100      	movs	r1, #0
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc68 	bl	800866c <USBD_LL_StallEP>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d032      	beq.n	8007e20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f834 	bl	8007e28 <USBD_GetLen>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	75fa      	strb	r2, [r7, #23]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	4413      	add	r3, r2
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	75fa      	strb	r2, [r7, #23]
 8007de6:	461a      	mov	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4413      	add	r3, r2
 8007dec:	2203      	movs	r2, #3
 8007dee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007df0:	e012      	b.n	8007e18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	60fa      	str	r2, [r7, #12]
 8007df8:	7dfa      	ldrb	r2, [r7, #23]
 8007dfa:	1c51      	adds	r1, r2, #1
 8007dfc:	75f9      	strb	r1, [r7, #23]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	440a      	add	r2, r1
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	75fa      	strb	r2, [r7, #23]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4413      	add	r3, r2
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e8      	bne.n	8007df2 <USBD_GetString+0x4e>
    }
  }
}
 8007e20:	bf00      	nop
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e34:	e005      	b.n	8007e42 <USBD_GetLen+0x1a>
  {
    len++;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f5      	bne.n	8007e36 <USBD_GetLen+0xe>
  }

  return len;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr

08007e56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e6c:	88fa      	ldrh	r2, [r7, #6]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fc7d 	bl	800877e <USBD_LL_Transmit>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fc6b 	bl	800877e <USBD_LL_Transmit>

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ec8:	88fa      	ldrh	r2, [r7, #6]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	2100      	movs	r1, #0
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fc70 	bl	80087c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	2100      	movs	r1, #0
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 fc5e 	bl	80087c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f22:	2300      	movs	r3, #0
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc28 	bl	800877e <USBD_LL_Transmit>

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2205      	movs	r2, #5
 8007f44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fc38 	bl	80087c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4912      	ldr	r1, [pc, #72]	; (8007fb0 <MX_USB_DEVICE_Init+0x50>)
 8007f68:	4812      	ldr	r0, [pc, #72]	; (8007fb4 <MX_USB_DEVICE_Init+0x54>)
 8007f6a:	f7fe ff5e 	bl	8006e2a <USBD_Init>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f74:	f7f8 ff2e 	bl	8000dd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f78:	490f      	ldr	r1, [pc, #60]	; (8007fb8 <MX_USB_DEVICE_Init+0x58>)
 8007f7a:	480e      	ldr	r0, [pc, #56]	; (8007fb4 <MX_USB_DEVICE_Init+0x54>)
 8007f7c:	f7fe ff80 	bl	8006e80 <USBD_RegisterClass>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f86:	f7f8 ff25 	bl	8000dd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f8a:	490c      	ldr	r1, [pc, #48]	; (8007fbc <MX_USB_DEVICE_Init+0x5c>)
 8007f8c:	4809      	ldr	r0, [pc, #36]	; (8007fb4 <MX_USB_DEVICE_Init+0x54>)
 8007f8e:	f7fe feb1 	bl	8006cf4 <USBD_CDC_RegisterInterface>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f98:	f7f8 ff1c 	bl	8000dd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <MX_USB_DEVICE_Init+0x54>)
 8007f9e:	f7fe ff88 	bl	8006eb2 <USBD_Start>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fa8:	f7f8 ff14 	bl	8000dd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fac:	bf00      	nop
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	2000015c 	.word	0x2000015c
 8007fb4:	200004e0 	.word	0x200004e0
 8007fb8:	20000040 	.word	0x20000040
 8007fbc:	2000014c 	.word	0x2000014c

08007fc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4905      	ldr	r1, [pc, #20]	; (8007fdc <CDC_Init_FS+0x1c>)
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <CDC_Init_FS+0x20>)
 8007fca:	f7fe fea9 	bl	8006d20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fce:	4905      	ldr	r1, [pc, #20]	; (8007fe4 <CDC_Init_FS+0x24>)
 8007fd0:	4803      	ldr	r0, [pc, #12]	; (8007fe0 <CDC_Init_FS+0x20>)
 8007fd2:	f7fe febe 	bl	8006d52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000b8c 	.word	0x20000b8c
 8007fe0:	200004e0 	.word	0x200004e0
 8007fe4:	200007a4 	.word	0x200007a4

08007fe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr
	...

08007ff8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
 8008004:	4613      	mov	r3, r2
 8008006:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b23      	cmp	r3, #35	; 0x23
 800800c:	d85c      	bhi.n	80080c8 <CDC_Control_FS+0xd0>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <CDC_Control_FS+0x1c>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	080080c9 	.word	0x080080c9
 8008018:	080080c9 	.word	0x080080c9
 800801c:	080080c9 	.word	0x080080c9
 8008020:	080080c9 	.word	0x080080c9
 8008024:	080080c9 	.word	0x080080c9
 8008028:	080080c9 	.word	0x080080c9
 800802c:	080080c9 	.word	0x080080c9
 8008030:	080080c9 	.word	0x080080c9
 8008034:	080080c9 	.word	0x080080c9
 8008038:	080080c9 	.word	0x080080c9
 800803c:	080080c9 	.word	0x080080c9
 8008040:	080080c9 	.word	0x080080c9
 8008044:	080080c9 	.word	0x080080c9
 8008048:	080080c9 	.word	0x080080c9
 800804c:	080080c9 	.word	0x080080c9
 8008050:	080080c9 	.word	0x080080c9
 8008054:	080080c9 	.word	0x080080c9
 8008058:	080080c9 	.word	0x080080c9
 800805c:	080080c9 	.word	0x080080c9
 8008060:	080080c9 	.word	0x080080c9
 8008064:	080080c9 	.word	0x080080c9
 8008068:	080080c9 	.word	0x080080c9
 800806c:	080080c9 	.word	0x080080c9
 8008070:	080080c9 	.word	0x080080c9
 8008074:	080080c9 	.word	0x080080c9
 8008078:	080080c9 	.word	0x080080c9
 800807c:	080080c9 	.word	0x080080c9
 8008080:	080080c9 	.word	0x080080c9
 8008084:	080080c9 	.word	0x080080c9
 8008088:	080080c9 	.word	0x080080c9
 800808c:	080080c9 	.word	0x080080c9
 8008090:	080080c9 	.word	0x080080c9
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080b7 	.word	0x080080b7
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	080080c9 	.word	0x080080c9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <CDC_Control_FS+0xe0>)
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	6810      	ldr	r0, [r2, #0]
 80080aa:	6018      	str	r0, [r3, #0]
 80080ac:	8891      	ldrh	r1, [r2, #4]
 80080ae:	7992      	ldrb	r2, [r2, #6]
 80080b0:	8099      	strh	r1, [r3, #4]
 80080b2:	719a      	strb	r2, [r3, #6]
    break;
 80080b4:	e009      	b.n	80080ca <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	4a07      	ldr	r2, [pc, #28]	; (80080d8 <CDC_Control_FS+0xe0>)
 80080ba:	6810      	ldr	r0, [r2, #0]
 80080bc:	6018      	str	r0, [r3, #0]
 80080be:	8891      	ldrh	r1, [r2, #4]
 80080c0:	7992      	ldrb	r2, [r2, #6]
 80080c2:	8099      	strh	r1, [r3, #4]
 80080c4:	719a      	strb	r2, [r3, #6]
    break;
 80080c6:	e000      	b.n	80080ca <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080c8:	bf00      	nop
  }

  return (USBD_OK);
 80080ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20000144 	.word	0x20000144

080080dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4807      	ldr	r0, [pc, #28]	; (8008108 <CDC_Receive_FS+0x2c>)
 80080ea:	f7fe fe32 	bl	8006d52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080ee:	4806      	ldr	r0, [pc, #24]	; (8008108 <CDC_Receive_FS+0x2c>)
 80080f0:	f7fe fe71 	bl	8006dd6 <USBD_CDC_ReceivePacket>
  usb_data_rx(Buf,Len);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7f8 fbb4 	bl	8000864 <usb_data_rx>
  return (USBD_OK);
 80080fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200004e0 	.word	0x200004e0

0800810c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <CDC_Transmit_FS+0x48>)
 800811e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008122:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800812e:	2301      	movs	r3, #1
 8008130:	e00b      	b.n	800814a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008132:	887b      	ldrh	r3, [r7, #2]
 8008134:	461a      	mov	r2, r3
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4806      	ldr	r0, [pc, #24]	; (8008154 <CDC_Transmit_FS+0x48>)
 800813a:	f7fe fdf1 	bl	8006d20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800813e:	4805      	ldr	r0, [pc, #20]	; (8008154 <CDC_Transmit_FS+0x48>)
 8008140:	f7fe fe1a 	bl	8006d78 <USBD_CDC_TransmitPacket>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200004e0 	.word	0x200004e0

08008158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2212      	movs	r2, #18
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	; (8008178 <USBD_FS_DeviceDescriptor+0x20>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000178 	.word	0x20000178

0800817c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2204      	movs	r2, #4
 800818c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800818e:	4b03      	ldr	r3, [pc, #12]	; (800819c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	2000018c 	.word	0x2000018c

080081a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	6039      	str	r1, [r7, #0]
 80081aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4907      	ldr	r1, [pc, #28]	; (80081d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80081b6:	4808      	ldr	r0, [pc, #32]	; (80081d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80081b8:	f7ff fdf4 	bl	8007da4 <USBD_GetString>
 80081bc:	e004      	b.n	80081c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	4904      	ldr	r1, [pc, #16]	; (80081d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80081c2:	4805      	ldr	r0, [pc, #20]	; (80081d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80081c4:	f7ff fdee 	bl	8007da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000f74 	.word	0x20000f74
 80081d8:	0800a5e0 	.word	0x0800a5e0

080081dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	4904      	ldr	r1, [pc, #16]	; (80081fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081ec:	4804      	ldr	r0, [pc, #16]	; (8008200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081ee:	f7ff fdd9 	bl	8007da4 <USBD_GetString>
  return USBD_StrDesc;
 80081f2:	4b02      	ldr	r3, [pc, #8]	; (80081fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000f74 	.word	0x20000f74
 8008200:	0800a5f8 	.word	0x0800a5f8

08008204 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	6039      	str	r1, [r7, #0]
 800820e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	221a      	movs	r2, #26
 8008214:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008216:	f000 f843 	bl	80082a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800821a:	4b02      	ldr	r3, [pc, #8]	; (8008224 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000190 	.word	0x20000190

08008228 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4907      	ldr	r1, [pc, #28]	; (800825c <USBD_FS_ConfigStrDescriptor+0x34>)
 800823e:	4808      	ldr	r0, [pc, #32]	; (8008260 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008240:	f7ff fdb0 	bl	8007da4 <USBD_GetString>
 8008244:	e004      	b.n	8008250 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	4904      	ldr	r1, [pc, #16]	; (800825c <USBD_FS_ConfigStrDescriptor+0x34>)
 800824a:	4805      	ldr	r0, [pc, #20]	; (8008260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800824c:	f7ff fdaa 	bl	8007da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008250:	4b02      	ldr	r3, [pc, #8]	; (800825c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000f74 	.word	0x20000f74
 8008260:	0800a60c 	.word	0x0800a60c

08008264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	6039      	str	r1, [r7, #0]
 800826e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800827a:	4808      	ldr	r0, [pc, #32]	; (800829c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800827c:	f7ff fd92 	bl	8007da4 <USBD_GetString>
 8008280:	e004      	b.n	800828c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	4904      	ldr	r1, [pc, #16]	; (8008298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008286:	4805      	ldr	r0, [pc, #20]	; (800829c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008288:	f7ff fd8c 	bl	8007da4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20000f74 	.word	0x20000f74
 800829c:	0800a618 	.word	0x0800a618

080082a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <Get_SerialNum+0x44>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <Get_SerialNum+0x48>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082b2:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <Get_SerialNum+0x4c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082c6:	2208      	movs	r2, #8
 80082c8:	4909      	ldr	r1, [pc, #36]	; (80082f0 <Get_SerialNum+0x50>)
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f814 	bl	80082f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082d0:	2204      	movs	r2, #4
 80082d2:	4908      	ldr	r1, [pc, #32]	; (80082f4 <Get_SerialNum+0x54>)
 80082d4:	68b8      	ldr	r0, [r7, #8]
 80082d6:	f000 f80f 	bl	80082f8 <IntToUnicode>
  }
}
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	1ffff7e8 	.word	0x1ffff7e8
 80082e8:	1ffff7ec 	.word	0x1ffff7ec
 80082ec:	1ffff7f0 	.word	0x1ffff7f0
 80082f0:	20000192 	.word	0x20000192
 80082f4:	200001a2 	.word	0x200001a2

080082f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]
 800830e:	e027      	b.n	8008360 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	0f1b      	lsrs	r3, r3, #28
 8008314:	2b09      	cmp	r3, #9
 8008316:	d80b      	bhi.n	8008330 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	0f1b      	lsrs	r3, r3, #28
 800831c:	b2da      	uxtb	r2, r3
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	4619      	mov	r1, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	440b      	add	r3, r1
 8008328:	3230      	adds	r2, #48	; 0x30
 800832a:	b2d2      	uxtb	r2, r2
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e00a      	b.n	8008346 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	0f1b      	lsrs	r3, r3, #28
 8008334:	b2da      	uxtb	r2, r3
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	4619      	mov	r1, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	440b      	add	r3, r1
 8008340:	3237      	adds	r2, #55	; 0x37
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	3301      	adds	r3, #1
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	4413      	add	r3, r2
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	3301      	adds	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
 8008360:	7dfa      	ldrb	r2, [r7, #23]
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	429a      	cmp	r2, r3
 8008366:	d3d3      	bcc.n	8008310 <IntToUnicode+0x18>
  }
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a0d      	ldr	r2, [pc, #52]	; (80083b8 <HAL_PCD_MspInit+0x44>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d113      	bne.n	80083ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <HAL_PCD_MspInit+0x48>)
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	4a0c      	ldr	r2, [pc, #48]	; (80083bc <HAL_PCD_MspInit+0x48>)
 800838c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008390:	61d3      	str	r3, [r2, #28]
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <HAL_PCD_MspInit+0x48>)
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	2014      	movs	r0, #20
 80083a4:	f7f9 fb8b 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80083a8:	2014      	movs	r0, #20
 80083aa:	f7f9 fba4 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40005c00 	.word	0x40005c00
 80083bc:	40021000 	.word	0x40021000

080083c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7fe fdb3 	bl	8006f42 <USBD_LL_SetupStage>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083f6:	78fa      	ldrb	r2, [r7, #3]
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	440b      	add	r3, r1
 8008404:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	4619      	mov	r1, r3
 800840e:	f7fe fde5 	bl	8006fdc <USBD_LL_DataOutStage>
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	440b      	add	r3, r1
 800843a:	333c      	adds	r3, #60	; 0x3c
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	4619      	mov	r1, r3
 8008442:	f7fe fe3c 	bl	80070be <USBD_LL_DataInStage>
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe ff4c 	bl	80072fa <USBD_LL_SOF>
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008472:	2301      	movs	r3, #1
 8008474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d001      	beq.n	8008482 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800847e:	f7f8 fca9 	bl	8000dd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fefc 	bl	800728a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe feb5 	bl	8007208 <USBD_LL_Reset>
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fef6 	bl	80072a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <HAL_PCD_SuspendCallback+0x30>)
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4a03      	ldr	r2, [pc, #12]	; (80084d8 <HAL_PCD_SuspendCallback+0x30>)
 80084ca:	f043 0306 	orr.w	r3, r3, #6
 80084ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	e000ed00 	.word	0xe000ed00

080084dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fef0 	bl	80072d0 <USBD_LL_Resume>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008500:	4a28      	ldr	r2, [pc, #160]	; (80085a4 <USBD_LL_Init+0xac>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a26      	ldr	r2, [pc, #152]	; (80085a4 <USBD_LL_Init+0xac>)
 800850c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008510:	4b24      	ldr	r3, [pc, #144]	; (80085a4 <USBD_LL_Init+0xac>)
 8008512:	4a25      	ldr	r2, [pc, #148]	; (80085a8 <USBD_LL_Init+0xb0>)
 8008514:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008516:	4b23      	ldr	r3, [pc, #140]	; (80085a4 <USBD_LL_Init+0xac>)
 8008518:	2208      	movs	r2, #8
 800851a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800851c:	4b21      	ldr	r3, [pc, #132]	; (80085a4 <USBD_LL_Init+0xac>)
 800851e:	2202      	movs	r2, #2
 8008520:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008522:	4b20      	ldr	r3, [pc, #128]	; (80085a4 <USBD_LL_Init+0xac>)
 8008524:	2200      	movs	r2, #0
 8008526:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008528:	4b1e      	ldr	r3, [pc, #120]	; (80085a4 <USBD_LL_Init+0xac>)
 800852a:	2200      	movs	r2, #0
 800852c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <USBD_LL_Init+0xac>)
 8008530:	2200      	movs	r2, #0
 8008532:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008534:	481b      	ldr	r0, [pc, #108]	; (80085a4 <USBD_LL_Init+0xac>)
 8008536:	f7f9 fcc5 	bl	8001ec4 <HAL_PCD_Init>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008540:	f7f8 fc48 	bl	8000dd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800854a:	2318      	movs	r3, #24
 800854c:	2200      	movs	r2, #0
 800854e:	2100      	movs	r1, #0
 8008550:	f7fb f807 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800855a:	2358      	movs	r3, #88	; 0x58
 800855c:	2200      	movs	r2, #0
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	f7fa ffff 	bl	8003562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800856a:	23c0      	movs	r3, #192	; 0xc0
 800856c:	2200      	movs	r2, #0
 800856e:	2181      	movs	r1, #129	; 0x81
 8008570:	f7fa fff7 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800857a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800857e:	2200      	movs	r2, #0
 8008580:	2101      	movs	r1, #1
 8008582:	f7fa ffee 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800858c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008590:	2200      	movs	r2, #0
 8008592:	2182      	movs	r1, #130	; 0x82
 8008594:	f7fa ffe5 	bl	8003562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20001174 	.word	0x20001174
 80085a8:	40005c00 	.word	0x40005c00

080085ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f9 fd89 	bl	80020da <HAL_PCD_Start>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f94e 	bl	8008870 <USBD_Get_USB_Status>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	70fb      	strb	r3, [r7, #3]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70bb      	strb	r3, [r7, #2]
 80085f8:	4613      	mov	r3, r2
 80085fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800860a:	78bb      	ldrb	r3, [r7, #2]
 800860c:	883a      	ldrh	r2, [r7, #0]
 800860e:	78f9      	ldrb	r1, [r7, #3]
 8008610:	f7f9 ff03 	bl	800241a <HAL_PCD_EP_Open>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f928 	bl	8008870 <USBD_Get_USB_Status>
 8008620:	4603      	mov	r3, r0
 8008622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008624:	7bbb      	ldrb	r3, [r7, #14]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008648:	78fa      	ldrb	r2, [r7, #3]
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f7f9 ff4a 	bl	80024e6 <HAL_PCD_EP_Close>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f909 	bl	8008870 <USBD_Get_USB_Status>
 800865e:	4603      	mov	r3, r0
 8008660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008662:	7bbb      	ldrb	r3, [r7, #14]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f7fa f80a 	bl	80026a4 <HAL_PCD_EP_SetStall>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f8ea 	bl	8008870 <USBD_Get_USB_Status>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fa f84b 	bl	8002764 <HAL_PCD_EP_ClrStall>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f8cb 	bl	8008870 <USBD_Get_USB_Status>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086de:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da0c      	bge.n	800871e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	440b      	add	r3, r1
 8008718:	3302      	adds	r3, #2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	e00b      	b.n	8008736 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008724:	68f9      	ldr	r1, [r7, #12]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	440b      	add	r3, r1
 8008730:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008734:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f7f9 fe36 	bl	80023d0 <HAL_PCD_SetAddress>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f880 	bl	8008870 <USBD_Get_USB_Status>
 8008770:	4603      	mov	r3, r0
 8008772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008774:	7bbb      	ldrb	r3, [r7, #14]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b086      	sub	sp, #24
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	461a      	mov	r2, r3
 800878a:	460b      	mov	r3, r1
 800878c:	72fb      	strb	r3, [r7, #11]
 800878e:	4613      	mov	r3, r2
 8008790:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087a0:	893b      	ldrh	r3, [r7, #8]
 80087a2:	7af9      	ldrb	r1, [r7, #11]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	f7f9 ff3a 	bl	800261e <HAL_PCD_EP_Transmit>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 f85d 	bl	8008870 <USBD_Get_USB_Status>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	607a      	str	r2, [r7, #4]
 80087ce:	461a      	mov	r2, r3
 80087d0:	460b      	mov	r3, r1
 80087d2:	72fb      	strb	r3, [r7, #11]
 80087d4:	4613      	mov	r3, r2
 80087d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087e6:	893b      	ldrh	r3, [r7, #8]
 80087e8:	7af9      	ldrb	r1, [r7, #11]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	f7f9 fec3 	bl	8002576 <HAL_PCD_EP_Receive>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f83a 	bl	8008870 <USBD_Get_USB_Status>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008800:	7dbb      	ldrb	r3, [r7, #22]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f7f9 fee5 	bl	80025f0 <HAL_PCD_EP_GetRxCount>
 8008826:	4603      	mov	r3, r0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008838:	4b02      	ldr	r3, [pc, #8]	; (8008844 <USBD_static_malloc+0x14>)
}
 800883a:	4618      	mov	r0, r3
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	2000026c 	.word	0x2000026c

08008848 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr

0800885a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	2b03      	cmp	r3, #3
 8008882:	d817      	bhi.n	80088b4 <USBD_Get_USB_Status+0x44>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_Get_USB_Status+0x1c>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	0800889d 	.word	0x0800889d
 8008890:	080088a3 	.word	0x080088a3
 8008894:	080088a9 	.word	0x080088a9
 8008898:	080088af 	.word	0x080088af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	e00b      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	73fb      	strb	r3, [r7, #15]
    break;
 80088a6:	e008      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
    break;
 80088ac:	e005      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088ae:	2302      	movs	r3, #2
 80088b0:	73fb      	strb	r3, [r7, #15]
    break;
 80088b2:	e002      	b.n	80088ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088b4:	2302      	movs	r3, #2
 80088b6:	73fb      	strb	r3, [r7, #15]
    break;
 80088b8:	bf00      	nop
  }
  return usb_status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop

080088c8 <__errno>:
 80088c8:	4b01      	ldr	r3, [pc, #4]	; (80088d0 <__errno+0x8>)
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	200001ac 	.word	0x200001ac

080088d4 <__libc_init_array>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	2600      	movs	r6, #0
 80088d8:	4d0c      	ldr	r5, [pc, #48]	; (800890c <__libc_init_array+0x38>)
 80088da:	4c0d      	ldr	r4, [pc, #52]	; (8008910 <__libc_init_array+0x3c>)
 80088dc:	1b64      	subs	r4, r4, r5
 80088de:	10a4      	asrs	r4, r4, #2
 80088e0:	42a6      	cmp	r6, r4
 80088e2:	d109      	bne.n	80088f8 <__libc_init_array+0x24>
 80088e4:	f001 fe30 	bl	800a548 <_init>
 80088e8:	2600      	movs	r6, #0
 80088ea:	4d0a      	ldr	r5, [pc, #40]	; (8008914 <__libc_init_array+0x40>)
 80088ec:	4c0a      	ldr	r4, [pc, #40]	; (8008918 <__libc_init_array+0x44>)
 80088ee:	1b64      	subs	r4, r4, r5
 80088f0:	10a4      	asrs	r4, r4, #2
 80088f2:	42a6      	cmp	r6, r4
 80088f4:	d105      	bne.n	8008902 <__libc_init_array+0x2e>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fc:	4798      	blx	r3
 80088fe:	3601      	adds	r6, #1
 8008900:	e7ee      	b.n	80088e0 <__libc_init_array+0xc>
 8008902:	f855 3b04 	ldr.w	r3, [r5], #4
 8008906:	4798      	blx	r3
 8008908:	3601      	adds	r6, #1
 800890a:	e7f2      	b.n	80088f2 <__libc_init_array+0x1e>
 800890c:	0800a7f8 	.word	0x0800a7f8
 8008910:	0800a7f8 	.word	0x0800a7f8
 8008914:	0800a7f8 	.word	0x0800a7f8
 8008918:	0800a7fc 	.word	0x0800a7fc

0800891c <malloc>:
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <malloc+0xc>)
 800891e:	4601      	mov	r1, r0
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	f000 b865 	b.w	80089f0 <_malloc_r>
 8008926:	bf00      	nop
 8008928:	200001ac 	.word	0x200001ac

0800892c <memcpy>:
 800892c:	440a      	add	r2, r1
 800892e:	4291      	cmp	r1, r2
 8008930:	f100 33ff 	add.w	r3, r0, #4294967295
 8008934:	d100      	bne.n	8008938 <memcpy+0xc>
 8008936:	4770      	bx	lr
 8008938:	b510      	push	{r4, lr}
 800893a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893e:	4291      	cmp	r1, r2
 8008940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008944:	d1f9      	bne.n	800893a <memcpy+0xe>
 8008946:	bd10      	pop	{r4, pc}

08008948 <memset>:
 8008948:	4603      	mov	r3, r0
 800894a:	4402      	add	r2, r0
 800894c:	4293      	cmp	r3, r2
 800894e:	d100      	bne.n	8008952 <memset+0xa>
 8008950:	4770      	bx	lr
 8008952:	f803 1b01 	strb.w	r1, [r3], #1
 8008956:	e7f9      	b.n	800894c <memset+0x4>

08008958 <_free_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4605      	mov	r5, r0
 800895c:	2900      	cmp	r1, #0
 800895e:	d043      	beq.n	80089e8 <_free_r+0x90>
 8008960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008964:	1f0c      	subs	r4, r1, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfb8      	it	lt
 800896a:	18e4      	addlt	r4, r4, r3
 800896c:	f000 fa90 	bl	8008e90 <__malloc_lock>
 8008970:	4a1e      	ldr	r2, [pc, #120]	; (80089ec <_free_r+0x94>)
 8008972:	6813      	ldr	r3, [r2, #0]
 8008974:	4610      	mov	r0, r2
 8008976:	b933      	cbnz	r3, 8008986 <_free_r+0x2e>
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6014      	str	r4, [r2, #0]
 800897c:	4628      	mov	r0, r5
 800897e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008982:	f000 ba8b 	b.w	8008e9c <__malloc_unlock>
 8008986:	42a3      	cmp	r3, r4
 8008988:	d90a      	bls.n	80089a0 <_free_r+0x48>
 800898a:	6821      	ldr	r1, [r4, #0]
 800898c:	1862      	adds	r2, r4, r1
 800898e:	4293      	cmp	r3, r2
 8008990:	bf01      	itttt	eq
 8008992:	681a      	ldreq	r2, [r3, #0]
 8008994:	685b      	ldreq	r3, [r3, #4]
 8008996:	1852      	addeq	r2, r2, r1
 8008998:	6022      	streq	r2, [r4, #0]
 800899a:	6063      	str	r3, [r4, #4]
 800899c:	6004      	str	r4, [r0, #0]
 800899e:	e7ed      	b.n	800897c <_free_r+0x24>
 80089a0:	461a      	mov	r2, r3
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	b10b      	cbz	r3, 80089aa <_free_r+0x52>
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	d9fa      	bls.n	80089a0 <_free_r+0x48>
 80089aa:	6811      	ldr	r1, [r2, #0]
 80089ac:	1850      	adds	r0, r2, r1
 80089ae:	42a0      	cmp	r0, r4
 80089b0:	d10b      	bne.n	80089ca <_free_r+0x72>
 80089b2:	6820      	ldr	r0, [r4, #0]
 80089b4:	4401      	add	r1, r0
 80089b6:	1850      	adds	r0, r2, r1
 80089b8:	4283      	cmp	r3, r0
 80089ba:	6011      	str	r1, [r2, #0]
 80089bc:	d1de      	bne.n	800897c <_free_r+0x24>
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4401      	add	r1, r0
 80089c4:	6011      	str	r1, [r2, #0]
 80089c6:	6053      	str	r3, [r2, #4]
 80089c8:	e7d8      	b.n	800897c <_free_r+0x24>
 80089ca:	d902      	bls.n	80089d2 <_free_r+0x7a>
 80089cc:	230c      	movs	r3, #12
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	e7d4      	b.n	800897c <_free_r+0x24>
 80089d2:	6820      	ldr	r0, [r4, #0]
 80089d4:	1821      	adds	r1, r4, r0
 80089d6:	428b      	cmp	r3, r1
 80089d8:	bf01      	itttt	eq
 80089da:	6819      	ldreq	r1, [r3, #0]
 80089dc:	685b      	ldreq	r3, [r3, #4]
 80089de:	1809      	addeq	r1, r1, r0
 80089e0:	6021      	streq	r1, [r4, #0]
 80089e2:	6063      	str	r3, [r4, #4]
 80089e4:	6054      	str	r4, [r2, #4]
 80089e6:	e7c9      	b.n	800897c <_free_r+0x24>
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
 80089ea:	bf00      	nop
 80089ec:	2000048c 	.word	0x2000048c

080089f0 <_malloc_r>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	1ccd      	adds	r5, r1, #3
 80089f4:	f025 0503 	bic.w	r5, r5, #3
 80089f8:	3508      	adds	r5, #8
 80089fa:	2d0c      	cmp	r5, #12
 80089fc:	bf38      	it	cc
 80089fe:	250c      	movcc	r5, #12
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	4606      	mov	r6, r0
 8008a04:	db01      	blt.n	8008a0a <_malloc_r+0x1a>
 8008a06:	42a9      	cmp	r1, r5
 8008a08:	d903      	bls.n	8008a12 <_malloc_r+0x22>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	2000      	movs	r0, #0
 8008a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a12:	f000 fa3d 	bl	8008e90 <__malloc_lock>
 8008a16:	4921      	ldr	r1, [pc, #132]	; (8008a9c <_malloc_r+0xac>)
 8008a18:	680a      	ldr	r2, [r1, #0]
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	b99c      	cbnz	r4, 8008a46 <_malloc_r+0x56>
 8008a1e:	4f20      	ldr	r7, [pc, #128]	; (8008aa0 <_malloc_r+0xb0>)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	b923      	cbnz	r3, 8008a2e <_malloc_r+0x3e>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 f854 	bl	8008ad4 <_sbrk_r>
 8008a2c:	6038      	str	r0, [r7, #0]
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	f000 f84f 	bl	8008ad4 <_sbrk_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d123      	bne.n	8008a82 <_malloc_r+0x92>
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	f000 fa2c 	bl	8008e9c <__malloc_unlock>
 8008a44:	e7e3      	b.n	8008a0e <_malloc_r+0x1e>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	1b5b      	subs	r3, r3, r5
 8008a4a:	d417      	bmi.n	8008a7c <_malloc_r+0x8c>
 8008a4c:	2b0b      	cmp	r3, #11
 8008a4e:	d903      	bls.n	8008a58 <_malloc_r+0x68>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	441c      	add	r4, r3
 8008a54:	6025      	str	r5, [r4, #0]
 8008a56:	e004      	b.n	8008a62 <_malloc_r+0x72>
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	42a2      	cmp	r2, r4
 8008a5c:	bf0c      	ite	eq
 8008a5e:	600b      	streq	r3, [r1, #0]
 8008a60:	6053      	strne	r3, [r2, #4]
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 fa1a 	bl	8008e9c <__malloc_unlock>
 8008a68:	f104 000b 	add.w	r0, r4, #11
 8008a6c:	1d23      	adds	r3, r4, #4
 8008a6e:	f020 0007 	bic.w	r0, r0, #7
 8008a72:	1ac2      	subs	r2, r0, r3
 8008a74:	d0cc      	beq.n	8008a10 <_malloc_r+0x20>
 8008a76:	1a1b      	subs	r3, r3, r0
 8008a78:	50a3      	str	r3, [r4, r2]
 8008a7a:	e7c9      	b.n	8008a10 <_malloc_r+0x20>
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	6864      	ldr	r4, [r4, #4]
 8008a80:	e7cc      	b.n	8008a1c <_malloc_r+0x2c>
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d0e3      	beq.n	8008a54 <_malloc_r+0x64>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f000 f820 	bl	8008ad4 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1dd      	bne.n	8008a54 <_malloc_r+0x64>
 8008a98:	e7cf      	b.n	8008a3a <_malloc_r+0x4a>
 8008a9a:	bf00      	nop
 8008a9c:	2000048c 	.word	0x2000048c
 8008aa0:	20000490 	.word	0x20000490

08008aa4 <iprintf>:
 8008aa4:	b40f      	push	{r0, r1, r2, r3}
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <iprintf+0x2c>)
 8008aa8:	b513      	push	{r0, r1, r4, lr}
 8008aaa:	681c      	ldr	r4, [r3, #0]
 8008aac:	b124      	cbz	r4, 8008ab8 <iprintf+0x14>
 8008aae:	69a3      	ldr	r3, [r4, #24]
 8008ab0:	b913      	cbnz	r3, 8008ab8 <iprintf+0x14>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f93a 	bl	8008d2c <__sinit>
 8008ab8:	ab05      	add	r3, sp, #20
 8008aba:	4620      	mov	r0, r4
 8008abc:	9a04      	ldr	r2, [sp, #16]
 8008abe:	68a1      	ldr	r1, [r4, #8]
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f000 fd49 	bl	8009558 <_vfiprintf_r>
 8008ac6:	b002      	add	sp, #8
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008acc:	b004      	add	sp, #16
 8008ace:	4770      	bx	lr
 8008ad0:	200001ac 	.word	0x200001ac

08008ad4 <_sbrk_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4d05      	ldr	r5, [pc, #20]	; (8008af0 <_sbrk_r+0x1c>)
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7f8 fe2e 	bl	8001740 <_sbrk>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_sbrk_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_sbrk_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	2000146c 	.word	0x2000146c

08008af4 <siprintf>:
 8008af4:	b40e      	push	{r1, r2, r3}
 8008af6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008afa:	b500      	push	{lr}
 8008afc:	b09c      	sub	sp, #112	; 0x70
 8008afe:	ab1d      	add	r3, sp, #116	; 0x74
 8008b00:	9002      	str	r0, [sp, #8]
 8008b02:	9006      	str	r0, [sp, #24]
 8008b04:	9107      	str	r1, [sp, #28]
 8008b06:	9104      	str	r1, [sp, #16]
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <siprintf+0x38>)
 8008b0a:	4909      	ldr	r1, [pc, #36]	; (8008b30 <siprintf+0x3c>)
 8008b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b10:	9105      	str	r1, [sp, #20]
 8008b12:	6800      	ldr	r0, [r0, #0]
 8008b14:	a902      	add	r1, sp, #8
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	f000 fa22 	bl	8008f60 <_svfiprintf_r>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	9b02      	ldr	r3, [sp, #8]
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	b01c      	add	sp, #112	; 0x70
 8008b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b28:	b003      	add	sp, #12
 8008b2a:	4770      	bx	lr
 8008b2c:	200001ac 	.word	0x200001ac
 8008b30:	ffff0208 	.word	0xffff0208

08008b34 <siscanf>:
 8008b34:	b40e      	push	{r1, r2, r3}
 8008b36:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008b3a:	b530      	push	{r4, r5, lr}
 8008b3c:	b09c      	sub	sp, #112	; 0x70
 8008b3e:	ac1f      	add	r4, sp, #124	; 0x7c
 8008b40:	f854 5b04 	ldr.w	r5, [r4], #4
 8008b44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008b48:	9002      	str	r0, [sp, #8]
 8008b4a:	9006      	str	r0, [sp, #24]
 8008b4c:	f7f7 fb0a 	bl	8000164 <strlen>
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <siscanf+0x4c>)
 8008b52:	9003      	str	r0, [sp, #12]
 8008b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b56:	2300      	movs	r3, #0
 8008b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b5a:	9314      	str	r3, [sp, #80]	; 0x50
 8008b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b60:	9007      	str	r0, [sp, #28]
 8008b62:	4808      	ldr	r0, [pc, #32]	; (8008b84 <siscanf+0x50>)
 8008b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b68:	462a      	mov	r2, r5
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	a902      	add	r1, sp, #8
 8008b6e:	6800      	ldr	r0, [r0, #0]
 8008b70:	9401      	str	r4, [sp, #4]
 8008b72:	f000 fb4f 	bl	8009214 <__ssvfiscanf_r>
 8008b76:	b01c      	add	sp, #112	; 0x70
 8008b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b7c:	b003      	add	sp, #12
 8008b7e:	4770      	bx	lr
 8008b80:	08008bab 	.word	0x08008bab
 8008b84:	200001ac 	.word	0x200001ac

08008b88 <__sread>:
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b90:	f001 f8f2 	bl	8009d78 <_read_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	bfab      	itete	ge
 8008b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b9c:	181b      	addge	r3, r3, r0
 8008b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ba2:	bfac      	ite	ge
 8008ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ba6:	81a3      	strhlt	r3, [r4, #12]
 8008ba8:	bd10      	pop	{r4, pc}

08008baa <__seofread>:
 8008baa:	2000      	movs	r0, #0
 8008bac:	4770      	bx	lr

08008bae <__swrite>:
 8008bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	898b      	ldrh	r3, [r1, #12]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	05db      	lsls	r3, r3, #23
 8008bba:	460c      	mov	r4, r1
 8008bbc:	4616      	mov	r6, r2
 8008bbe:	d505      	bpl.n	8008bcc <__swrite+0x1e>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc8:	f000 f950 	bl	8008e6c <_lseek_r>
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	4632      	mov	r2, r6
 8008bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bd4:	81a3      	strh	r3, [r4, #12]
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	463b      	mov	r3, r7
 8008bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008be2:	f000 b829 	b.w	8008c38 <_write_r>

08008be6 <__sseek>:
 8008be6:	b510      	push	{r4, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bee:	f000 f93d 	bl	8008e6c <_lseek_r>
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	bf15      	itete	ne
 8008bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c02:	81a3      	strheq	r3, [r4, #12]
 8008c04:	bf18      	it	ne
 8008c06:	81a3      	strhne	r3, [r4, #12]
 8008c08:	bd10      	pop	{r4, pc}

08008c0a <__sclose>:
 8008c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0e:	f000 b825 	b.w	8008c5c <_close_r>

08008c12 <strncmp>:
 8008c12:	b510      	push	{r4, lr}
 8008c14:	b16a      	cbz	r2, 8008c32 <strncmp+0x20>
 8008c16:	3901      	subs	r1, #1
 8008c18:	1884      	adds	r4, r0, r2
 8008c1a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d103      	bne.n	8008c2e <strncmp+0x1c>
 8008c26:	42a0      	cmp	r0, r4
 8008c28:	d001      	beq.n	8008c2e <strncmp+0x1c>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f5      	bne.n	8008c1a <strncmp+0x8>
 8008c2e:	1a98      	subs	r0, r3, r2
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	4610      	mov	r0, r2
 8008c34:	e7fc      	b.n	8008c30 <strncmp+0x1e>
	...

08008c38 <_write_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	2200      	movs	r2, #0
 8008c42:	4d05      	ldr	r5, [pc, #20]	; (8008c58 <_write_r+0x20>)
 8008c44:	602a      	str	r2, [r5, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	f7f8 fd2d 	bl	80016a6 <_write>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_write_r+0x1e>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_write_r+0x1e>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	2000146c 	.word	0x2000146c

08008c5c <_close_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4d05      	ldr	r5, [pc, #20]	; (8008c78 <_close_r+0x1c>)
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7f8 fd39 	bl	80016de <_close>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_close_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_close_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	2000146c 	.word	0x2000146c

08008c7c <std>:
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	4604      	mov	r4, r0
 8008c82:	e9c0 3300 	strd	r3, r3, [r0]
 8008c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c8a:	6083      	str	r3, [r0, #8]
 8008c8c:	8181      	strh	r1, [r0, #12]
 8008c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c90:	81c2      	strh	r2, [r0, #14]
 8008c92:	6183      	str	r3, [r0, #24]
 8008c94:	4619      	mov	r1, r3
 8008c96:	2208      	movs	r2, #8
 8008c98:	305c      	adds	r0, #92	; 0x5c
 8008c9a:	f7ff fe55 	bl	8008948 <memset>
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <std+0x38>)
 8008ca0:	6224      	str	r4, [r4, #32]
 8008ca2:	6263      	str	r3, [r4, #36]	; 0x24
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <std+0x3c>)
 8008ca6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ca8:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <std+0x40>)
 8008caa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cac:	4b04      	ldr	r3, [pc, #16]	; (8008cc0 <std+0x44>)
 8008cae:	6323      	str	r3, [r4, #48]	; 0x30
 8008cb0:	bd10      	pop	{r4, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08008b89 	.word	0x08008b89
 8008cb8:	08008baf 	.word	0x08008baf
 8008cbc:	08008be7 	.word	0x08008be7
 8008cc0:	08008c0b 	.word	0x08008c0b

08008cc4 <_cleanup_r>:
 8008cc4:	4901      	ldr	r1, [pc, #4]	; (8008ccc <_cleanup_r+0x8>)
 8008cc6:	f000 b8af 	b.w	8008e28 <_fwalk_reent>
 8008cca:	bf00      	nop
 8008ccc:	0800a319 	.word	0x0800a319

08008cd0 <__sfmoreglue>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	2568      	movs	r5, #104	; 0x68
 8008cd4:	1e4a      	subs	r2, r1, #1
 8008cd6:	4355      	muls	r5, r2
 8008cd8:	460e      	mov	r6, r1
 8008cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cde:	f7ff fe87 	bl	80089f0 <_malloc_r>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	b140      	cbz	r0, 8008cf8 <__sfmoreglue+0x28>
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cec:	300c      	adds	r0, #12
 8008cee:	60a0      	str	r0, [r4, #8]
 8008cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cf4:	f7ff fe28 	bl	8008948 <memset>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}

08008cfc <__sfp_lock_acquire>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	; (8008d04 <__sfp_lock_acquire+0x8>)
 8008cfe:	f000 b8b3 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 8008d02:	bf00      	nop
 8008d04:	20001468 	.word	0x20001468

08008d08 <__sfp_lock_release>:
 8008d08:	4801      	ldr	r0, [pc, #4]	; (8008d10 <__sfp_lock_release+0x8>)
 8008d0a:	f000 b8ae 	b.w	8008e6a <__retarget_lock_release_recursive>
 8008d0e:	bf00      	nop
 8008d10:	20001468 	.word	0x20001468

08008d14 <__sinit_lock_acquire>:
 8008d14:	4801      	ldr	r0, [pc, #4]	; (8008d1c <__sinit_lock_acquire+0x8>)
 8008d16:	f000 b8a7 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	20001463 	.word	0x20001463

08008d20 <__sinit_lock_release>:
 8008d20:	4801      	ldr	r0, [pc, #4]	; (8008d28 <__sinit_lock_release+0x8>)
 8008d22:	f000 b8a2 	b.w	8008e6a <__retarget_lock_release_recursive>
 8008d26:	bf00      	nop
 8008d28:	20001463 	.word	0x20001463

08008d2c <__sinit>:
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	4604      	mov	r4, r0
 8008d30:	f7ff fff0 	bl	8008d14 <__sinit_lock_acquire>
 8008d34:	69a3      	ldr	r3, [r4, #24]
 8008d36:	b11b      	cbz	r3, 8008d40 <__sinit+0x14>
 8008d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d3c:	f7ff bff0 	b.w	8008d20 <__sinit_lock_release>
 8008d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d44:	6523      	str	r3, [r4, #80]	; 0x50
 8008d46:	4b13      	ldr	r3, [pc, #76]	; (8008d94 <__sinit+0x68>)
 8008d48:	4a13      	ldr	r2, [pc, #76]	; (8008d98 <__sinit+0x6c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d4e:	42a3      	cmp	r3, r4
 8008d50:	bf08      	it	eq
 8008d52:	2301      	moveq	r3, #1
 8008d54:	4620      	mov	r0, r4
 8008d56:	bf08      	it	eq
 8008d58:	61a3      	streq	r3, [r4, #24]
 8008d5a:	f000 f81f 	bl	8008d9c <__sfp>
 8008d5e:	6060      	str	r0, [r4, #4]
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f81b 	bl	8008d9c <__sfp>
 8008d66:	60a0      	str	r0, [r4, #8]
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 f817 	bl	8008d9c <__sfp>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2104      	movs	r1, #4
 8008d72:	60e0      	str	r0, [r4, #12]
 8008d74:	6860      	ldr	r0, [r4, #4]
 8008d76:	f7ff ff81 	bl	8008c7c <std>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	2109      	movs	r1, #9
 8008d7e:	68a0      	ldr	r0, [r4, #8]
 8008d80:	f7ff ff7c 	bl	8008c7c <std>
 8008d84:	2202      	movs	r2, #2
 8008d86:	2112      	movs	r1, #18
 8008d88:	68e0      	ldr	r0, [r4, #12]
 8008d8a:	f7ff ff77 	bl	8008c7c <std>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61a3      	str	r3, [r4, #24]
 8008d92:	e7d1      	b.n	8008d38 <__sinit+0xc>
 8008d94:	0800a644 	.word	0x0800a644
 8008d98:	08008cc5 	.word	0x08008cc5

08008d9c <__sfp>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	4607      	mov	r7, r0
 8008da0:	f7ff ffac 	bl	8008cfc <__sfp_lock_acquire>
 8008da4:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <__sfp+0x84>)
 8008da6:	681e      	ldr	r6, [r3, #0]
 8008da8:	69b3      	ldr	r3, [r6, #24]
 8008daa:	b913      	cbnz	r3, 8008db2 <__sfp+0x16>
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ffbd 	bl	8008d2c <__sinit>
 8008db2:	3648      	adds	r6, #72	; 0x48
 8008db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	d503      	bpl.n	8008dc4 <__sfp+0x28>
 8008dbc:	6833      	ldr	r3, [r6, #0]
 8008dbe:	b30b      	cbz	r3, 8008e04 <__sfp+0x68>
 8008dc0:	6836      	ldr	r6, [r6, #0]
 8008dc2:	e7f7      	b.n	8008db4 <__sfp+0x18>
 8008dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dc8:	b9d5      	cbnz	r5, 8008e00 <__sfp+0x64>
 8008dca:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <__sfp+0x88>)
 8008dcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dd0:	60e3      	str	r3, [r4, #12]
 8008dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8008dd4:	f000 f847 	bl	8008e66 <__retarget_lock_init_recursive>
 8008dd8:	f7ff ff96 	bl	8008d08 <__sfp_lock_release>
 8008ddc:	2208      	movs	r2, #8
 8008dde:	4629      	mov	r1, r5
 8008de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008de8:	6025      	str	r5, [r4, #0]
 8008dea:	61a5      	str	r5, [r4, #24]
 8008dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008df0:	f7ff fdaa 	bl	8008948 <memset>
 8008df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e00:	3468      	adds	r4, #104	; 0x68
 8008e02:	e7d9      	b.n	8008db8 <__sfp+0x1c>
 8008e04:	2104      	movs	r1, #4
 8008e06:	4638      	mov	r0, r7
 8008e08:	f7ff ff62 	bl	8008cd0 <__sfmoreglue>
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	6030      	str	r0, [r6, #0]
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d1d5      	bne.n	8008dc0 <__sfp+0x24>
 8008e14:	f7ff ff78 	bl	8008d08 <__sfp_lock_release>
 8008e18:	230c      	movs	r3, #12
 8008e1a:	603b      	str	r3, [r7, #0]
 8008e1c:	e7ee      	b.n	8008dfc <__sfp+0x60>
 8008e1e:	bf00      	nop
 8008e20:	0800a644 	.word	0x0800a644
 8008e24:	ffff0001 	.word	0xffff0001

08008e28 <_fwalk_reent>:
 8008e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	4688      	mov	r8, r1
 8008e30:	2700      	movs	r7, #0
 8008e32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e3e:	d505      	bpl.n	8008e4c <_fwalk_reent+0x24>
 8008e40:	6824      	ldr	r4, [r4, #0]
 8008e42:	2c00      	cmp	r4, #0
 8008e44:	d1f7      	bne.n	8008e36 <_fwalk_reent+0xe>
 8008e46:	4638      	mov	r0, r7
 8008e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e4c:	89ab      	ldrh	r3, [r5, #12]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d907      	bls.n	8008e62 <_fwalk_reent+0x3a>
 8008e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e56:	3301      	adds	r3, #1
 8008e58:	d003      	beq.n	8008e62 <_fwalk_reent+0x3a>
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	47c0      	blx	r8
 8008e60:	4307      	orrs	r7, r0
 8008e62:	3568      	adds	r5, #104	; 0x68
 8008e64:	e7e9      	b.n	8008e3a <_fwalk_reent+0x12>

08008e66 <__retarget_lock_init_recursive>:
 8008e66:	4770      	bx	lr

08008e68 <__retarget_lock_acquire_recursive>:
 8008e68:	4770      	bx	lr

08008e6a <__retarget_lock_release_recursive>:
 8008e6a:	4770      	bx	lr

08008e6c <_lseek_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	2200      	movs	r2, #0
 8008e76:	4d05      	ldr	r5, [pc, #20]	; (8008e8c <_lseek_r+0x20>)
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7f8 fc53 	bl	8001726 <_lseek>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_lseek_r+0x1e>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_lseek_r+0x1e>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	2000146c 	.word	0x2000146c

08008e90 <__malloc_lock>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__malloc_lock+0x8>)
 8008e92:	f7ff bfe9 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	20001464 	.word	0x20001464

08008e9c <__malloc_unlock>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__malloc_unlock+0x8>)
 8008e9e:	f7ff bfe4 	b.w	8008e6a <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	20001464 	.word	0x20001464

08008ea8 <__ssputs_r>:
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	688e      	ldr	r6, [r1, #8]
 8008eae:	4682      	mov	sl, r0
 8008eb0:	429e      	cmp	r6, r3
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	4690      	mov	r8, r2
 8008eb6:	461f      	mov	r7, r3
 8008eb8:	d838      	bhi.n	8008f2c <__ssputs_r+0x84>
 8008eba:	898a      	ldrh	r2, [r1, #12]
 8008ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ec0:	d032      	beq.n	8008f28 <__ssputs_r+0x80>
 8008ec2:	6825      	ldr	r5, [r4, #0]
 8008ec4:	6909      	ldr	r1, [r1, #16]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	eba5 0901 	sub.w	r9, r5, r1
 8008ecc:	6965      	ldr	r5, [r4, #20]
 8008ece:	444b      	add	r3, r9
 8008ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ed8:	106d      	asrs	r5, r5, #1
 8008eda:	429d      	cmp	r5, r3
 8008edc:	bf38      	it	cc
 8008ede:	461d      	movcc	r5, r3
 8008ee0:	0553      	lsls	r3, r2, #21
 8008ee2:	d531      	bpl.n	8008f48 <__ssputs_r+0xa0>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	f7ff fd83 	bl	80089f0 <_malloc_r>
 8008eea:	4606      	mov	r6, r0
 8008eec:	b950      	cbnz	r0, 8008f04 <__ssputs_r+0x5c>
 8008eee:	230c      	movs	r3, #12
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	f8ca 3000 	str.w	r3, [sl]
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f04:	464a      	mov	r2, r9
 8008f06:	6921      	ldr	r1, [r4, #16]
 8008f08:	f7ff fd10 	bl	800892c <memcpy>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	6126      	str	r6, [r4, #16]
 8008f1a:	444e      	add	r6, r9
 8008f1c:	6026      	str	r6, [r4, #0]
 8008f1e:	463e      	mov	r6, r7
 8008f20:	6165      	str	r5, [r4, #20]
 8008f22:	eba5 0509 	sub.w	r5, r5, r9
 8008f26:	60a5      	str	r5, [r4, #8]
 8008f28:	42be      	cmp	r6, r7
 8008f2a:	d900      	bls.n	8008f2e <__ssputs_r+0x86>
 8008f2c:	463e      	mov	r6, r7
 8008f2e:	4632      	mov	r2, r6
 8008f30:	4641      	mov	r1, r8
 8008f32:	6820      	ldr	r0, [r4, #0]
 8008f34:	f001 fa9e 	bl	800a474 <memmove>
 8008f38:	68a3      	ldr	r3, [r4, #8]
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	1b9b      	subs	r3, r3, r6
 8008f3e:	4432      	add	r2, r6
 8008f40:	2000      	movs	r0, #0
 8008f42:	60a3      	str	r3, [r4, #8]
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	e7db      	b.n	8008f00 <__ssputs_r+0x58>
 8008f48:	462a      	mov	r2, r5
 8008f4a:	f001 faad 	bl	800a4a8 <_realloc_r>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1e1      	bne.n	8008f18 <__ssputs_r+0x70>
 8008f54:	4650      	mov	r0, sl
 8008f56:	6921      	ldr	r1, [r4, #16]
 8008f58:	f7ff fcfe 	bl	8008958 <_free_r>
 8008f5c:	e7c7      	b.n	8008eee <__ssputs_r+0x46>
	...

08008f60 <_svfiprintf_r>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	4698      	mov	r8, r3
 8008f66:	898b      	ldrh	r3, [r1, #12]
 8008f68:	4607      	mov	r7, r0
 8008f6a:	061b      	lsls	r3, r3, #24
 8008f6c:	460d      	mov	r5, r1
 8008f6e:	4614      	mov	r4, r2
 8008f70:	b09d      	sub	sp, #116	; 0x74
 8008f72:	d50e      	bpl.n	8008f92 <_svfiprintf_r+0x32>
 8008f74:	690b      	ldr	r3, [r1, #16]
 8008f76:	b963      	cbnz	r3, 8008f92 <_svfiprintf_r+0x32>
 8008f78:	2140      	movs	r1, #64	; 0x40
 8008f7a:	f7ff fd39 	bl	80089f0 <_malloc_r>
 8008f7e:	6028      	str	r0, [r5, #0]
 8008f80:	6128      	str	r0, [r5, #16]
 8008f82:	b920      	cbnz	r0, 8008f8e <_svfiprintf_r+0x2e>
 8008f84:	230c      	movs	r3, #12
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e0d1      	b.n	8009132 <_svfiprintf_r+0x1d2>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	616b      	str	r3, [r5, #20]
 8008f92:	2300      	movs	r3, #0
 8008f94:	9309      	str	r3, [sp, #36]	; 0x24
 8008f96:	2320      	movs	r3, #32
 8008f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f9c:	2330      	movs	r3, #48	; 0x30
 8008f9e:	f04f 0901 	mov.w	r9, #1
 8008fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800914c <_svfiprintf_r+0x1ec>
 8008faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fae:	4623      	mov	r3, r4
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb6:	b10a      	cbz	r2, 8008fbc <_svfiprintf_r+0x5c>
 8008fb8:	2a25      	cmp	r2, #37	; 0x25
 8008fba:	d1f9      	bne.n	8008fb0 <_svfiprintf_r+0x50>
 8008fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008fc0:	d00b      	beq.n	8008fda <_svfiprintf_r+0x7a>
 8008fc2:	465b      	mov	r3, fp
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ff6d 	bl	8008ea8 <__ssputs_r>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f000 80aa 	beq.w	8009128 <_svfiprintf_r+0x1c8>
 8008fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd6:	445a      	add	r2, fp
 8008fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008fda:	f89a 3000 	ldrb.w	r3, [sl]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80a2 	beq.w	8009128 <_svfiprintf_r+0x1c8>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fee:	f10a 0a01 	add.w	sl, sl, #1
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	9307      	str	r3, [sp, #28]
 8008ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8008ffc:	4654      	mov	r4, sl
 8008ffe:	2205      	movs	r2, #5
 8009000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009004:	4851      	ldr	r0, [pc, #324]	; (800914c <_svfiprintf_r+0x1ec>)
 8009006:	f001 fa27 	bl	800a458 <memchr>
 800900a:	9a04      	ldr	r2, [sp, #16]
 800900c:	b9d8      	cbnz	r0, 8009046 <_svfiprintf_r+0xe6>
 800900e:	06d0      	lsls	r0, r2, #27
 8009010:	bf44      	itt	mi
 8009012:	2320      	movmi	r3, #32
 8009014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009018:	0711      	lsls	r1, r2, #28
 800901a:	bf44      	itt	mi
 800901c:	232b      	movmi	r3, #43	; 0x2b
 800901e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009022:	f89a 3000 	ldrb.w	r3, [sl]
 8009026:	2b2a      	cmp	r3, #42	; 0x2a
 8009028:	d015      	beq.n	8009056 <_svfiprintf_r+0xf6>
 800902a:	4654      	mov	r4, sl
 800902c:	2000      	movs	r0, #0
 800902e:	f04f 0c0a 	mov.w	ip, #10
 8009032:	9a07      	ldr	r2, [sp, #28]
 8009034:	4621      	mov	r1, r4
 8009036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800903a:	3b30      	subs	r3, #48	; 0x30
 800903c:	2b09      	cmp	r3, #9
 800903e:	d94e      	bls.n	80090de <_svfiprintf_r+0x17e>
 8009040:	b1b0      	cbz	r0, 8009070 <_svfiprintf_r+0x110>
 8009042:	9207      	str	r2, [sp, #28]
 8009044:	e014      	b.n	8009070 <_svfiprintf_r+0x110>
 8009046:	eba0 0308 	sub.w	r3, r0, r8
 800904a:	fa09 f303 	lsl.w	r3, r9, r3
 800904e:	4313      	orrs	r3, r2
 8009050:	46a2      	mov	sl, r4
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	e7d2      	b.n	8008ffc <_svfiprintf_r+0x9c>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	1d19      	adds	r1, r3, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	9103      	str	r1, [sp, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfbb      	ittet	lt
 8009062:	425b      	neglt	r3, r3
 8009064:	f042 0202 	orrlt.w	r2, r2, #2
 8009068:	9307      	strge	r3, [sp, #28]
 800906a:	9307      	strlt	r3, [sp, #28]
 800906c:	bfb8      	it	lt
 800906e:	9204      	strlt	r2, [sp, #16]
 8009070:	7823      	ldrb	r3, [r4, #0]
 8009072:	2b2e      	cmp	r3, #46	; 0x2e
 8009074:	d10c      	bne.n	8009090 <_svfiprintf_r+0x130>
 8009076:	7863      	ldrb	r3, [r4, #1]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	d135      	bne.n	80090e8 <_svfiprintf_r+0x188>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	3402      	adds	r4, #2
 8009080:	1d1a      	adds	r2, r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9203      	str	r2, [sp, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bfb8      	it	lt
 800908a:	f04f 33ff 	movlt.w	r3, #4294967295
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800915c <_svfiprintf_r+0x1fc>
 8009094:	2203      	movs	r2, #3
 8009096:	4650      	mov	r0, sl
 8009098:	7821      	ldrb	r1, [r4, #0]
 800909a:	f001 f9dd 	bl	800a458 <memchr>
 800909e:	b140      	cbz	r0, 80090b2 <_svfiprintf_r+0x152>
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	eba0 000a 	sub.w	r0, r0, sl
 80090a6:	fa03 f000 	lsl.w	r0, r3, r0
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	3401      	adds	r4, #1
 80090ae:	4303      	orrs	r3, r0
 80090b0:	9304      	str	r3, [sp, #16]
 80090b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b6:	2206      	movs	r2, #6
 80090b8:	4825      	ldr	r0, [pc, #148]	; (8009150 <_svfiprintf_r+0x1f0>)
 80090ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090be:	f001 f9cb 	bl	800a458 <memchr>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d038      	beq.n	8009138 <_svfiprintf_r+0x1d8>
 80090c6:	4b23      	ldr	r3, [pc, #140]	; (8009154 <_svfiprintf_r+0x1f4>)
 80090c8:	bb1b      	cbnz	r3, 8009112 <_svfiprintf_r+0x1b2>
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	3307      	adds	r3, #7
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	3308      	adds	r3, #8
 80090d4:	9303      	str	r3, [sp, #12]
 80090d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d8:	4433      	add	r3, r6
 80090da:	9309      	str	r3, [sp, #36]	; 0x24
 80090dc:	e767      	b.n	8008fae <_svfiprintf_r+0x4e>
 80090de:	460c      	mov	r4, r1
 80090e0:	2001      	movs	r0, #1
 80090e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090e6:	e7a5      	b.n	8009034 <_svfiprintf_r+0xd4>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f04f 0c0a 	mov.w	ip, #10
 80090ee:	4619      	mov	r1, r3
 80090f0:	3401      	adds	r4, #1
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	4620      	mov	r0, r4
 80090f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090fa:	3a30      	subs	r2, #48	; 0x30
 80090fc:	2a09      	cmp	r2, #9
 80090fe:	d903      	bls.n	8009108 <_svfiprintf_r+0x1a8>
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0c5      	beq.n	8009090 <_svfiprintf_r+0x130>
 8009104:	9105      	str	r1, [sp, #20]
 8009106:	e7c3      	b.n	8009090 <_svfiprintf_r+0x130>
 8009108:	4604      	mov	r4, r0
 800910a:	2301      	movs	r3, #1
 800910c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009110:	e7f0      	b.n	80090f4 <_svfiprintf_r+0x194>
 8009112:	ab03      	add	r3, sp, #12
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	462a      	mov	r2, r5
 8009118:	4638      	mov	r0, r7
 800911a:	4b0f      	ldr	r3, [pc, #60]	; (8009158 <_svfiprintf_r+0x1f8>)
 800911c:	a904      	add	r1, sp, #16
 800911e:	f3af 8000 	nop.w
 8009122:	1c42      	adds	r2, r0, #1
 8009124:	4606      	mov	r6, r0
 8009126:	d1d6      	bne.n	80090d6 <_svfiprintf_r+0x176>
 8009128:	89ab      	ldrh	r3, [r5, #12]
 800912a:	065b      	lsls	r3, r3, #25
 800912c:	f53f af2c 	bmi.w	8008f88 <_svfiprintf_r+0x28>
 8009130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009132:	b01d      	add	sp, #116	; 0x74
 8009134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009138:	ab03      	add	r3, sp, #12
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	462a      	mov	r2, r5
 800913e:	4638      	mov	r0, r7
 8009140:	4b05      	ldr	r3, [pc, #20]	; (8009158 <_svfiprintf_r+0x1f8>)
 8009142:	a904      	add	r1, sp, #16
 8009144:	f000 fba8 	bl	8009898 <_printf_i>
 8009148:	e7eb      	b.n	8009122 <_svfiprintf_r+0x1c2>
 800914a:	bf00      	nop
 800914c:	0800a6a8 	.word	0x0800a6a8
 8009150:	0800a6b2 	.word	0x0800a6b2
 8009154:	00000000 	.word	0x00000000
 8009158:	08008ea9 	.word	0x08008ea9
 800915c:	0800a6ae 	.word	0x0800a6ae

08009160 <_sungetc_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	1c4b      	adds	r3, r1, #1
 8009164:	4614      	mov	r4, r2
 8009166:	d103      	bne.n	8009170 <_sungetc_r+0x10>
 8009168:	f04f 35ff 	mov.w	r5, #4294967295
 800916c:	4628      	mov	r0, r5
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	8993      	ldrh	r3, [r2, #12]
 8009172:	b2cd      	uxtb	r5, r1
 8009174:	f023 0320 	bic.w	r3, r3, #32
 8009178:	8193      	strh	r3, [r2, #12]
 800917a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800917c:	6852      	ldr	r2, [r2, #4]
 800917e:	b18b      	cbz	r3, 80091a4 <_sungetc_r+0x44>
 8009180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009182:	4293      	cmp	r3, r2
 8009184:	dd08      	ble.n	8009198 <_sungetc_r+0x38>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	1e5a      	subs	r2, r3, #1
 800918a:	6022      	str	r2, [r4, #0]
 800918c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009190:	6863      	ldr	r3, [r4, #4]
 8009192:	3301      	adds	r3, #1
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	e7e9      	b.n	800916c <_sungetc_r+0xc>
 8009198:	4621      	mov	r1, r4
 800919a:	f000 ff3f 	bl	800a01c <__submore>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d0f1      	beq.n	8009186 <_sungetc_r+0x26>
 80091a2:	e7e1      	b.n	8009168 <_sungetc_r+0x8>
 80091a4:	6921      	ldr	r1, [r4, #16]
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	b151      	cbz	r1, 80091c0 <_sungetc_r+0x60>
 80091aa:	4299      	cmp	r1, r3
 80091ac:	d208      	bcs.n	80091c0 <_sungetc_r+0x60>
 80091ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80091b2:	42a9      	cmp	r1, r5
 80091b4:	d104      	bne.n	80091c0 <_sungetc_r+0x60>
 80091b6:	3b01      	subs	r3, #1
 80091b8:	3201      	adds	r2, #1
 80091ba:	6023      	str	r3, [r4, #0]
 80091bc:	6062      	str	r2, [r4, #4]
 80091be:	e7d5      	b.n	800916c <_sungetc_r+0xc>
 80091c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80091c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c8:	6363      	str	r3, [r4, #52]	; 0x34
 80091ca:	2303      	movs	r3, #3
 80091cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80091ce:	4623      	mov	r3, r4
 80091d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2301      	movs	r3, #1
 80091d8:	e7dc      	b.n	8009194 <_sungetc_r+0x34>

080091da <__ssrefill_r>:
 80091da:	b510      	push	{r4, lr}
 80091dc:	460c      	mov	r4, r1
 80091de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80091e0:	b169      	cbz	r1, 80091fe <__ssrefill_r+0x24>
 80091e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e6:	4299      	cmp	r1, r3
 80091e8:	d001      	beq.n	80091ee <__ssrefill_r+0x14>
 80091ea:	f7ff fbb5 	bl	8008958 <_free_r>
 80091ee:	2000      	movs	r0, #0
 80091f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091f2:	6360      	str	r0, [r4, #52]	; 0x34
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	b113      	cbz	r3, 80091fe <__ssrefill_r+0x24>
 80091f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	bd10      	pop	{r4, pc}
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	6063      	str	r3, [r4, #4]
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f043 0320 	orr.w	r3, r3, #32
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	e7f3      	b.n	80091fc <__ssrefill_r+0x22>

08009214 <__ssvfiscanf_r>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	460c      	mov	r4, r1
 800921a:	2100      	movs	r1, #0
 800921c:	4606      	mov	r6, r0
 800921e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009222:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009226:	49b3      	ldr	r1, [pc, #716]	; (80094f4 <__ssvfiscanf_r+0x2e0>)
 8009228:	f10d 0804 	add.w	r8, sp, #4
 800922c:	91a0      	str	r1, [sp, #640]	; 0x280
 800922e:	49b2      	ldr	r1, [pc, #712]	; (80094f8 <__ssvfiscanf_r+0x2e4>)
 8009230:	4fb2      	ldr	r7, [pc, #712]	; (80094fc <__ssvfiscanf_r+0x2e8>)
 8009232:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009500 <__ssvfiscanf_r+0x2ec>
 8009236:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800923a:	91a1      	str	r1, [sp, #644]	; 0x284
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	f892 a000 	ldrb.w	sl, [r2]
 8009242:	f1ba 0f00 	cmp.w	sl, #0
 8009246:	f000 8153 	beq.w	80094f0 <__ssvfiscanf_r+0x2dc>
 800924a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800924e:	1c55      	adds	r5, r2, #1
 8009250:	f013 0308 	ands.w	r3, r3, #8
 8009254:	d019      	beq.n	800928a <__ssvfiscanf_r+0x76>
 8009256:	6863      	ldr	r3, [r4, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dd0f      	ble.n	800927c <__ssvfiscanf_r+0x68>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	5cba      	ldrb	r2, [r7, r2]
 8009262:	0712      	lsls	r2, r2, #28
 8009264:	d401      	bmi.n	800926a <__ssvfiscanf_r+0x56>
 8009266:	462a      	mov	r2, r5
 8009268:	e7e9      	b.n	800923e <__ssvfiscanf_r+0x2a>
 800926a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800926c:	3301      	adds	r3, #1
 800926e:	3201      	adds	r2, #1
 8009270:	9245      	str	r2, [sp, #276]	; 0x114
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	3a01      	subs	r2, #1
 8009278:	6062      	str	r2, [r4, #4]
 800927a:	e7ec      	b.n	8009256 <__ssvfiscanf_r+0x42>
 800927c:	4621      	mov	r1, r4
 800927e:	4630      	mov	r0, r6
 8009280:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009282:	4798      	blx	r3
 8009284:	2800      	cmp	r0, #0
 8009286:	d0e9      	beq.n	800925c <__ssvfiscanf_r+0x48>
 8009288:	e7ed      	b.n	8009266 <__ssvfiscanf_r+0x52>
 800928a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800928e:	f040 8086 	bne.w	800939e <__ssvfiscanf_r+0x18a>
 8009292:	9341      	str	r3, [sp, #260]	; 0x104
 8009294:	9343      	str	r3, [sp, #268]	; 0x10c
 8009296:	7853      	ldrb	r3, [r2, #1]
 8009298:	2b2a      	cmp	r3, #42	; 0x2a
 800929a:	bf04      	itt	eq
 800929c:	2310      	moveq	r3, #16
 800929e:	1c95      	addeq	r5, r2, #2
 80092a0:	f04f 020a 	mov.w	r2, #10
 80092a4:	bf08      	it	eq
 80092a6:	9341      	streq	r3, [sp, #260]	; 0x104
 80092a8:	46ab      	mov	fp, r5
 80092aa:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80092ae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80092b2:	2b09      	cmp	r3, #9
 80092b4:	d91d      	bls.n	80092f2 <__ssvfiscanf_r+0xde>
 80092b6:	2203      	movs	r2, #3
 80092b8:	4891      	ldr	r0, [pc, #580]	; (8009500 <__ssvfiscanf_r+0x2ec>)
 80092ba:	f001 f8cd 	bl	800a458 <memchr>
 80092be:	b140      	cbz	r0, 80092d2 <__ssvfiscanf_r+0xbe>
 80092c0:	2301      	movs	r3, #1
 80092c2:	465d      	mov	r5, fp
 80092c4:	eba0 0009 	sub.w	r0, r0, r9
 80092c8:	fa03 f000 	lsl.w	r0, r3, r0
 80092cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092ce:	4318      	orrs	r0, r3
 80092d0:	9041      	str	r0, [sp, #260]	; 0x104
 80092d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092d6:	2b78      	cmp	r3, #120	; 0x78
 80092d8:	d806      	bhi.n	80092e8 <__ssvfiscanf_r+0xd4>
 80092da:	2b57      	cmp	r3, #87	; 0x57
 80092dc:	d810      	bhi.n	8009300 <__ssvfiscanf_r+0xec>
 80092de:	2b25      	cmp	r3, #37	; 0x25
 80092e0:	d05d      	beq.n	800939e <__ssvfiscanf_r+0x18a>
 80092e2:	d857      	bhi.n	8009394 <__ssvfiscanf_r+0x180>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d075      	beq.n	80093d4 <__ssvfiscanf_r+0x1c0>
 80092e8:	2303      	movs	r3, #3
 80092ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80092ec:	230a      	movs	r3, #10
 80092ee:	9342      	str	r3, [sp, #264]	; 0x108
 80092f0:	e082      	b.n	80093f8 <__ssvfiscanf_r+0x1e4>
 80092f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80092f4:	465d      	mov	r5, fp
 80092f6:	fb02 1303 	mla	r3, r2, r3, r1
 80092fa:	3b30      	subs	r3, #48	; 0x30
 80092fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80092fe:	e7d3      	b.n	80092a8 <__ssvfiscanf_r+0x94>
 8009300:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009304:	2a20      	cmp	r2, #32
 8009306:	d8ef      	bhi.n	80092e8 <__ssvfiscanf_r+0xd4>
 8009308:	a101      	add	r1, pc, #4	; (adr r1, 8009310 <__ssvfiscanf_r+0xfc>)
 800930a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800930e:	bf00      	nop
 8009310:	080093e3 	.word	0x080093e3
 8009314:	080092e9 	.word	0x080092e9
 8009318:	080092e9 	.word	0x080092e9
 800931c:	08009441 	.word	0x08009441
 8009320:	080092e9 	.word	0x080092e9
 8009324:	080092e9 	.word	0x080092e9
 8009328:	080092e9 	.word	0x080092e9
 800932c:	080092e9 	.word	0x080092e9
 8009330:	080092e9 	.word	0x080092e9
 8009334:	080092e9 	.word	0x080092e9
 8009338:	080092e9 	.word	0x080092e9
 800933c:	08009457 	.word	0x08009457
 8009340:	0800942d 	.word	0x0800942d
 8009344:	0800939b 	.word	0x0800939b
 8009348:	0800939b 	.word	0x0800939b
 800934c:	0800939b 	.word	0x0800939b
 8009350:	080092e9 	.word	0x080092e9
 8009354:	08009431 	.word	0x08009431
 8009358:	080092e9 	.word	0x080092e9
 800935c:	080092e9 	.word	0x080092e9
 8009360:	080092e9 	.word	0x080092e9
 8009364:	080092e9 	.word	0x080092e9
 8009368:	08009467 	.word	0x08009467
 800936c:	08009439 	.word	0x08009439
 8009370:	080093db 	.word	0x080093db
 8009374:	080092e9 	.word	0x080092e9
 8009378:	080092e9 	.word	0x080092e9
 800937c:	08009463 	.word	0x08009463
 8009380:	080092e9 	.word	0x080092e9
 8009384:	0800942d 	.word	0x0800942d
 8009388:	080092e9 	.word	0x080092e9
 800938c:	080092e9 	.word	0x080092e9
 8009390:	080093e3 	.word	0x080093e3
 8009394:	3b45      	subs	r3, #69	; 0x45
 8009396:	2b02      	cmp	r3, #2
 8009398:	d8a6      	bhi.n	80092e8 <__ssvfiscanf_r+0xd4>
 800939a:	2305      	movs	r3, #5
 800939c:	e02b      	b.n	80093f6 <__ssvfiscanf_r+0x1e2>
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dd0d      	ble.n	80093c0 <__ssvfiscanf_r+0x1ac>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	4552      	cmp	r2, sl
 80093aa:	f040 80a1 	bne.w	80094f0 <__ssvfiscanf_r+0x2dc>
 80093ae:	3301      	adds	r3, #1
 80093b0:	6862      	ldr	r2, [r4, #4]
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80093b6:	3a01      	subs	r2, #1
 80093b8:	3301      	adds	r3, #1
 80093ba:	6062      	str	r2, [r4, #4]
 80093bc:	9345      	str	r3, [sp, #276]	; 0x114
 80093be:	e752      	b.n	8009266 <__ssvfiscanf_r+0x52>
 80093c0:	4621      	mov	r1, r4
 80093c2:	4630      	mov	r0, r6
 80093c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80093c6:	4798      	blx	r3
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d0eb      	beq.n	80093a4 <__ssvfiscanf_r+0x190>
 80093cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f040 8084 	bne.w	80094dc <__ssvfiscanf_r+0x2c8>
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	e086      	b.n	80094e8 <__ssvfiscanf_r+0x2d4>
 80093da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80093dc:	f042 0220 	orr.w	r2, r2, #32
 80093e0:	9241      	str	r2, [sp, #260]	; 0x104
 80093e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80093e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e8:	9241      	str	r2, [sp, #260]	; 0x104
 80093ea:	2210      	movs	r2, #16
 80093ec:	2b6f      	cmp	r3, #111	; 0x6f
 80093ee:	bf34      	ite	cc
 80093f0:	2303      	movcc	r3, #3
 80093f2:	2304      	movcs	r3, #4
 80093f4:	9242      	str	r2, [sp, #264]	; 0x108
 80093f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	dd41      	ble.n	8009482 <__ssvfiscanf_r+0x26e>
 80093fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009400:	0659      	lsls	r1, r3, #25
 8009402:	d404      	bmi.n	800940e <__ssvfiscanf_r+0x1fa>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	781a      	ldrb	r2, [r3, #0]
 8009408:	5cba      	ldrb	r2, [r7, r2]
 800940a:	0712      	lsls	r2, r2, #28
 800940c:	d440      	bmi.n	8009490 <__ssvfiscanf_r+0x27c>
 800940e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009410:	2b02      	cmp	r3, #2
 8009412:	dc4f      	bgt.n	80094b4 <__ssvfiscanf_r+0x2a0>
 8009414:	466b      	mov	r3, sp
 8009416:	4622      	mov	r2, r4
 8009418:	4630      	mov	r0, r6
 800941a:	a941      	add	r1, sp, #260	; 0x104
 800941c:	f000 fb62 	bl	8009ae4 <_scanf_chars>
 8009420:	2801      	cmp	r0, #1
 8009422:	d065      	beq.n	80094f0 <__ssvfiscanf_r+0x2dc>
 8009424:	2802      	cmp	r0, #2
 8009426:	f47f af1e 	bne.w	8009266 <__ssvfiscanf_r+0x52>
 800942a:	e7cf      	b.n	80093cc <__ssvfiscanf_r+0x1b8>
 800942c:	220a      	movs	r2, #10
 800942e:	e7dd      	b.n	80093ec <__ssvfiscanf_r+0x1d8>
 8009430:	2300      	movs	r3, #0
 8009432:	9342      	str	r3, [sp, #264]	; 0x108
 8009434:	2303      	movs	r3, #3
 8009436:	e7de      	b.n	80093f6 <__ssvfiscanf_r+0x1e2>
 8009438:	2308      	movs	r3, #8
 800943a:	9342      	str	r3, [sp, #264]	; 0x108
 800943c:	2304      	movs	r3, #4
 800943e:	e7da      	b.n	80093f6 <__ssvfiscanf_r+0x1e2>
 8009440:	4629      	mov	r1, r5
 8009442:	4640      	mov	r0, r8
 8009444:	f000 fcaa 	bl	8009d9c <__sccl>
 8009448:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800944a:	4605      	mov	r5, r0
 800944c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009450:	9341      	str	r3, [sp, #260]	; 0x104
 8009452:	2301      	movs	r3, #1
 8009454:	e7cf      	b.n	80093f6 <__ssvfiscanf_r+0x1e2>
 8009456:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945c:	9341      	str	r3, [sp, #260]	; 0x104
 800945e:	2300      	movs	r3, #0
 8009460:	e7c9      	b.n	80093f6 <__ssvfiscanf_r+0x1e2>
 8009462:	2302      	movs	r3, #2
 8009464:	e7c7      	b.n	80093f6 <__ssvfiscanf_r+0x1e2>
 8009466:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009468:	06c3      	lsls	r3, r0, #27
 800946a:	f53f aefc 	bmi.w	8009266 <__ssvfiscanf_r+0x52>
 800946e:	9b00      	ldr	r3, [sp, #0]
 8009470:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009472:	1d19      	adds	r1, r3, #4
 8009474:	9100      	str	r1, [sp, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	07c0      	lsls	r0, r0, #31
 800947a:	bf4c      	ite	mi
 800947c:	801a      	strhmi	r2, [r3, #0]
 800947e:	601a      	strpl	r2, [r3, #0]
 8009480:	e6f1      	b.n	8009266 <__ssvfiscanf_r+0x52>
 8009482:	4621      	mov	r1, r4
 8009484:	4630      	mov	r0, r6
 8009486:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009488:	4798      	blx	r3
 800948a:	2800      	cmp	r0, #0
 800948c:	d0b7      	beq.n	80093fe <__ssvfiscanf_r+0x1ea>
 800948e:	e79d      	b.n	80093cc <__ssvfiscanf_r+0x1b8>
 8009490:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009492:	3201      	adds	r2, #1
 8009494:	9245      	str	r2, [sp, #276]	; 0x114
 8009496:	6862      	ldr	r2, [r4, #4]
 8009498:	3a01      	subs	r2, #1
 800949a:	2a00      	cmp	r2, #0
 800949c:	6062      	str	r2, [r4, #4]
 800949e:	dd02      	ble.n	80094a6 <__ssvfiscanf_r+0x292>
 80094a0:	3301      	adds	r3, #1
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	e7ae      	b.n	8009404 <__ssvfiscanf_r+0x1f0>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4630      	mov	r0, r6
 80094aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80094ac:	4798      	blx	r3
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d0a8      	beq.n	8009404 <__ssvfiscanf_r+0x1f0>
 80094b2:	e78b      	b.n	80093cc <__ssvfiscanf_r+0x1b8>
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	dc06      	bgt.n	80094c6 <__ssvfiscanf_r+0x2b2>
 80094b8:	466b      	mov	r3, sp
 80094ba:	4622      	mov	r2, r4
 80094bc:	4630      	mov	r0, r6
 80094be:	a941      	add	r1, sp, #260	; 0x104
 80094c0:	f000 fb68 	bl	8009b94 <_scanf_i>
 80094c4:	e7ac      	b.n	8009420 <__ssvfiscanf_r+0x20c>
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <__ssvfiscanf_r+0x2f0>)
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f43f aecc 	beq.w	8009266 <__ssvfiscanf_r+0x52>
 80094ce:	466b      	mov	r3, sp
 80094d0:	4622      	mov	r2, r4
 80094d2:	4630      	mov	r0, r6
 80094d4:	a941      	add	r1, sp, #260	; 0x104
 80094d6:	f3af 8000 	nop.w
 80094da:	e7a1      	b.n	8009420 <__ssvfiscanf_r+0x20c>
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80094e2:	bf18      	it	ne
 80094e4:	f04f 30ff 	movne.w	r0, #4294967295
 80094e8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80094f2:	e7f9      	b.n	80094e8 <__ssvfiscanf_r+0x2d4>
 80094f4:	08009161 	.word	0x08009161
 80094f8:	080091db 	.word	0x080091db
 80094fc:	0800a6f7 	.word	0x0800a6f7
 8009500:	0800a6ae 	.word	0x0800a6ae
 8009504:	00000000 	.word	0x00000000

08009508 <__sfputc_r>:
 8009508:	6893      	ldr	r3, [r2, #8]
 800950a:	b410      	push	{r4}
 800950c:	3b01      	subs	r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	6093      	str	r3, [r2, #8]
 8009512:	da07      	bge.n	8009524 <__sfputc_r+0x1c>
 8009514:	6994      	ldr	r4, [r2, #24]
 8009516:	42a3      	cmp	r3, r4
 8009518:	db01      	blt.n	800951e <__sfputc_r+0x16>
 800951a:	290a      	cmp	r1, #10
 800951c:	d102      	bne.n	8009524 <__sfputc_r+0x1c>
 800951e:	bc10      	pop	{r4}
 8009520:	f000 bdb4 	b.w	800a08c <__swbuf_r>
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	1c58      	adds	r0, r3, #1
 8009528:	6010      	str	r0, [r2, #0]
 800952a:	7019      	strb	r1, [r3, #0]
 800952c:	4608      	mov	r0, r1
 800952e:	bc10      	pop	{r4}
 8009530:	4770      	bx	lr

08009532 <__sfputs_r>:
 8009532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	4614      	mov	r4, r2
 800953a:	18d5      	adds	r5, r2, r3
 800953c:	42ac      	cmp	r4, r5
 800953e:	d101      	bne.n	8009544 <__sfputs_r+0x12>
 8009540:	2000      	movs	r0, #0
 8009542:	e007      	b.n	8009554 <__sfputs_r+0x22>
 8009544:	463a      	mov	r2, r7
 8009546:	4630      	mov	r0, r6
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	f7ff ffdc 	bl	8009508 <__sfputc_r>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d1f3      	bne.n	800953c <__sfputs_r+0xa>
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009558 <_vfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	460d      	mov	r5, r1
 800955e:	4614      	mov	r4, r2
 8009560:	4698      	mov	r8, r3
 8009562:	4606      	mov	r6, r0
 8009564:	b09d      	sub	sp, #116	; 0x74
 8009566:	b118      	cbz	r0, 8009570 <_vfiprintf_r+0x18>
 8009568:	6983      	ldr	r3, [r0, #24]
 800956a:	b90b      	cbnz	r3, 8009570 <_vfiprintf_r+0x18>
 800956c:	f7ff fbde 	bl	8008d2c <__sinit>
 8009570:	4b89      	ldr	r3, [pc, #548]	; (8009798 <_vfiprintf_r+0x240>)
 8009572:	429d      	cmp	r5, r3
 8009574:	d11b      	bne.n	80095ae <_vfiprintf_r+0x56>
 8009576:	6875      	ldr	r5, [r6, #4]
 8009578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x32>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x32>
 8009584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009586:	f7ff fc6f 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	071b      	lsls	r3, r3, #28
 800958e:	d501      	bpl.n	8009594 <_vfiprintf_r+0x3c>
 8009590:	692b      	ldr	r3, [r5, #16]
 8009592:	b9eb      	cbnz	r3, 80095d0 <_vfiprintf_r+0x78>
 8009594:	4629      	mov	r1, r5
 8009596:	4630      	mov	r0, r6
 8009598:	f000 fdca 	bl	800a130 <__swsetup_r>
 800959c:	b1c0      	cbz	r0, 80095d0 <_vfiprintf_r+0x78>
 800959e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a0:	07dc      	lsls	r4, r3, #31
 80095a2:	d50e      	bpl.n	80095c2 <_vfiprintf_r+0x6a>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b01d      	add	sp, #116	; 0x74
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	4b7b      	ldr	r3, [pc, #492]	; (800979c <_vfiprintf_r+0x244>)
 80095b0:	429d      	cmp	r5, r3
 80095b2:	d101      	bne.n	80095b8 <_vfiprintf_r+0x60>
 80095b4:	68b5      	ldr	r5, [r6, #8]
 80095b6:	e7df      	b.n	8009578 <_vfiprintf_r+0x20>
 80095b8:	4b79      	ldr	r3, [pc, #484]	; (80097a0 <_vfiprintf_r+0x248>)
 80095ba:	429d      	cmp	r5, r3
 80095bc:	bf08      	it	eq
 80095be:	68f5      	ldreq	r5, [r6, #12]
 80095c0:	e7da      	b.n	8009578 <_vfiprintf_r+0x20>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	0598      	lsls	r0, r3, #22
 80095c6:	d4ed      	bmi.n	80095a4 <_vfiprintf_r+0x4c>
 80095c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ca:	f7ff fc4e 	bl	8008e6a <__retarget_lock_release_recursive>
 80095ce:	e7e9      	b.n	80095a4 <_vfiprintf_r+0x4c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	2320      	movs	r3, #32
 80095d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095da:	2330      	movs	r3, #48	; 0x30
 80095dc:	f04f 0901 	mov.w	r9, #1
 80095e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80097a4 <_vfiprintf_r+0x24c>
 80095e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ec:	4623      	mov	r3, r4
 80095ee:	469a      	mov	sl, r3
 80095f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f4:	b10a      	cbz	r2, 80095fa <_vfiprintf_r+0xa2>
 80095f6:	2a25      	cmp	r2, #37	; 0x25
 80095f8:	d1f9      	bne.n	80095ee <_vfiprintf_r+0x96>
 80095fa:	ebba 0b04 	subs.w	fp, sl, r4
 80095fe:	d00b      	beq.n	8009618 <_vfiprintf_r+0xc0>
 8009600:	465b      	mov	r3, fp
 8009602:	4622      	mov	r2, r4
 8009604:	4629      	mov	r1, r5
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ff93 	bl	8009532 <__sfputs_r>
 800960c:	3001      	adds	r0, #1
 800960e:	f000 80aa 	beq.w	8009766 <_vfiprintf_r+0x20e>
 8009612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009614:	445a      	add	r2, fp
 8009616:	9209      	str	r2, [sp, #36]	; 0x24
 8009618:	f89a 3000 	ldrb.w	r3, [sl]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80a2 	beq.w	8009766 <_vfiprintf_r+0x20e>
 8009622:	2300      	movs	r3, #0
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962c:	f10a 0a01 	add.w	sl, sl, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009638:	931a      	str	r3, [sp, #104]	; 0x68
 800963a:	4654      	mov	r4, sl
 800963c:	2205      	movs	r2, #5
 800963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009642:	4858      	ldr	r0, [pc, #352]	; (80097a4 <_vfiprintf_r+0x24c>)
 8009644:	f000 ff08 	bl	800a458 <memchr>
 8009648:	9a04      	ldr	r2, [sp, #16]
 800964a:	b9d8      	cbnz	r0, 8009684 <_vfiprintf_r+0x12c>
 800964c:	06d1      	lsls	r1, r2, #27
 800964e:	bf44      	itt	mi
 8009650:	2320      	movmi	r3, #32
 8009652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009656:	0713      	lsls	r3, r2, #28
 8009658:	bf44      	itt	mi
 800965a:	232b      	movmi	r3, #43	; 0x2b
 800965c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009660:	f89a 3000 	ldrb.w	r3, [sl]
 8009664:	2b2a      	cmp	r3, #42	; 0x2a
 8009666:	d015      	beq.n	8009694 <_vfiprintf_r+0x13c>
 8009668:	4654      	mov	r4, sl
 800966a:	2000      	movs	r0, #0
 800966c:	f04f 0c0a 	mov.w	ip, #10
 8009670:	9a07      	ldr	r2, [sp, #28]
 8009672:	4621      	mov	r1, r4
 8009674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009678:	3b30      	subs	r3, #48	; 0x30
 800967a:	2b09      	cmp	r3, #9
 800967c:	d94e      	bls.n	800971c <_vfiprintf_r+0x1c4>
 800967e:	b1b0      	cbz	r0, 80096ae <_vfiprintf_r+0x156>
 8009680:	9207      	str	r2, [sp, #28]
 8009682:	e014      	b.n	80096ae <_vfiprintf_r+0x156>
 8009684:	eba0 0308 	sub.w	r3, r0, r8
 8009688:	fa09 f303 	lsl.w	r3, r9, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	46a2      	mov	sl, r4
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	e7d2      	b.n	800963a <_vfiprintf_r+0xe2>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	1d19      	adds	r1, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	9103      	str	r1, [sp, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfbb      	ittet	lt
 80096a0:	425b      	neglt	r3, r3
 80096a2:	f042 0202 	orrlt.w	r2, r2, #2
 80096a6:	9307      	strge	r3, [sp, #28]
 80096a8:	9307      	strlt	r3, [sp, #28]
 80096aa:	bfb8      	it	lt
 80096ac:	9204      	strlt	r2, [sp, #16]
 80096ae:	7823      	ldrb	r3, [r4, #0]
 80096b0:	2b2e      	cmp	r3, #46	; 0x2e
 80096b2:	d10c      	bne.n	80096ce <_vfiprintf_r+0x176>
 80096b4:	7863      	ldrb	r3, [r4, #1]
 80096b6:	2b2a      	cmp	r3, #42	; 0x2a
 80096b8:	d135      	bne.n	8009726 <_vfiprintf_r+0x1ce>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	3402      	adds	r4, #2
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	9203      	str	r2, [sp, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bfb8      	it	lt
 80096c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097b4 <_vfiprintf_r+0x25c>
 80096d2:	2203      	movs	r2, #3
 80096d4:	4650      	mov	r0, sl
 80096d6:	7821      	ldrb	r1, [r4, #0]
 80096d8:	f000 febe 	bl	800a458 <memchr>
 80096dc:	b140      	cbz	r0, 80096f0 <_vfiprintf_r+0x198>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	eba0 000a 	sub.w	r0, r0, sl
 80096e4:	fa03 f000 	lsl.w	r0, r3, r0
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	3401      	adds	r4, #1
 80096ec:	4303      	orrs	r3, r0
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f4:	2206      	movs	r2, #6
 80096f6:	482c      	ldr	r0, [pc, #176]	; (80097a8 <_vfiprintf_r+0x250>)
 80096f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096fc:	f000 feac 	bl	800a458 <memchr>
 8009700:	2800      	cmp	r0, #0
 8009702:	d03f      	beq.n	8009784 <_vfiprintf_r+0x22c>
 8009704:	4b29      	ldr	r3, [pc, #164]	; (80097ac <_vfiprintf_r+0x254>)
 8009706:	bb1b      	cbnz	r3, 8009750 <_vfiprintf_r+0x1f8>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	3307      	adds	r3, #7
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	3308      	adds	r3, #8
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	443b      	add	r3, r7
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	e767      	b.n	80095ec <_vfiprintf_r+0x94>
 800971c:	460c      	mov	r4, r1
 800971e:	2001      	movs	r0, #1
 8009720:	fb0c 3202 	mla	r2, ip, r2, r3
 8009724:	e7a5      	b.n	8009672 <_vfiprintf_r+0x11a>
 8009726:	2300      	movs	r3, #0
 8009728:	f04f 0c0a 	mov.w	ip, #10
 800972c:	4619      	mov	r1, r3
 800972e:	3401      	adds	r4, #1
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	4620      	mov	r0, r4
 8009734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009738:	3a30      	subs	r2, #48	; 0x30
 800973a:	2a09      	cmp	r2, #9
 800973c:	d903      	bls.n	8009746 <_vfiprintf_r+0x1ee>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0c5      	beq.n	80096ce <_vfiprintf_r+0x176>
 8009742:	9105      	str	r1, [sp, #20]
 8009744:	e7c3      	b.n	80096ce <_vfiprintf_r+0x176>
 8009746:	4604      	mov	r4, r0
 8009748:	2301      	movs	r3, #1
 800974a:	fb0c 2101 	mla	r1, ip, r1, r2
 800974e:	e7f0      	b.n	8009732 <_vfiprintf_r+0x1da>
 8009750:	ab03      	add	r3, sp, #12
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	462a      	mov	r2, r5
 8009756:	4630      	mov	r0, r6
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <_vfiprintf_r+0x258>)
 800975a:	a904      	add	r1, sp, #16
 800975c:	f3af 8000 	nop.w
 8009760:	4607      	mov	r7, r0
 8009762:	1c78      	adds	r0, r7, #1
 8009764:	d1d6      	bne.n	8009714 <_vfiprintf_r+0x1bc>
 8009766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009768:	07d9      	lsls	r1, r3, #31
 800976a:	d405      	bmi.n	8009778 <_vfiprintf_r+0x220>
 800976c:	89ab      	ldrh	r3, [r5, #12]
 800976e:	059a      	lsls	r2, r3, #22
 8009770:	d402      	bmi.n	8009778 <_vfiprintf_r+0x220>
 8009772:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009774:	f7ff fb79 	bl	8008e6a <__retarget_lock_release_recursive>
 8009778:	89ab      	ldrh	r3, [r5, #12]
 800977a:	065b      	lsls	r3, r3, #25
 800977c:	f53f af12 	bmi.w	80095a4 <_vfiprintf_r+0x4c>
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	e711      	b.n	80095a8 <_vfiprintf_r+0x50>
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4630      	mov	r0, r6
 800978c:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <_vfiprintf_r+0x258>)
 800978e:	a904      	add	r1, sp, #16
 8009790:	f000 f882 	bl	8009898 <_printf_i>
 8009794:	e7e4      	b.n	8009760 <_vfiprintf_r+0x208>
 8009796:	bf00      	nop
 8009798:	0800a668 	.word	0x0800a668
 800979c:	0800a688 	.word	0x0800a688
 80097a0:	0800a648 	.word	0x0800a648
 80097a4:	0800a6a8 	.word	0x0800a6a8
 80097a8:	0800a6b2 	.word	0x0800a6b2
 80097ac:	00000000 	.word	0x00000000
 80097b0:	08009533 	.word	0x08009533
 80097b4:	0800a6ae 	.word	0x0800a6ae

080097b8 <_printf_common>:
 80097b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097bc:	4616      	mov	r6, r2
 80097be:	4699      	mov	r9, r3
 80097c0:	688a      	ldr	r2, [r1, #8]
 80097c2:	690b      	ldr	r3, [r1, #16]
 80097c4:	4607      	mov	r7, r0
 80097c6:	4293      	cmp	r3, r2
 80097c8:	bfb8      	it	lt
 80097ca:	4613      	movlt	r3, r2
 80097cc:	6033      	str	r3, [r6, #0]
 80097ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097d2:	460c      	mov	r4, r1
 80097d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097d8:	b10a      	cbz	r2, 80097de <_printf_common+0x26>
 80097da:	3301      	adds	r3, #1
 80097dc:	6033      	str	r3, [r6, #0]
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	0699      	lsls	r1, r3, #26
 80097e2:	bf42      	ittt	mi
 80097e4:	6833      	ldrmi	r3, [r6, #0]
 80097e6:	3302      	addmi	r3, #2
 80097e8:	6033      	strmi	r3, [r6, #0]
 80097ea:	6825      	ldr	r5, [r4, #0]
 80097ec:	f015 0506 	ands.w	r5, r5, #6
 80097f0:	d106      	bne.n	8009800 <_printf_common+0x48>
 80097f2:	f104 0a19 	add.w	sl, r4, #25
 80097f6:	68e3      	ldr	r3, [r4, #12]
 80097f8:	6832      	ldr	r2, [r6, #0]
 80097fa:	1a9b      	subs	r3, r3, r2
 80097fc:	42ab      	cmp	r3, r5
 80097fe:	dc28      	bgt.n	8009852 <_printf_common+0x9a>
 8009800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009804:	1e13      	subs	r3, r2, #0
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	bf18      	it	ne
 800980a:	2301      	movne	r3, #1
 800980c:	0692      	lsls	r2, r2, #26
 800980e:	d42d      	bmi.n	800986c <_printf_common+0xb4>
 8009810:	4649      	mov	r1, r9
 8009812:	4638      	mov	r0, r7
 8009814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009818:	47c0      	blx	r8
 800981a:	3001      	adds	r0, #1
 800981c:	d020      	beq.n	8009860 <_printf_common+0xa8>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	68e5      	ldr	r5, [r4, #12]
 8009822:	f003 0306 	and.w	r3, r3, #6
 8009826:	2b04      	cmp	r3, #4
 8009828:	bf18      	it	ne
 800982a:	2500      	movne	r5, #0
 800982c:	6832      	ldr	r2, [r6, #0]
 800982e:	f04f 0600 	mov.w	r6, #0
 8009832:	68a3      	ldr	r3, [r4, #8]
 8009834:	bf08      	it	eq
 8009836:	1aad      	subeq	r5, r5, r2
 8009838:	6922      	ldr	r2, [r4, #16]
 800983a:	bf08      	it	eq
 800983c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009840:	4293      	cmp	r3, r2
 8009842:	bfc4      	itt	gt
 8009844:	1a9b      	subgt	r3, r3, r2
 8009846:	18ed      	addgt	r5, r5, r3
 8009848:	341a      	adds	r4, #26
 800984a:	42b5      	cmp	r5, r6
 800984c:	d11a      	bne.n	8009884 <_printf_common+0xcc>
 800984e:	2000      	movs	r0, #0
 8009850:	e008      	b.n	8009864 <_printf_common+0xac>
 8009852:	2301      	movs	r3, #1
 8009854:	4652      	mov	r2, sl
 8009856:	4649      	mov	r1, r9
 8009858:	4638      	mov	r0, r7
 800985a:	47c0      	blx	r8
 800985c:	3001      	adds	r0, #1
 800985e:	d103      	bne.n	8009868 <_printf_common+0xb0>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	3501      	adds	r5, #1
 800986a:	e7c4      	b.n	80097f6 <_printf_common+0x3e>
 800986c:	2030      	movs	r0, #48	; 0x30
 800986e:	18e1      	adds	r1, r4, r3
 8009870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800987a:	4422      	add	r2, r4
 800987c:	3302      	adds	r3, #2
 800987e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009882:	e7c5      	b.n	8009810 <_printf_common+0x58>
 8009884:	2301      	movs	r3, #1
 8009886:	4622      	mov	r2, r4
 8009888:	4649      	mov	r1, r9
 800988a:	4638      	mov	r0, r7
 800988c:	47c0      	blx	r8
 800988e:	3001      	adds	r0, #1
 8009890:	d0e6      	beq.n	8009860 <_printf_common+0xa8>
 8009892:	3601      	adds	r6, #1
 8009894:	e7d9      	b.n	800984a <_printf_common+0x92>
	...

08009898 <_printf_i>:
 8009898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	7e27      	ldrb	r7, [r4, #24]
 80098a0:	4691      	mov	r9, r2
 80098a2:	2f78      	cmp	r7, #120	; 0x78
 80098a4:	4680      	mov	r8, r0
 80098a6:	469a      	mov	sl, r3
 80098a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ae:	d807      	bhi.n	80098c0 <_printf_i+0x28>
 80098b0:	2f62      	cmp	r7, #98	; 0x62
 80098b2:	d80a      	bhi.n	80098ca <_printf_i+0x32>
 80098b4:	2f00      	cmp	r7, #0
 80098b6:	f000 80d9 	beq.w	8009a6c <_printf_i+0x1d4>
 80098ba:	2f58      	cmp	r7, #88	; 0x58
 80098bc:	f000 80a4 	beq.w	8009a08 <_printf_i+0x170>
 80098c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098c8:	e03a      	b.n	8009940 <_printf_i+0xa8>
 80098ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ce:	2b15      	cmp	r3, #21
 80098d0:	d8f6      	bhi.n	80098c0 <_printf_i+0x28>
 80098d2:	a001      	add	r0, pc, #4	; (adr r0, 80098d8 <_printf_i+0x40>)
 80098d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098d8:	08009931 	.word	0x08009931
 80098dc:	08009945 	.word	0x08009945
 80098e0:	080098c1 	.word	0x080098c1
 80098e4:	080098c1 	.word	0x080098c1
 80098e8:	080098c1 	.word	0x080098c1
 80098ec:	080098c1 	.word	0x080098c1
 80098f0:	08009945 	.word	0x08009945
 80098f4:	080098c1 	.word	0x080098c1
 80098f8:	080098c1 	.word	0x080098c1
 80098fc:	080098c1 	.word	0x080098c1
 8009900:	080098c1 	.word	0x080098c1
 8009904:	08009a53 	.word	0x08009a53
 8009908:	08009975 	.word	0x08009975
 800990c:	08009a35 	.word	0x08009a35
 8009910:	080098c1 	.word	0x080098c1
 8009914:	080098c1 	.word	0x080098c1
 8009918:	08009a75 	.word	0x08009a75
 800991c:	080098c1 	.word	0x080098c1
 8009920:	08009975 	.word	0x08009975
 8009924:	080098c1 	.word	0x080098c1
 8009928:	080098c1 	.word	0x080098c1
 800992c:	08009a3d 	.word	0x08009a3d
 8009930:	680b      	ldr	r3, [r1, #0]
 8009932:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009936:	1d1a      	adds	r2, r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	600a      	str	r2, [r1, #0]
 800993c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009940:	2301      	movs	r3, #1
 8009942:	e0a4      	b.n	8009a8e <_printf_i+0x1f6>
 8009944:	6825      	ldr	r5, [r4, #0]
 8009946:	6808      	ldr	r0, [r1, #0]
 8009948:	062e      	lsls	r6, r5, #24
 800994a:	f100 0304 	add.w	r3, r0, #4
 800994e:	d50a      	bpl.n	8009966 <_printf_i+0xce>
 8009950:	6805      	ldr	r5, [r0, #0]
 8009952:	600b      	str	r3, [r1, #0]
 8009954:	2d00      	cmp	r5, #0
 8009956:	da03      	bge.n	8009960 <_printf_i+0xc8>
 8009958:	232d      	movs	r3, #45	; 0x2d
 800995a:	426d      	negs	r5, r5
 800995c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009960:	230a      	movs	r3, #10
 8009962:	485e      	ldr	r0, [pc, #376]	; (8009adc <_printf_i+0x244>)
 8009964:	e019      	b.n	800999a <_printf_i+0x102>
 8009966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800996a:	6805      	ldr	r5, [r0, #0]
 800996c:	600b      	str	r3, [r1, #0]
 800996e:	bf18      	it	ne
 8009970:	b22d      	sxthne	r5, r5
 8009972:	e7ef      	b.n	8009954 <_printf_i+0xbc>
 8009974:	680b      	ldr	r3, [r1, #0]
 8009976:	6825      	ldr	r5, [r4, #0]
 8009978:	1d18      	adds	r0, r3, #4
 800997a:	6008      	str	r0, [r1, #0]
 800997c:	0628      	lsls	r0, r5, #24
 800997e:	d501      	bpl.n	8009984 <_printf_i+0xec>
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	e002      	b.n	800998a <_printf_i+0xf2>
 8009984:	0669      	lsls	r1, r5, #25
 8009986:	d5fb      	bpl.n	8009980 <_printf_i+0xe8>
 8009988:	881d      	ldrh	r5, [r3, #0]
 800998a:	2f6f      	cmp	r7, #111	; 0x6f
 800998c:	bf0c      	ite	eq
 800998e:	2308      	moveq	r3, #8
 8009990:	230a      	movne	r3, #10
 8009992:	4852      	ldr	r0, [pc, #328]	; (8009adc <_printf_i+0x244>)
 8009994:	2100      	movs	r1, #0
 8009996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800999a:	6866      	ldr	r6, [r4, #4]
 800999c:	2e00      	cmp	r6, #0
 800999e:	bfa8      	it	ge
 80099a0:	6821      	ldrge	r1, [r4, #0]
 80099a2:	60a6      	str	r6, [r4, #8]
 80099a4:	bfa4      	itt	ge
 80099a6:	f021 0104 	bicge.w	r1, r1, #4
 80099aa:	6021      	strge	r1, [r4, #0]
 80099ac:	b90d      	cbnz	r5, 80099b2 <_printf_i+0x11a>
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d04d      	beq.n	8009a4e <_printf_i+0x1b6>
 80099b2:	4616      	mov	r6, r2
 80099b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80099b8:	fb03 5711 	mls	r7, r3, r1, r5
 80099bc:	5dc7      	ldrb	r7, [r0, r7]
 80099be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099c2:	462f      	mov	r7, r5
 80099c4:	42bb      	cmp	r3, r7
 80099c6:	460d      	mov	r5, r1
 80099c8:	d9f4      	bls.n	80099b4 <_printf_i+0x11c>
 80099ca:	2b08      	cmp	r3, #8
 80099cc:	d10b      	bne.n	80099e6 <_printf_i+0x14e>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	07df      	lsls	r7, r3, #31
 80099d2:	d508      	bpl.n	80099e6 <_printf_i+0x14e>
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	6861      	ldr	r1, [r4, #4]
 80099d8:	4299      	cmp	r1, r3
 80099da:	bfde      	ittt	le
 80099dc:	2330      	movle	r3, #48	; 0x30
 80099de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099e6:	1b92      	subs	r2, r2, r6
 80099e8:	6122      	str	r2, [r4, #16]
 80099ea:	464b      	mov	r3, r9
 80099ec:	4621      	mov	r1, r4
 80099ee:	4640      	mov	r0, r8
 80099f0:	f8cd a000 	str.w	sl, [sp]
 80099f4:	aa03      	add	r2, sp, #12
 80099f6:	f7ff fedf 	bl	80097b8 <_printf_common>
 80099fa:	3001      	adds	r0, #1
 80099fc:	d14c      	bne.n	8009a98 <_printf_i+0x200>
 80099fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009a02:	b004      	add	sp, #16
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	4834      	ldr	r0, [pc, #208]	; (8009adc <_printf_i+0x244>)
 8009a0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a0e:	680e      	ldr	r6, [r1, #0]
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a16:	061f      	lsls	r7, r3, #24
 8009a18:	600e      	str	r6, [r1, #0]
 8009a1a:	d514      	bpl.n	8009a46 <_printf_i+0x1ae>
 8009a1c:	07d9      	lsls	r1, r3, #31
 8009a1e:	bf44      	itt	mi
 8009a20:	f043 0320 	orrmi.w	r3, r3, #32
 8009a24:	6023      	strmi	r3, [r4, #0]
 8009a26:	b91d      	cbnz	r5, 8009a30 <_printf_i+0x198>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	f023 0320 	bic.w	r3, r3, #32
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	2310      	movs	r3, #16
 8009a32:	e7af      	b.n	8009994 <_printf_i+0xfc>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	f043 0320 	orr.w	r3, r3, #32
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	2378      	movs	r3, #120	; 0x78
 8009a3e:	4828      	ldr	r0, [pc, #160]	; (8009ae0 <_printf_i+0x248>)
 8009a40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a44:	e7e3      	b.n	8009a0e <_printf_i+0x176>
 8009a46:	065e      	lsls	r6, r3, #25
 8009a48:	bf48      	it	mi
 8009a4a:	b2ad      	uxthmi	r5, r5
 8009a4c:	e7e6      	b.n	8009a1c <_printf_i+0x184>
 8009a4e:	4616      	mov	r6, r2
 8009a50:	e7bb      	b.n	80099ca <_printf_i+0x132>
 8009a52:	680b      	ldr	r3, [r1, #0]
 8009a54:	6826      	ldr	r6, [r4, #0]
 8009a56:	1d1d      	adds	r5, r3, #4
 8009a58:	6960      	ldr	r0, [r4, #20]
 8009a5a:	600d      	str	r5, [r1, #0]
 8009a5c:	0635      	lsls	r5, r6, #24
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	d501      	bpl.n	8009a66 <_printf_i+0x1ce>
 8009a62:	6018      	str	r0, [r3, #0]
 8009a64:	e002      	b.n	8009a6c <_printf_i+0x1d4>
 8009a66:	0671      	lsls	r1, r6, #25
 8009a68:	d5fb      	bpl.n	8009a62 <_printf_i+0x1ca>
 8009a6a:	8018      	strh	r0, [r3, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4616      	mov	r6, r2
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	e7ba      	b.n	80099ea <_printf_i+0x152>
 8009a74:	680b      	ldr	r3, [r1, #0]
 8009a76:	1d1a      	adds	r2, r3, #4
 8009a78:	600a      	str	r2, [r1, #0]
 8009a7a:	681e      	ldr	r6, [r3, #0]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4630      	mov	r0, r6
 8009a80:	6862      	ldr	r2, [r4, #4]
 8009a82:	f000 fce9 	bl	800a458 <memchr>
 8009a86:	b108      	cbz	r0, 8009a8c <_printf_i+0x1f4>
 8009a88:	1b80      	subs	r0, r0, r6
 8009a8a:	6060      	str	r0, [r4, #4]
 8009a8c:	6863      	ldr	r3, [r4, #4]
 8009a8e:	6123      	str	r3, [r4, #16]
 8009a90:	2300      	movs	r3, #0
 8009a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a96:	e7a8      	b.n	80099ea <_printf_i+0x152>
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	47d0      	blx	sl
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d0ab      	beq.n	80099fe <_printf_i+0x166>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	079b      	lsls	r3, r3, #30
 8009aaa:	d413      	bmi.n	8009ad4 <_printf_i+0x23c>
 8009aac:	68e0      	ldr	r0, [r4, #12]
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	4298      	cmp	r0, r3
 8009ab2:	bfb8      	it	lt
 8009ab4:	4618      	movlt	r0, r3
 8009ab6:	e7a4      	b.n	8009a02 <_printf_i+0x16a>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	4632      	mov	r2, r6
 8009abc:	4649      	mov	r1, r9
 8009abe:	4640      	mov	r0, r8
 8009ac0:	47d0      	blx	sl
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d09b      	beq.n	80099fe <_printf_i+0x166>
 8009ac6:	3501      	adds	r5, #1
 8009ac8:	68e3      	ldr	r3, [r4, #12]
 8009aca:	9903      	ldr	r1, [sp, #12]
 8009acc:	1a5b      	subs	r3, r3, r1
 8009ace:	42ab      	cmp	r3, r5
 8009ad0:	dcf2      	bgt.n	8009ab8 <_printf_i+0x220>
 8009ad2:	e7eb      	b.n	8009aac <_printf_i+0x214>
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	f104 0619 	add.w	r6, r4, #25
 8009ada:	e7f5      	b.n	8009ac8 <_printf_i+0x230>
 8009adc:	0800a6b9 	.word	0x0800a6b9
 8009ae0:	0800a6ca 	.word	0x0800a6ca

08009ae4 <_scanf_chars>:
 8009ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	4615      	mov	r5, r2
 8009aea:	688a      	ldr	r2, [r1, #8]
 8009aec:	4680      	mov	r8, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	b932      	cbnz	r2, 8009b00 <_scanf_chars+0x1c>
 8009af2:	698a      	ldr	r2, [r1, #24]
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	bf0c      	ite	eq
 8009af8:	2201      	moveq	r2, #1
 8009afa:	f04f 32ff 	movne.w	r2, #4294967295
 8009afe:	608a      	str	r2, [r1, #8]
 8009b00:	2700      	movs	r7, #0
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009b90 <_scanf_chars+0xac>
 8009b08:	06d1      	lsls	r1, r2, #27
 8009b0a:	bf5f      	itttt	pl
 8009b0c:	681a      	ldrpl	r2, [r3, #0]
 8009b0e:	1d11      	addpl	r1, r2, #4
 8009b10:	6019      	strpl	r1, [r3, #0]
 8009b12:	6816      	ldrpl	r6, [r2, #0]
 8009b14:	69a0      	ldr	r0, [r4, #24]
 8009b16:	b188      	cbz	r0, 8009b3c <_scanf_chars+0x58>
 8009b18:	2801      	cmp	r0, #1
 8009b1a:	d107      	bne.n	8009b2c <_scanf_chars+0x48>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	781a      	ldrb	r2, [r3, #0]
 8009b20:	6963      	ldr	r3, [r4, #20]
 8009b22:	5c9b      	ldrb	r3, [r3, r2]
 8009b24:	b953      	cbnz	r3, 8009b3c <_scanf_chars+0x58>
 8009b26:	bb27      	cbnz	r7, 8009b72 <_scanf_chars+0x8e>
 8009b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2c:	2802      	cmp	r0, #2
 8009b2e:	d120      	bne.n	8009b72 <_scanf_chars+0x8e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009b38:	071b      	lsls	r3, r3, #28
 8009b3a:	d41a      	bmi.n	8009b72 <_scanf_chars+0x8e>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	3701      	adds	r7, #1
 8009b40:	06da      	lsls	r2, r3, #27
 8009b42:	bf5e      	ittt	pl
 8009b44:	682b      	ldrpl	r3, [r5, #0]
 8009b46:	781b      	ldrbpl	r3, [r3, #0]
 8009b48:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009b4c:	682a      	ldr	r2, [r5, #0]
 8009b4e:	686b      	ldr	r3, [r5, #4]
 8009b50:	3201      	adds	r2, #1
 8009b52:	602a      	str	r2, [r5, #0]
 8009b54:	68a2      	ldr	r2, [r4, #8]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	3a01      	subs	r2, #1
 8009b5a:	606b      	str	r3, [r5, #4]
 8009b5c:	60a2      	str	r2, [r4, #8]
 8009b5e:	b142      	cbz	r2, 8009b72 <_scanf_chars+0x8e>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dcd7      	bgt.n	8009b14 <_scanf_chars+0x30>
 8009b64:	4629      	mov	r1, r5
 8009b66:	4640      	mov	r0, r8
 8009b68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b6c:	4798      	blx	r3
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d0d0      	beq.n	8009b14 <_scanf_chars+0x30>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	f013 0310 	ands.w	r3, r3, #16
 8009b78:	d105      	bne.n	8009b86 <_scanf_chars+0xa2>
 8009b7a:	68e2      	ldr	r2, [r4, #12]
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	60e2      	str	r2, [r4, #12]
 8009b80:	69a2      	ldr	r2, [r4, #24]
 8009b82:	b102      	cbz	r2, 8009b86 <_scanf_chars+0xa2>
 8009b84:	7033      	strb	r3, [r6, #0]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	2000      	movs	r0, #0
 8009b8a:	441f      	add	r7, r3
 8009b8c:	6127      	str	r7, [r4, #16]
 8009b8e:	e7cb      	b.n	8009b28 <_scanf_chars+0x44>
 8009b90:	0800a6f7 	.word	0x0800a6f7

08009b94 <_scanf_i>:
 8009b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	460c      	mov	r4, r1
 8009b9a:	4698      	mov	r8, r3
 8009b9c:	4b72      	ldr	r3, [pc, #456]	; (8009d68 <_scanf_i+0x1d4>)
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	4616      	mov	r6, r2
 8009ba4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ba8:	ab03      	add	r3, sp, #12
 8009baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bae:	4b6f      	ldr	r3, [pc, #444]	; (8009d6c <_scanf_i+0x1d8>)
 8009bb0:	69a1      	ldr	r1, [r4, #24]
 8009bb2:	4a6f      	ldr	r2, [pc, #444]	; (8009d70 <_scanf_i+0x1dc>)
 8009bb4:	4627      	mov	r7, r4
 8009bb6:	2903      	cmp	r1, #3
 8009bb8:	bf18      	it	ne
 8009bba:	461a      	movne	r2, r3
 8009bbc:	68a3      	ldr	r3, [r4, #8]
 8009bbe:	9201      	str	r2, [sp, #4]
 8009bc0:	1e5a      	subs	r2, r3, #1
 8009bc2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bc6:	bf81      	itttt	hi
 8009bc8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009bcc:	eb03 0905 	addhi.w	r9, r3, r5
 8009bd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009bd4:	60a3      	strhi	r3, [r4, #8]
 8009bd6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009bda:	bf98      	it	ls
 8009bdc:	f04f 0900 	movls.w	r9, #0
 8009be0:	463d      	mov	r5, r7
 8009be2:	f04f 0b00 	mov.w	fp, #0
 8009be6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	6831      	ldr	r1, [r6, #0]
 8009bee:	ab03      	add	r3, sp, #12
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	7809      	ldrb	r1, [r1, #0]
 8009bf4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009bf8:	f000 fc2e 	bl	800a458 <memchr>
 8009bfc:	b328      	cbz	r0, 8009c4a <_scanf_i+0xb6>
 8009bfe:	f1bb 0f01 	cmp.w	fp, #1
 8009c02:	d159      	bne.n	8009cb8 <_scanf_i+0x124>
 8009c04:	6862      	ldr	r2, [r4, #4]
 8009c06:	b92a      	cbnz	r2, 8009c14 <_scanf_i+0x80>
 8009c08:	2308      	movs	r3, #8
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	6063      	str	r3, [r4, #4]
 8009c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c12:	6022      	str	r2, [r4, #0]
 8009c14:	6822      	ldr	r2, [r4, #0]
 8009c16:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009c1a:	6022      	str	r2, [r4, #0]
 8009c1c:	68a2      	ldr	r2, [r4, #8]
 8009c1e:	1e51      	subs	r1, r2, #1
 8009c20:	60a1      	str	r1, [r4, #8]
 8009c22:	b192      	cbz	r2, 8009c4a <_scanf_i+0xb6>
 8009c24:	6832      	ldr	r2, [r6, #0]
 8009c26:	1c51      	adds	r1, r2, #1
 8009c28:	6031      	str	r1, [r6, #0]
 8009c2a:	7812      	ldrb	r2, [r2, #0]
 8009c2c:	f805 2b01 	strb.w	r2, [r5], #1
 8009c30:	6872      	ldr	r2, [r6, #4]
 8009c32:	3a01      	subs	r2, #1
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	6072      	str	r2, [r6, #4]
 8009c38:	dc07      	bgt.n	8009c4a <_scanf_i+0xb6>
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009c42:	4790      	blx	r2
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f040 8085 	bne.w	8009d54 <_scanf_i+0x1c0>
 8009c4a:	f10b 0b01 	add.w	fp, fp, #1
 8009c4e:	f1bb 0f03 	cmp.w	fp, #3
 8009c52:	d1cb      	bne.n	8009bec <_scanf_i+0x58>
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	b90b      	cbnz	r3, 8009c5c <_scanf_i+0xc8>
 8009c58:	230a      	movs	r3, #10
 8009c5a:	6063      	str	r3, [r4, #4]
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	4945      	ldr	r1, [pc, #276]	; (8009d74 <_scanf_i+0x1e0>)
 8009c60:	6960      	ldr	r0, [r4, #20]
 8009c62:	1ac9      	subs	r1, r1, r3
 8009c64:	f000 f89a 	bl	8009d9c <__sccl>
 8009c68:	f04f 0b00 	mov.w	fp, #0
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d03d      	beq.n	8009cf0 <_scanf_i+0x15c>
 8009c74:	6831      	ldr	r1, [r6, #0]
 8009c76:	6960      	ldr	r0, [r4, #20]
 8009c78:	f891 c000 	ldrb.w	ip, [r1]
 8009c7c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d035      	beq.n	8009cf0 <_scanf_i+0x15c>
 8009c84:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009c88:	d124      	bne.n	8009cd4 <_scanf_i+0x140>
 8009c8a:	0510      	lsls	r0, r2, #20
 8009c8c:	d522      	bpl.n	8009cd4 <_scanf_i+0x140>
 8009c8e:	f10b 0b01 	add.w	fp, fp, #1
 8009c92:	f1b9 0f00 	cmp.w	r9, #0
 8009c96:	d003      	beq.n	8009ca0 <_scanf_i+0x10c>
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c9e:	60a3      	str	r3, [r4, #8]
 8009ca0:	6873      	ldr	r3, [r6, #4]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	6073      	str	r3, [r6, #4]
 8009ca8:	dd1b      	ble.n	8009ce2 <_scanf_i+0x14e>
 8009caa:	6833      	ldr	r3, [r6, #0]
 8009cac:	3301      	adds	r3, #1
 8009cae:	6033      	str	r3, [r6, #0]
 8009cb0:	68a3      	ldr	r3, [r4, #8]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	60a3      	str	r3, [r4, #8]
 8009cb6:	e7d9      	b.n	8009c6c <_scanf_i+0xd8>
 8009cb8:	f1bb 0f02 	cmp.w	fp, #2
 8009cbc:	d1ae      	bne.n	8009c1c <_scanf_i+0x88>
 8009cbe:	6822      	ldr	r2, [r4, #0]
 8009cc0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009cc4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009cc8:	d1bf      	bne.n	8009c4a <_scanf_i+0xb6>
 8009cca:	2310      	movs	r3, #16
 8009ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cd0:	6063      	str	r3, [r4, #4]
 8009cd2:	e7a2      	b.n	8009c1a <_scanf_i+0x86>
 8009cd4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009cd8:	6022      	str	r2, [r4, #0]
 8009cda:	780b      	ldrb	r3, [r1, #0]
 8009cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8009ce0:	e7de      	b.n	8009ca0 <_scanf_i+0x10c>
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4650      	mov	r0, sl
 8009ce6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cea:	4798      	blx	r3
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d0df      	beq.n	8009cb0 <_scanf_i+0x11c>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	05d9      	lsls	r1, r3, #23
 8009cf4:	d50d      	bpl.n	8009d12 <_scanf_i+0x17e>
 8009cf6:	42bd      	cmp	r5, r7
 8009cf8:	d909      	bls.n	8009d0e <_scanf_i+0x17a>
 8009cfa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009cfe:	4632      	mov	r2, r6
 8009d00:	4650      	mov	r0, sl
 8009d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d06:	f105 39ff 	add.w	r9, r5, #4294967295
 8009d0a:	4798      	blx	r3
 8009d0c:	464d      	mov	r5, r9
 8009d0e:	42bd      	cmp	r5, r7
 8009d10:	d028      	beq.n	8009d64 <_scanf_i+0x1d0>
 8009d12:	6822      	ldr	r2, [r4, #0]
 8009d14:	f012 0210 	ands.w	r2, r2, #16
 8009d18:	d113      	bne.n	8009d42 <_scanf_i+0x1ae>
 8009d1a:	702a      	strb	r2, [r5, #0]
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	6863      	ldr	r3, [r4, #4]
 8009d20:	4650      	mov	r0, sl
 8009d22:	9e01      	ldr	r6, [sp, #4]
 8009d24:	47b0      	blx	r6
 8009d26:	f8d8 3000 	ldr.w	r3, [r8]
 8009d2a:	6821      	ldr	r1, [r4, #0]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	f8c8 2000 	str.w	r2, [r8]
 8009d32:	f011 0f20 	tst.w	r1, #32
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	d00f      	beq.n	8009d5a <_scanf_i+0x1c6>
 8009d3a:	6018      	str	r0, [r3, #0]
 8009d3c:	68e3      	ldr	r3, [r4, #12]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	60e3      	str	r3, [r4, #12]
 8009d42:	2000      	movs	r0, #0
 8009d44:	1bed      	subs	r5, r5, r7
 8009d46:	44ab      	add	fp, r5
 8009d48:	6925      	ldr	r5, [r4, #16]
 8009d4a:	445d      	add	r5, fp
 8009d4c:	6125      	str	r5, [r4, #16]
 8009d4e:	b007      	add	sp, #28
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	f04f 0b00 	mov.w	fp, #0
 8009d58:	e7ca      	b.n	8009cf0 <_scanf_i+0x15c>
 8009d5a:	07ca      	lsls	r2, r1, #31
 8009d5c:	bf4c      	ite	mi
 8009d5e:	8018      	strhmi	r0, [r3, #0]
 8009d60:	6018      	strpl	r0, [r3, #0]
 8009d62:	e7eb      	b.n	8009d3c <_scanf_i+0x1a8>
 8009d64:	2001      	movs	r0, #1
 8009d66:	e7f2      	b.n	8009d4e <_scanf_i+0x1ba>
 8009d68:	0800a628 	.word	0x0800a628
 8009d6c:	0800a019 	.word	0x0800a019
 8009d70:	08009f1d 	.word	0x08009f1d
 8009d74:	0800a6f4 	.word	0x0800a6f4

08009d78 <_read_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	2200      	movs	r2, #0
 8009d82:	4d05      	ldr	r5, [pc, #20]	; (8009d98 <_read_r+0x20>)
 8009d84:	602a      	str	r2, [r5, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	f7f7 fc70 	bl	800166c <_read>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_read_r+0x1e>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_read_r+0x1e>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	2000146c 	.word	0x2000146c

08009d9c <__sccl>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	780b      	ldrb	r3, [r1, #0]
 8009da0:	4604      	mov	r4, r0
 8009da2:	2b5e      	cmp	r3, #94	; 0x5e
 8009da4:	bf13      	iteet	ne
 8009da6:	2200      	movne	r2, #0
 8009da8:	2201      	moveq	r2, #1
 8009daa:	784b      	ldrbeq	r3, [r1, #1]
 8009dac:	1c48      	addne	r0, r1, #1
 8009dae:	bf08      	it	eq
 8009db0:	1c88      	addeq	r0, r1, #2
 8009db2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009db6:	1e61      	subs	r1, r4, #1
 8009db8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009dbc:	42a9      	cmp	r1, r5
 8009dbe:	d1fb      	bne.n	8009db8 <__sccl+0x1c>
 8009dc0:	b90b      	cbnz	r3, 8009dc6 <__sccl+0x2a>
 8009dc2:	3801      	subs	r0, #1
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	f082 0101 	eor.w	r1, r2, #1
 8009dca:	54e1      	strb	r1, [r4, r3]
 8009dcc:	1c42      	adds	r2, r0, #1
 8009dce:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	2d2d      	cmp	r5, #45	; 0x2d
 8009dd6:	f102 36ff 	add.w	r6, r2, #4294967295
 8009dda:	d006      	beq.n	8009dea <__sccl+0x4e>
 8009ddc:	2d5d      	cmp	r5, #93	; 0x5d
 8009dde:	d0f1      	beq.n	8009dc4 <__sccl+0x28>
 8009de0:	b90d      	cbnz	r5, 8009de6 <__sccl+0x4a>
 8009de2:	4630      	mov	r0, r6
 8009de4:	e7ee      	b.n	8009dc4 <__sccl+0x28>
 8009de6:	462b      	mov	r3, r5
 8009de8:	e7ef      	b.n	8009dca <__sccl+0x2e>
 8009dea:	7816      	ldrb	r6, [r2, #0]
 8009dec:	2e5d      	cmp	r6, #93	; 0x5d
 8009dee:	d0fa      	beq.n	8009de6 <__sccl+0x4a>
 8009df0:	42b3      	cmp	r3, r6
 8009df2:	dcf8      	bgt.n	8009de6 <__sccl+0x4a>
 8009df4:	4618      	mov	r0, r3
 8009df6:	3001      	adds	r0, #1
 8009df8:	4286      	cmp	r6, r0
 8009dfa:	5421      	strb	r1, [r4, r0]
 8009dfc:	dcfb      	bgt.n	8009df6 <__sccl+0x5a>
 8009dfe:	43d8      	mvns	r0, r3
 8009e00:	4430      	add	r0, r6
 8009e02:	42b3      	cmp	r3, r6
 8009e04:	bfa8      	it	ge
 8009e06:	2000      	movge	r0, #0
 8009e08:	1c5d      	adds	r5, r3, #1
 8009e0a:	182b      	adds	r3, r5, r0
 8009e0c:	3202      	adds	r2, #2
 8009e0e:	e7de      	b.n	8009dce <__sccl+0x32>

08009e10 <_strtol_l.isra.0>:
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e16:	4686      	mov	lr, r0
 8009e18:	d001      	beq.n	8009e1e <_strtol_l.isra.0+0xe>
 8009e1a:	2b24      	cmp	r3, #36	; 0x24
 8009e1c:	d906      	bls.n	8009e2c <_strtol_l.isra.0+0x1c>
 8009e1e:	f7fe fd53 	bl	80088c8 <__errno>
 8009e22:	2316      	movs	r3, #22
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	2000      	movs	r0, #0
 8009e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2c:	468c      	mov	ip, r1
 8009e2e:	4e3a      	ldr	r6, [pc, #232]	; (8009f18 <_strtol_l.isra.0+0x108>)
 8009e30:	4660      	mov	r0, ip
 8009e32:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009e36:	5da5      	ldrb	r5, [r4, r6]
 8009e38:	f015 0508 	ands.w	r5, r5, #8
 8009e3c:	d1f8      	bne.n	8009e30 <_strtol_l.isra.0+0x20>
 8009e3e:	2c2d      	cmp	r4, #45	; 0x2d
 8009e40:	d133      	bne.n	8009eaa <_strtol_l.isra.0+0x9a>
 8009e42:	f04f 0801 	mov.w	r8, #1
 8009e46:	f89c 4000 	ldrb.w	r4, [ip]
 8009e4a:	f100 0c02 	add.w	ip, r0, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d05d      	beq.n	8009f0e <_strtol_l.isra.0+0xfe>
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d10c      	bne.n	8009e70 <_strtol_l.isra.0+0x60>
 8009e56:	2c30      	cmp	r4, #48	; 0x30
 8009e58:	d10a      	bne.n	8009e70 <_strtol_l.isra.0+0x60>
 8009e5a:	f89c 0000 	ldrb.w	r0, [ip]
 8009e5e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009e62:	2858      	cmp	r0, #88	; 0x58
 8009e64:	d14e      	bne.n	8009f04 <_strtol_l.isra.0+0xf4>
 8009e66:	2310      	movs	r3, #16
 8009e68:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009e6c:	f10c 0c02 	add.w	ip, ip, #2
 8009e70:	2500      	movs	r5, #0
 8009e72:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009e76:	3f01      	subs	r7, #1
 8009e78:	fbb7 f9f3 	udiv	r9, r7, r3
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	fb03 7a19 	mls	sl, r3, r9, r7
 8009e82:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009e86:	2e09      	cmp	r6, #9
 8009e88:	d818      	bhi.n	8009ebc <_strtol_l.isra.0+0xac>
 8009e8a:	4634      	mov	r4, r6
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	dd24      	ble.n	8009eda <_strtol_l.isra.0+0xca>
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	db1f      	blt.n	8009ed4 <_strtol_l.isra.0+0xc4>
 8009e94:	4581      	cmp	r9, r0
 8009e96:	d31d      	bcc.n	8009ed4 <_strtol_l.isra.0+0xc4>
 8009e98:	d101      	bne.n	8009e9e <_strtol_l.isra.0+0x8e>
 8009e9a:	45a2      	cmp	sl, r4
 8009e9c:	db1a      	blt.n	8009ed4 <_strtol_l.isra.0+0xc4>
 8009e9e:	2501      	movs	r5, #1
 8009ea0:	fb00 4003 	mla	r0, r0, r3, r4
 8009ea4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ea8:	e7eb      	b.n	8009e82 <_strtol_l.isra.0+0x72>
 8009eaa:	2c2b      	cmp	r4, #43	; 0x2b
 8009eac:	bf08      	it	eq
 8009eae:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009eb2:	46a8      	mov	r8, r5
 8009eb4:	bf08      	it	eq
 8009eb6:	f100 0c02 	addeq.w	ip, r0, #2
 8009eba:	e7c8      	b.n	8009e4e <_strtol_l.isra.0+0x3e>
 8009ebc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009ec0:	2e19      	cmp	r6, #25
 8009ec2:	d801      	bhi.n	8009ec8 <_strtol_l.isra.0+0xb8>
 8009ec4:	3c37      	subs	r4, #55	; 0x37
 8009ec6:	e7e1      	b.n	8009e8c <_strtol_l.isra.0+0x7c>
 8009ec8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009ecc:	2e19      	cmp	r6, #25
 8009ece:	d804      	bhi.n	8009eda <_strtol_l.isra.0+0xca>
 8009ed0:	3c57      	subs	r4, #87	; 0x57
 8009ed2:	e7db      	b.n	8009e8c <_strtol_l.isra.0+0x7c>
 8009ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8009ed8:	e7e4      	b.n	8009ea4 <_strtol_l.isra.0+0x94>
 8009eda:	2d00      	cmp	r5, #0
 8009edc:	da08      	bge.n	8009ef0 <_strtol_l.isra.0+0xe0>
 8009ede:	2322      	movs	r3, #34	; 0x22
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f8ce 3000 	str.w	r3, [lr]
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d09e      	beq.n	8009e28 <_strtol_l.isra.0+0x18>
 8009eea:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009eee:	e007      	b.n	8009f00 <_strtol_l.isra.0+0xf0>
 8009ef0:	f1b8 0f00 	cmp.w	r8, #0
 8009ef4:	d000      	beq.n	8009ef8 <_strtol_l.isra.0+0xe8>
 8009ef6:	4240      	negs	r0, r0
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	d095      	beq.n	8009e28 <_strtol_l.isra.0+0x18>
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	d1f4      	bne.n	8009eea <_strtol_l.isra.0+0xda>
 8009f00:	6011      	str	r1, [r2, #0]
 8009f02:	e791      	b.n	8009e28 <_strtol_l.isra.0+0x18>
 8009f04:	2430      	movs	r4, #48	; 0x30
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1b2      	bne.n	8009e70 <_strtol_l.isra.0+0x60>
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	e7b0      	b.n	8009e70 <_strtol_l.isra.0+0x60>
 8009f0e:	2c30      	cmp	r4, #48	; 0x30
 8009f10:	d0a3      	beq.n	8009e5a <_strtol_l.isra.0+0x4a>
 8009f12:	230a      	movs	r3, #10
 8009f14:	e7ac      	b.n	8009e70 <_strtol_l.isra.0+0x60>
 8009f16:	bf00      	nop
 8009f18:	0800a6f7 	.word	0x0800a6f7

08009f1c <_strtol_r>:
 8009f1c:	f7ff bf78 	b.w	8009e10 <_strtol_l.isra.0>

08009f20 <_strtoul_l.isra.0>:
 8009f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f24:	468c      	mov	ip, r1
 8009f26:	4686      	mov	lr, r0
 8009f28:	4e3a      	ldr	r6, [pc, #232]	; (800a014 <_strtoul_l.isra.0+0xf4>)
 8009f2a:	4660      	mov	r0, ip
 8009f2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f30:	5da5      	ldrb	r5, [r4, r6]
 8009f32:	f015 0508 	ands.w	r5, r5, #8
 8009f36:	d1f8      	bne.n	8009f2a <_strtoul_l.isra.0+0xa>
 8009f38:	2c2d      	cmp	r4, #45	; 0x2d
 8009f3a:	d134      	bne.n	8009fa6 <_strtoul_l.isra.0+0x86>
 8009f3c:	f04f 0801 	mov.w	r8, #1
 8009f40:	f89c 4000 	ldrb.w	r4, [ip]
 8009f44:	f100 0c02 	add.w	ip, r0, #2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d05e      	beq.n	800a00a <_strtoul_l.isra.0+0xea>
 8009f4c:	2b10      	cmp	r3, #16
 8009f4e:	d10c      	bne.n	8009f6a <_strtoul_l.isra.0+0x4a>
 8009f50:	2c30      	cmp	r4, #48	; 0x30
 8009f52:	d10a      	bne.n	8009f6a <_strtoul_l.isra.0+0x4a>
 8009f54:	f89c 0000 	ldrb.w	r0, [ip]
 8009f58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009f5c:	2858      	cmp	r0, #88	; 0x58
 8009f5e:	d14f      	bne.n	800a000 <_strtoul_l.isra.0+0xe0>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009f66:	f10c 0c02 	add.w	ip, ip, #2
 8009f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f6e:	fbb7 f7f3 	udiv	r7, r7, r3
 8009f72:	2500      	movs	r5, #0
 8009f74:	fb03 f907 	mul.w	r9, r3, r7
 8009f78:	4628      	mov	r0, r5
 8009f7a:	ea6f 0909 	mvn.w	r9, r9
 8009f7e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009f82:	2e09      	cmp	r6, #9
 8009f84:	d818      	bhi.n	8009fb8 <_strtoul_l.isra.0+0x98>
 8009f86:	4634      	mov	r4, r6
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	dd24      	ble.n	8009fd6 <_strtoul_l.isra.0+0xb6>
 8009f8c:	2d00      	cmp	r5, #0
 8009f8e:	db1f      	blt.n	8009fd0 <_strtoul_l.isra.0+0xb0>
 8009f90:	4287      	cmp	r7, r0
 8009f92:	d31d      	bcc.n	8009fd0 <_strtoul_l.isra.0+0xb0>
 8009f94:	d101      	bne.n	8009f9a <_strtoul_l.isra.0+0x7a>
 8009f96:	45a1      	cmp	r9, r4
 8009f98:	db1a      	blt.n	8009fd0 <_strtoul_l.isra.0+0xb0>
 8009f9a:	2501      	movs	r5, #1
 8009f9c:	fb00 4003 	mla	r0, r0, r3, r4
 8009fa0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009fa4:	e7eb      	b.n	8009f7e <_strtoul_l.isra.0+0x5e>
 8009fa6:	2c2b      	cmp	r4, #43	; 0x2b
 8009fa8:	bf08      	it	eq
 8009faa:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009fae:	46a8      	mov	r8, r5
 8009fb0:	bf08      	it	eq
 8009fb2:	f100 0c02 	addeq.w	ip, r0, #2
 8009fb6:	e7c7      	b.n	8009f48 <_strtoul_l.isra.0+0x28>
 8009fb8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009fbc:	2e19      	cmp	r6, #25
 8009fbe:	d801      	bhi.n	8009fc4 <_strtoul_l.isra.0+0xa4>
 8009fc0:	3c37      	subs	r4, #55	; 0x37
 8009fc2:	e7e1      	b.n	8009f88 <_strtoul_l.isra.0+0x68>
 8009fc4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009fc8:	2e19      	cmp	r6, #25
 8009fca:	d804      	bhi.n	8009fd6 <_strtoul_l.isra.0+0xb6>
 8009fcc:	3c57      	subs	r4, #87	; 0x57
 8009fce:	e7db      	b.n	8009f88 <_strtoul_l.isra.0+0x68>
 8009fd0:	f04f 35ff 	mov.w	r5, #4294967295
 8009fd4:	e7e4      	b.n	8009fa0 <_strtoul_l.isra.0+0x80>
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	da07      	bge.n	8009fea <_strtoul_l.isra.0+0xca>
 8009fda:	2322      	movs	r3, #34	; 0x22
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	f8ce 3000 	str.w	r3, [lr]
 8009fe4:	b942      	cbnz	r2, 8009ff8 <_strtoul_l.isra.0+0xd8>
 8009fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fea:	f1b8 0f00 	cmp.w	r8, #0
 8009fee:	d000      	beq.n	8009ff2 <_strtoul_l.isra.0+0xd2>
 8009ff0:	4240      	negs	r0, r0
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	d0f7      	beq.n	8009fe6 <_strtoul_l.isra.0+0xc6>
 8009ff6:	b10d      	cbz	r5, 8009ffc <_strtoul_l.isra.0+0xdc>
 8009ff8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009ffc:	6011      	str	r1, [r2, #0]
 8009ffe:	e7f2      	b.n	8009fe6 <_strtoul_l.isra.0+0xc6>
 800a000:	2430      	movs	r4, #48	; 0x30
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1b1      	bne.n	8009f6a <_strtoul_l.isra.0+0x4a>
 800a006:	2308      	movs	r3, #8
 800a008:	e7af      	b.n	8009f6a <_strtoul_l.isra.0+0x4a>
 800a00a:	2c30      	cmp	r4, #48	; 0x30
 800a00c:	d0a2      	beq.n	8009f54 <_strtoul_l.isra.0+0x34>
 800a00e:	230a      	movs	r3, #10
 800a010:	e7ab      	b.n	8009f6a <_strtoul_l.isra.0+0x4a>
 800a012:	bf00      	nop
 800a014:	0800a6f7 	.word	0x0800a6f7

0800a018 <_strtoul_r>:
 800a018:	f7ff bf82 	b.w	8009f20 <_strtoul_l.isra.0>

0800a01c <__submore>:
 800a01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	460c      	mov	r4, r1
 800a022:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a028:	4299      	cmp	r1, r3
 800a02a:	d11b      	bne.n	800a064 <__submore+0x48>
 800a02c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a030:	f7fe fcde 	bl	80089f0 <_malloc_r>
 800a034:	b918      	cbnz	r0, 800a03e <__submore+0x22>
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a042:	63a3      	str	r3, [r4, #56]	; 0x38
 800a044:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a048:	6360      	str	r0, [r4, #52]	; 0x34
 800a04a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a04e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a052:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a056:	7043      	strb	r3, [r0, #1]
 800a058:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a05c:	7003      	strb	r3, [r0, #0]
 800a05e:	6020      	str	r0, [r4, #0]
 800a060:	2000      	movs	r0, #0
 800a062:	e7ea      	b.n	800a03a <__submore+0x1e>
 800a064:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a066:	0077      	lsls	r7, r6, #1
 800a068:	463a      	mov	r2, r7
 800a06a:	f000 fa1d 	bl	800a4a8 <_realloc_r>
 800a06e:	4605      	mov	r5, r0
 800a070:	2800      	cmp	r0, #0
 800a072:	d0e0      	beq.n	800a036 <__submore+0x1a>
 800a074:	eb00 0806 	add.w	r8, r0, r6
 800a078:	4601      	mov	r1, r0
 800a07a:	4632      	mov	r2, r6
 800a07c:	4640      	mov	r0, r8
 800a07e:	f7fe fc55 	bl	800892c <memcpy>
 800a082:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a086:	f8c4 8000 	str.w	r8, [r4]
 800a08a:	e7e9      	b.n	800a060 <__submore+0x44>

0800a08c <__swbuf_r>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	460e      	mov	r6, r1
 800a090:	4614      	mov	r4, r2
 800a092:	4605      	mov	r5, r0
 800a094:	b118      	cbz	r0, 800a09e <__swbuf_r+0x12>
 800a096:	6983      	ldr	r3, [r0, #24]
 800a098:	b90b      	cbnz	r3, 800a09e <__swbuf_r+0x12>
 800a09a:	f7fe fe47 	bl	8008d2c <__sinit>
 800a09e:	4b21      	ldr	r3, [pc, #132]	; (800a124 <__swbuf_r+0x98>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	d12b      	bne.n	800a0fc <__swbuf_r+0x70>
 800a0a4:	686c      	ldr	r4, [r5, #4]
 800a0a6:	69a3      	ldr	r3, [r4, #24]
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	071a      	lsls	r2, r3, #28
 800a0ae:	d52f      	bpl.n	800a110 <__swbuf_r+0x84>
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	b36b      	cbz	r3, 800a110 <__swbuf_r+0x84>
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	6820      	ldr	r0, [r4, #0]
 800a0b8:	b2f6      	uxtb	r6, r6
 800a0ba:	1ac0      	subs	r0, r0, r3
 800a0bc:	6963      	ldr	r3, [r4, #20]
 800a0be:	4637      	mov	r7, r6
 800a0c0:	4283      	cmp	r3, r0
 800a0c2:	dc04      	bgt.n	800a0ce <__swbuf_r+0x42>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 f926 	bl	800a318 <_fflush_r>
 800a0cc:	bb30      	cbnz	r0, 800a11c <__swbuf_r+0x90>
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	60a3      	str	r3, [r4, #8]
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	6022      	str	r2, [r4, #0]
 800a0dc:	701e      	strb	r6, [r3, #0]
 800a0de:	6963      	ldr	r3, [r4, #20]
 800a0e0:	4283      	cmp	r3, r0
 800a0e2:	d004      	beq.n	800a0ee <__swbuf_r+0x62>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	07db      	lsls	r3, r3, #31
 800a0e8:	d506      	bpl.n	800a0f8 <__swbuf_r+0x6c>
 800a0ea:	2e0a      	cmp	r6, #10
 800a0ec:	d104      	bne.n	800a0f8 <__swbuf_r+0x6c>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 f911 	bl	800a318 <_fflush_r>
 800a0f6:	b988      	cbnz	r0, 800a11c <__swbuf_r+0x90>
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <__swbuf_r+0x9c>)
 800a0fe:	429c      	cmp	r4, r3
 800a100:	d101      	bne.n	800a106 <__swbuf_r+0x7a>
 800a102:	68ac      	ldr	r4, [r5, #8]
 800a104:	e7cf      	b.n	800a0a6 <__swbuf_r+0x1a>
 800a106:	4b09      	ldr	r3, [pc, #36]	; (800a12c <__swbuf_r+0xa0>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	bf08      	it	eq
 800a10c:	68ec      	ldreq	r4, [r5, #12]
 800a10e:	e7ca      	b.n	800a0a6 <__swbuf_r+0x1a>
 800a110:	4621      	mov	r1, r4
 800a112:	4628      	mov	r0, r5
 800a114:	f000 f80c 	bl	800a130 <__swsetup_r>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0cb      	beq.n	800a0b4 <__swbuf_r+0x28>
 800a11c:	f04f 37ff 	mov.w	r7, #4294967295
 800a120:	e7ea      	b.n	800a0f8 <__swbuf_r+0x6c>
 800a122:	bf00      	nop
 800a124:	0800a668 	.word	0x0800a668
 800a128:	0800a688 	.word	0x0800a688
 800a12c:	0800a648 	.word	0x0800a648

0800a130 <__swsetup_r>:
 800a130:	4b32      	ldr	r3, [pc, #200]	; (800a1fc <__swsetup_r+0xcc>)
 800a132:	b570      	push	{r4, r5, r6, lr}
 800a134:	681d      	ldr	r5, [r3, #0]
 800a136:	4606      	mov	r6, r0
 800a138:	460c      	mov	r4, r1
 800a13a:	b125      	cbz	r5, 800a146 <__swsetup_r+0x16>
 800a13c:	69ab      	ldr	r3, [r5, #24]
 800a13e:	b913      	cbnz	r3, 800a146 <__swsetup_r+0x16>
 800a140:	4628      	mov	r0, r5
 800a142:	f7fe fdf3 	bl	8008d2c <__sinit>
 800a146:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <__swsetup_r+0xd0>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	d10f      	bne.n	800a16c <__swsetup_r+0x3c>
 800a14c:	686c      	ldr	r4, [r5, #4]
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a154:	0719      	lsls	r1, r3, #28
 800a156:	d42c      	bmi.n	800a1b2 <__swsetup_r+0x82>
 800a158:	06dd      	lsls	r5, r3, #27
 800a15a:	d411      	bmi.n	800a180 <__swsetup_r+0x50>
 800a15c:	2309      	movs	r3, #9
 800a15e:	6033      	str	r3, [r6, #0]
 800a160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	e03e      	b.n	800a1ea <__swsetup_r+0xba>
 800a16c:	4b25      	ldr	r3, [pc, #148]	; (800a204 <__swsetup_r+0xd4>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	d101      	bne.n	800a176 <__swsetup_r+0x46>
 800a172:	68ac      	ldr	r4, [r5, #8]
 800a174:	e7eb      	b.n	800a14e <__swsetup_r+0x1e>
 800a176:	4b24      	ldr	r3, [pc, #144]	; (800a208 <__swsetup_r+0xd8>)
 800a178:	429c      	cmp	r4, r3
 800a17a:	bf08      	it	eq
 800a17c:	68ec      	ldreq	r4, [r5, #12]
 800a17e:	e7e6      	b.n	800a14e <__swsetup_r+0x1e>
 800a180:	0758      	lsls	r0, r3, #29
 800a182:	d512      	bpl.n	800a1aa <__swsetup_r+0x7a>
 800a184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a186:	b141      	cbz	r1, 800a19a <__swsetup_r+0x6a>
 800a188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a18c:	4299      	cmp	r1, r3
 800a18e:	d002      	beq.n	800a196 <__swsetup_r+0x66>
 800a190:	4630      	mov	r0, r6
 800a192:	f7fe fbe1 	bl	8008958 <_free_r>
 800a196:	2300      	movs	r3, #0
 800a198:	6363      	str	r3, [r4, #52]	; 0x34
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1a0:	81a3      	strh	r3, [r4, #12]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6063      	str	r3, [r4, #4]
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f043 0308 	orr.w	r3, r3, #8
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	b94b      	cbnz	r3, 800a1ca <__swsetup_r+0x9a>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c0:	d003      	beq.n	800a1ca <__swsetup_r+0x9a>
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f000 f907 	bl	800a3d8 <__smakebuf_r>
 800a1ca:	89a0      	ldrh	r0, [r4, #12]
 800a1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1d0:	f010 0301 	ands.w	r3, r0, #1
 800a1d4:	d00a      	beq.n	800a1ec <__swsetup_r+0xbc>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60a3      	str	r3, [r4, #8]
 800a1da:	6963      	ldr	r3, [r4, #20]
 800a1dc:	425b      	negs	r3, r3
 800a1de:	61a3      	str	r3, [r4, #24]
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	b943      	cbnz	r3, 800a1f6 <__swsetup_r+0xc6>
 800a1e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1e8:	d1ba      	bne.n	800a160 <__swsetup_r+0x30>
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	0781      	lsls	r1, r0, #30
 800a1ee:	bf58      	it	pl
 800a1f0:	6963      	ldrpl	r3, [r4, #20]
 800a1f2:	60a3      	str	r3, [r4, #8]
 800a1f4:	e7f4      	b.n	800a1e0 <__swsetup_r+0xb0>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e7f7      	b.n	800a1ea <__swsetup_r+0xba>
 800a1fa:	bf00      	nop
 800a1fc:	200001ac 	.word	0x200001ac
 800a200:	0800a668 	.word	0x0800a668
 800a204:	0800a688 	.word	0x0800a688
 800a208:	0800a648 	.word	0x0800a648

0800a20c <__sflush_r>:
 800a20c:	898a      	ldrh	r2, [r1, #12]
 800a20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a212:	4605      	mov	r5, r0
 800a214:	0710      	lsls	r0, r2, #28
 800a216:	460c      	mov	r4, r1
 800a218:	d458      	bmi.n	800a2cc <__sflush_r+0xc0>
 800a21a:	684b      	ldr	r3, [r1, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	dc05      	bgt.n	800a22c <__sflush_r+0x20>
 800a220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	dc02      	bgt.n	800a22c <__sflush_r+0x20>
 800a226:	2000      	movs	r0, #0
 800a228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a22e:	2e00      	cmp	r6, #0
 800a230:	d0f9      	beq.n	800a226 <__sflush_r+0x1a>
 800a232:	2300      	movs	r3, #0
 800a234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a238:	682f      	ldr	r7, [r5, #0]
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	d032      	beq.n	800a2a4 <__sflush_r+0x98>
 800a23e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	075a      	lsls	r2, r3, #29
 800a244:	d505      	bpl.n	800a252 <__sflush_r+0x46>
 800a246:	6863      	ldr	r3, [r4, #4]
 800a248:	1ac0      	subs	r0, r0, r3
 800a24a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a24c:	b10b      	cbz	r3, 800a252 <__sflush_r+0x46>
 800a24e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a250:	1ac0      	subs	r0, r0, r3
 800a252:	2300      	movs	r3, #0
 800a254:	4602      	mov	r2, r0
 800a256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a258:	4628      	mov	r0, r5
 800a25a:	6a21      	ldr	r1, [r4, #32]
 800a25c:	47b0      	blx	r6
 800a25e:	1c43      	adds	r3, r0, #1
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	d106      	bne.n	800a272 <__sflush_r+0x66>
 800a264:	6829      	ldr	r1, [r5, #0]
 800a266:	291d      	cmp	r1, #29
 800a268:	d82c      	bhi.n	800a2c4 <__sflush_r+0xb8>
 800a26a:	4a2a      	ldr	r2, [pc, #168]	; (800a314 <__sflush_r+0x108>)
 800a26c:	40ca      	lsrs	r2, r1
 800a26e:	07d6      	lsls	r6, r2, #31
 800a270:	d528      	bpl.n	800a2c4 <__sflush_r+0xb8>
 800a272:	2200      	movs	r2, #0
 800a274:	6062      	str	r2, [r4, #4]
 800a276:	6922      	ldr	r2, [r4, #16]
 800a278:	04d9      	lsls	r1, r3, #19
 800a27a:	6022      	str	r2, [r4, #0]
 800a27c:	d504      	bpl.n	800a288 <__sflush_r+0x7c>
 800a27e:	1c42      	adds	r2, r0, #1
 800a280:	d101      	bne.n	800a286 <__sflush_r+0x7a>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	b903      	cbnz	r3, 800a288 <__sflush_r+0x7c>
 800a286:	6560      	str	r0, [r4, #84]	; 0x54
 800a288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a28a:	602f      	str	r7, [r5, #0]
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d0ca      	beq.n	800a226 <__sflush_r+0x1a>
 800a290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a294:	4299      	cmp	r1, r3
 800a296:	d002      	beq.n	800a29e <__sflush_r+0x92>
 800a298:	4628      	mov	r0, r5
 800a29a:	f7fe fb5d 	bl	8008958 <_free_r>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a2a2:	e7c1      	b.n	800a228 <__sflush_r+0x1c>
 800a2a4:	6a21      	ldr	r1, [r4, #32]
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b0      	blx	r6
 800a2ac:	1c41      	adds	r1, r0, #1
 800a2ae:	d1c7      	bne.n	800a240 <__sflush_r+0x34>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0c4      	beq.n	800a240 <__sflush_r+0x34>
 800a2b6:	2b1d      	cmp	r3, #29
 800a2b8:	d001      	beq.n	800a2be <__sflush_r+0xb2>
 800a2ba:	2b16      	cmp	r3, #22
 800a2bc:	d101      	bne.n	800a2c2 <__sflush_r+0xb6>
 800a2be:	602f      	str	r7, [r5, #0]
 800a2c0:	e7b1      	b.n	800a226 <__sflush_r+0x1a>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	e7ad      	b.n	800a228 <__sflush_r+0x1c>
 800a2cc:	690f      	ldr	r7, [r1, #16]
 800a2ce:	2f00      	cmp	r7, #0
 800a2d0:	d0a9      	beq.n	800a226 <__sflush_r+0x1a>
 800a2d2:	0793      	lsls	r3, r2, #30
 800a2d4:	bf18      	it	ne
 800a2d6:	2300      	movne	r3, #0
 800a2d8:	680e      	ldr	r6, [r1, #0]
 800a2da:	bf08      	it	eq
 800a2dc:	694b      	ldreq	r3, [r1, #20]
 800a2de:	eba6 0807 	sub.w	r8, r6, r7
 800a2e2:	600f      	str	r7, [r1, #0]
 800a2e4:	608b      	str	r3, [r1, #8]
 800a2e6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ea:	dd9c      	ble.n	800a226 <__sflush_r+0x1a>
 800a2ec:	4643      	mov	r3, r8
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	6a21      	ldr	r1, [r4, #32]
 800a2f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2f6:	47b0      	blx	r6
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	dc06      	bgt.n	800a30a <__sflush_r+0xfe>
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	e78e      	b.n	800a228 <__sflush_r+0x1c>
 800a30a:	4407      	add	r7, r0
 800a30c:	eba8 0800 	sub.w	r8, r8, r0
 800a310:	e7e9      	b.n	800a2e6 <__sflush_r+0xda>
 800a312:	bf00      	nop
 800a314:	20400001 	.word	0x20400001

0800a318 <_fflush_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	690b      	ldr	r3, [r1, #16]
 800a31c:	4605      	mov	r5, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	b913      	cbnz	r3, 800a328 <_fflush_r+0x10>
 800a322:	2500      	movs	r5, #0
 800a324:	4628      	mov	r0, r5
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	b118      	cbz	r0, 800a332 <_fflush_r+0x1a>
 800a32a:	6983      	ldr	r3, [r0, #24]
 800a32c:	b90b      	cbnz	r3, 800a332 <_fflush_r+0x1a>
 800a32e:	f7fe fcfd 	bl	8008d2c <__sinit>
 800a332:	4b14      	ldr	r3, [pc, #80]	; (800a384 <_fflush_r+0x6c>)
 800a334:	429c      	cmp	r4, r3
 800a336:	d11b      	bne.n	800a370 <_fflush_r+0x58>
 800a338:	686c      	ldr	r4, [r5, #4]
 800a33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0ef      	beq.n	800a322 <_fflush_r+0xa>
 800a342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a344:	07d0      	lsls	r0, r2, #31
 800a346:	d404      	bmi.n	800a352 <_fflush_r+0x3a>
 800a348:	0599      	lsls	r1, r3, #22
 800a34a:	d402      	bmi.n	800a352 <_fflush_r+0x3a>
 800a34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34e:	f7fe fd8b 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800a352:	4628      	mov	r0, r5
 800a354:	4621      	mov	r1, r4
 800a356:	f7ff ff59 	bl	800a20c <__sflush_r>
 800a35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a35c:	4605      	mov	r5, r0
 800a35e:	07da      	lsls	r2, r3, #31
 800a360:	d4e0      	bmi.n	800a324 <_fflush_r+0xc>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	059b      	lsls	r3, r3, #22
 800a366:	d4dd      	bmi.n	800a324 <_fflush_r+0xc>
 800a368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a36a:	f7fe fd7e 	bl	8008e6a <__retarget_lock_release_recursive>
 800a36e:	e7d9      	b.n	800a324 <_fflush_r+0xc>
 800a370:	4b05      	ldr	r3, [pc, #20]	; (800a388 <_fflush_r+0x70>)
 800a372:	429c      	cmp	r4, r3
 800a374:	d101      	bne.n	800a37a <_fflush_r+0x62>
 800a376:	68ac      	ldr	r4, [r5, #8]
 800a378:	e7df      	b.n	800a33a <_fflush_r+0x22>
 800a37a:	4b04      	ldr	r3, [pc, #16]	; (800a38c <_fflush_r+0x74>)
 800a37c:	429c      	cmp	r4, r3
 800a37e:	bf08      	it	eq
 800a380:	68ec      	ldreq	r4, [r5, #12]
 800a382:	e7da      	b.n	800a33a <_fflush_r+0x22>
 800a384:	0800a668 	.word	0x0800a668
 800a388:	0800a688 	.word	0x0800a688
 800a38c:	0800a648 	.word	0x0800a648

0800a390 <__swhatbuf_r>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	460e      	mov	r6, r1
 800a394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a398:	4614      	mov	r4, r2
 800a39a:	2900      	cmp	r1, #0
 800a39c:	461d      	mov	r5, r3
 800a39e:	b096      	sub	sp, #88	; 0x58
 800a3a0:	da07      	bge.n	800a3b2 <__swhatbuf_r+0x22>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	89b3      	ldrh	r3, [r6, #12]
 800a3a8:	061a      	lsls	r2, r3, #24
 800a3aa:	d410      	bmi.n	800a3ce <__swhatbuf_r+0x3e>
 800a3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b0:	e00e      	b.n	800a3d0 <__swhatbuf_r+0x40>
 800a3b2:	466a      	mov	r2, sp
 800a3b4:	f000 f89e 	bl	800a4f4 <_fstat_r>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	dbf2      	blt.n	800a3a2 <__swhatbuf_r+0x12>
 800a3bc:	9a01      	ldr	r2, [sp, #4]
 800a3be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3c6:	425a      	negs	r2, r3
 800a3c8:	415a      	adcs	r2, r3
 800a3ca:	602a      	str	r2, [r5, #0]
 800a3cc:	e7ee      	b.n	800a3ac <__swhatbuf_r+0x1c>
 800a3ce:	2340      	movs	r3, #64	; 0x40
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	b016      	add	sp, #88	; 0x58
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}

0800a3d8 <__smakebuf_r>:
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3dc:	079d      	lsls	r5, r3, #30
 800a3de:	4606      	mov	r6, r0
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	d507      	bpl.n	800a3f4 <__smakebuf_r+0x1c>
 800a3e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	6123      	str	r3, [r4, #16]
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	6163      	str	r3, [r4, #20]
 800a3f0:	b002      	add	sp, #8
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	466a      	mov	r2, sp
 800a3f6:	ab01      	add	r3, sp, #4
 800a3f8:	f7ff ffca 	bl	800a390 <__swhatbuf_r>
 800a3fc:	9900      	ldr	r1, [sp, #0]
 800a3fe:	4605      	mov	r5, r0
 800a400:	4630      	mov	r0, r6
 800a402:	f7fe faf5 	bl	80089f0 <_malloc_r>
 800a406:	b948      	cbnz	r0, 800a41c <__smakebuf_r+0x44>
 800a408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a40c:	059a      	lsls	r2, r3, #22
 800a40e:	d4ef      	bmi.n	800a3f0 <__smakebuf_r+0x18>
 800a410:	f023 0303 	bic.w	r3, r3, #3
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	e7e3      	b.n	800a3e4 <__smakebuf_r+0xc>
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <__smakebuf_r+0x7c>)
 800a41e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	6020      	str	r0, [r4, #0]
 800a424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	9b00      	ldr	r3, [sp, #0]
 800a42c:	6120      	str	r0, [r4, #16]
 800a42e:	6163      	str	r3, [r4, #20]
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	b15b      	cbz	r3, 800a44c <__smakebuf_r+0x74>
 800a434:	4630      	mov	r0, r6
 800a436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43a:	f000 f86d 	bl	800a518 <_isatty_r>
 800a43e:	b128      	cbz	r0, 800a44c <__smakebuf_r+0x74>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f023 0303 	bic.w	r3, r3, #3
 800a446:	f043 0301 	orr.w	r3, r3, #1
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	89a0      	ldrh	r0, [r4, #12]
 800a44e:	4305      	orrs	r5, r0
 800a450:	81a5      	strh	r5, [r4, #12]
 800a452:	e7cd      	b.n	800a3f0 <__smakebuf_r+0x18>
 800a454:	08008cc5 	.word	0x08008cc5

0800a458 <memchr>:
 800a458:	4603      	mov	r3, r0
 800a45a:	b510      	push	{r4, lr}
 800a45c:	b2c9      	uxtb	r1, r1
 800a45e:	4402      	add	r2, r0
 800a460:	4293      	cmp	r3, r2
 800a462:	4618      	mov	r0, r3
 800a464:	d101      	bne.n	800a46a <memchr+0x12>
 800a466:	2000      	movs	r0, #0
 800a468:	e003      	b.n	800a472 <memchr+0x1a>
 800a46a:	7804      	ldrb	r4, [r0, #0]
 800a46c:	3301      	adds	r3, #1
 800a46e:	428c      	cmp	r4, r1
 800a470:	d1f6      	bne.n	800a460 <memchr+0x8>
 800a472:	bd10      	pop	{r4, pc}

0800a474 <memmove>:
 800a474:	4288      	cmp	r0, r1
 800a476:	b510      	push	{r4, lr}
 800a478:	eb01 0402 	add.w	r4, r1, r2
 800a47c:	d902      	bls.n	800a484 <memmove+0x10>
 800a47e:	4284      	cmp	r4, r0
 800a480:	4623      	mov	r3, r4
 800a482:	d807      	bhi.n	800a494 <memmove+0x20>
 800a484:	1e43      	subs	r3, r0, #1
 800a486:	42a1      	cmp	r1, r4
 800a488:	d008      	beq.n	800a49c <memmove+0x28>
 800a48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a492:	e7f8      	b.n	800a486 <memmove+0x12>
 800a494:	4601      	mov	r1, r0
 800a496:	4402      	add	r2, r0
 800a498:	428a      	cmp	r2, r1
 800a49a:	d100      	bne.n	800a49e <memmove+0x2a>
 800a49c:	bd10      	pop	{r4, pc}
 800a49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4a6:	e7f7      	b.n	800a498 <memmove+0x24>

0800a4a8 <_realloc_r>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	460e      	mov	r6, r1
 800a4b0:	b921      	cbnz	r1, 800a4bc <_realloc_r+0x14>
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4b8:	f7fe ba9a 	b.w	80089f0 <_malloc_r>
 800a4bc:	b922      	cbnz	r2, 800a4c8 <_realloc_r+0x20>
 800a4be:	f7fe fa4b 	bl	8008958 <_free_r>
 800a4c2:	4625      	mov	r5, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c8:	f000 f836 	bl	800a538 <_malloc_usable_size_r>
 800a4cc:	42a0      	cmp	r0, r4
 800a4ce:	d20f      	bcs.n	800a4f0 <_realloc_r+0x48>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f7fe fa8c 	bl	80089f0 <_malloc_r>
 800a4d8:	4605      	mov	r5, r0
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d0f2      	beq.n	800a4c4 <_realloc_r+0x1c>
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	f7fe fa23 	bl	800892c <memcpy>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7fe fa35 	bl	8008958 <_free_r>
 800a4ee:	e7e9      	b.n	800a4c4 <_realloc_r+0x1c>
 800a4f0:	4635      	mov	r5, r6
 800a4f2:	e7e7      	b.n	800a4c4 <_realloc_r+0x1c>

0800a4f4 <_fstat_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4d06      	ldr	r5, [pc, #24]	; (800a514 <_fstat_r+0x20>)
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f7f7 f8f7 	bl	80016f4 <_fstat>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d102      	bne.n	800a510 <_fstat_r+0x1c>
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	b103      	cbz	r3, 800a510 <_fstat_r+0x1c>
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	bf00      	nop
 800a514:	2000146c 	.word	0x2000146c

0800a518 <_isatty_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	2300      	movs	r3, #0
 800a51c:	4d05      	ldr	r5, [pc, #20]	; (800a534 <_isatty_r+0x1c>)
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f7 f8f5 	bl	8001712 <_isatty>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_isatty_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_isatty_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	2000146c 	.word	0x2000146c

0800a538 <_malloc_usable_size_r>:
 800a538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53c:	1f18      	subs	r0, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfbc      	itt	lt
 800a542:	580b      	ldrlt	r3, [r1, r0]
 800a544:	18c0      	addlt	r0, r0, r3
 800a546:	4770      	bx	lr

0800a548 <_init>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	bf00      	nop
 800a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54e:	bc08      	pop	{r3}
 800a550:	469e      	mov	lr, r3
 800a552:	4770      	bx	lr

0800a554 <_fini>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	bf00      	nop
 800a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55a:	bc08      	pop	{r3}
 800a55c:	469e      	mov	lr, r3
 800a55e:	4770      	bx	lr
