
altimeter_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a598  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a954  0800a954  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a954  0800a954  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a954  0800a954  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a95c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  20000210  0800ab6c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  0800ab6c  00021574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae09  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dec  00000000  00000000  0003b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0003ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  0003ff80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3a3  00000000  00000000  00040f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b82  00000000  00000000  0005d2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9bd  00000000  00000000  00072e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001017fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  00101850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a690 	.word	0x0800a690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800a690 	.word	0x0800a690

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	; 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__aeabi_d2iz>:
 8000740:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000744:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000748:	d215      	bcs.n	8000776 <__aeabi_d2iz+0x36>
 800074a:	d511      	bpl.n	8000770 <__aeabi_d2iz+0x30>
 800074c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000750:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000754:	d912      	bls.n	800077c <__aeabi_d2iz+0x3c>
 8000756:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800075a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000762:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000766:	fa23 f002 	lsr.w	r0, r3, r2
 800076a:	bf18      	it	ne
 800076c:	4240      	negne	r0, r0
 800076e:	4770      	bx	lr
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	4770      	bx	lr
 8000776:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800077a:	d105      	bne.n	8000788 <__aeabi_d2iz+0x48>
 800077c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000780:	bf08      	it	eq
 8000782:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <protoInit>:
	uint8_t txBuf[] = "-ALIVE\n";
	CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));

}

void protoInit(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

	uint8_t *txBuf = malloc(32);
 8000796:	2020      	movs	r0, #32
 8000798:	f008 f964 	bl	8008a64 <malloc>
 800079c:	4603      	mov	r3, r0
 800079e:	60fb      	str	r3, [r7, #12]
	sprintf(txBuf,"EV CONNECTED 0x%04x\n",device_type);
 80007a0:	2306      	movs	r3, #6
 80007a2:	461a      	mov	r2, r3
 80007a4:	490a      	ldr	r1, [pc, #40]	; (80007d0 <protoInit+0x40>)
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f008 fa48 	bl	8008c3c <siprintf>
	struct MSG msg;
	msg.txBuf = txBuf;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	607b      	str	r3, [r7, #4]
	msg.len = strlen(txBuf);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff fcd7 	bl	8000164 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	60bb      	str	r3, [r7, #8]
	tx_stack_push(&msg);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f915 	bl	80009ec <tx_stack_push>
	//init steppers
	homeAll();
 80007c2:	f000 fe91 	bl	80014e8 <homeAll>

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	0800a6b8 	.word	0x0800a6b8

080007d4 <protoSetAlt>:

void protoSetAlt(uint8_t* Buf, uint32_t *Len){
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	466b      	mov	r3, sp
 80007e0:	461d      	mov	r5, r3
	uint32_t length = *Len -7;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3b07      	subs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	char number[length];
 80007ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80007ec:	4623      	mov	r3, r4
 80007ee:	3b01      	subs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
 80007f2:	4620      	mov	r0, r4
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	00cb      	lsls	r3, r1, #3
 8000802:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000806:	00c2      	lsls	r2, r0, #3
 8000808:	4620      	mov	r0, r4
 800080a:	f04f 0100 	mov.w	r1, #0
 800080e:	f04f 0200 	mov.w	r2, #0
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	00cb      	lsls	r3, r1, #3
 8000818:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800081c:	00c2      	lsls	r2, r0, #3
 800081e:	1de3      	adds	r3, r4, #7
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	ebad 0d03 	sub.w	sp, sp, r3
 8000828:	466b      	mov	r3, sp
 800082a:	3300      	adds	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
	long int val;
	memcpy( number, &Buf[6], length );
 800082e:	69f8      	ldr	r0, [r7, #28]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3306      	adds	r3, #6
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	f008 f91c 	bl	8008a74 <memcpy>
	sscanf(number, "%d", &val);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f107 0218 	add.w	r2, r7, #24
 8000842:	4911      	ldr	r1, [pc, #68]	; (8000888 <protoSetAlt+0xb4>)
 8000844:	4618      	mov	r0, r3
 8000846:	f008 fa19 	bl	8008c7c <siscanf>
	inst_set_alt(val);
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f94b 	bl	8000ae8 <inst_set_alt>

	uint8_t txBuf[] = "+RT OK\n";
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <protoSetAlt+0xb8>)
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085c:	e883 0003 	stmia.w	r3, {r0, r1}
	struct MSG msg;
	msg.txBuf = txBuf;
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	60bb      	str	r3, [r7, #8]
	msg.len = strlen(txBuf);
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fc7a 	bl	8000164 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	60fb      	str	r3, [r7, #12]
	tx_stack_push(&msg);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f8b7 	bl	80009ec <tx_stack_push>
 800087e:	46ad      	mov	sp, r5

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bdb0      	pop	{r4, r5, r7, pc}
 8000888:	0800a6d0 	.word	0x0800a6d0
 800088c:	0800a6d4 	.word	0x0800a6d4

08000890 <usb_data_rx>:
char RESP_INIT[]	= "INIT\n";
char RESP_ALT[]	= "S ALT";
char RESP_IDENT[]	= "GS IDENT\n";
char RESP_TYPE[]	= "GS TYPE\n";

void usb_data_rx(uint8_t* Buf, uint32_t *Len){
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	if (strcmp((const char *)Buf, RESP_INIT) == 0)
 800089a:	4943      	ldr	r1, [pc, #268]	; (80009a8 <usb_data_rx+0x118>)
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fc57 	bl	8000150 <strcmp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d109      	bne.n	80008bc <usb_data_rx+0x2c>
	{
		protoInit();
 80008a8:	f7ff ff72 	bl	8000790 <protoInit>
		memset(&Buf[0], 0, *Len);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f008 f8eb 	bl	8008a90 <memset>
		return;
 80008ba:	e072      	b.n	80009a2 <usb_data_rx+0x112>
	}
	if (strcmp((const char *)Buf, RESP_IDENT) == 0)
 80008bc:	493b      	ldr	r1, [pc, #236]	; (80009ac <usb_data_rx+0x11c>)
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fc46 	bl	8000150 <strcmp>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d11a      	bne.n	8000900 <usb_data_rx+0x70>
	{
		uint8_t *txBuf = malloc(32);
 80008ca:	2020      	movs	r0, #32
 80008cc:	f008 f8ca 	bl	8008a64 <malloc>
 80008d0:	4603      	mov	r3, r0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
		sprintf(txBuf,"+0x%04x\n+RT OK\n",0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	4936      	ldr	r1, [pc, #216]	; (80009b0 <usb_data_rx+0x120>)
 80008d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008da:	f008 f9af 	bl	8008c3c <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 80008de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008e0:	f7ff fc40 	bl	8000164 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008ec:	f007 fcb2 	bl	8008254 <CDC_Transmit_FS>
		memset(&Buf[0], 0, *Len);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f008 f8c9 	bl	8008a90 <memset>
		return;
 80008fe:	e050      	b.n	80009a2 <usb_data_rx+0x112>
	}
	if (strcmp((const char *)Buf, RESP_TYPE) == 0)
 8000900:	492c      	ldr	r1, [pc, #176]	; (80009b4 <usb_data_rx+0x124>)
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fc24 	bl	8000150 <strcmp>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11b      	bne.n	8000946 <usb_data_rx+0xb6>
	{
		uint8_t *txBuf = malloc(32);
 800090e:	2020      	movs	r0, #32
 8000910:	f008 f8a8 	bl	8008a64 <malloc>
 8000914:	4603      	mov	r3, r0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(txBuf,"+0x%04x\n+RT OK\n",device_type);
 8000918:	2306      	movs	r3, #6
 800091a:	461a      	mov	r2, r3
 800091c:	4924      	ldr	r1, [pc, #144]	; (80009b0 <usb_data_rx+0x120>)
 800091e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000920:	f008 f98c 	bl	8008c3c <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 8000924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000926:	f7ff fc1d 	bl	8000164 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29b      	uxth	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000932:	f007 fc8f 	bl	8008254 <CDC_Transmit_FS>
		memset(&Buf[0], 0, *Len);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f008 f8a6 	bl	8008a90 <memset>
		return;
 8000944:	e02d      	b.n	80009a2 <usb_data_rx+0x112>
	}
	if (strncmp((const char *)Buf, RESP_ALT,5) == 0)
 8000946:	2205      	movs	r2, #5
 8000948:	491b      	ldr	r1, [pc, #108]	; (80009b8 <usb_data_rx+0x128>)
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f008 fa05 	bl	8008d5a <strncmp>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10b      	bne.n	800096e <usb_data_rx+0xde>
	{
		protoSetAlt(Buf,Len);
 8000956:	6839      	ldr	r1, [r7, #0]
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff3b 	bl	80007d4 <protoSetAlt>
		memset(&Buf[0], 0, *Len);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f008 f892 	bl	8008a90 <memset>
		return;
 800096c:	e019      	b.n	80009a2 <usb_data_rx+0x112>
	}

	uint8_t txBuf[] = "-RT INVALID_COMMAND\n";
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <usb_data_rx+0x12c>)
 8000970:	f107 0410 	add.w	r4, r7, #16
 8000974:	461d      	mov	r5, r3
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800097e:	6020      	str	r0, [r4, #0]
 8000980:	3404      	adds	r4, #4
 8000982:	7021      	strb	r1, [r4, #0]
	struct MSG msg;
    msg.txBuf = txBuf;
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	60bb      	str	r3, [r7, #8]
    msg.len = strlen(txBuf);
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fbe8 	bl	8000164 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	60fb      	str	r3, [r7, #12]
    tx_stack_push(&msg);
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f825 	bl	80009ec <tx_stack_push>

}
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bdb0      	pop	{r4, r5, r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000010 	.word	0x20000010
 80009b0:	0800a6dc 	.word	0x0800a6dc
 80009b4:	2000001c 	.word	0x2000001c
 80009b8:	20000008 	.word	0x20000008
 80009bc:	0800a6ec 	.word	0x0800a6ec

080009c0 <tx_stack_init>:

tx_stack_init(){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	stack_max=64;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <tx_stack_init+0x20>)
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	701a      	strb	r2, [r3, #0]
	stack_pointer=0;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <tx_stack_init+0x24>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
	stack_top=0;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <tx_stack_init+0x28>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000595 	.word	0x20000595
 80009e4:	20000596 	.word	0x20000596
 80009e8:	20000594 	.word	0x20000594

080009ec <tx_stack_push>:

tx_stack_push(struct MSG *message){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t pointer = stack_top % stack_max;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <tx_stack_push+0x48>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <tx_stack_push+0x4c>)
 80009fa:	7812      	ldrb	r2, [r2, #0]
 80009fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a00:	fb02 f201 	mul.w	r2, r2, r1
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	73fb      	strb	r3, [r7, #15]
	stack[pointer] = message;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	490b      	ldr	r1, [pc, #44]	; (8000a3c <tx_stack_push+0x50>)
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	stack_top = (pointer + 1) % stack_max;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <tx_stack_push+0x4c>)
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a1e:	fb02 f201 	mul.w	r2, r2, r1
 8000a22:	1a9b      	subs	r3, r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <tx_stack_push+0x48>)
 8000a28:	701a      	strb	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000594 	.word	0x20000594
 8000a38:	20000595 	.word	0x20000595
 8000a3c:	20000494 	.word	0x20000494

08000a40 <tx_stack_process>:

tx_stack_process(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	uint8_t remaining = ((stack_top + stack_max) - stack_pointer) % stack_max;
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <tx_stack_process+0x98>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <tx_stack_process+0x9c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <tx_stack_process+0xa0>)
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <tx_stack_process+0x9c>)
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a60:	fb02 f201 	mul.w	r2, r2, r1
 8000a64:	1a9b      	subs	r3, r3, r2
 8000a66:	71fb      	strb	r3, [r7, #7]
	while (remaining > 0){
 8000a68:	e02d      	b.n	8000ac6 <tx_stack_process+0x86>
		//send
		struct MSG *current;
		current = stack[stack_pointer];
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <tx_stack_process+0xa0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <tx_stack_process+0xa4>)
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	603b      	str	r3, [r7, #0]
		CDC_Transmit_FS(current->txBuf, current->len);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	4610      	mov	r0, r2
 8000a86:	f007 fbe5 	bl	8008254 <CDC_Transmit_FS>
		stack_pointer = (stack_pointer + 1) % stack_max;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <tx_stack_process+0xa0>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <tx_stack_process+0x9c>)
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a98:	fb02 f201 	mul.w	r2, r2, r1
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <tx_stack_process+0xa0>)
 8000aa2:	701a      	strb	r2, [r3, #0]
		remaining = ((stack_top + stack_max) - stack_pointer) % stack_max;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <tx_stack_process+0x98>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <tx_stack_process+0x9c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <tx_stack_process+0xa0>)
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <tx_stack_process+0x9c>)
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	fb93 f1f2 	sdiv	r1, r3, r2
 8000abe:	fb02 f201 	mul.w	r2, r2, r1
 8000ac2:	1a9b      	subs	r3, r3, r2
 8000ac4:	71fb      	strb	r3, [r7, #7]
	while (remaining > 0){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ce      	bne.n	8000a6a <tx_stack_process+0x2a>
	}
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000594 	.word	0x20000594
 8000adc:	20000595 	.word	0x20000595
 8000ae0:	20000596 	.word	0x20000596
 8000ae4:	20000494 	.word	0x20000494

08000ae8 <inst_set_alt>:

inst_set_qnh(float val){
	INST_QNH_VAL = val;
}

inst_set_alt(long int val){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	INST_ALT_VAL = val;
 8000af0:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <inst_set_alt+0xd8>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]


	long int req_steps_001 = val * step_calib_001;
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fdb8 	bl	800066c <__aeabi_i2d>
 8000afc:	a32a      	add	r3, pc, #168	; (adr r3, 8000ba8 <inst_set_alt+0xc0>)
 8000afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b02:	f7ff fb37 	bl	8000174 <__aeabi_dmul>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff fe17 	bl	8000740 <__aeabi_d2iz>
 8000b12:	4603      	mov	r3, r0
 8000b14:	617b      	str	r3, [r7, #20]
	long int req_steps_010 = val * step_calib_010;
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fda8 	bl	800066c <__aeabi_i2d>
 8000b1c:	a324      	add	r3, pc, #144	; (adr r3, 8000bb0 <inst_set_alt+0xc8>)
 8000b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b22:	f7ff fb27 	bl	8000174 <__aeabi_dmul>
 8000b26:	4602      	mov	r2, r0
 8000b28:	460b      	mov	r3, r1
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f7ff fe07 	bl	8000740 <__aeabi_d2iz>
 8000b32:	4603      	mov	r3, r0
 8000b34:	613b      	str	r3, [r7, #16]
	long int req_steps_100 = val * step_calib_100;
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fd98 	bl	800066c <__aeabi_i2d>
 8000b3c:	a31e      	add	r3, pc, #120	; (adr r3, 8000bb8 <inst_set_alt+0xd0>)
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	f7ff fb17 	bl	8000174 <__aeabi_dmul>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f7ff fdf7 	bl	8000740 <__aeabi_d2iz>
 8000b52:	4603      	mov	r3, r0
 8000b54:	60fb      	str	r3, [r7, #12]

	moveStepper(0,req_steps_001-STEPS_001_CURR);
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <inst_set_alt+0xdc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 f9df 	bl	8000f24 <moveStepper>
	moveStepper(2,(req_steps_010-STEPS_010_CURR) * (-1));
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <inst_set_alt+0xe0>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 f9d7 	bl	8000f24 <moveStepper>
	moveStepper(3,(req_steps_100-STEPS_100_CURR) * (-1));
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <inst_set_alt+0xe4>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f9cf 	bl	8000f24 <moveStepper>

	STEPS_001_CURR = req_steps_001;
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <inst_set_alt+0xdc>)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	6013      	str	r3, [r2, #0]
	STEPS_010_CURR = req_steps_010;
 8000b8c:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <inst_set_alt+0xe0>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6013      	str	r3, [r2, #0]
	STEPS_100_CURR = req_steps_100;
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <inst_set_alt+0xe4>)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6013      	str	r3, [r2, #0]

	printf("debug");
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <inst_set_alt+0xe8>)
 8000b9a:	f008 f827 	bl	8008bec <iprintf>
}
 8000b9e:	bf00      	nop
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	93f819ab 	.word	0x93f819ab
 8000bac:	4010771e 	.word	0x4010771e
 8000bb0:	ecc02911 	.word	0xecc02911
 8000bb4:	3fda5830 	.word	0x3fda5830
 8000bb8:	570020da 	.word	0x570020da
 8000bbc:	3fa5135a 	.word	0x3fa5135a
 8000bc0:	2000022c 	.word	0x2000022c
 8000bc4:	20000238 	.word	0x20000238
 8000bc8:	20000234 	.word	0x20000234
 8000bcc:	20000230 	.word	0x20000230
 8000bd0:	0800a704 	.word	0x0800a704

08000bd4 <USB_DEVICE_MasterHardReset>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void USB_DEVICE_MasterHardReset(void)


{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0


    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <USB_DEVICE_MasterHardReset+0x40>)
 8000bf2:	f001 f859 	bl	8001ca8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <USB_DEVICE_MasterHardReset+0x40>)
 8000bfe:	f001 f9ee 	bl	8001fde <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c06:	f000 ff1d 	bl	8001a44 <HAL_Delay>

}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010800 	.word	0x40010800

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 feb0 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f82c 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f8d6 	bl	8000dd4 <MX_GPIO_Init>
  USB_DEVICE_MasterHardReset();
 8000c28:	f7ff ffd4 	bl	8000bd4 <USB_DEVICE_MasterHardReset>
  MX_USB_DEVICE_Init();
 8000c2c:	f007 fa3c 	bl	80080a8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000c30:	f000 f880 	bl	8000d34 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  tx_stack_init();
 8000c34:	f7ff fec4 	bl	80009c0 <tx_stack_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	tx_stack_process();
 8000c38:	f7ff ff02 	bl	8000a40 <tx_stack_process>
 8000c3c:	e7fc      	b.n	8000c38 <main+0x20>
	...

08000c40 <HAL_TIM_PeriodElapsedCallback>:

uint16_t cdc_isr_prescaler = 1600;
uint16_t cdc_isr_timer = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	stepperServiceRoutine();
 8000c48:	f000 f9aa 	bl	8000fa0 <stepperServiceRoutine>

	cdc_isr_timer ++;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c56:	801a      	strh	r2, [r3, #0]
	if (cdc_isr_timer == cdc_isr_prescaler){
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c5a:	881a      	ldrh	r2, [r3, #0]
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d102      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x2a>
		cdc_isr_timer = 0;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	801a      	strh	r2, [r3, #0]

	}
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000023c 	.word	0x2000023c
 8000c78:	20000026 	.word	0x20000026

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c86:	2228      	movs	r2, #40	; 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 ff00 	bl	8008a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fd2c 	bl	8003730 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cde:	f000 f91b 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 ff96 	bl	8003c30 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d0a:	f000 f905 	bl	8000f18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d16:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f8f0 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d26:	f000 f8f7 	bl	8000f18 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d5a:	220a      	movs	r2, #10
 8000d5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d7a:	f003 f977 	bl	800406c <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d84:	f000 f8c8 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d96:	f003 fb13 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000da0:	f000 f8ba 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000db2:	f003 fce5 	bl	8004780 <HAL_TIMEx_MasterConfigSynchronization>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f8ac 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000dc2:	f003 f9a3 	bl	800410c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000598 	.word	0x20000598

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de8:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a46      	ldr	r2, [pc, #280]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <MX_GPIO_Init+0x134>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <MX_GPIO_Init+0x138>)
 8000e50:	f001 f8c5 	bl	8001fde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 8000e54:	2200      	movs	r2, #0
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	482d      	ldr	r0, [pc, #180]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000e5a:	f001 f8c0 	bl	8001fde <HAL_GPIO_WritePin>
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f24f 11e0 	movw	r1, #61920	; 0xf1e0
 8000e64:	482b      	ldr	r0, [pc, #172]	; (8000f14 <MX_GPIO_Init+0x140>)
 8000e66:	f001 f8ba 	bl	8001fde <HAL_GPIO_WritePin>
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <MX_GPIO_Init+0x138>)
 8000e84:	f000 ff10 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_A1_Pin M3_A2_Pin M3_B1_Pin M3_B2_Pin
                           M4_A1_Pin M4_A2_Pin M4_B1_Pin M4_B2_Pin */
  GPIO_InitStruct.Pin = M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 8000e88:	23ff      	movs	r3, #255	; 0xff
 8000e8a:	613b      	str	r3, [r7, #16]
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481c      	ldr	r0, [pc, #112]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000ea0:	f000 ff02 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A1_Pin M1_A2_Pin M1_B1_Pin M1_B2_Pin
                           M2_A1_Pin M2_A2_Pin M2_B1_Pin M2_B2_Pin */
  GPIO_InitStruct.Pin = M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 8000ea4:	f24f 13e0 	movw	r3, #61920	; 0xf1e0
 8000ea8:	613b      	str	r3, [r7, #16]
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4815      	ldr	r0, [pc, #84]	; (8000f14 <MX_GPIO_Init+0x140>)
 8000ebe:	f000 fef3 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin  */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_GPIO_Init+0x13c>)
 8000edc:	f000 fee4 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_2_Pin HAL_3_Pin HAL_4_Pin HAL_1_Pin */
  GPIO_InitStruct.Pin = HAL_3_Pin|HAL_4_Pin|HAL_1_Pin|HAL_2_Pin;
 8000ee0:	f640 6302 	movw	r3, #3586	; 0xe02
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_GPIO_Init+0x140>)
 8000efa:	f000 fed5 	bl	8001ca8 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40010c00 	.word	0x40010c00

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <moveStepper>:

int dly_step = 10;

int homing = 0;

void moveStepper(int id, int steps) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d827      	bhi.n	8000f84 <moveStepper+0x60>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <moveStepper+0x18>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f5b 	.word	0x08000f5b
 8000f44:	08000f69 	.word	0x08000f69
 8000f48:	08000f77 	.word	0x08000f77
	switch(id){
		case 0: stepper_1_change += steps; break;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <moveStepper+0x6c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <moveStepper+0x6c>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e014      	b.n	8000f84 <moveStepper+0x60>
		case 1: stepper_2_change += steps; break;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <moveStepper+0x70>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <moveStepper+0x70>)
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00d      	b.n	8000f84 <moveStepper+0x60>
		case 2: stepper_3_change += steps; break;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <moveStepper+0x74>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <moveStepper+0x74>)
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e006      	b.n	8000f84 <moveStepper+0x60>
		case 3: stepper_4_change += steps; break;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <moveStepper+0x78>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <moveStepper+0x78>)
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	bf00      	nop
	}
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000240 	.word	0x20000240
 8000f94:	20000244 	.word	0x20000244
 8000f98:	20000248 	.word	0x20000248
 8000f9c:	2000024c 	.word	0x2000024c

08000fa0 <stepperServiceRoutine>:

void stepperServiceRoutine(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	if (homing > 0){
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <stepperServiceRoutine+0x1c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd02      	ble.n	8000fb2 <stepperServiceRoutine+0x12>
		homeISR();
 8000fac:	f000 f92c 	bl	8001208 <homeISR>
	}else{
		doStepISR();
	}

}
 8000fb0:	e001      	b.n	8000fb6 <stepperServiceRoutine+0x16>
		doStepISR();
 8000fb2:	f000 f805 	bl	8000fc0 <doStepISR>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <doStepISR>:

void doStepISR(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af02      	add	r7, sp, #8
	if (stepper_1_change > 0){
 8000fc6:	4b86      	ldr	r3, [pc, #536]	; (80011e0 <doStepISR+0x220>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dd1f      	ble.n	800100e <doStepISR+0x4e>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8000fce:	4b85      	ldr	r3, [pc, #532]	; (80011e4 <doStepISR+0x224>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe6:	4880      	ldr	r0, [pc, #512]	; (80011e8 <doStepISR+0x228>)
 8000fe8:	f000 fa8c 	bl	8001504 <doStep>
		stepper_1_change --;
 8000fec:	4b7c      	ldr	r3, [pc, #496]	; (80011e0 <doStepISR+0x220>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a7b      	ldr	r2, [pc, #492]	; (80011e0 <doStepISR+0x220>)
 8000ff4:	6013      	str	r3, [r2, #0]
		stepper_1_state ++;
 8000ff6:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <doStepISR+0x224>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a79      	ldr	r2, [pc, #484]	; (80011e4 <doStepISR+0x224>)
 8000ffe:	6013      	str	r3, [r2, #0]
		if (stepper_1_state == 8){stepper_1_state = 0;}
 8001000:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <doStepISR+0x224>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d102      	bne.n	800100e <doStepISR+0x4e>
 8001008:	4b76      	ldr	r3, [pc, #472]	; (80011e4 <doStepISR+0x224>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
	}
	if (stepper_1_change < 0){
 800100e:	4b74      	ldr	r3, [pc, #464]	; (80011e0 <doStepISR+0x220>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	da1f      	bge.n	8001056 <doStepISR+0x96>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8001016:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <doStepISR+0x224>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	486e      	ldr	r0, [pc, #440]	; (80011e8 <doStepISR+0x228>)
 8001030:	f000 fa68 	bl	8001504 <doStep>
		stepper_1_change ++;
 8001034:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <doStepISR+0x220>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <doStepISR+0x220>)
 800103c:	6013      	str	r3, [r2, #0]
		stepper_1_state --;
 800103e:	4b69      	ldr	r3, [pc, #420]	; (80011e4 <doStepISR+0x224>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a67      	ldr	r2, [pc, #412]	; (80011e4 <doStepISR+0x224>)
 8001046:	6013      	str	r3, [r2, #0]
		if (stepper_1_state < 0){stepper_1_state = 7;}
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <doStepISR+0x224>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da02      	bge.n	8001056 <doStepISR+0x96>
 8001050:	4b64      	ldr	r3, [pc, #400]	; (80011e4 <doStepISR+0x224>)
 8001052:	2207      	movs	r2, #7
 8001054:	601a      	str	r2, [r3, #0]
	}

	if (stepper_2_change > 0){
 8001056:	4b65      	ldr	r3, [pc, #404]	; (80011ec <doStepISR+0x22c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	dd1c      	ble.n	8001098 <doStepISR+0xd8>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <doStepISR+0x230>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	2240      	movs	r2, #64	; 0x40
 800106e:	2120      	movs	r1, #32
 8001070:	485d      	ldr	r0, [pc, #372]	; (80011e8 <doStepISR+0x228>)
 8001072:	f000 fa47 	bl	8001504 <doStep>
		stepper_2_change --;
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <doStepISR+0x22c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <doStepISR+0x22c>)
 800107e:	6013      	str	r3, [r2, #0]
		stepper_2_state ++;
 8001080:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <doStepISR+0x230>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a5a      	ldr	r2, [pc, #360]	; (80011f0 <doStepISR+0x230>)
 8001088:	6013      	str	r3, [r2, #0]
		if (stepper_2_state == 8){stepper_2_state = 0;}
 800108a:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <doStepISR+0x230>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b08      	cmp	r3, #8
 8001090:	d102      	bne.n	8001098 <doStepISR+0xd8>
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <doStepISR+0x230>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
	}
	if (stepper_2_change < 0){
 8001098:	4b54      	ldr	r3, [pc, #336]	; (80011ec <doStepISR+0x22c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	da1c      	bge.n	80010da <doStepISR+0x11a>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <doStepISR+0x230>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	2240      	movs	r2, #64	; 0x40
 80010b0:	2120      	movs	r1, #32
 80010b2:	484d      	ldr	r0, [pc, #308]	; (80011e8 <doStepISR+0x228>)
 80010b4:	f000 fa26 	bl	8001504 <doStep>
		stepper_2_change ++;
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <doStepISR+0x22c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <doStepISR+0x22c>)
 80010c0:	6013      	str	r3, [r2, #0]
		stepper_2_state --;
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <doStepISR+0x230>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <doStepISR+0x230>)
 80010ca:	6013      	str	r3, [r2, #0]
		if (stepper_2_state < 0){stepper_2_state = 7;}
 80010cc:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <doStepISR+0x230>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da02      	bge.n	80010da <doStepISR+0x11a>
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <doStepISR+0x230>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	601a      	str	r2, [r3, #0]
	}

	if (stepper_3_change > 0){
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <doStepISR+0x234>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dd1b      	ble.n	800111a <doStepISR+0x15a>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 80010e2:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <doStepISR+0x238>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2308      	movs	r3, #8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2304      	movs	r3, #4
 80010ee:	2202      	movs	r2, #2
 80010f0:	2101      	movs	r1, #1
 80010f2:	4842      	ldr	r0, [pc, #264]	; (80011fc <doStepISR+0x23c>)
 80010f4:	f000 fa06 	bl	8001504 <doStep>
		stepper_3_change --;
 80010f8:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <doStepISR+0x234>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <doStepISR+0x234>)
 8001100:	6013      	str	r3, [r2, #0]
		stepper_3_state ++;
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <doStepISR+0x238>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	4a3b      	ldr	r2, [pc, #236]	; (80011f8 <doStepISR+0x238>)
 800110a:	6013      	str	r3, [r2, #0]
		if (stepper_3_state == 8){stepper_3_state = 0;}
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <doStepISR+0x238>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d102      	bne.n	800111a <doStepISR+0x15a>
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <doStepISR+0x238>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
	}
	if (stepper_3_change < 0){
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <doStepISR+0x234>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	da1b      	bge.n	800115a <doStepISR+0x19a>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin, M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <doStepISR+0x238>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2308      	movs	r3, #8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2304      	movs	r3, #4
 800112e:	2202      	movs	r2, #2
 8001130:	2101      	movs	r1, #1
 8001132:	4832      	ldr	r0, [pc, #200]	; (80011fc <doStepISR+0x23c>)
 8001134:	f000 f9e6 	bl	8001504 <doStep>
		stepper_3_change ++;
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <doStepISR+0x234>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <doStepISR+0x234>)
 8001140:	6013      	str	r3, [r2, #0]
		stepper_3_state --;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <doStepISR+0x238>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3b01      	subs	r3, #1
 8001148:	4a2b      	ldr	r2, [pc, #172]	; (80011f8 <doStepISR+0x238>)
 800114a:	6013      	str	r3, [r2, #0]
		if (stepper_3_state < 0){stepper_3_state = 7;}
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <doStepISR+0x238>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da02      	bge.n	800115a <doStepISR+0x19a>
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <doStepISR+0x238>)
 8001156:	2207      	movs	r2, #7
 8001158:	601a      	str	r2, [r3, #0]
	}

	if (stepper_4_change > 0){
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <doStepISR+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dd1b      	ble.n	800119a <doStepISR+0x1da>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <doStepISR+0x244>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	2220      	movs	r2, #32
 8001170:	2110      	movs	r1, #16
 8001172:	4822      	ldr	r0, [pc, #136]	; (80011fc <doStepISR+0x23c>)
 8001174:	f000 f9c6 	bl	8001504 <doStep>
		stepper_4_change --;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <doStepISR+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <doStepISR+0x240>)
 8001180:	6013      	str	r3, [r2, #0]
		stepper_4_state ++;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <doStepISR+0x244>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <doStepISR+0x244>)
 800118a:	6013      	str	r3, [r2, #0]
		if (stepper_4_state == 8){stepper_4_state = 0;}
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <doStepISR+0x244>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d102      	bne.n	800119a <doStepISR+0x1da>
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <doStepISR+0x244>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
	}
	if (stepper_4_change < 0){
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <doStepISR+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da1b      	bge.n	80011da <doStepISR+0x21a>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <doStepISR+0x244>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2340      	movs	r3, #64	; 0x40
 80011ae:	2220      	movs	r2, #32
 80011b0:	2110      	movs	r1, #16
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <doStepISR+0x23c>)
 80011b4:	f000 f9a6 	bl	8001504 <doStep>
		stepper_4_change ++;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <doStepISR+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <doStepISR+0x240>)
 80011c0:	6013      	str	r3, [r2, #0]
		stepper_4_state --;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <doStepISR+0x244>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <doStepISR+0x244>)
 80011ca:	6013      	str	r3, [r2, #0]
		if (stepper_4_state < 0){stepper_4_state = 7;}
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <doStepISR+0x244>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da02      	bge.n	80011da <doStepISR+0x21a>
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <doStepISR+0x244>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	601a      	str	r2, [r3, #0]
	}

}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000240 	.word	0x20000240
 80011e4:	20000250 	.word	0x20000250
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	20000244 	.word	0x20000244
 80011f0:	20000254 	.word	0x20000254
 80011f4:	20000248 	.word	0x20000248
 80011f8:	20000258 	.word	0x20000258
 80011fc:	40010800 	.word	0x40010800
 8001200:	2000024c 	.word	0x2000024c
 8001204:	2000025c 	.word	0x2000025c

08001208 <homeISR>:

void homeISR(){
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
	//stepper1 100
	if (homing == 1){
 800120e:	4ba5      	ldr	r3, [pc, #660]	; (80014a4 <homeISR+0x29c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d137      	bne.n	8001286 <homeISR+0x7e>
		if (stepper_1_change == 0){
 8001216:	4ba4      	ldr	r3, [pc, #656]	; (80014a8 <homeISR+0x2a0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d131      	bne.n	8001282 <homeISR+0x7a>
			printf("home s1");
 800121e:	48a3      	ldr	r0, [pc, #652]	; (80014ac <homeISR+0x2a4>)
 8001220:	f007 fce4 	bl	8008bec <iprintf>
			if(HAL_GPIO_ReadPin(HAL_1_GPIO_Port, HAL_1_Pin)){
 8001224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001228:	48a1      	ldr	r0, [pc, #644]	; (80014b0 <homeISR+0x2a8>)
 800122a:	f000 fec1 	bl	8001fb0 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01b      	beq.n	800126c <homeISR+0x64>
				doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8001234:	4b9f      	ldr	r3, [pc, #636]	; (80014b4 <homeISR+0x2ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124c:	4898      	ldr	r0, [pc, #608]	; (80014b0 <homeISR+0x2a8>)
 800124e:	f000 f959 	bl	8001504 <doStep>
				stepper_1_state --;
 8001252:	4b98      	ldr	r3, [pc, #608]	; (80014b4 <homeISR+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3b01      	subs	r3, #1
 8001258:	4a96      	ldr	r2, [pc, #600]	; (80014b4 <homeISR+0x2ac>)
 800125a:	6013      	str	r3, [r2, #0]
				if (stepper_1_state < 0){stepper_1_state = 7;}
 800125c:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <homeISR+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	da10      	bge.n	8001286 <homeISR+0x7e>
 8001264:	4b93      	ldr	r3, [pc, #588]	; (80014b4 <homeISR+0x2ac>)
 8001266:	2207      	movs	r2, #7
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e00c      	b.n	8001286 <homeISR+0x7e>
			}else{
				homing ++;
 800126c:	4b8d      	ldr	r3, [pc, #564]	; (80014a4 <homeISR+0x29c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a8c      	ldr	r2, [pc, #560]	; (80014a4 <homeISR+0x29c>)
 8001274:	6013      	str	r3, [r2, #0]
				moveStepper(0,-160);
 8001276:	f06f 019f 	mvn.w	r1, #159	; 0x9f
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fe52 	bl	8000f24 <moveStepper>
 8001280:	e001      	b.n	8001286 <homeISR+0x7e>
			}
		}else{
			doStepISR();
 8001282:	f7ff fe9d 	bl	8000fc0 <doStepISR>

		}
	}
	if (homing == 2){
 8001286:	4b87      	ldr	r3, [pc, #540]	; (80014a4 <homeISR+0x29c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d110      	bne.n	80012b0 <homeISR+0xa8>
		//stepper1
		if (stepper_1_change == 0){
 800128e:	4b86      	ldr	r3, [pc, #536]	; (80014a8 <homeISR+0x2a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10a      	bne.n	80012ac <homeISR+0xa4>
			moveStepper(1,500);
 8001296:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fe42 	bl	8000f24 <moveStepper>
			homing ++;
 80012a0:	4b80      	ldr	r3, [pc, #512]	; (80014a4 <homeISR+0x29c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a7f      	ldr	r2, [pc, #508]	; (80014a4 <homeISR+0x29c>)
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e001      	b.n	80012b0 <homeISR+0xa8>
		}else{
			doStepISR();
 80012ac:	f7ff fe88 	bl	8000fc0 <doStepISR>

		}
	}

	//stepper2 QNH
	if (homing == 3){
 80012b0:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <homeISR+0x29c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d133      	bne.n	8001320 <homeISR+0x118>
		if (stepper_2_change == 0){
 80012b8:	4b7f      	ldr	r3, [pc, #508]	; (80014b8 <homeISR+0x2b0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d12d      	bne.n	800131c <homeISR+0x114>
			printf("home s2");
 80012c0:	487e      	ldr	r0, [pc, #504]	; (80014bc <homeISR+0x2b4>)
 80012c2:	f007 fc93 	bl	8008bec <iprintf>
			if(HAL_GPIO_ReadPin(HAL_2_GPIO_Port, HAL_2_Pin)){
 80012c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ca:	4879      	ldr	r0, [pc, #484]	; (80014b0 <homeISR+0x2a8>)
 80012cc:	f000 fe70 	bl	8001fb0 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d018      	beq.n	8001308 <homeISR+0x100>
				doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <homeISR+0x2b8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	2120      	movs	r1, #32
 80012e8:	4871      	ldr	r0, [pc, #452]	; (80014b0 <homeISR+0x2a8>)
 80012ea:	f000 f90b 	bl	8001504 <doStep>
				stepper_2_state --;
 80012ee:	4b74      	ldr	r3, [pc, #464]	; (80014c0 <homeISR+0x2b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	4a72      	ldr	r2, [pc, #456]	; (80014c0 <homeISR+0x2b8>)
 80012f6:	6013      	str	r3, [r2, #0]
				if (stepper_2_state < 0){stepper_2_state = 7;}
 80012f8:	4b71      	ldr	r3, [pc, #452]	; (80014c0 <homeISR+0x2b8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da0f      	bge.n	8001320 <homeISR+0x118>
 8001300:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <homeISR+0x2b8>)
 8001302:	2207      	movs	r2, #7
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e00b      	b.n	8001320 <homeISR+0x118>
			}else{
				homing ++;
 8001308:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <homeISR+0x29c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a65      	ldr	r2, [pc, #404]	; (80014a4 <homeISR+0x29c>)
 8001310:	6013      	str	r3, [r2, #0]
				moveStepper(1,-5450);
 8001312:	496c      	ldr	r1, [pc, #432]	; (80014c4 <homeISR+0x2bc>)
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff fe05 	bl	8000f24 <moveStepper>
 800131a:	e001      	b.n	8001320 <homeISR+0x118>
			}
		}else{
			doStepISR();
 800131c:	f7ff fe50 	bl	8000fc0 <doStepISR>

		}
	}
	if (homing == 4){
 8001320:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <homeISR+0x29c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b04      	cmp	r3, #4
 8001326:	d110      	bne.n	800134a <homeISR+0x142>
		//stepper2
		if (stepper_2_change == 0){
 8001328:	4b63      	ldr	r3, [pc, #396]	; (80014b8 <homeISR+0x2b0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <homeISR+0x13e>
			moveStepper(2,500);
 8001330:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fdf5 	bl	8000f24 <moveStepper>
			homing ++;
 800133a:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <homeISR+0x29c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <homeISR+0x29c>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e001      	b.n	800134a <homeISR+0x142>
		}else{
			doStepISR();
 8001346:	f7ff fe3b 	bl	8000fc0 <doStepISR>

		}
	}

	//stepper3 1k
	if (homing == 5){
 800134a:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <homeISR+0x29c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d132      	bne.n	80013b8 <homeISR+0x1b0>
		if (stepper_3_change == 0){
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <homeISR+0x2c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d12c      	bne.n	80013b4 <homeISR+0x1ac>
			printf("home s3");
 800135a:	485c      	ldr	r0, [pc, #368]	; (80014cc <homeISR+0x2c4>)
 800135c:	f007 fc46 	bl	8008bec <iprintf>
			if(HAL_GPIO_ReadPin(HAL_3_GPIO_Port, HAL_3_Pin)){
 8001360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001364:	4852      	ldr	r0, [pc, #328]	; (80014b0 <homeISR+0x2a8>)
 8001366:	f000 fe23 	bl	8001fb0 <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d017      	beq.n	80013a0 <homeISR+0x198>
				doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 8001370:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <homeISR+0x2c8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2308      	movs	r3, #8
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2304      	movs	r3, #4
 800137c:	2202      	movs	r2, #2
 800137e:	2101      	movs	r1, #1
 8001380:	4854      	ldr	r0, [pc, #336]	; (80014d4 <homeISR+0x2cc>)
 8001382:	f000 f8bf 	bl	8001504 <doStep>
				stepper_3_state --;
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <homeISR+0x2c8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a50      	ldr	r2, [pc, #320]	; (80014d0 <homeISR+0x2c8>)
 800138e:	6013      	str	r3, [r2, #0]
				if (stepper_3_state < 0){stepper_3_state = 7;}
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <homeISR+0x2c8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da0f      	bge.n	80013b8 <homeISR+0x1b0>
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <homeISR+0x2c8>)
 800139a:	2207      	movs	r2, #7
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e00b      	b.n	80013b8 <homeISR+0x1b0>
			}else{
				homing ++;
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <homeISR+0x29c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <homeISR+0x29c>)
 80013a8:	6013      	str	r3, [r2, #0]
				moveStepper(2,0);
 80013aa:	2100      	movs	r1, #0
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff fdb9 	bl	8000f24 <moveStepper>
 80013b2:	e001      	b.n	80013b8 <homeISR+0x1b0>
			}
		}else{
			doStepISR();
 80013b4:	f7ff fe04 	bl	8000fc0 <doStepISR>

		}
	}
	if (homing == 6){
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <homeISR+0x29c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b06      	cmp	r3, #6
 80013be:	d10f      	bne.n	80013e0 <homeISR+0x1d8>
		//stepper2
		if (stepper_3_change == 0){
 80013c0:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <homeISR+0x2c0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <homeISR+0x1d4>
			moveStepper(3,-500);
 80013c8:	4943      	ldr	r1, [pc, #268]	; (80014d8 <homeISR+0x2d0>)
 80013ca:	2003      	movs	r0, #3
 80013cc:	f7ff fdaa 	bl	8000f24 <moveStepper>
			homing ++;
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <homeISR+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <homeISR+0x29c>)
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e001      	b.n	80013e0 <homeISR+0x1d8>
		}else{
			doStepISR();
 80013dc:	f7ff fdf0 	bl	8000fc0 <doStepISR>

		}
	}
	//stepper4 10k
	if (homing == 7){
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <homeISR+0x29c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	d131      	bne.n	800144c <homeISR+0x244>
		if (stepper_4_change == 0){
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <homeISR+0x2d4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d12b      	bne.n	8001448 <homeISR+0x240>
			printf("home s3");
 80013f0:	4836      	ldr	r0, [pc, #216]	; (80014cc <homeISR+0x2c4>)
 80013f2:	f007 fbfb 	bl	8008bec <iprintf>
			if(HAL_GPIO_ReadPin(HAL_4_GPIO_Port, HAL_4_Pin)){
 80013f6:	2102      	movs	r1, #2
 80013f8:	482d      	ldr	r0, [pc, #180]	; (80014b0 <homeISR+0x2a8>)
 80013fa:	f000 fdd9 	bl	8001fb0 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d017      	beq.n	8001434 <homeISR+0x22c>
				doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <homeISR+0x2d8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	2220      	movs	r2, #32
 8001412:	2110      	movs	r1, #16
 8001414:	482f      	ldr	r0, [pc, #188]	; (80014d4 <homeISR+0x2cc>)
 8001416:	f000 f875 	bl	8001504 <doStep>
				stepper_4_state ++;
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <homeISR+0x2d8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <homeISR+0x2d8>)
 8001422:	6013      	str	r3, [r2, #0]
				if (stepper_4_state == 8){stepper_4_state = 0;}
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <homeISR+0x2d8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d10f      	bne.n	800144c <homeISR+0x244>
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <homeISR+0x2d8>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e00b      	b.n	800144c <homeISR+0x244>
			}else{
				homing ++;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <homeISR+0x29c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <homeISR+0x29c>)
 800143c:	6013      	str	r3, [r2, #0]
				moveStepper(3,200);
 800143e:	21c8      	movs	r1, #200	; 0xc8
 8001440:	2003      	movs	r0, #3
 8001442:	f7ff fd6f 	bl	8000f24 <moveStepper>
 8001446:	e001      	b.n	800144c <homeISR+0x244>
			}
		}else{
			doStepISR();
 8001448:	f7ff fdba 	bl	8000fc0 <doStepISR>

		}
	}
	if (homing == 8){
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <homeISR+0x29c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d122      	bne.n	800149a <homeISR+0x292>
		//stepper2
		if (stepper_4_change == 0){
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <homeISR+0x2d4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d11c      	bne.n	8001496 <homeISR+0x28e>
			uint8_t txBuf[] = "+INIT\n";
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <homeISR+0x2dc>)
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001466:	6018      	str	r0, [r3, #0]
 8001468:	3304      	adds	r3, #4
 800146a:	8019      	strh	r1, [r3, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	0c0a      	lsrs	r2, r1, #16
 8001470:	701a      	strb	r2, [r3, #0]
			struct MSG msg;
			msg.txBuf = txBuf;
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	603b      	str	r3, [r7, #0]
			msg.len = strlen(txBuf);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fe71 	bl	8000164 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	607b      	str	r3, [r7, #4]
			tx_stack_push(&msg);
 8001486:	463b      	mov	r3, r7
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff faaf 	bl	80009ec <tx_stack_push>
			homing = 0;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <homeISR+0x29c>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		}else{
			doStepISR();

		}
	}
}
 8001494:	e001      	b.n	800149a <homeISR+0x292>
			doStepISR();
 8001496:	f7ff fd93 	bl	8000fc0 <doStepISR>
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000260 	.word	0x20000260
 80014a8:	20000240 	.word	0x20000240
 80014ac:	0800a70c 	.word	0x0800a70c
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	20000250 	.word	0x20000250
 80014b8:	20000244 	.word	0x20000244
 80014bc:	0800a714 	.word	0x0800a714
 80014c0:	20000254 	.word	0x20000254
 80014c4:	ffffeab6 	.word	0xffffeab6
 80014c8:	20000248 	.word	0x20000248
 80014cc:	0800a71c 	.word	0x0800a71c
 80014d0:	20000258 	.word	0x20000258
 80014d4:	40010800 	.word	0x40010800
 80014d8:	fffffe0c 	.word	0xfffffe0c
 80014dc:	2000024c 	.word	0x2000024c
 80014e0:	2000025c 	.word	0x2000025c
 80014e4:	0800a724 	.word	0x0800a724

080014e8 <homeAll>:



void homeAll(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	moveStepper(0,500);
 80014ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fd17 	bl	8000f24 <moveStepper>
	//stepper_2_change = 600;
	//stepper_3_change = 600;
	//stepper_4_change = 600;
	homing = 1;
 80014f6:	4b02      	ldr	r3, [pc, #8]	; (8001500 <homeAll+0x18>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
	//while(homing > 0){
		//wait
	//}
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000260 	.word	0x20000260

08001504 <doStep>:

void doStep(GPIO_TypeDef *PORT, uint16_t  PIN1, uint16_t  PIN2, uint16_t  PIN3, uint16_t  PIN4, int step){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4603      	mov	r3, r0
 8001514:	817b      	strh	r3, [r7, #10]
 8001516:	460b      	mov	r3, r1
 8001518:	813b      	strh	r3, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b07      	cmp	r3, #7
 8001522:	f200 80db 	bhi.w	80016dc <doStep+0x1d8>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <doStep+0x28>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800154d 	.word	0x0800154d
 8001530:	0800157f 	.word	0x0800157f
 8001534:	080015b1 	.word	0x080015b1
 8001538:	080015e3 	.word	0x080015e3
 800153c:	08001615 	.word	0x08001615
 8001540:	08001647 	.word	0x08001647
 8001544:	08001679 	.word	0x08001679
 8001548:	080016ab 	.word	0x080016ab
	switch(step){
		case 0:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	2201      	movs	r2, #1
 8001550:	4619      	mov	r1, r3
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fd43 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 fd3d 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 fd37 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8001570:	8b3b      	ldrh	r3, [r7, #24]
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fd31 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 800157c:	e0ae      	b.n	80016dc <doStep+0x1d8>
		case 1:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	2201      	movs	r2, #1
 8001582:	4619      	mov	r1, r3
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fd2a 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 800158a:	893b      	ldrh	r3, [r7, #8]
 800158c:	2201      	movs	r2, #1
 800158e:	4619      	mov	r1, r3
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 fd24 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 fd1e 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80015a2:	8b3b      	ldrh	r3, [r7, #24]
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fd18 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 80015ae:	e095      	b.n	80016dc <doStep+0x1d8>
		case 2:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fd11 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 80015bc:	893b      	ldrh	r3, [r7, #8]
 80015be:	2201      	movs	r2, #1
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fd0b 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fd05 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80015d4:	8b3b      	ldrh	r3, [r7, #24]
 80015d6:	2200      	movs	r2, #0
 80015d8:	4619      	mov	r1, r3
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 fcff 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 80015e0:	e07c      	b.n	80016dc <doStep+0x1d8>
		case 3:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80015e2:	897b      	ldrh	r3, [r7, #10]
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 fcf8 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 80015ee:	893b      	ldrh	r3, [r7, #8]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 fcf2 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fcec 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8001606:	8b3b      	ldrh	r3, [r7, #24]
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 fce6 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 8001612:	e063      	b.n	80016dc <doStep+0x1d8>
		case 4:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001614:	897b      	ldrh	r3, [r7, #10]
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fcdf 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001620:	893b      	ldrh	r3, [r7, #8]
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fcd9 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fcd3 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 8001638:	8b3b      	ldrh	r3, [r7, #24]
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fccd 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 8001644:	e04a      	b.n	80016dc <doStep+0x1d8>
		case 5:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001646:	897b      	ldrh	r3, [r7, #10]
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fcc6 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001652:	893b      	ldrh	r3, [r7, #8]
 8001654:	2200      	movs	r2, #0
 8001656:	4619      	mov	r1, r3
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 fcc0 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 fcba 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 800166a:	8b3b      	ldrh	r3, [r7, #24]
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 fcb4 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 8001676:	e031      	b.n	80016dc <doStep+0x1d8>
		case 6:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001678:	897b      	ldrh	r3, [r7, #10]
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 fcad 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001684:	893b      	ldrh	r3, [r7, #8]
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fca7 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fca1 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 800169c:	8b3b      	ldrh	r3, [r7, #24]
 800169e:	2201      	movs	r2, #1
 80016a0:	4619      	mov	r1, r3
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fc9b 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 80016a8:	e018      	b.n	80016dc <doStep+0x1d8>
		case 7:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 80016aa:	897b      	ldrh	r3, [r7, #10]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 fc94 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80016b6:	893b      	ldrh	r3, [r7, #8]
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 fc8e 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 fc88 	bl	8001fde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 80016ce:	8b3b      	ldrh	r3, [r7, #24]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fc82 	bl	8001fde <HAL_GPIO_WritePin>
			break;
 80016da:	bf00      	nop
		}
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_MspInit+0x40>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_MspInit+0x40>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_MspInit+0x40>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_MspInit+0x40>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_MspInit+0x40>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_MspInit+0x40>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d113      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x44>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fa6f 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175c:	201c      	movs	r0, #28
 800175e:	f000 fa88 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f929 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017c6:	f000 fd53 	bl	8002270 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20001278 	.word	0x20001278

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f002 fce9 	bl	80041b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000598 	.word	0x20000598

080017e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e00a      	b.n	8001810 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fa:	f3af 8000 	nop.w
 80017fe:	4601      	mov	r1, r0
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf0      	blt.n	80017fa <_read+0x12>
	}

return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e009      	b.n	8001848 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf1      	blt.n	8001834 <_write+0x12>
	}
	return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_close>:

int _close(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001880:	605a      	str	r2, [r3, #4]
	return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <_isatty>:

int _isatty(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return 1;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
	return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f007 f890 	bl	8008a10 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20005000 	.word	0x20005000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000264 	.word	0x20000264
 8001924:	20001578 	.word	0x20001578

08001928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001934:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001936:	e003      	b.n	8001940 <LoopCopyDataInit>

08001938 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800193a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800193c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800193e:	3104      	adds	r1, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001940:	480a      	ldr	r0, [pc, #40]	; (800196c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001944:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001948:	d3f6      	bcc.n	8001938 <CopyDataInit>
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800194c:	e002      	b.n	8001954 <LoopFillZerobss>

0800194e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001950:	f842 3b04 	str.w	r3, [r2], #4

08001954 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001958:	d3f9      	bcc.n	800194e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195a:	f7ff ffe5 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f007 f85d 	bl	8008a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7ff f959 	bl	8000c18 <main>
  bx lr
 8001966:	4770      	bx	lr
  ldr r3, =_sidata
 8001968:	0800a95c 	.word	0x0800a95c
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001970:	20000210 	.word	0x20000210
  ldr r2, =_sbss
 8001974:	20000210 	.word	0x20000210
  ldr r3, = _ebss
 8001978:	20001574 	.word	0x20001574

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f947 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fea2 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f95f 	bl	8001c8e <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f927 	bl	8001c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000028 	.word	0x20000028
 8001a04:	20000030 	.word	0x20000030
 8001a08:	2000002c 	.word	0x2000002c

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000030 	.word	0x20000030
 8001a2c:	200005e0 	.word	0x200005e0

08001a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	200005e0 	.word	0x200005e0

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fff0 	bl	8001a30 <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffe0 	bl	8001a30 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000030 	.word	0x20000030

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4906      	ldr	r1, [pc, #24]	; (8001b24 <__NVIC_EnableIRQ+0x34>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f7ff ff90 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff2d 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff42 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff90 	bl	8001b7c <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5f 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff35 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa2 	bl	8001be0 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b08b      	sub	sp, #44	; 0x2c
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cba:	e169      	b.n	8001f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 8158 	bne.w	8001f8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4a9a      	ldr	r2, [pc, #616]	; (8001f48 <HAL_GPIO_Init+0x2a0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d05e      	beq.n	8001da2 <HAL_GPIO_Init+0xfa>
 8001ce4:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <HAL_GPIO_Init+0x2a0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d875      	bhi.n	8001dd6 <HAL_GPIO_Init+0x12e>
 8001cea:	4a98      	ldr	r2, [pc, #608]	; (8001f4c <HAL_GPIO_Init+0x2a4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d058      	beq.n	8001da2 <HAL_GPIO_Init+0xfa>
 8001cf0:	4a96      	ldr	r2, [pc, #600]	; (8001f4c <HAL_GPIO_Init+0x2a4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d86f      	bhi.n	8001dd6 <HAL_GPIO_Init+0x12e>
 8001cf6:	4a96      	ldr	r2, [pc, #600]	; (8001f50 <HAL_GPIO_Init+0x2a8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d052      	beq.n	8001da2 <HAL_GPIO_Init+0xfa>
 8001cfc:	4a94      	ldr	r2, [pc, #592]	; (8001f50 <HAL_GPIO_Init+0x2a8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d869      	bhi.n	8001dd6 <HAL_GPIO_Init+0x12e>
 8001d02:	4a94      	ldr	r2, [pc, #592]	; (8001f54 <HAL_GPIO_Init+0x2ac>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d04c      	beq.n	8001da2 <HAL_GPIO_Init+0xfa>
 8001d08:	4a92      	ldr	r2, [pc, #584]	; (8001f54 <HAL_GPIO_Init+0x2ac>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d863      	bhi.n	8001dd6 <HAL_GPIO_Init+0x12e>
 8001d0e:	4a92      	ldr	r2, [pc, #584]	; (8001f58 <HAL_GPIO_Init+0x2b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d046      	beq.n	8001da2 <HAL_GPIO_Init+0xfa>
 8001d14:	4a90      	ldr	r2, [pc, #576]	; (8001f58 <HAL_GPIO_Init+0x2b0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d85d      	bhi.n	8001dd6 <HAL_GPIO_Init+0x12e>
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d82a      	bhi.n	8001d74 <HAL_GPIO_Init+0xcc>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d859      	bhi.n	8001dd6 <HAL_GPIO_Init+0x12e>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <HAL_GPIO_Init+0x80>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001da3 	.word	0x08001da3
 8001d2c:	08001d7d 	.word	0x08001d7d
 8001d30:	08001d8f 	.word	0x08001d8f
 8001d34:	08001dd1 	.word	0x08001dd1
 8001d38:	08001dd7 	.word	0x08001dd7
 8001d3c:	08001dd7 	.word	0x08001dd7
 8001d40:	08001dd7 	.word	0x08001dd7
 8001d44:	08001dd7 	.word	0x08001dd7
 8001d48:	08001dd7 	.word	0x08001dd7
 8001d4c:	08001dd7 	.word	0x08001dd7
 8001d50:	08001dd7 	.word	0x08001dd7
 8001d54:	08001dd7 	.word	0x08001dd7
 8001d58:	08001dd7 	.word	0x08001dd7
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001dd7 	.word	0x08001dd7
 8001d64:	08001dd7 	.word	0x08001dd7
 8001d68:	08001dd7 	.word	0x08001dd7
 8001d6c:	08001d85 	.word	0x08001d85
 8001d70:	08001d99 	.word	0x08001d99
 8001d74:	4a79      	ldr	r2, [pc, #484]	; (8001f5c <HAL_GPIO_Init+0x2b4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7a:	e02c      	b.n	8001dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	623b      	str	r3, [r7, #32]
          break;
 8001d82:	e029      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e024      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	3308      	adds	r3, #8
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e01f      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	623b      	str	r3, [r7, #32]
          break;
 8001da0:	e01a      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001daa:	2304      	movs	r3, #4
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e013      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db8:	2308      	movs	r3, #8
 8001dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	611a      	str	r2, [r3, #16]
          break;
 8001dc2:	e009      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	615a      	str	r2, [r3, #20]
          break;
 8001dce:	e003      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x130>
          break;
 8001dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2bff      	cmp	r3, #255	; 0xff
 8001ddc:	d801      	bhi.n	8001de2 <HAL_GPIO_Init+0x13a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e001      	b.n	8001de6 <HAL_GPIO_Init+0x13e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	d802      	bhi.n	8001df4 <HAL_GPIO_Init+0x14c>
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x152>
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	3b08      	subs	r3, #8
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	210f      	movs	r1, #15
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	6a39      	ldr	r1, [r7, #32]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	431a      	orrs	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80b1 	beq.w	8001f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e28:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_GPIO_Init+0x2b8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a4c      	ldr	r2, [pc, #304]	; (8001f60 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_GPIO_Init+0x2b8>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_GPIO_Init+0x2bc>)
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a40      	ldr	r2, [pc, #256]	; (8001f68 <HAL_GPIO_Init+0x2c0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <HAL_GPIO_Init+0x2c4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x1e8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3e      	ldr	r2, [pc, #248]	; (8001f70 <HAL_GPIO_Init+0x2c8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x1e4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3d      	ldr	r2, [pc, #244]	; (8001f74 <HAL_GPIO_Init+0x2cc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x1e0>
 8001e84:	2303      	movs	r3, #3
 8001e86:	e006      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e004      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_GPIO_Init+0x1ee>
 8001e94:	2300      	movs	r3, #0
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4093      	lsls	r3, r2
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea6:	492f      	ldr	r1, [pc, #188]	; (8001f64 <HAL_GPIO_Init+0x2bc>)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	492c      	ldr	r1, [pc, #176]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ece:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4928      	ldr	r1, [pc, #160]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	491e      	ldr	r1, [pc, #120]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4918      	ldr	r1, [pc, #96]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4914      	ldr	r1, [pc, #80]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d021      	beq.n	8001f7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
 8001f44:	e021      	b.n	8001f8a <HAL_GPIO_Init+0x2e2>
 8001f46:	bf00      	nop
 8001f48:	10320000 	.word	0x10320000
 8001f4c:	10310000 	.word	0x10310000
 8001f50:	10220000 	.word	0x10220000
 8001f54:	10210000 	.word	0x10210000
 8001f58:	10120000 	.word	0x10120000
 8001f5c:	10110000 	.word	0x10110000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40010c00 	.word	0x40010c00
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40011400 	.word	0x40011400
 8001f78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	4909      	ldr	r1, [pc, #36]	; (8001fac <HAL_GPIO_Init+0x304>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f47f ae8e 	bne.w	8001cbc <HAL_GPIO_Init+0x14>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	372c      	adds	r7, #44	; 0x2c
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	807b      	strh	r3, [r7, #2]
 8001fea:	4613      	mov	r3, r2
 8001fec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fee:	787b      	ldrb	r3, [r7, #1]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff4:	887a      	ldrh	r2, [r7, #2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ffa:	e003      	b.n	8002004 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	041a      	lsls	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800200e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002010:	b08b      	sub	sp, #44	; 0x2c
 8002012:	af06      	add	r7, sp, #24
 8002014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0fd      	b.n	800221c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f006 fa41 	bl	80084bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fc30 	bl	80048ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	687e      	ldr	r6, [r7, #4]
 8002054:	466d      	mov	r5, sp
 8002056:	f106 0410 	add.w	r4, r6, #16
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	602b      	str	r3, [r5, #0]
 8002062:	1d33      	adds	r3, r6, #4
 8002064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f002 fbfa 	bl	8004860 <USB_CoreInit>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0ce      	b.n	800221c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fc2b 	bl	80048e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e04c      	b.n	800212a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3301      	adds	r3, #1
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b298      	uxth	r0, r3
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	3336      	adds	r3, #54	; 0x36
 80020ce:	4602      	mov	r2, r0
 80020d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3303      	adds	r3, #3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3338      	adds	r3, #56	; 0x38
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	333c      	adds	r3, #60	; 0x3c
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3340      	adds	r3, #64	; 0x40
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	3301      	adds	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3ad      	bcc.n	8002090 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e044      	b.n	80021c4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	f203 1369 	addw	r3, r3, #361	; 0x169
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	3301      	adds	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d3b5      	bcc.n	800213a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	687e      	ldr	r6, [r7, #4]
 80021d6:	466d      	mov	r5, sp
 80021d8:	f106 0410 	add.w	r4, r6, #16
 80021dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	602b      	str	r3, [r5, #0]
 80021e4:	1d33      	adds	r3, r6, #4
 80021e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f002 fb85 	bl	80048f8 <USB_DevInit>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e00d      	b.n	800221c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f004 fb1f 	bl	8006858 <USB_DevDisconnect>

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002224 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_PCD_Start+0x16>
 8002236:	2302      	movs	r3, #2
 8002238:	e016      	b.n	8002268 <HAL_PCD_Start+0x44>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f002 fb1a 	bl	8004880 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800224c:	2101      	movs	r1, #1
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f006 fba7 	bl	80089a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f004 faf3 	bl	8006844 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f004 faf5 	bl	800686c <USB_ReadInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228c:	d102      	bne.n	8002294 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fb61 	bl	8002956 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fae7 	bl	800686c <USB_ReadInterrupts>
 800229e:	4603      	mov	r3, r0
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d112      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022bc:	b292      	uxth	r2, r2
 80022be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f006 f975 	bl	80085b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022c8:	2100      	movs	r1, #0
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f925 	bl	800251a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fac9 	bl	800686c <USB_ReadInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022e4:	d10b      	bne.n	80022fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022f8:	b292      	uxth	r2, r2
 80022fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fab2 	bl	800686c <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d10b      	bne.n	800232c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231c:	b29a      	uxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002326:	b292      	uxth	r2, r2
 8002328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f004 fa9b 	bl	800686c <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002340:	d126      	bne.n	8002390 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0204 	bic.w	r2, r2, #4
 8002354:	b292      	uxth	r2, r2
 8002356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0208 	bic.w	r2, r2, #8
 800236c:	b292      	uxth	r2, r2
 800236e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f006 f956 	bl	8008624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800238a:	b292      	uxth	r2, r2
 800238c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f004 fa69 	bl	800686c <USB_ReadInterrupts>
 800239a:	4603      	mov	r3, r0
 800239c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a4:	f040 8084 	bne.w	80024b0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	e011      	b.n	80023d2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	7ffb      	ldrb	r3, [r7, #31]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	441a      	add	r2, r3
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	b292      	uxth	r2, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	f107 0120 	add.w	r1, r7, #32
 80023c6:	440b      	add	r3, r1
 80023c8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	3301      	adds	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b07      	cmp	r3, #7
 80023d6:	d9ea      	bls.n	80023ae <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	b292      	uxth	r2, r2
 80023ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	b292      	uxth	r2, r2
 8002404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002408:	bf00      	nop
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002412:	b29b      	uxth	r3, r3
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f6      	beq.n	800240a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	77fb      	strb	r3, [r7, #31]
 8002438:	e010      	b.n	800245c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	7ffa      	ldrb	r2, [r7, #31]
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	440a      	add	r2, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	f107 0120 	add.w	r1, r7, #32
 800244e:	440b      	add	r3, r1
 8002450:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002454:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	3301      	adds	r3, #1
 800245a:	77fb      	strb	r3, [r7, #31]
 800245c:	7ffb      	ldrb	r3, [r7, #31]
 800245e:	2b07      	cmp	r3, #7
 8002460:	d9eb      	bls.n	800243a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246a:	b29a      	uxth	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0208 	orr.w	r2, r2, #8
 8002474:	b292      	uxth	r2, r2
 8002476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248c:	b292      	uxth	r2, r2
 800248e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0204 	orr.w	r2, r2, #4
 80024a4:	b292      	uxth	r2, r2
 80024a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f006 f8a0 	bl	80085f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f9d9 	bl	800686c <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c4:	d10e      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024d8:	b292      	uxth	r2, r2
 80024da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f006 f859 	bl	8008596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f004 f9bf 	bl	800686c <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f8:	d10b      	bne.n	8002512 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800250c:	b292      	uxth	r2, r2
 800250e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_PCD_SetAddress+0x1a>
 8002530:	2302      	movs	r3, #2
 8002532:	e013      	b.n	800255c <HAL_PCD_SetAddress+0x42>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f004 f966 	bl	800681e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	70fb      	strb	r3, [r7, #3]
 8002576:	460b      	mov	r3, r1
 8002578:	803b      	strh	r3, [r7, #0]
 800257a:	4613      	mov	r3, r2
 800257c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da0e      	bge.n	80025a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	705a      	strb	r2, [r3, #1]
 80025a6:	e00e      	b.n	80025c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 0207 	and.w	r2, r3, #7
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025d2:	883a      	ldrh	r2, [r7, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	78ba      	ldrb	r2, [r7, #2]
 80025dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025f0:	78bb      	ldrb	r3, [r7, #2]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d102      	bne.n	80025fc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_PCD_EP_Open+0xa6>
 8002606:	2302      	movs	r3, #2
 8002608:	e00e      	b.n	8002628 <HAL_PCD_EP_Open+0xc4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 f98d 	bl	8004938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002626:	7afb      	ldrb	r3, [r7, #11]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800263c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da0e      	bge.n	8002662 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	705a      	strb	r2, [r3, #1]
 8002660:	e00e      	b.n	8002680 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 0207 	and.w	r2, r3, #7
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_PCD_EP_Close+0x6a>
 8002696:	2302      	movs	r3, #2
 8002698:	e00e      	b.n	80026b8 <HAL_PCD_EP_Close+0x88>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fcaf 	bl	800500c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	f003 0207 	and.w	r2, r3, #7
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	b2da      	uxtb	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fe61 	bl	80053e4 <USB_EPStartXfer>
 8002722:	e005      	b.n	8002730 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fe5a 	bl	80053e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 0207 	and.w	r2, r3, #7
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800275c:	681b      	ldr	r3, [r3, #0]
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	460b      	mov	r3, r1
 8002776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	7afb      	ldrb	r3, [r7, #11]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2201      	movs	r2, #1
 80027b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6979      	ldr	r1, [r7, #20]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 fe07 	bl	80053e4 <USB_EPStartXfer>
 80027d6:	e005      	b.n	80027e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6979      	ldr	r1, [r7, #20]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fe00 	bl	80053e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 0207 	and.w	r2, r3, #7
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d901      	bls.n	800280c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e04c      	b.n	80028a6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800280c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	da0e      	bge.n	8002832 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	705a      	strb	r2, [r3, #1]
 8002830:	e00c      	b.n	800284c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_PCD_EP_SetStall+0x7e>
 8002868:	2302      	movs	r3, #2
 800286a:	e01c      	b.n	80028a6 <HAL_PCD_EP_SetStall+0xb8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fed2 	bl	8006624 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	2b00      	cmp	r3, #0
 8002888:	d108      	bne.n	800289c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f003 fff7 	bl	800688a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d901      	bls.n	80028cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e040      	b.n	800294e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	da0e      	bge.n	80028f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	705a      	strb	r2, [r3, #1]
 80028f0:	e00e      	b.n	8002910 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 0207 	and.w	r2, r3, #7
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_PCD_EP_ClrStall+0x82>
 800292c:	2302      	movs	r3, #2
 800292e:	e00e      	b.n	800294e <HAL_PCD_EP_ClrStall+0xa0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fec0 	bl	80066c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b08e      	sub	sp, #56	; 0x38
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800295e:	e2df      	b.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002968:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800296a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002976:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 8158 	bne.w	8002c30 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d152      	bne.n	8002a30 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	81fb      	strh	r3, [r7, #14]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	89fb      	ldrh	r3, [r7, #14]
 80029a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3328      	adds	r3, #40	; 0x28
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	3302      	adds	r3, #2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	441a      	add	r2, r3
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029ee:	2100      	movs	r1, #0
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f005 fdb6 	bl	8008562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 828e 	beq.w	8002f20 <PCD_EP_ISR_Handler+0x5ca>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 8289 	bne.w	8002f20 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b292      	uxth	r2, r2
 8002a22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a2e:	e277      	b.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d034      	beq.n	8002ab4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3306      	adds	r3, #6
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f003 ff4e 	bl	800692a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	823b      	strh	r3, [r7, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	8a3a      	ldrh	r2, [r7, #16]
 8002aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aa8:	b292      	uxth	r2, r2
 8002aaa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f005 fd2b 	bl	8008508 <HAL_PCD_SetupStageCallback>
 8002ab2:	e235      	b.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ab4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f280 8231 	bge.w	8002f20 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aca:	4013      	ands	r3, r2
 8002acc:	83bb      	strh	r3, [r7, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	8bba      	ldrh	r2, [r7, #28]
 8002ad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ad8:	b292      	uxth	r2, r2
 8002ada:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	3306      	adds	r3, #6
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d019      	beq.n	8002b44 <PCD_EP_ISR_Handler+0x1ee>
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	6959      	ldr	r1, [r3, #20]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f003 fefe 	bl	800692a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	441a      	add	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f005 fcf4 	bl	800852c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d112      	bne.n	8002b92 <PCD_EP_ISR_Handler+0x23c>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e02f      	b.n	8002bf2 <PCD_EP_ISR_Handler+0x29c>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b3e      	cmp	r3, #62	; 0x3e
 8002b98:	d813      	bhi.n	8002bc2 <PCD_EP_ISR_Handler+0x26c>
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <PCD_EP_ISR_Handler+0x25e>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	e017      	b.n	8002bf2 <PCD_EP_ISR_Handler+0x29c>
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <PCD_EP_ISR_Handler+0x286>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	827b      	strh	r3, [r7, #18]
 8002c04:	8a7b      	ldrh	r3, [r7, #18]
 8002c06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c0a:	827b      	strh	r3, [r7, #18]
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c12:	827b      	strh	r3, [r7, #18]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	8a7b      	ldrh	r3, [r7, #18]
 8002c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	8013      	strh	r3, [r2, #0]
 8002c2e:	e177      	b.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f280 80ea 	bge.w	8002e20 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c62:	4013      	ands	r3, r2
 8002c64:	853b      	strh	r3, [r7, #40]	; 0x28
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	7b1b      	ldrb	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d122      	bne.n	8002ce2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3306      	adds	r3, #6
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002cc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8087 	beq.w	8002ddc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	6959      	ldr	r1, [r3, #20]
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	88da      	ldrh	r2, [r3, #6]
 8002cda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cdc:	f003 fe25 	bl	800692a <USB_ReadPMA>
 8002ce0:	e07c      	b.n	8002ddc <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d108      	bne.n	8002cfc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cec:	461a      	mov	r2, r3
 8002cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f923 	bl	8002f3c <HAL_PCD_EP_DB_Receive>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002cfa:	e06f      	b.n	8002ddc <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d021      	beq.n	8002d9a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02a      	beq.n	8002ddc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	6959      	ldr	r1, [r3, #20]
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	891a      	ldrh	r2, [r3, #8]
 8002d92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d94:	f003 fdc9 	bl	800692a <USB_ReadPMA>
 8002d98:	e020      	b.n	8002ddc <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	3306      	adds	r3, #6
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	895a      	ldrh	r2, [r3, #10]
 8002dd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dd8:	f003 fda7 	bl	800692a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002de2:	441a      	add	r2, r3
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dee:	441a      	add	r2, r3
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <PCD_EP_ISR_Handler+0x4b0>
 8002dfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d206      	bcs.n	8002e14 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f005 fb8d 	bl	800852c <HAL_PCD_DataOutStageCallback>
 8002e12:	e005      	b.n	8002e20 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 fae2 	bl	80053e4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d07a      	beq.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	843b      	strh	r3, [r7, #32]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	8c3b      	ldrh	r3, [r7, #32]
 8002e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	78db      	ldrb	r3, [r3, #3]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d108      	bne.n	8002e90 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d146      	bne.n	8002f14 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d141      	bne.n	8002f14 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	8bfb      	ldrh	r3, [r7, #30]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d906      	bls.n	8002ed2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	8bfb      	ldrh	r3, [r7, #30]
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	619a      	str	r2, [r3, #24]
 8002ed0:	e002      	b.n	8002ed8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f005 fb3b 	bl	8008562 <HAL_PCD_DataInStageCallback>
 8002eec:	e018      	b.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	8bfb      	ldrh	r3, [r7, #30]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	8bfb      	ldrh	r3, [r7, #30]
 8002f00:	441a      	add	r2, r3
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f002 fa69 	bl	80053e4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002f12:	e005      	b.n	8002f20 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f16:	461a      	mov	r2, r3
 8002f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f91b 	bl	8003156 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f6ff ad17 	blt.w	8002960 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3738      	adds	r7, #56	; 0x38
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d07e      	beq.n	8003052 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	8b7b      	ldrh	r3, [r7, #26]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d306      	bcc.n	8002f96 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	8b7b      	ldrh	r3, [r7, #26]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	619a      	str	r2, [r3, #24]
 8002f94:	e002      	b.n	8002f9c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d123      	bne.n	8002fec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	833b      	strh	r3, [r7, #24]
 8002fc0:	8b3b      	ldrh	r3, [r7, #24]
 8002fc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fc6:	833b      	strh	r3, [r7, #24]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	8b3b      	ldrh	r3, [r7, #24]
 8002fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01f      	beq.n	8003036 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003010:	82fb      	strh	r3, [r7, #22]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	441a      	add	r2, r3
 8003020:	8afb      	ldrh	r3, [r7, #22]
 8003022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003032:	b29b      	uxth	r3, r3
 8003034:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8087 	beq.w	800314c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6959      	ldr	r1, [r3, #20]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	891a      	ldrh	r2, [r3, #8]
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	f003 fc6d 	bl	800692a <USB_ReadPMA>
 8003050:	e07c      	b.n	800314c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	3306      	adds	r3, #6
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	8b7b      	ldrh	r3, [r7, #26]
 8003082:	429a      	cmp	r2, r3
 8003084:	d306      	bcc.n	8003094 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	8b7b      	ldrh	r3, [r7, #26]
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	619a      	str	r2, [r3, #24]
 8003092:	e002      	b.n	800309a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d123      	bne.n	80030ea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030bc:	83fb      	strh	r3, [r7, #30]
 80030be:	8bfb      	ldrh	r3, [r7, #30]
 80030c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030c4:	83fb      	strh	r3, [r7, #30]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	8bfb      	ldrh	r3, [r7, #30]
 80030d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11f      	bne.n	8003134 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	83bb      	strh	r3, [r7, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	8bbb      	ldrh	r3, [r7, #28]
 8003120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003130:	b29b      	uxth	r3, r3
 8003132:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003134:	8b7b      	ldrh	r3, [r7, #26]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6959      	ldr	r1, [r3, #20]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	895a      	ldrh	r2, [r3, #10]
 8003146:	8b7b      	ldrh	r3, [r7, #26]
 8003148:	f003 fbef 	bl	800692a <USB_ReadPMA>
    }
  }

  return count;
 800314c:	8b7b      	ldrh	r3, [r7, #26]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b094      	sub	sp, #80	; 0x50
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8138 	beq.w	80033e0 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003178:	b29b      	uxth	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	3302      	adds	r3, #2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003198:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d907      	bls.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	619a      	str	r2, [r3, #24]
 80031b6:	e002      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d12c      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f005 f9c8 	bl	8008562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 823a 	beq.w	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	82fb      	strh	r3, [r7, #22]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	b29b      	uxth	r3, r3
 800321c:	8013      	strh	r3, [r2, #0]
 800321e:	e218      	b.n	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01f      	beq.n	800326a <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 81ee 	bne.w	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800327e:	441a      	add	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d309      	bcc.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	1ad2      	subs	r2, r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	621a      	str	r2, [r3, #32]
 80032b0:	e015      	b.n	80032de <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80032ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032c8:	e009      	b.n	80032de <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2200      	movs	r2, #0
 80032dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d155      	bne.n	8003392 <HAL_PCD_EP_DB_Transmit+0x23c>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	011a      	lsls	r2, r3, #4
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003310:	2b00      	cmp	r3, #0
 8003312:	d112      	bne.n	800333a <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800331e:	b29a      	uxth	r2, r3
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003332:	b29a      	uxth	r2, r3
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	801a      	strh	r2, [r3, #0]
 8003338:	e047      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x274>
 800333a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333c:	2b3e      	cmp	r3, #62	; 0x3e
 800333e:	d811      	bhi.n	8003364 <HAL_PCD_EP_DB_Transmit+0x20e>
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_PCD_EP_DB_Transmit+0x200>
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	3301      	adds	r3, #1
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	b29b      	uxth	r3, r3
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	b29a      	uxth	r2, r3
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	e032      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x274>
 8003364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_PCD_EP_DB_Transmit+0x224>
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	3b01      	subs	r3, #1
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	b29b      	uxth	r3, r3
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	b29b      	uxth	r3, r3
 8003382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800338a:	b29a      	uxth	r2, r3
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	e01b      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x274>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d117      	bne.n	80033ca <HAL_PCD_EP_DB_Transmit+0x274>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	4413      	add	r3, r2
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	011a      	lsls	r2, r3, #4
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	4413      	add	r3, r2
 80033bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6959      	ldr	r1, [r3, #20]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	891a      	ldrh	r2, [r3, #8]
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f003 fa61 	bl	80068a0 <USB_WritePMA>
 80033de:	e138      	b.n	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	3306      	adds	r3, #6
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003408:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003414:	429a      	cmp	r2, r3
 8003416:	d307      	bcc.n	8003428 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003420:	1ad2      	subs	r2, r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	e002      	b.n	800342e <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12e      	bne.n	8003494 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f005 f890 	bl	8008562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 8102 	bne.w	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800347e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800348a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348e:	b29b      	uxth	r3, r3
 8003490:	8013      	strh	r3, [r2, #0]
 8003492:	e0de      	b.n	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11f      	bne.n	80034de <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80034ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	f040 80b4 	bne.w	8003652 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034f2:	441a      	add	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003500:	441a      	add	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	429a      	cmp	r2, r3
 8003510:	d309      	bcc.n	8003526 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	621a      	str	r2, [r3, #32]
 8003524:	e015      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800352e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800353c:	e009      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	785b      	ldrb	r3, [r3, #1]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d155      	bne.n	800360c <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	63bb      	str	r3, [r7, #56]	; 0x38
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	4413      	add	r3, r2
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	011a      	lsls	r2, r3, #4
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	4413      	add	r3, r2
 8003582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	2b00      	cmp	r3, #0
 800358c:	d112      	bne.n	80035b4 <HAL_PCD_EP_DB_Transmit+0x45e>
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003598:	b29a      	uxth	r2, r3
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	e044      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	2b3e      	cmp	r3, #62	; 0x3e
 80035b8:	d811      	bhi.n	80035de <HAL_PCD_EP_DB_Transmit+0x488>
 80035ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x47a>
 80035ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035cc:	3301      	adds	r3, #1
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	e02f      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80035de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <HAL_PCD_EP_DB_Transmit+0x49e>
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	3b01      	subs	r3, #1
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	029b      	lsls	r3, r3, #10
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003604:	b29a      	uxth	r2, r3
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	801a      	strh	r2, [r3, #0]
 800360a:	e018      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d114      	bne.n	800363e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361c:	b29b      	uxth	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	4413      	add	r3, r2
 8003624:	643b      	str	r3, [r7, #64]	; 0x40
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	011a      	lsls	r2, r3, #4
 800362c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362e:	4413      	add	r3, r2
 8003630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003638:	b29a      	uxth	r2, r3
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6959      	ldr	r1, [r3, #20]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	895a      	ldrh	r2, [r3, #10]
 800364a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364c:	b29b      	uxth	r3, r3
 800364e:	f003 f927 	bl	80068a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366c:	82bb      	strh	r3, [r7, #20]
 800366e:	8abb      	ldrh	r3, [r7, #20]
 8003670:	f083 0310 	eor.w	r3, r3, #16
 8003674:	82bb      	strh	r3, [r7, #20]
 8003676:	8abb      	ldrh	r3, [r7, #20]
 8003678:	f083 0320 	eor.w	r3, r3, #32
 800367c:	82bb      	strh	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	441a      	add	r2, r3
 800368c:	8abb      	ldrh	r3, [r7, #20]
 800368e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369e:	b29b      	uxth	r3, r3
 80036a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3750      	adds	r7, #80	; 0x50
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	4613      	mov	r3, r2
 80036bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e009      	b.n	80036f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036e2:	897a      	ldrh	r2, [r7, #10]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036f6:	893b      	ldrh	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	b29a      	uxth	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	80da      	strh	r2, [r3, #6]
 800370a:	e00b      	b.n	8003724 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2201      	movs	r2, #1
 8003710:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	b29a      	uxth	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b29a      	uxth	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e26c      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8087 	beq.w	800385e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003750:	4b92      	ldr	r3, [pc, #584]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b04      	cmp	r3, #4
 800375a:	d00c      	beq.n	8003776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800375c:	4b8f      	ldr	r3, [pc, #572]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d112      	bne.n	800378e <HAL_RCC_OscConfig+0x5e>
 8003768:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d10b      	bne.n	800378e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	4b89      	ldr	r3, [pc, #548]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d06c      	beq.n	800385c <HAL_RCC_OscConfig+0x12c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d168      	bne.n	800385c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e246      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x76>
 8003798:	4b80      	ldr	r3, [pc, #512]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7f      	ldr	r2, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e02e      	b.n	8003804 <HAL_RCC_OscConfig+0xd4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x98>
 80037ae:	4b7b      	ldr	r3, [pc, #492]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7a      	ldr	r2, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b78      	ldr	r3, [pc, #480]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a77      	ldr	r2, [pc, #476]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e01d      	b.n	8003804 <HAL_RCC_OscConfig+0xd4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0xbc>
 80037d2:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a71      	ldr	r2, [pc, #452]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6e      	ldr	r2, [pc, #440]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0xd4>
 80037ec:	4b6b      	ldr	r3, [pc, #428]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6a      	ldr	r2, [pc, #424]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b68      	ldr	r3, [pc, #416]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a67      	ldr	r2, [pc, #412]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80037fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f910 	bl	8001a30 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe f90c 	bl	8001a30 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1fa      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0xe4>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe f8fc 	bl	8001a30 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe f8f8 	bl	8001a30 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e1e6      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x10c>
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d063      	beq.n	8003932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800386a:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b08      	cmp	r3, #8
 8003880:	d11c      	bne.n	80038bc <HAL_RCC_OscConfig+0x18c>
 8003882:	4b46      	ldr	r3, [pc, #280]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d116      	bne.n	80038bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_RCC_OscConfig+0x176>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e1ba      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a6:	4b3d      	ldr	r3, [pc, #244]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4939      	ldr	r1, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	e03a      	b.n	8003932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fe f8b1 	bl	8001a30 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fe f8ad 	bl	8001a30 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e19b      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4927      	ldr	r1, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]
 8003904:	e015      	b.n	8003932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCC_OscConfig+0x270>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fe f890 	bl	8001a30 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fe f88c 	bl	8001a30 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e17a      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03a      	beq.n	80039b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003946:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <HAL_RCC_OscConfig+0x274>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394c:	f7fe f870 	bl	8001a30 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003954:	f7fe f86c 	bl	8001a30 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e15a      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCC_OscConfig+0x26c>)
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003972:	2001      	movs	r0, #1
 8003974:	f000 faa6 	bl	8003ec4 <RCC_Delay>
 8003978:	e01c      	b.n	80039b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_RCC_OscConfig+0x274>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fe f856 	bl	8001a30 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003986:	e00f      	b.n	80039a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe f852 	bl	8001a30 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d908      	bls.n	80039a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e140      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	42420000 	.word	0x42420000
 80039a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a8:	4b9e      	ldr	r3, [pc, #632]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e9      	bne.n	8003988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a6 	beq.w	8003b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b97      	ldr	r3, [pc, #604]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b94      	ldr	r3, [pc, #592]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a93      	ldr	r2, [pc, #588]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]
 80039de:	4b91      	ldr	r3, [pc, #580]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b8e      	ldr	r3, [pc, #568]	; (8003c28 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fa:	4b8b      	ldr	r3, [pc, #556]	; (8003c28 <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a8a      	ldr	r2, [pc, #552]	; (8003c28 <HAL_RCC_OscConfig+0x4f8>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fe f813 	bl	8001a30 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fe f80f 	bl	8001a30 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e0fd      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x312>
 8003a34:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a7a      	ldr	r2, [pc, #488]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e02d      	b.n	8003a9e <HAL_RCC_OscConfig+0x36e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x334>
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a72      	ldr	r2, [pc, #456]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	e01c      	b.n	8003a9e <HAL_RCC_OscConfig+0x36e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCC_OscConfig+0x356>
 8003a6c:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a6c      	ldr	r2, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	f043 0304 	orr.w	r3, r3, #4
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a69      	ldr	r2, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6213      	str	r3, [r2, #32]
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0x36e>
 8003a86:	4b67      	ldr	r3, [pc, #412]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4a66      	ldr	r2, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6213      	str	r3, [r2, #32]
 8003a92:	4b64      	ldr	r3, [pc, #400]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4a63      	ldr	r2, [pc, #396]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa6:	f7fd ffc3 	bl	8001a30 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd ffbf 	bl	8001a30 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0ab      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	4b57      	ldr	r3, [pc, #348]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ee      	beq.n	8003aae <HAL_RCC_OscConfig+0x37e>
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7fd ffad 	bl	8001a30 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd ffa9 	bl	8001a30 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e095      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af0:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ee      	bne.n	8003ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b48      	ldr	r3, [pc, #288]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	4a47      	ldr	r2, [pc, #284]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8081 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d061      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d146      	bne.n	8003bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_OscConfig+0x4fc>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fd ff7d 	bl	8001a30 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3a:	f7fd ff79 	bl	8001a30 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e067      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4c:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d108      	bne.n	8003b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	492d      	ldr	r1, [pc, #180]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a19      	ldr	r1, [r3, #32]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	430b      	orrs	r3, r1
 8003b86:	4927      	ldr	r1, [pc, #156]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <HAL_RCC_OscConfig+0x4fc>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fd ff4d 	bl	8001a30 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fd ff49 	bl	8001a30 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e037      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bac:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x46a>
 8003bb8:	e02f      	b.n	8003c1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <HAL_RCC_OscConfig+0x4fc>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd ff36 	bl	8001a30 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd ff32 	bl	8001a30 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e020      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x498>
 8003be6:	e018      	b.n	8003c1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e013      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	42420060 	.word	0x42420060

08003c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0d0      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d910      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0207 	bic.w	r2, r3, #7
 8003c5a:	4965      	ldr	r1, [pc, #404]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b8      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca4:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	494d      	ldr	r1, [pc, #308]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d040      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d115      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e07f      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e073      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e06b      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4936      	ldr	r1, [pc, #216]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fd fe86 	bl	8001a30 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fd fe82 	bl	8001a30 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e053      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d210      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4922      	ldr	r1, [pc, #136]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e032      	b.n	8003de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4916      	ldr	r1, [pc, #88]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	490e      	ldr	r1, [pc, #56]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dbe:	f000 f821 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	490a      	ldr	r1, [pc, #40]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	5ccb      	ldrb	r3, [r1, r3]
 8003dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1cc>)
 8003dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_ClockConfig+0x1d0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fde4 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40022000 	.word	0x40022000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800a790 	.word	0x0800a790
 8003dfc:	20000028 	.word	0x20000028
 8003e00:	2000002c 	.word	0x2000002c

08003e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b490      	push	{r4, r7}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e0c:	1d3c      	adds	r4, r7, #4
 8003e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e14:	f240 2301 	movw	r3, #513	; 0x201
 8003e18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x40>
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x46>
 8003e42:	e02d      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e46:	623b      	str	r3, [r7, #32]
      break;
 8003e48:	e02d      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	0c9b      	lsrs	r3, r3, #18
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e56:	4413      	add	r3, r2
 8003e58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0c5b      	lsrs	r3, r3, #17
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e76:	4413      	add	r3, r2
 8003e78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e82:	fb02 f203 	mul.w	r2, r2, r3
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8e:	e004      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	623b      	str	r3, [r7, #32]
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea2:	623b      	str	r3, [r7, #32]
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3728      	adds	r7, #40	; 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc90      	pop	{r4, r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	0800a72c 	.word	0x0800a72c
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	003d0900 	.word	0x003d0900

08003ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <RCC_Delay+0x34>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <RCC_Delay+0x38>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0a5b      	lsrs	r3, r3, #9
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ee0:	bf00      	nop
  }
  while (Delay --);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	60fa      	str	r2, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f9      	bne.n	8003ee0 <RCC_Delay+0x1c>
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	20000028 	.word	0x20000028
 8003efc:	10624dd3 	.word	0x10624dd3

08003f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d07d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2c:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f36:	61d3      	str	r3, [r2, #28]
 8003f38:	4b49      	ldr	r3, [pc, #292]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b46      	ldr	r3, [pc, #280]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d118      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a42      	ldr	r2, [pc, #264]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f60:	f7fd fd66 	bl	8001a30 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	e008      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fd fd62 	bl	8001a30 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e06d      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d027      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa4:	4b2e      	ldr	r3, [pc, #184]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fae:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fba:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d014      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fca:	f7fd fd31 	bl	8001a30 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fd fd2d 	bl	8001a30 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e036      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0ee      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4917      	ldr	r1, [pc, #92]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	4313      	orrs	r3, r2
 8004004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	4a13      	ldr	r2, [pc, #76]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004024:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	490b      	ldr	r1, [pc, #44]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	42420440 	.word	0x42420440

0800406c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e041      	b.n	8004102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fb48 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f000 fa70 	bl	8004590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d001      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e03a      	b.n	800419a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_TIM_Base_Start_IT+0x98>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x58>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d009      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x58>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x58>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <HAL_TIM_Base_Start_IT+0xa0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d111      	bne.n	8004188 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d010      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	e007      	b.n	8004198 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800

080041b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0202 	mvn.w	r2, #2
 80041dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9b1 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f9a4 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f9b3 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0204 	mvn.w	r2, #4
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f987 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f97a 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f989 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b08      	cmp	r3, #8
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b08      	cmp	r3, #8
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0208 	mvn.w	r2, #8
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2204      	movs	r2, #4
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f95d 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f950 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f95f 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0210 	mvn.w	r2, #16
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2208      	movs	r2, #8
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f933 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f926 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f935 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0201 	mvn.w	r2, #1
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fc fc86 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d107      	bne.n	8004360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa77 	bl	800484e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d10e      	bne.n	800438c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d107      	bne.n	800438c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8f9 	bl	800457e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b20      	cmp	r3, #32
 8004398:	d10e      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0220 	mvn.w	r2, #32
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa42 	bl	800483c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x18>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0b3      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x180>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d03e      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xd0>
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004416:	f200 8087 	bhi.w	8004528 <HAL_TIM_ConfigClockSource+0x168>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	f000 8085 	beq.w	800452c <HAL_TIM_ConfigClockSource+0x16c>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d87f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004428:	2b70      	cmp	r3, #112	; 0x70
 800442a:	d01a      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0xa2>
 800442c:	2b70      	cmp	r3, #112	; 0x70
 800442e:	d87b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004430:	2b60      	cmp	r3, #96	; 0x60
 8004432:	d050      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x116>
 8004434:	2b60      	cmp	r3, #96	; 0x60
 8004436:	d877      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004438:	2b50      	cmp	r3, #80	; 0x50
 800443a:	d03c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0xf6>
 800443c:	2b50      	cmp	r3, #80	; 0x50
 800443e:	d873      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d058      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x136>
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d86f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004448:	2b30      	cmp	r3, #48	; 0x30
 800444a:	d064      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
 800444c:	2b30      	cmp	r3, #48	; 0x30
 800444e:	d86b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004450:	2b20      	cmp	r3, #32
 8004452:	d060      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d867      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05c      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
 800445c:	2b10      	cmp	r3, #16
 800445e:	d05a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004460:	e062      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f000 f966 	bl	8004742 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004484:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e04e      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6899      	ldr	r1, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f000 f94f 	bl	8004742 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b2:	609a      	str	r2, [r3, #8]
      break;
 80044b4:	e03b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 f8c6 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2150      	movs	r1, #80	; 0x50
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f91d 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80044d4:	e02b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f000 f8e4 	bl	80046b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2160      	movs	r1, #96	; 0x60
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f90d 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80044f4:	e01b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	461a      	mov	r2, r3
 8004504:	f000 f8a6 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f8fd 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 8004514:	e00b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f000 f8f4 	bl	800470e <TIM_ITRx_SetConfig>
        break;
 8004526:	e002      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800452c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a29      	ldr	r2, [pc, #164]	; (8004648 <TIM_Base_SetConfig+0xb8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <TIM_Base_SetConfig+0x30>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d007      	beq.n	80045c0 <TIM_Base_SetConfig+0x30>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a26      	ldr	r2, [pc, #152]	; (800464c <TIM_Base_SetConfig+0xbc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_Base_SetConfig+0x30>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a25      	ldr	r2, [pc, #148]	; (8004650 <TIM_Base_SetConfig+0xc0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d108      	bne.n	80045d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <TIM_Base_SetConfig+0xb8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_Base_SetConfig+0x62>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d007      	beq.n	80045f2 <TIM_Base_SetConfig+0x62>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <TIM_Base_SetConfig+0xbc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_Base_SetConfig+0x62>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <TIM_Base_SetConfig+0xc0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d108      	bne.n	8004604 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a07      	ldr	r2, [pc, #28]	; (8004648 <TIM_Base_SetConfig+0xb8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d103      	bne.n	8004638 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	615a      	str	r2, [r3, #20]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800

08004654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 0210 	bic.w	r2, r3, #16
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	031b      	lsls	r3, r3, #12
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	f043 0307 	orr.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004742:	b480      	push	{r7}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	431a      	orrs	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e046      	b.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d009      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a10      	ldr	r2, [pc, #64]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10c      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800

0800483c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004860:	b084      	sub	sp, #16
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	f107 0014 	add.w	r0, r7, #20
 800486e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	b004      	add	sp, #16
 800487e:	4770      	bx	lr

08004880 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004890:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004894:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4013      	ands	r3, r2
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048f8:	b084      	sub	sp, #16
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	f107 0014 	add.w	r0, r7, #20
 8004906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	b004      	add	sp, #16
 8004936:	4770      	bx	lr

08004938 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004938:	b480      	push	{r7}
 800493a:	b09b      	sub	sp, #108	; 0x6c
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	78db      	ldrb	r3, [r3, #3]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d81f      	bhi.n	80049aa <USB_ActivateEndpoint+0x72>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <USB_ActivateEndpoint+0x38>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004981 	.word	0x08004981
 8004974:	0800499d 	.word	0x0800499d
 8004978:	080049b3 	.word	0x080049b3
 800497c:	0800498f 	.word	0x0800498f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004980:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004988:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800498c:	e012      	b.n	80049b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800498e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004992:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004996:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800499a:	e00b      	b.n	80049b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800499c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049a8:	e004      	b.n	80049b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80049b0:	e000      	b.n	80049b4 <USB_ActivateEndpoint+0x7c>
      break;
 80049b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	7b1b      	ldrb	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 8149 	bne.w	8004cb8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8084 	beq.w	8004b38 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4413      	add	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	011a      	lsls	r2, r3, #4
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	88db      	ldrh	r3, [r3, #6]
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	81fb      	strh	r3, [r7, #14]
 8004a72:	89fb      	ldrh	r3, [r7, #14]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <USB_ActivateEndpoint+0x17c>
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	81bb      	strh	r3, [r7, #12]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	89bb      	ldrh	r3, [r7, #12]
 8004aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d020      	beq.n	8004afe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad2:	813b      	strh	r3, [r7, #8]
 8004ad4:	893b      	ldrh	r3, [r7, #8]
 8004ad6:	f083 0320 	eor.w	r3, r3, #32
 8004ada:	813b      	strh	r3, [r7, #8]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	893b      	ldrh	r3, [r7, #8]
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]
 8004afc:	e27f      	b.n	8004ffe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	897b      	ldrh	r3, [r7, #10]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
 8004b36:	e262      	b.n	8004ffe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	4413      	add	r3, r2
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	011a      	lsls	r2, r3, #4
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	88db      	ldrh	r3, [r3, #6]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	4413      	add	r3, r2
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	011a      	lsls	r2, r3, #4
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	4413      	add	r3, r2
 8004b8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d112      	bne.n	8004bbe <USB_ActivateEndpoint+0x286>
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e02f      	b.n	8004c1e <USB_ActivateEndpoint+0x2e6>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc4:	d813      	bhi.n	8004bee <USB_ActivateEndpoint+0x2b6>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <USB_ActivateEndpoint+0x2a8>
 8004bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bdc:	3301      	adds	r3, #1
 8004bde:	663b      	str	r3, [r7, #96]	; 0x60
 8004be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e017      	b.n	8004c1e <USB_ActivateEndpoint+0x2e6>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <USB_ActivateEndpoint+0x2d0>
 8004c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c04:	3b01      	subs	r3, #1
 8004c06:	663b      	str	r3, [r7, #96]	; 0x60
 8004c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	83fb      	strh	r3, [r7, #30]
 8004c2c:	8bfb      	ldrh	r3, [r7, #30]
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01b      	beq.n	8004c6e <USB_ActivateEndpoint+0x336>
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	83bb      	strh	r3, [r7, #28]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	8bbb      	ldrh	r3, [r7, #28]
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c84:	837b      	strh	r3, [r7, #26]
 8004c86:	8b7b      	ldrh	r3, [r7, #26]
 8004c88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c8c:	837b      	strh	r3, [r7, #26]
 8004c8e:	8b7b      	ldrh	r3, [r7, #26]
 8004c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c94:	837b      	strh	r3, [r7, #26]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	8b7b      	ldrh	r3, [r7, #26]
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]
 8004cb6:	e1a2      	b.n	8004ffe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d04:	4413      	add	r3, r2
 8004d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	011a      	lsls	r2, r3, #4
 8004d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d16:	657b      	str	r3, [r7, #84]	; 0x54
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	891b      	ldrh	r3, [r3, #8]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d38:	4413      	add	r3, r2
 8004d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	011a      	lsls	r2, r3, #4
 8004d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	895b      	ldrh	r3, [r3, #10]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 8091 	bne.w	8004e88 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01b      	beq.n	8004db6 <USB_ActivateEndpoint+0x47e>
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d94:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	873b      	strh	r3, [r7, #56]	; 0x38
 8004dc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01b      	beq.n	8004e06 <USB_ActivateEndpoint+0x4ce>
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e64:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
 8004e86:	e0ba      	b.n	8004ffe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01d      	beq.n	8004ee0 <USB_ActivateEndpoint+0x5a8>
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ef0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01d      	beq.n	8004f38 <USB_ActivateEndpoint+0x600>
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	78db      	ldrb	r3, [r3, #3]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d024      	beq.n	8004f8a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f5e:	f083 0320 	eor.w	r3, r3, #32
 8004f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
 8004f88:	e01d      	b.n	8004fc6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004ffe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005002:	4618      	mov	r0, r3
 8005004:	376c      	adds	r7, #108	; 0x6c
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b08d      	sub	sp, #52	; 0x34
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	7b1b      	ldrb	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 808e 	bne.w	800513c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d044      	beq.n	80050b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	81bb      	strh	r3, [r7, #12]
 8005036:	89bb      	ldrh	r3, [r7, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <USB_DeactivateEndpoint+0x6c>
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	817b      	strh	r3, [r7, #10]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	897b      	ldrh	r3, [r7, #10]
 8005064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005074:	b29b      	uxth	r3, r3
 8005076:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508e:	813b      	strh	r3, [r7, #8]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	893b      	ldrh	r3, [r7, #8]
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]
 80050b0:	e192      	b.n	80053d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	827b      	strh	r3, [r7, #18]
 80050c0:	8a7b      	ldrh	r3, [r7, #18]
 80050c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01b      	beq.n	8005102 <USB_DeactivateEndpoint+0xf6>
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	823b      	strh	r3, [r7, #16]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	8a3b      	ldrh	r3, [r7, #16]
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	81fb      	strh	r3, [r7, #14]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	89fb      	ldrh	r3, [r7, #14]
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
 800513a:	e14d      	b.n	80053d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 80a5 	bne.w	8005290 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	843b      	strh	r3, [r7, #32]
 8005154:	8c3b      	ldrh	r3, [r7, #32]
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01b      	beq.n	8005196 <USB_DeactivateEndpoint+0x18a>
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005174:	83fb      	strh	r3, [r7, #30]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800518e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	83bb      	strh	r3, [r7, #28]
 80051a4:	8bbb      	ldrh	r3, [r7, #28]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01b      	beq.n	80051e6 <USB_DeactivateEndpoint+0x1da>
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c4:	837b      	strh	r3, [r7, #26]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	441a      	add	r2, r3
 80051d0:	8b7b      	ldrh	r3, [r7, #26]
 80051d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	833b      	strh	r3, [r7, #24]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	441a      	add	r2, r3
 8005208:	8b3b      	ldrh	r3, [r7, #24]
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	82fb      	strh	r3, [r7, #22]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8afb      	ldrh	r3, [r7, #22]
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526c:	82bb      	strh	r3, [r7, #20]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	8abb      	ldrh	r3, [r7, #20]
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
 800528e:	e0a3      	b.n	80053d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800529e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01b      	beq.n	80052e0 <USB_DeactivateEndpoint+0x2d4>
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80052ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <USB_DeactivateEndpoint+0x324>
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	b29b      	uxth	r3, r3
 8005366:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3734      	adds	r7, #52	; 0x34
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b0c4      	sub	sp, #272	; 0x110
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	6018      	str	r0, [r3, #0]
 80053ee:	463b      	mov	r3, r7
 80053f0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 8557 	bne.w	8005eac <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d905      	bls.n	800541a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005418:	e004      	b.n	8005424 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	7b1b      	ldrb	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d12c      	bne.n	8005488 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6959      	ldr	r1, [r3, #20]
 8005434:	463b      	mov	r3, r7
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	88da      	ldrh	r2, [r3, #6]
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	b29b      	uxth	r3, r3
 8005440:	1d38      	adds	r0, r7, #4
 8005442:	6800      	ldr	r0, [r0, #0]
 8005444:	f001 fa2c 	bl	80068a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005456:	b29b      	uxth	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4413      	add	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	011a      	lsls	r2, r3, #4
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547a:	b29a      	uxth	r2, r3
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	f000 bcdd 	b.w	8005e42 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	78db      	ldrb	r3, [r3, #3]
 800548e:	2b02      	cmp	r3, #2
 8005490:	f040 8347 	bne.w	8005b22 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	f240 82eb 	bls.w	8005a7c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054ea:	463b      	mov	r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f4:	1ad2      	subs	r2, r2, r3
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	463b      	mov	r3, r7
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8159 	beq.w	80057ca <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	463b      	mov	r3, r7
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d164      	bne.n	80055f2 <USB_EPStartXfer+0x20e>
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	4413      	add	r3, r2
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005540:	463b      	mov	r3, r7
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	011a      	lsls	r2, r3, #4
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	4413      	add	r3, r2
 800554c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
 8005552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d112      	bne.n	8005580 <USB_EPStartXfer+0x19c>
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005564:	b29a      	uxth	r2, r3
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e054      	b.n	800562a <USB_EPStartXfer+0x246>
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	2b3e      	cmp	r3, #62	; 0x3e
 8005586:	d817      	bhi.n	80055b8 <USB_EPStartXfer+0x1d4>
 8005588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <USB_EPStartXfer+0x1c4>
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a2:	3301      	adds	r3, #1
 80055a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	029b      	lsls	r3, r3, #10
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	e038      	b.n	800562a <USB_EPStartXfer+0x246>
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <USB_EPStartXfer+0x1f4>
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055dc:	b29b      	uxth	r3, r3
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e01b      	b.n	800562a <USB_EPStartXfer+0x246>
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d116      	bne.n	800562a <USB_EPStartXfer+0x246>
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	4413      	add	r3, r2
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	463b      	mov	r3, r7
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	011a      	lsls	r2, r3, #4
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	4413      	add	r3, r2
 800561a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800561e:	633b      	str	r3, [r7, #48]	; 0x30
 8005620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005624:	b29a      	uxth	r2, r3
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	895b      	ldrh	r3, [r3, #10]
 8005630:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6959      	ldr	r1, [r3, #20]
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	b29b      	uxth	r3, r3
 8005640:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005644:	1d38      	adds	r0, r7, #4
 8005646:	6800      	ldr	r0, [r0, #0]
 8005648:	f001 f92a 	bl	80068a0 <USB_WritePMA>
            ep->xfer_buff += len;
 800564c:	463b      	mov	r3, r7
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005656:	441a      	add	r2, r3
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d909      	bls.n	8005682 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005678:	1ad2      	subs	r2, r2, r3
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	621a      	str	r2, [r3, #32]
 8005680:	e008      	b.n	8005694 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2200      	movs	r2, #0
 8005692:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d164      	bne.n	8005768 <USB_EPStartXfer+0x384>
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	1d3b      	adds	r3, r7, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d112      	bne.n	80056f6 <USB_EPStartXfer+0x312>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056da:	b29a      	uxth	r2, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e057      	b.n	80057a6 <USB_EPStartXfer+0x3c2>
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	2b3e      	cmp	r3, #62	; 0x3e
 80056fc:	d817      	bhi.n	800572e <USB_EPStartXfer+0x34a>
 80056fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <USB_EPStartXfer+0x33a>
 8005714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005718:	3301      	adds	r3, #1
 800571a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800571e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005722:	b29b      	uxth	r3, r3
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	b29a      	uxth	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e03b      	b.n	80057a6 <USB_EPStartXfer+0x3c2>
 800572e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <USB_EPStartXfer+0x36a>
 8005744:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005748:	3b01      	subs	r3, #1
 800574a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800574e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005752:	b29b      	uxth	r3, r3
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	b29b      	uxth	r3, r3
 8005758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005760:	b29a      	uxth	r2, r3
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e01e      	b.n	80057a6 <USB_EPStartXfer+0x3c2>
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d119      	bne.n	80057a6 <USB_EPStartXfer+0x3c2>
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	4413      	add	r3, r2
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	4413      	add	r3, r2
 8005796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800579a:	623b      	str	r3, [r7, #32]
 800579c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057a6:	463b      	mov	r3, r7
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	891b      	ldrh	r3, [r3, #8]
 80057ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6959      	ldr	r1, [r3, #20]
 80057b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057c0:	1d38      	adds	r0, r7, #4
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	f001 f86c 	bl	80068a0 <USB_WritePMA>
 80057c8:	e33b      	b.n	8005e42 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057ca:	463b      	mov	r3, r7
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d164      	bne.n	800589e <USB_EPStartXfer+0x4ba>
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	4413      	add	r3, r2
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	011a      	lsls	r2, r3, #4
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d112      	bne.n	800582c <USB_EPStartXfer+0x448>
 8005806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005810:	b29a      	uxth	r2, r3
 8005812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005824:	b29a      	uxth	r2, r3
 8005826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	e057      	b.n	80058dc <USB_EPStartXfer+0x4f8>
 800582c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005830:	2b3e      	cmp	r3, #62	; 0x3e
 8005832:	d817      	bhi.n	8005864 <USB_EPStartXfer+0x480>
 8005834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800583e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <USB_EPStartXfer+0x470>
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584e:	3301      	adds	r3, #1
 8005850:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29a      	uxth	r2, r3
 800585e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e03b      	b.n	80058dc <USB_EPStartXfer+0x4f8>
 8005864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800586e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <USB_EPStartXfer+0x4a0>
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587e:	3b01      	subs	r3, #1
 8005880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005896:	b29a      	uxth	r2, r3
 8005898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e01e      	b.n	80058dc <USB_EPStartXfer+0x4f8>
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d119      	bne.n	80058dc <USB_EPStartXfer+0x4f8>
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	657b      	str	r3, [r7, #84]	; 0x54
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058bc:	4413      	add	r3, r2
 80058be:	657b      	str	r3, [r7, #84]	; 0x54
 80058c0:	463b      	mov	r3, r7
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d0:	653b      	str	r3, [r7, #80]	; 0x50
 80058d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	891b      	ldrh	r3, [r3, #8]
 80058e2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6959      	ldr	r1, [r3, #20]
 80058ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058f6:	1d38      	adds	r0, r7, #4
 80058f8:	6800      	ldr	r0, [r0, #0]
 80058fa:	f000 ffd1 	bl	80068a0 <USB_WritePMA>
            ep->xfer_buff += len;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005908:	441a      	add	r2, r3
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6a1a      	ldr	r2, [r3, #32]
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	429a      	cmp	r2, r3
 800591e:	d909      	bls.n	8005934 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	621a      	str	r2, [r3, #32]
 8005932:	e008      	b.n	8005946 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005946:	1d3b      	adds	r3, r7, #4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
 800594c:	463b      	mov	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d164      	bne.n	8005a20 <USB_EPStartXfer+0x63c>
 8005956:	1d3b      	adds	r3, r7, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	4413      	add	r3, r2
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	011a      	lsls	r2, r3, #4
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	4413      	add	r3, r2
 800597a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d112      	bne.n	80059ae <USB_EPStartXfer+0x5ca>
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005992:	b29a      	uxth	r2, r3
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e054      	b.n	8005a58 <USB_EPStartXfer+0x674>
 80059ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b2:	2b3e      	cmp	r3, #62	; 0x3e
 80059b4:	d817      	bhi.n	80059e6 <USB_EPStartXfer+0x602>
 80059b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <USB_EPStartXfer+0x5f2>
 80059cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059d0:	3301      	adds	r3, #1
 80059d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059da:	b29b      	uxth	r3, r3
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e038      	b.n	8005a58 <USB_EPStartXfer+0x674>
 80059e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <USB_EPStartXfer+0x622>
 80059fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a00:	3b01      	subs	r3, #1
 8005a02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	029b      	lsls	r3, r3, #10
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e01b      	b.n	8005a58 <USB_EPStartXfer+0x674>
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d116      	bne.n	8005a58 <USB_EPStartXfer+0x674>
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a38:	4413      	add	r3, r2
 8005a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	011a      	lsls	r2, r3, #4
 8005a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a58:	463b      	mov	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	895b      	ldrh	r3, [r3, #10]
 8005a5e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6959      	ldr	r1, [r3, #20]
 8005a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005a72:	1d38      	adds	r0, r7, #4
 8005a74:	6800      	ldr	r0, [r0, #0]
 8005a76:	f000 ff13 	bl	80068a0 <USB_WritePMA>
 8005a7a:	e1e2      	b.n	8005e42 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ade:	4413      	add	r3, r2
 8005ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005afc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005afe:	463b      	mov	r3, r7
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	891b      	ldrh	r3, [r3, #8]
 8005b04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6959      	ldr	r1, [r3, #20]
 8005b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b18:	1d38      	adds	r0, r7, #4
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	f000 fec0 	bl	80068a0 <USB_WritePMA>
 8005b20:	e18f      	b.n	8005e42 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 808f 	beq.w	8005c5c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d164      	bne.n	8005c18 <USB_EPStartXfer+0x834>
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	673b      	str	r3, [r7, #112]	; 0x70
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b62:	4413      	add	r3, r2
 8005b64:	673b      	str	r3, [r7, #112]	; 0x70
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d112      	bne.n	8005ba6 <USB_EPStartXfer+0x7c2>
 8005b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	e054      	b.n	8005c50 <USB_EPStartXfer+0x86c>
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005baa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bac:	d817      	bhi.n	8005bde <USB_EPStartXfer+0x7fa>
 8005bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <USB_EPStartXfer+0x7ea>
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	029b      	lsls	r3, r3, #10
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e038      	b.n	8005c50 <USB_EPStartXfer+0x86c>
 8005bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d104      	bne.n	8005bfe <USB_EPStartXfer+0x81a>
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e01b      	b.n	8005c50 <USB_EPStartXfer+0x86c>
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d116      	bne.n	8005c50 <USB_EPStartXfer+0x86c>
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c30:	4413      	add	r3, r2
 8005c32:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	011a      	lsls	r2, r3, #4
 8005c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c3e:	4413      	add	r3, r2
 8005c40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c44:	677b      	str	r3, [r7, #116]	; 0x74
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	895b      	ldrh	r3, [r3, #10]
 8005c56:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005c5a:	e097      	b.n	8005d8c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d168      	bne.n	8005d38 <USB_EPStartXfer+0x954>
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c7e:	4413      	add	r3, r2
 8005c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c84:	463b      	mov	r3, r7
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	011a      	lsls	r2, r3, #4
 8005c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d112      	bne.n	8005cc6 <USB_EPStartXfer+0x8e2>
 8005ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	e05d      	b.n	8005d82 <USB_EPStartXfer+0x99e>
 8005cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cca:	2b3e      	cmp	r3, #62	; 0x3e
 8005ccc:	d817      	bhi.n	8005cfe <USB_EPStartXfer+0x91a>
 8005cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <USB_EPStartXfer+0x90a>
 8005ce4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e041      	b.n	8005d82 <USB_EPStartXfer+0x99e>
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <USB_EPStartXfer+0x93a>
 8005d14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e024      	b.n	8005d82 <USB_EPStartXfer+0x99e>
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d11f      	bne.n	8005d82 <USB_EPStartXfer+0x99e>
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	011a      	lsls	r2, r3, #4
 8005d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	891b      	ldrh	r3, [r3, #8]
 8005d88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6959      	ldr	r1, [r3, #20]
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d9c:	1d38      	adds	r0, r7, #4
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	f000 fd7e 	bl	80068a0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005da4:	463b      	mov	r3, r7
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d122      	bne.n	8005df4 <USB_EPStartXfer+0xa10>
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	441a      	add	r2, r3
 8005dda:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
 8005df2:	e026      	b.n	8005e42 <USB_EPStartXfer+0xa5e>
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d121      	bne.n	8005e42 <USB_EPStartXfer+0xa5e>
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	463b      	mov	r3, r7
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e18:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005e1c:	1d3b      	adds	r3, r7, #4
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f107 020e 	add.w	r2, r7, #14
 8005e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e60:	8013      	strh	r3, [r2, #0]
 8005e62:	f107 030e 	add.w	r3, r7, #14
 8005e66:	f107 020e 	add.w	r2, r7, #14
 8005e6a:	8812      	ldrh	r2, [r2, #0]
 8005e6c:	f082 0210 	eor.w	r2, r2, #16
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	f107 030e 	add.w	r3, r7, #14
 8005e76:	f107 020e 	add.w	r2, r7, #14
 8005e7a:	8812      	ldrh	r2, [r2, #0]
 8005e7c:	f082 0220 	eor.w	r2, r2, #32
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	f107 030e 	add.w	r3, r7, #14
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
 8005eaa:	e3b5      	b.n	8006618 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005eac:	463b      	mov	r3, r7
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	7b1b      	ldrb	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 8090 	bne.w	8005fd8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d90e      	bls.n	8005ee6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	463b      	mov	r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	619a      	str	r2, [r3, #24]
 8005ee4:	e008      	b.n	8005ef8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f10:	4413      	add	r3, r2
 8005f12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	011a      	lsls	r2, r3, #4
 8005f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f22:	4413      	add	r3, r2
 8005f24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d116      	bne.n	8005f62 <USB_EPStartXfer+0xb7e>
 8005f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e32c      	b.n	80065bc <USB_EPStartXfer+0x11d8>
 8005f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f66:	2b3e      	cmp	r3, #62	; 0x3e
 8005f68:	d818      	bhi.n	8005f9c <USB_EPStartXfer+0xbb8>
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <USB_EPStartXfer+0xba6>
 8005f80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f84:	3301      	adds	r3, #1
 8005f86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	029b      	lsls	r3, r3, #10
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	e30f      	b.n	80065bc <USB_EPStartXfer+0x11d8>
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <USB_EPStartXfer+0xbd8>
 8005fb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e2f1      	b.n	80065bc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	78db      	ldrb	r3, [r3, #3]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	f040 818f 	bne.w	8006302 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d175      	bne.n	80060da <USB_EPStartXfer+0xcf6>
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006006:	4413      	add	r3, r2
 8006008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800600c:	463b      	mov	r3, r7
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006018:	4413      	add	r3, r2
 800601a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800601e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d116      	bne.n	800605a <USB_EPStartXfer+0xc76>
 800602c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006038:	b29a      	uxth	r2, r3
 800603a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	e065      	b.n	8006126 <USB_EPStartXfer+0xd42>
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b3e      	cmp	r3, #62	; 0x3e
 8006062:	d81a      	bhi.n	800609a <USB_EPStartXfer+0xcb6>
 8006064:	463b      	mov	r3, r7
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006070:	463b      	mov	r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <USB_EPStartXfer+0xca4>
 800607e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006082:	3301      	adds	r3, #1
 8006084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006088:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e045      	b.n	8006126 <USB_EPStartXfer+0xd42>
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <USB_EPStartXfer+0xcda>
 80060b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060b8:	3b01      	subs	r3, #1
 80060ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e025      	b.n	8006126 <USB_EPStartXfer+0xd42>
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d120      	bne.n	8006126 <USB_EPStartXfer+0xd42>
 80060e4:	1d3b      	adds	r3, r7, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060fc:	4413      	add	r3, r2
 80060fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	011a      	lsls	r2, r3, #4
 800610a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800610e:	4413      	add	r3, r2
 8006110:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006118:	463b      	mov	r3, r7
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d175      	bne.n	8006224 <USB_EPStartXfer+0xe40>
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006150:	4413      	add	r3, r2
 8006152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	011a      	lsls	r2, r3, #4
 800615e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006162:	4413      	add	r3, r2
 8006164:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d116      	bne.n	80061a4 <USB_EPStartXfer+0xdc0>
 8006176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e061      	b.n	8006268 <USB_EPStartXfer+0xe84>
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b3e      	cmp	r3, #62	; 0x3e
 80061ac:	d81a      	bhi.n	80061e4 <USB_EPStartXfer+0xe00>
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <USB_EPStartXfer+0xdee>
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061cc:	3301      	adds	r3, #1
 80061ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	029b      	lsls	r3, r3, #10
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e041      	b.n	8006268 <USB_EPStartXfer+0xe84>
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <USB_EPStartXfer+0xe24>
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	3b01      	subs	r3, #1
 8006204:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	b29b      	uxth	r3, r3
 800620e:	029b      	lsls	r3, r3, #10
 8006210:	b29b      	uxth	r3, r3
 8006212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621a:	b29a      	uxth	r2, r3
 800621c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e021      	b.n	8006268 <USB_EPStartXfer+0xe84>
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d11c      	bne.n	8006268 <USB_EPStartXfer+0xe84>
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800623e:	4413      	add	r3, r2
 8006240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	011a      	lsls	r2, r3, #4
 800624c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006250:	4413      	add	r3, r2
 8006252:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006266:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006268:	463b      	mov	r3, r7
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 81a4 	beq.w	80065bc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	463b      	mov	r3, r7
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006288:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800628c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <USB_EPStartXfer+0xebc>
 8006294:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10d      	bne.n	80062bc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8187 	bne.w	80065bc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 8180 	bne.w	80065bc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80062bc:	1d3b      	adds	r3, r7, #4
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	463b      	mov	r3, r7
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
 8006300:	e15c      	b.n	80065bc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	78db      	ldrb	r3, [r3, #3]
 8006308:	2b01      	cmp	r3, #1
 800630a:	f040 8155 	bne.w	80065b8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	429a      	cmp	r2, r3
 800631c:	d90e      	bls.n	800633c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	619a      	str	r2, [r3, #24]
 800633a:	e008      	b.n	800634e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d16f      	bne.n	8006438 <USB_EPStartXfer+0x1054>
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006368:	b29b      	uxth	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006370:	4413      	add	r3, r2
 8006372:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	011a      	lsls	r2, r3, #4
 800637e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006382:	4413      	add	r3, r2
 8006384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800638c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d116      	bne.n	80063c2 <USB_EPStartXfer+0xfde>
 8006394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e05f      	b.n	8006482 <USB_EPStartXfer+0x109e>
 80063c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c6:	2b3e      	cmp	r3, #62	; 0x3e
 80063c8:	d818      	bhi.n	80063fc <USB_EPStartXfer+0x1018>
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <USB_EPStartXfer+0x1006>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	3301      	adds	r3, #1
 80063e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	e042      	b.n	8006482 <USB_EPStartXfer+0x109e>
 80063fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USB_EPStartXfer+0x1038>
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006416:	3b01      	subs	r3, #1
 8006418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29b      	uxth	r3, r3
 8006426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642e:	b29a      	uxth	r2, r3
 8006430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e024      	b.n	8006482 <USB_EPStartXfer+0x109e>
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d11f      	bne.n	8006482 <USB_EPStartXfer+0x109e>
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800644a:	1d3b      	adds	r3, r7, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800645a:	4413      	add	r3, r2
 800645c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800646c:	4413      	add	r3, r2
 800646e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d16f      	bne.n	8006574 <USB_EPStartXfer+0x1190>
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064b2:	463b      	mov	r3, r7
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064be:	4413      	add	r3, r2
 80064c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d116      	bne.n	80064fe <USB_EPStartXfer+0x111a>
 80064d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e05e      	b.n	80065bc <USB_EPStartXfer+0x11d8>
 80064fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006502:	2b3e      	cmp	r3, #62	; 0x3e
 8006504:	d818      	bhi.n	8006538 <USB_EPStartXfer+0x1154>
 8006506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <USB_EPStartXfer+0x1142>
 800651c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006520:	3301      	adds	r3, #1
 8006522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29a      	uxth	r2, r3
 8006530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	e041      	b.n	80065bc <USB_EPStartXfer+0x11d8>
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <USB_EPStartXfer+0x1174>
 800654e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006552:	3b01      	subs	r3, #1
 8006554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655c:	b29b      	uxth	r3, r3
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	b29b      	uxth	r3, r3
 8006562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e023      	b.n	80065bc <USB_EPStartXfer+0x11d8>
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11e      	bne.n	80065bc <USB_EPStartXfer+0x11d8>
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658e:	4413      	add	r3, r2
 8006590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006594:	463b      	mov	r3, r7
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a0:	4413      	add	r3, r2
 80065a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e001      	b.n	80065bc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e02e      	b.n	800661a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80065da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80065de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80065e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80065ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80065f2:	1d3b      	adds	r3, r7, #4
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d020      	beq.n	8006678 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	81bb      	strh	r3, [r7, #12]
 800664e:	89bb      	ldrh	r3, [r7, #12]
 8006650:	f083 0310 	eor.w	r3, r3, #16
 8006654:	81bb      	strh	r3, [r7, #12]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	441a      	add	r2, r3
 8006660:	89bb      	ldrh	r3, [r7, #12]
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]
 8006676:	e01f      	b.n	80066b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	81fb      	strh	r3, [r7, #14]
 8006690:	89fb      	ldrh	r3, [r7, #14]
 8006692:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006696:	81fb      	strh	r3, [r7, #14]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	7b1b      	ldrb	r3, [r3, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f040 809d 	bne.w	8006812 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d04c      	beq.n	800677a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	823b      	strh	r3, [r7, #16]
 80066ee:	8a3b      	ldrh	r3, [r7, #16]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01b      	beq.n	8006730 <USB_EPClearStall+0x6c>
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670e:	81fb      	strh	r3, [r7, #14]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	89fb      	ldrh	r3, [r7, #14]
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d06c      	beq.n	8006812 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674e:	81bb      	strh	r3, [r7, #12]
 8006750:	89bb      	ldrh	r3, [r7, #12]
 8006752:	f083 0320 	eor.w	r3, r3, #32
 8006756:	81bb      	strh	r3, [r7, #12]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	89bb      	ldrh	r3, [r7, #12]
 8006764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	b29b      	uxth	r3, r3
 8006776:	8013      	strh	r3, [r2, #0]
 8006778:	e04b      	b.n	8006812 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	82fb      	strh	r3, [r7, #22]
 8006788:	8afb      	ldrh	r3, [r7, #22]
 800678a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01b      	beq.n	80067ca <USB_EPClearStall+0x106>
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	82bb      	strh	r3, [r7, #20]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	441a      	add	r2, r3
 80067b4:	8abb      	ldrh	r3, [r7, #20]
 80067b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e0:	827b      	strh	r3, [r7, #18]
 80067e2:	8a7b      	ldrh	r3, [r7, #18]
 80067e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067e8:	827b      	strh	r3, [r7, #18]
 80067ea:	8a7b      	ldrh	r3, [r7, #18]
 80067ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067f0:	827b      	strh	r3, [r7, #18]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	8a7b      	ldrh	r3, [r7, #18]
 80067fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d103      	bne.n	8006838 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800687a:	b29b      	uxth	r3, r3
 800687c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800687e:	68fb      	ldr	r3, [r7, #12]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b08d      	sub	sp, #52	; 0x34
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4611      	mov	r1, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	460b      	mov	r3, r1
 80068b0:	80fb      	strh	r3, [r7, #6]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068b6:	88bb      	ldrh	r3, [r7, #4]
 80068b8:	3301      	adds	r3, #1
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	005a      	lsls	r2, r3, #1
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	e01e      	b.n	8006918 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	3301      	adds	r3, #1
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	3302      	adds	r3, #2
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	3302      	adds	r3, #2
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	3301      	adds	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	3b01      	subs	r3, #1
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1dd      	bne.n	80068da <USB_WritePMA+0x3a>
  }
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	3734      	adds	r7, #52	; 0x34
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800692a:	b480      	push	{r7}
 800692c:	b08b      	sub	sp, #44	; 0x2c
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	4611      	mov	r1, r2
 8006936:	461a      	mov	r2, r3
 8006938:	460b      	mov	r3, r1
 800693a:	80fb      	strh	r3, [r7, #6]
 800693c:	4613      	mov	r3, r2
 800693e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006940:	88bb      	ldrh	r3, [r7, #4]
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	b29b      	uxth	r3, r3
 8006946:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	005a      	lsls	r2, r3, #1
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	e01b      	b.n	800699c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	3302      	adds	r3, #2
 8006970:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	b2da      	uxtb	r2, r3
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	b2da      	uxtb	r2, r3
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	3302      	adds	r3, #2
 8006994:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	3b01      	subs	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e0      	bne.n	8006964 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069a2:	88bb      	ldrh	r3, [r7, #4]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	701a      	strb	r2, [r3, #0]
  }
}
 80069be:	bf00      	nop
 80069c0:	372c      	adds	r7, #44	; 0x2c
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7c1b      	ldrb	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d115      	bne.n	8006a0c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e4:	2202      	movs	r2, #2
 80069e6:	2181      	movs	r1, #129	; 0x81
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fe9e 	bl	800872a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f8:	2202      	movs	r2, #2
 80069fa:	2101      	movs	r1, #1
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fe94 	bl	800872a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006a0a:	e012      	b.n	8006a32 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a0c:	2340      	movs	r3, #64	; 0x40
 8006a0e:	2202      	movs	r2, #2
 8006a10:	2181      	movs	r1, #129	; 0x81
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fe89 	bl	800872a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	2202      	movs	r2, #2
 8006a22:	2101      	movs	r1, #1
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fe80 	bl	800872a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a32:	2308      	movs	r3, #8
 8006a34:	2203      	movs	r2, #3
 8006a36:	2182      	movs	r1, #130	; 0x82
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fe76 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a48:	f001 ff96 	bl	8008978 <USBD_static_malloc>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	e026      	b.n	8006ab2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	7c1b      	ldrb	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a98:	2101      	movs	r1, #1
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 ff36 	bl	800890c <USBD_LL_PrepareReceive>
 8006aa0:	e007      	b.n	8006ab2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	2101      	movs	r1, #1
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 ff2d 	bl	800890c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006acc:	2181      	movs	r1, #129	; 0x81
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fe51 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ada:	2101      	movs	r1, #1
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fe4a 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006aea:	2182      	movs	r1, #130	; 0x82
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 fe42 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00e      	beq.n	8006b20 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 ff3c 	bl	8008990 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d039      	beq.n	8006bc8 <USBD_CDC_Setup+0x9e>
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d17f      	bne.n	8006c58 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	88db      	ldrh	r3, [r3, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d029      	beq.n	8006bb4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b25b      	sxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da11      	bge.n	8006b8e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	88d2      	ldrh	r2, [r2, #6]
 8006b7c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b7e:	6939      	ldr	r1, [r7, #16]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	88db      	ldrh	r3, [r3, #6]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fa09 	bl	8007f9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b8c:	e06b      	b.n	8006c66 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	785a      	ldrb	r2, [r3, #1]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ba4:	6939      	ldr	r1, [r7, #16]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fa24 	bl	8007ffa <USBD_CtlPrepareRx>
      break;
 8006bb2:	e058      	b.n	8006c66 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	7850      	ldrb	r0, [r2, #1]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	4798      	blx	r3
      break;
 8006bc6:	e04e      	b.n	8006c66 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b0b      	cmp	r3, #11
 8006bce:	d02e      	beq.n	8006c2e <USBD_CDC_Setup+0x104>
 8006bd0:	2b0b      	cmp	r3, #11
 8006bd2:	dc38      	bgt.n	8006c46 <USBD_CDC_Setup+0x11c>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <USBD_CDC_Setup+0xb4>
 8006bd8:	2b0a      	cmp	r3, #10
 8006bda:	d014      	beq.n	8006c06 <USBD_CDC_Setup+0xdc>
 8006bdc:	e033      	b.n	8006c46 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d107      	bne.n	8006bf8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006be8:	f107 030c 	add.w	r3, r7, #12
 8006bec:	2202      	movs	r2, #2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f9d4 	bl	8007f9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bf6:	e02e      	b.n	8006c56 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f965 	bl	8007eca <USBD_CtlError>
            ret = USBD_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	75fb      	strb	r3, [r7, #23]
          break;
 8006c04:	e027      	b.n	8006c56 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d107      	bne.n	8006c20 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c10:	f107 030f 	add.w	r3, r7, #15
 8006c14:	2201      	movs	r2, #1
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 f9c0 	bl	8007f9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c1e:	e01a      	b.n	8006c56 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f951 	bl	8007eca <USBD_CtlError>
            ret = USBD_FAIL;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c2c:	e013      	b.n	8006c56 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d00d      	beq.n	8006c54 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 f945 	bl	8007eca <USBD_CtlError>
            ret = USBD_FAIL;
 8006c40:	2302      	movs	r3, #2
 8006c42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c44:	e006      	b.n	8006c54 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f93e 	bl	8007eca <USBD_CtlError>
          ret = USBD_FAIL;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	75fb      	strb	r3, [r7, #23]
          break;
 8006c52:	e000      	b.n	8006c56 <USBD_CDC_Setup+0x12c>
          break;
 8006c54:	bf00      	nop
      }
      break;
 8006c56:	e006      	b.n	8006c66 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f935 	bl	8007eca <USBD_CtlError>
      ret = USBD_FAIL;
 8006c60:	2302      	movs	r3, #2
 8006c62:	75fb      	strb	r3, [r7, #23]
      break;
 8006c64:	bf00      	nop
  }

  return ret;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c8a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03a      	beq.n	8006d0c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	331c      	adds	r3, #28
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d029      	beq.n	8006d00 <USBD_CDC_DataIn+0x90>
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	331c      	adds	r3, #28
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	78f9      	ldrb	r1, [r7, #3]
 8006cc0:	68b8      	ldr	r0, [r7, #8]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	4403      	add	r3, r0
 8006ccc:	3338      	adds	r3, #56	; 0x38
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cd4:	fb03 f301 	mul.w	r3, r3, r1
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d110      	bne.n	8006d00 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	331c      	adds	r3, #28
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006cf2:	78f9      	ldrb	r1, [r7, #3]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fde4 	bl	80088c6 <USBD_LL_Transmit>
 8006cfe:	e003      	b.n	8006d08 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d0c:	2302      	movs	r3, #2
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fe0f 	bl	8008952 <USBD_LL_GetRxDataSize>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00d      	beq.n	8006d62 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4798      	blx	r3

    return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d015      	beq.n	8006db2 <USBD_CDC_EP0_RxReady+0x46>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d8c:	2bff      	cmp	r3, #255	; 0xff
 8006d8e:	d010      	beq.n	8006db2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006da6:	b292      	uxth	r2, r2
 8006da8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	22ff      	movs	r2, #255	; 0xff
 8006dae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2243      	movs	r2, #67	; 0x43
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	200000bc 	.word	0x200000bc

08006ddc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2243      	movs	r2, #67	; 0x43
 8006de8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006dea:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20000078 	.word	0x20000078

08006dfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2243      	movs	r2, #67	; 0x43
 8006e08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20000100 	.word	0x20000100

08006e1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	220a      	movs	r2, #10
 8006e28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e2a:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000034 	.word	0x20000034

08006e3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eaa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01c      	beq.n	8006f14 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d115      	bne.n	8006f10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2181      	movs	r1, #129	; 0x81
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fcdd 	bl	80088c6 <USBD_LL_Transmit>

      return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e002      	b.n	8006f16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7c1b      	ldrb	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fcdd 	bl	800890c <USBD_LL_PrepareReceive>
 8006f52:	e007      	b.n	8006f64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f5a:	2340      	movs	r3, #64	; 0x40
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fcd4 	bl	800890c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e01a      	b.n	8006fc0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	79fa      	ldrb	r2, [r7, #7]
 8006fb6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 fb41 	bl	8008640 <USBD_LL_Init>

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	e001      	b.n	8006fee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006fea:	2302      	movs	r3, #2
 8006fec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fb76 	bl	80086f4 <USBD_LL_Start>

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00c      	beq.n	800705a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	4611      	mov	r1, r2
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fed8 	bl	8007e52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070b0:	461a      	mov	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d016      	beq.n	80070f4 <USBD_LL_SetupStage+0x6a>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d81c      	bhi.n	8007104 <USBD_LL_SetupStage+0x7a>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <USBD_LL_SetupStage+0x4a>
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d008      	beq.n	80070e4 <USBD_LL_SetupStage+0x5a>
 80070d2:	e017      	b.n	8007104 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9cb 	bl	8007478 <USBD_StdDevReq>
      break;
 80070e2:	e01a      	b.n	800711a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa2d 	bl	800754c <USBD_StdItfReq>
      break;
 80070f2:	e012      	b.n	800711a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa6d 	bl	80075dc <USBD_StdEPReq>
      break;
 8007102:	e00a      	b.n	800711a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800710a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fb4e 	bl	80087b4 <USBD_LL_StallEP>
      break;
 8007118:	bf00      	nop
  }

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	460b      	mov	r3, r1
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d14b      	bne.n	80071d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800713e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007146:	2b03      	cmp	r3, #3
 8007148:	d134      	bne.n	80071b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d919      	bls.n	800718a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800716c:	429a      	cmp	r2, r3
 800716e:	d203      	bcs.n	8007178 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007174:	b29b      	uxth	r3, r3
 8007176:	e002      	b.n	800717e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 ff57 	bl	8008036 <USBD_CtlContinueRx>
 8007188:	e038      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800719c:	2b03      	cmp	r3, #3
 800719e:	d105      	bne.n	80071ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 ff54 	bl	800805a <USBD_CtlSendStatus>
 80071b2:	e023      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d11e      	bne.n	80071fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071c6:	2100      	movs	r1, #0
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f001 faf3 	bl	80087b4 <USBD_LL_StallEP>
 80071ce:	e015      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d108      	bne.n	80071f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	7afa      	ldrb	r2, [r7, #11]
 80071f0:	4611      	mov	r1, r2
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	4798      	blx	r3
 80071f6:	e001      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e000      	b.n	80071fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d17f      	bne.n	800731a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3314      	adds	r3, #20
 800721e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007226:	2b02      	cmp	r3, #2
 8007228:	d15c      	bne.n	80072e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d915      	bls.n	8007262 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	b29b      	uxth	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fec1 	bl	8007fd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007254:	2300      	movs	r3, #0
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f001 fb56 	bl	800890c <USBD_LL_PrepareReceive>
 8007260:	e04e      	b.n	8007300 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	6912      	ldr	r2, [r2, #16]
 800726a:	fbb3 f1f2 	udiv	r1, r3, r2
 800726e:	fb02 f201 	mul.w	r2, r2, r1
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11c      	bne.n	80072b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007280:	429a      	cmp	r2, r3
 8007282:	d316      	bcc.n	80072b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800728e:	429a      	cmp	r2, r3
 8007290:	d20f      	bcs.n	80072b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007292:	2200      	movs	r2, #0
 8007294:	2100      	movs	r1, #0
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fe9d 	bl	8007fd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a4:	2300      	movs	r3, #0
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f001 fb2e 	bl	800890c <USBD_LL_PrepareReceive>
 80072b0:	e026      	b.n	8007300 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d105      	bne.n	80072d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072d4:	2180      	movs	r1, #128	; 0x80
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f001 fa6c 	bl	80087b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 fecf 	bl	8008080 <USBD_CtlReceiveStatus>
 80072e2:	e00d      	b.n	8007300 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d004      	beq.n	80072f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f001 fa5a 	bl	80087b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007306:	2b01      	cmp	r3, #1
 8007308:	d11d      	bne.n	8007346 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fe81 	bl	8007012 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007318:	e015      	b.n	8007346 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800732c:	2b03      	cmp	r3, #3
 800732e:	d108      	bne.n	8007342 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	7afa      	ldrb	r2, [r7, #11]
 800733a:	4611      	mov	r1, r2
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	4798      	blx	r3
 8007340:	e001      	b.n	8007346 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	e000      	b.n	8007348 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007358:	2340      	movs	r3, #64	; 0x40
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f9e3 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	2200      	movs	r2, #0
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f9d5 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2240      	movs	r2, #64	; 0x40
 800738a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6852      	ldr	r2, [r2, #4]
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	4611      	mov	r1, r2
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
  }

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr

080073f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2204      	movs	r2, #4
 8007408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007426:	2b04      	cmp	r3, #4
 8007428:	d105      	bne.n	8007436 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007450:	2b03      	cmp	r3, #3
 8007452:	d10b      	bne.n	800746c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d005      	beq.n	800749e <USBD_StdDevReq+0x26>
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d84f      	bhi.n	8007536 <USBD_StdDevReq+0xbe>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <USBD_StdDevReq+0x36>
 800749a:	2b20      	cmp	r3, #32
 800749c:	d14b      	bne.n	8007536 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
      break;
 80074ac:	e048      	b.n	8007540 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d839      	bhi.n	800752a <USBD_StdDevReq+0xb2>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBD_StdDevReq+0x44>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	0800750d 	.word	0x0800750d
 80074c0:	08007521 	.word	0x08007521
 80074c4:	0800752b 	.word	0x0800752b
 80074c8:	08007517 	.word	0x08007517
 80074cc:	0800752b 	.word	0x0800752b
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	0800752b 	.word	0x0800752b
 80074dc:	08007503 	.word	0x08007503
 80074e0:	080074f9 	.word	0x080074f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9dc 	bl	80078a4 <USBD_GetDescriptor>
          break;
 80074ec:	e022      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb3f 	bl	8007b74 <USBD_SetAddress>
          break;
 80074f6:	e01d      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb7e 	bl	8007bfc <USBD_SetConfig>
          break;
 8007500:	e018      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc07 	bl	8007d18 <USBD_GetConfig>
          break;
 800750a:	e013      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc37 	bl	8007d82 <USBD_GetStatus>
          break;
 8007514:	e00e      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc65 	bl	8007de8 <USBD_SetFeature>
          break;
 800751e:	e009      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc74 	bl	8007e10 <USBD_ClrFeature>
          break;
 8007528:	e004      	b.n	8007534 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fccc 	bl	8007eca <USBD_CtlError>
          break;
 8007532:	bf00      	nop
      }
      break;
 8007534:	e004      	b.n	8007540 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fcc6 	bl	8007eca <USBD_CtlError>
      break;
 800753e:	bf00      	nop
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop

0800754c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d005      	beq.n	8007572 <USBD_StdItfReq+0x26>
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d82e      	bhi.n	80075c8 <USBD_StdItfReq+0x7c>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <USBD_StdItfReq+0x26>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d12a      	bne.n	80075c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	3b01      	subs	r3, #1
 800757a:	2b02      	cmp	r3, #2
 800757c:	d81d      	bhi.n	80075ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	889b      	ldrh	r3, [r3, #4]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d813      	bhi.n	80075b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d110      	bne.n	80075c4 <USBD_StdItfReq+0x78>
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fd56 	bl	800805a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ae:	e009      	b.n	80075c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc89 	bl	8007eca <USBD_CtlError>
          break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc84 	bl	8007eca <USBD_CtlError>
          break;
 80075c2:	e000      	b.n	80075c6 <USBD_StdItfReq+0x7a>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e004      	b.n	80075d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fc7d 	bl	8007eca <USBD_CtlError>
      break;
 80075d0:	bf00      	nop
  }

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	889b      	ldrh	r3, [r3, #4]
 80075ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d007      	beq.n	800760c <USBD_StdEPReq+0x30>
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	f200 8146 	bhi.w	800788e <USBD_StdEPReq+0x2b2>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <USBD_StdEPReq+0x40>
 8007606:	2b20      	cmp	r3, #32
 8007608:	f040 8141 	bne.w	800788e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      break;
 800761a:	e13d      	b.n	8007898 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007624:	2b20      	cmp	r3, #32
 8007626:	d10a      	bne.n	800763e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]

        return ret;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	e12d      	b.n	800789a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d007      	beq.n	8007656 <USBD_StdEPReq+0x7a>
 8007646:	2b03      	cmp	r3, #3
 8007648:	f300 811b 	bgt.w	8007882 <USBD_StdEPReq+0x2a6>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d072      	beq.n	8007736 <USBD_StdEPReq+0x15a>
 8007650:	2b01      	cmp	r3, #1
 8007652:	d03a      	beq.n	80076ca <USBD_StdEPReq+0xee>
 8007654:	e115      	b.n	8007882 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765c:	2b02      	cmp	r3, #2
 800765e:	d002      	beq.n	8007666 <USBD_StdEPReq+0x8a>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d015      	beq.n	8007690 <USBD_StdEPReq+0xb4>
 8007664:	e02b      	b.n	80076be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <USBD_StdEPReq+0xaa>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d009      	beq.n	8007686 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 f89c 	bl	80087b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800767c:	2180      	movs	r1, #128	; 0x80
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f898 	bl	80087b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007684:	e020      	b.n	80076c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc1e 	bl	8007eca <USBD_CtlError>
              break;
 800768e:	e01b      	b.n	80076c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USBD_StdEPReq+0xda>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d008      	beq.n	80076b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f87f 	bl	80087b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fccf 	bl	800805a <USBD_CtlSendStatus>

              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc02 	bl	8007eca <USBD_CtlError>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0e0      	b.n	800788c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0xfe>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d015      	beq.n	8007704 <USBD_StdEPReq+0x128>
 80076d8:	e026      	b.n	8007728 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <USBD_StdEPReq+0x11e>
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b80      	cmp	r3, #128	; 0x80
 80076e4:	d009      	beq.n	80076fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f862 	bl	80087b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076f0:	2180      	movs	r1, #128	; 0x80
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f85e 	bl	80087b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076f8:	e01c      	b.n	8007734 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbe4 	bl	8007eca <USBD_CtlError>
              break;
 8007702:	e017      	b.n	8007734 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	885b      	ldrh	r3, [r3, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d112      	bne.n	8007732 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f869 	bl	80087f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc9a 	bl	800805a <USBD_CtlSendStatus>
              }
              break;
 8007726:	e004      	b.n	8007732 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fbcd 	bl	8007eca <USBD_CtlError>
              break;
 8007730:	e000      	b.n	8007734 <USBD_StdEPReq+0x158>
              break;
 8007732:	bf00      	nop
          }
          break;
 8007734:	e0aa      	b.n	800788c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	2b02      	cmp	r3, #2
 800773e:	d002      	beq.n	8007746 <USBD_StdEPReq+0x16a>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d032      	beq.n	80077aa <USBD_StdEPReq+0x1ce>
 8007744:	e097      	b.n	8007876 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <USBD_StdEPReq+0x180>
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b80      	cmp	r3, #128	; 0x80
 8007750:	d004      	beq.n	800775c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fbb8 	bl	8007eca <USBD_CtlError>
                break;
 800775a:	e091      	b.n	8007880 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800775c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0b      	bge.n	800777c <USBD_StdEPReq+0x1a0>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3310      	adds	r3, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	3304      	adds	r3, #4
 800777a:	e00b      	b.n	8007794 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2202      	movs	r2, #2
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fbfb 	bl	8007f9e <USBD_CtlSendData>
              break;
 80077a8:	e06a      	b.n	8007880 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da11      	bge.n	80077d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	f003 020f 	and.w	r2, r3, #15
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	3318      	adds	r3, #24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d117      	bne.n	80077fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb7b 	bl	8007eca <USBD_CtlError>
                  break;
 80077d4:	e054      	b.n	8007880 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb68 	bl	8007eca <USBD_CtlError>
                  break;
 80077fa:	e041      	b.n	8007880 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	da0b      	bge.n	800781c <USBD_StdEPReq+0x240>
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	3310      	adds	r3, #16
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4413      	add	r3, r2
 8007818:	3304      	adds	r3, #4
 800781a:	e00b      	b.n	8007834 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0x266>
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b80      	cmp	r3, #128	; 0x80
 8007840:	d103      	bne.n	800784a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e00e      	b.n	8007868 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 ffee 	bl	8008830 <USBD_LL_IsStallEP>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e002      	b.n	8007868 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2202      	movs	r2, #2
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb95 	bl	8007f9e <USBD_CtlSendData>
              break;
 8007874:	e004      	b.n	8007880 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb26 	bl	8007eca <USBD_CtlError>
              break;
 800787e:	bf00      	nop
          }
          break;
 8007880:	e004      	b.n	800788c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb20 	bl	8007eca <USBD_CtlError>
          break;
 800788a:	bf00      	nop
      }
      break;
 800788c:	e004      	b.n	8007898 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb1a 	bl	8007eca <USBD_CtlError>
      break;
 8007896:	bf00      	nop
  }

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	2b06      	cmp	r3, #6
 80078c6:	f200 8128 	bhi.w	8007b1a <USBD_GetDescriptor+0x276>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBD_GetDescriptor+0x2c>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007945 	.word	0x08007945
 80078dc:	08007b1b 	.word	0x08007b1b
 80078e0:	08007b1b 	.word	0x08007b1b
 80078e4:	08007abb 	.word	0x08007abb
 80078e8:	08007ae7 	.word	0x08007ae7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
      break;
 8007902:	e112      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7c1b      	ldrb	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10d      	bne.n	8007928 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f107 0208 	add.w	r2, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	2202      	movs	r2, #2
 8007924:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007926:	e100      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	f107 0208 	add.w	r2, r7, #8
 8007934:	4610      	mov	r0, r2
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	2202      	movs	r2, #2
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e0f2      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	885b      	ldrh	r3, [r3, #2]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b05      	cmp	r3, #5
 800794c:	f200 80ac 	bhi.w	8007aa8 <USBD_GetDescriptor+0x204>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <USBD_GetDescriptor+0xb4>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007971 	.word	0x08007971
 800795c:	080079a5 	.word	0x080079a5
 8007960:	080079d9 	.word	0x080079d9
 8007964:	08007a0d 	.word	0x08007a0d
 8007968:	08007a41 	.word	0x08007a41
 800796c:	08007a75 	.word	0x08007a75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e091      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa97 	bl	8007eca <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e089      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e077      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa7d 	bl	8007eca <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e06f      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e05d      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa63 	bl	8007eca <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e055      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e043      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa49 	bl	8007eca <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e03b      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e029      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa2f 	bl	8007eca <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e021      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e00f      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa15 	bl	8007eca <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e007      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa0d 	bl	8007eca <USBD_CtlError>
          err++;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ab6:	e038      	b.n	8007b2a <USBD_GetDescriptor+0x286>
 8007ab8:	e037      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7c1b      	ldrb	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4798      	blx	r3
 8007ad2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad4:	e029      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9f6 	bl	8007eca <USBD_CtlError>
        err++;
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae4:	e021      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7c1b      	ldrb	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10d      	bne.n	8007b0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	f107 0208 	add.w	r2, r7, #8
 8007afa:	4610      	mov	r0, r2
 8007afc:	4798      	blx	r3
 8007afe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	2207      	movs	r2, #7
 8007b06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b08:	e00f      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9dc 	bl	8007eca <USBD_CtlError>
        err++;
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	3301      	adds	r3, #1
 8007b16:	72fb      	strb	r3, [r7, #11]
      break;
 8007b18:	e007      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9d4 	bl	8007eca <USBD_CtlError>
      err++;
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	3301      	adds	r3, #1
 8007b26:	72fb      	strb	r3, [r7, #11]
      break;
 8007b28:	bf00      	nop
  }

  if (err != 0U)
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11c      	bne.n	8007b6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d011      	beq.n	8007b5a <USBD_GetDescriptor+0x2b6>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	88db      	ldrh	r3, [r3, #6]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88da      	ldrh	r2, [r3, #6]
 8007b42:	893b      	ldrh	r3, [r7, #8]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bf28      	it	cs
 8007b48:	4613      	movcs	r3, r2
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b4e:	893b      	ldrh	r3, [r7, #8]
 8007b50:	461a      	mov	r2, r3
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa22 	bl	8007f9e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88db      	ldrh	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa79 	bl	800805a <USBD_CtlSendStatus>
 8007b68:	e000      	b.n	8007b6c <USBD_GetDescriptor+0x2c8>
    return;
 8007b6a:	bf00      	nop
    }
  }
}
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop

08007b74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d130      	bne.n	8007be8 <USBD_SetAddress+0x74>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	88db      	ldrh	r3, [r3, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d12c      	bne.n	8007be8 <USBD_SetAddress+0x74>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	2b7f      	cmp	r3, #127	; 0x7f
 8007b94:	d828      	bhi.n	8007be8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d104      	bne.n	8007bb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f98b 	bl	8007eca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb4:	e01d      	b.n	8007bf2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fe60 	bl	8008888 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa46 	bl	800805a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bdc:	e009      	b.n	8007bf2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be6:	e004      	b.n	8007bf2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f96d 	bl	8007eca <USBD_CtlError>
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b41      	ldr	r3, [pc, #260]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c10:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d904      	bls.n	8007c22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f955 	bl	8007eca <USBD_CtlError>
 8007c20:	e075      	b.n	8007d0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d002      	beq.n	8007c32 <USBD_SetConfig+0x36>
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d023      	beq.n	8007c78 <USBD_SetConfig+0x7c>
 8007c30:	e062      	b.n	8007cf8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c32:	4b38      	ldr	r3, [pc, #224]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01a      	beq.n	8007c70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c3a:	4b36      	ldr	r3, [pc, #216]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c4c:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff f9e7 	bl	8007026 <USBD_SetClassConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d104      	bne.n	8007c68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f932 	bl	8007eca <USBD_CtlError>
            return;
 8007c66:	e052      	b.n	8007d0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9f6 	bl	800805a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c6e:	e04e      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9f2 	bl	800805a <USBD_CtlSendStatus>
        break;
 8007c76:	e04a      	b.n	8007d0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c78:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d112      	bne.n	8007ca6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007c88:	4b22      	ldr	r3, [pc, #136]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c92:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <USBD_SetConfig+0x118>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff f9e3 	bl	8007064 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9db 	bl	800805a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ca4:	e033      	b.n	8007d0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	; (8007d14 <USBD_SetConfig+0x118>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d01d      	beq.n	8007cf0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff f9d1 	bl	8007064 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <USBD_SetConfig+0x118>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ccc:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <USBD_SetConfig+0x118>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff f9a7 	bl	8007026 <USBD_SetClassConfig>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d104      	bne.n	8007ce8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8f2 	bl	8007eca <USBD_CtlError>
            return;
 8007ce6:	e012      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9b6 	bl	800805a <USBD_CtlSendStatus>
        break;
 8007cee:	e00e      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f9b2 	bl	800805a <USBD_CtlSendStatus>
        break;
 8007cf6:	e00a      	b.n	8007d0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8e5 	bl	8007eca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <USBD_SetConfig+0x118>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f9ac 	bl	8007064 <USBD_ClrClassConfig>
        break;
 8007d0c:	bf00      	nop
    }
  }
}
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000268 	.word	0x20000268

08007d18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d004      	beq.n	8007d34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8cc 	bl	8007eca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d32:	e022      	b.n	8007d7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	dc02      	bgt.n	8007d44 <USBD_GetConfig+0x2c>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dc03      	bgt.n	8007d4a <USBD_GetConfig+0x32>
 8007d42:	e015      	b.n	8007d70 <USBD_GetConfig+0x58>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetConfig+0x48>
 8007d48:	e012      	b.n	8007d70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	2201      	movs	r2, #1
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f920 	bl	8007f9e <USBD_CtlSendData>
        break;
 8007d5e:	e00c      	b.n	8007d7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	2201      	movs	r2, #1
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f918 	bl	8007f9e <USBD_CtlSendData>
        break;
 8007d6e:	e004      	b.n	8007d7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8a9 	bl	8007eca <USBD_CtlError>
        break;
 8007d78:	bf00      	nop
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d92:	3b01      	subs	r3, #1
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d81e      	bhi.n	8007dd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	88db      	ldrh	r3, [r3, #6]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d004      	beq.n	8007daa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f891 	bl	8007eca <USBD_CtlError>
        break;
 8007da8:	e01a      	b.n	8007de0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f043 0202 	orr.w	r2, r3, #2
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	2202      	movs	r2, #2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8e5 	bl	8007f9e <USBD_CtlSendData>
      break;
 8007dd4:	e004      	b.n	8007de0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f876 	bl	8007eca <USBD_CtlError>
      break;
 8007dde:	bf00      	nop
  }
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d106      	bne.n	8007e08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f929 	bl	800805a <USBD_CtlSendStatus>
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	3b01      	subs	r3, #1
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d80b      	bhi.n	8007e3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10c      	bne.n	8007e48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f90f 	bl	800805a <USBD_CtlSendStatus>
      }
      break;
 8007e3c:	e004      	b.n	8007e48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f842 	bl	8007eca <USBD_CtlError>
      break;
 8007e46:	e000      	b.n	8007e4a <USBD_ClrFeature+0x3a>
      break;
 8007e48:	bf00      	nop
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	785a      	ldrb	r2, [r3, #1]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	3303      	adds	r3, #3
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4413      	add	r3, r2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	3305      	adds	r3, #5
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	4413      	add	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	3306      	adds	r3, #6
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	021b      	lsls	r3, r3, #8
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	80da      	strh	r2, [r3, #6]

}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr

08007eca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ed4:	2180      	movs	r1, #128	; 0x80
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fc6c 	bl	80087b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fc68 	bl	80087b4 <USBD_LL_StallEP>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d032      	beq.n	8007f68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f834 	bl	8007f70 <USBD_GetLen>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	75fa      	strb	r2, [r7, #23]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	4413      	add	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	75fa      	strb	r2, [r7, #23]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4413      	add	r3, r2
 8007f34:	2203      	movs	r2, #3
 8007f36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f38:	e012      	b.n	8007f60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	60fa      	str	r2, [r7, #12]
 8007f40:	7dfa      	ldrb	r2, [r7, #23]
 8007f42:	1c51      	adds	r1, r2, #1
 8007f44:	75f9      	strb	r1, [r7, #23]
 8007f46:	4611      	mov	r1, r2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	75fa      	strb	r2, [r7, #23]
 8007f56:	461a      	mov	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e8      	bne.n	8007f3a <USBD_GetString+0x4e>
    }
  }
}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f7c:	e005      	b.n	8007f8a <USBD_GetLen+0x1a>
  {
    len++;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	3301      	adds	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3301      	adds	r3, #1
 8007f88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f5      	bne.n	8007f7e <USBD_GetLen+0xe>
  }

  return len;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fc7d 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fc6b 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	4613      	mov	r3, r2
 8008006:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2203      	movs	r2, #3
 800800c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008010:	88fa      	ldrh	r2, [r7, #6]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	2100      	movs	r1, #0
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fc70 	bl	800890c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	4613      	mov	r3, r2
 8008042:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	2100      	movs	r1, #0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fc5e 	bl	800890c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2204      	movs	r2, #4
 8008066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800806a:	2300      	movs	r3, #0
 800806c:	2200      	movs	r2, #0
 800806e:	2100      	movs	r1, #0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc28 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2205      	movs	r2, #5
 800808c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008090:	2300      	movs	r3, #0
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc38 	bl	800890c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080ac:	2200      	movs	r2, #0
 80080ae:	4912      	ldr	r1, [pc, #72]	; (80080f8 <MX_USB_DEVICE_Init+0x50>)
 80080b0:	4812      	ldr	r0, [pc, #72]	; (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080b2:	f7fe ff5e 	bl	8006f72 <USBD_Init>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080bc:	f7f8 ff2c 	bl	8000f18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080c0:	490f      	ldr	r1, [pc, #60]	; (8008100 <MX_USB_DEVICE_Init+0x58>)
 80080c2:	480e      	ldr	r0, [pc, #56]	; (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080c4:	f7fe ff80 	bl	8006fc8 <USBD_RegisterClass>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080ce:	f7f8 ff23 	bl	8000f18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080d2:	490c      	ldr	r1, [pc, #48]	; (8008104 <MX_USB_DEVICE_Init+0x5c>)
 80080d4:	4809      	ldr	r0, [pc, #36]	; (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080d6:	f7fe feb1 	bl	8006e3c <USBD_CDC_RegisterInterface>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080e0:	f7f8 ff1a 	bl	8000f18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080e4:	4805      	ldr	r0, [pc, #20]	; (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080e6:	f7fe ff88 	bl	8006ffa <USBD_Start>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080f0:	f7f8 ff12 	bl	8000f18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080f4:	bf00      	nop
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	2000015c 	.word	0x2000015c
 80080fc:	200005e4 	.word	0x200005e4
 8008100:	20000040 	.word	0x20000040
 8008104:	2000014c 	.word	0x2000014c

08008108 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	4905      	ldr	r1, [pc, #20]	; (8008124 <CDC_Init_FS+0x1c>)
 8008110:	4805      	ldr	r0, [pc, #20]	; (8008128 <CDC_Init_FS+0x20>)
 8008112:	f7fe fea9 	bl	8006e68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008116:	4905      	ldr	r1, [pc, #20]	; (800812c <CDC_Init_FS+0x24>)
 8008118:	4803      	ldr	r0, [pc, #12]	; (8008128 <CDC_Init_FS+0x20>)
 800811a:	f7fe febe 	bl	8006e9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800811e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000c90 	.word	0x20000c90
 8008128:	200005e4 	.word	0x200005e4
 800812c:	200008a8 	.word	0x200008a8

08008130 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008134:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008136:	4618      	mov	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
	...

08008140 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
 800814c:	4613      	mov	r3, r2
 800814e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b23      	cmp	r3, #35	; 0x23
 8008154:	d85c      	bhi.n	8008210 <CDC_Control_FS+0xd0>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <CDC_Control_FS+0x1c>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008211 	.word	0x08008211
 8008160:	08008211 	.word	0x08008211
 8008164:	08008211 	.word	0x08008211
 8008168:	08008211 	.word	0x08008211
 800816c:	08008211 	.word	0x08008211
 8008170:	08008211 	.word	0x08008211
 8008174:	08008211 	.word	0x08008211
 8008178:	08008211 	.word	0x08008211
 800817c:	08008211 	.word	0x08008211
 8008180:	08008211 	.word	0x08008211
 8008184:	08008211 	.word	0x08008211
 8008188:	08008211 	.word	0x08008211
 800818c:	08008211 	.word	0x08008211
 8008190:	08008211 	.word	0x08008211
 8008194:	08008211 	.word	0x08008211
 8008198:	08008211 	.word	0x08008211
 800819c:	08008211 	.word	0x08008211
 80081a0:	08008211 	.word	0x08008211
 80081a4:	08008211 	.word	0x08008211
 80081a8:	08008211 	.word	0x08008211
 80081ac:	08008211 	.word	0x08008211
 80081b0:	08008211 	.word	0x08008211
 80081b4:	08008211 	.word	0x08008211
 80081b8:	08008211 	.word	0x08008211
 80081bc:	08008211 	.word	0x08008211
 80081c0:	08008211 	.word	0x08008211
 80081c4:	08008211 	.word	0x08008211
 80081c8:	08008211 	.word	0x08008211
 80081cc:	08008211 	.word	0x08008211
 80081d0:	08008211 	.word	0x08008211
 80081d4:	08008211 	.word	0x08008211
 80081d8:	08008211 	.word	0x08008211
 80081dc:	080081ed 	.word	0x080081ed
 80081e0:	080081ff 	.word	0x080081ff
 80081e4:	08008211 	.word	0x08008211
 80081e8:	08008211 	.word	0x08008211
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80081ec:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <CDC_Control_FS+0xe0>)
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	6810      	ldr	r0, [r2, #0]
 80081f2:	6018      	str	r0, [r3, #0]
 80081f4:	8891      	ldrh	r1, [r2, #4]
 80081f6:	7992      	ldrb	r2, [r2, #6]
 80081f8:	8099      	strh	r1, [r3, #4]
 80081fa:	719a      	strb	r2, [r3, #6]
    break;
 80081fc:	e009      	b.n	8008212 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	4a07      	ldr	r2, [pc, #28]	; (8008220 <CDC_Control_FS+0xe0>)
 8008202:	6810      	ldr	r0, [r2, #0]
 8008204:	6018      	str	r0, [r3, #0]
 8008206:	8891      	ldrh	r1, [r2, #4]
 8008208:	7992      	ldrb	r2, [r2, #6]
 800820a:	8099      	strh	r1, [r3, #4]
 800820c:	719a      	strb	r2, [r3, #6]
    break;
 800820e:	e000      	b.n	8008212 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008210:	bf00      	nop
  }

  return (USBD_OK);
 8008212:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000144 	.word	0x20000144

08008224 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4807      	ldr	r0, [pc, #28]	; (8008250 <CDC_Receive_FS+0x2c>)
 8008232:	f7fe fe32 	bl	8006e9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008236:	4806      	ldr	r0, [pc, #24]	; (8008250 <CDC_Receive_FS+0x2c>)
 8008238:	f7fe fe71 	bl	8006f1e <USBD_CDC_ReceivePacket>
  usb_data_rx(Buf,Len);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7f8 fb26 	bl	8000890 <usb_data_rx>
  return (USBD_OK);
 8008244:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	200005e4 	.word	0x200005e4

08008254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <CDC_Transmit_FS+0x48>)
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008276:	2301      	movs	r3, #1
 8008278:	e00b      	b.n	8008292 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800827a:	887b      	ldrh	r3, [r7, #2]
 800827c:	461a      	mov	r2, r3
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	4806      	ldr	r0, [pc, #24]	; (800829c <CDC_Transmit_FS+0x48>)
 8008282:	f7fe fdf1 	bl	8006e68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008286:	4805      	ldr	r0, [pc, #20]	; (800829c <CDC_Transmit_FS+0x48>)
 8008288:	f7fe fe1a 	bl	8006ec0 <USBD_CDC_TransmitPacket>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	200005e4 	.word	0x200005e4

080082a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2212      	movs	r2, #18
 80082b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000178 	.word	0x20000178

080082c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2204      	movs	r2, #4
 80082d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082d6:	4b03      	ldr	r3, [pc, #12]	; (80082e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	2000018c 	.word	0x2000018c

080082e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4907      	ldr	r1, [pc, #28]	; (800831c <USBD_FS_ProductStrDescriptor+0x34>)
 80082fe:	4808      	ldr	r0, [pc, #32]	; (8008320 <USBD_FS_ProductStrDescriptor+0x38>)
 8008300:	f7ff fdf4 	bl	8007eec <USBD_GetString>
 8008304:	e004      	b.n	8008310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4904      	ldr	r1, [pc, #16]	; (800831c <USBD_FS_ProductStrDescriptor+0x34>)
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <USBD_FS_ProductStrDescriptor+0x38>)
 800830c:	f7ff fdee 	bl	8007eec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20001078 	.word	0x20001078
 8008320:	0800a73c 	.word	0x0800a73c

08008324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	4904      	ldr	r1, [pc, #16]	; (8008344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008334:	4804      	ldr	r0, [pc, #16]	; (8008348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008336:	f7ff fdd9 	bl	8007eec <USBD_GetString>
  return USBD_StrDesc;
 800833a:	4b02      	ldr	r3, [pc, #8]	; (8008344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20001078 	.word	0x20001078
 8008348:	0800a754 	.word	0x0800a754

0800834c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	221a      	movs	r2, #26
 800835c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800835e:	f000 f843 	bl	80083e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008362:	4b02      	ldr	r3, [pc, #8]	; (800836c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000190 	.word	0x20000190

08008370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4907      	ldr	r1, [pc, #28]	; (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008386:	4808      	ldr	r0, [pc, #32]	; (80083a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008388:	f7ff fdb0 	bl	8007eec <USBD_GetString>
 800838c:	e004      	b.n	8008398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4904      	ldr	r1, [pc, #16]	; (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008392:	4805      	ldr	r0, [pc, #20]	; (80083a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008394:	f7ff fdaa 	bl	8007eec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20001078 	.word	0x20001078
 80083a8:	0800a768 	.word	0x0800a768

080083ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4907      	ldr	r1, [pc, #28]	; (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083c2:	4808      	ldr	r0, [pc, #32]	; (80083e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083c4:	f7ff fd92 	bl	8007eec <USBD_GetString>
 80083c8:	e004      	b.n	80083d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4904      	ldr	r1, [pc, #16]	; (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d0:	f7ff fd8c 	bl	8007eec <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d4:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20001078 	.word	0x20001078
 80083e4:	0800a774 	.word	0x0800a774

080083e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <Get_SerialNum+0x44>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <Get_SerialNum+0x48>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083fa:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <Get_SerialNum+0x4c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800840e:	2208      	movs	r2, #8
 8008410:	4909      	ldr	r1, [pc, #36]	; (8008438 <Get_SerialNum+0x50>)
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f814 	bl	8008440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008418:	2204      	movs	r2, #4
 800841a:	4908      	ldr	r1, [pc, #32]	; (800843c <Get_SerialNum+0x54>)
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 f80f 	bl	8008440 <IntToUnicode>
  }
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	1ffff7e8 	.word	0x1ffff7e8
 8008430:	1ffff7ec 	.word	0x1ffff7ec
 8008434:	1ffff7f0 	.word	0x1ffff7f0
 8008438:	20000192 	.word	0x20000192
 800843c:	200001a2 	.word	0x200001a2

08008440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e027      	b.n	80084a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	2b09      	cmp	r3, #9
 800845e:	d80b      	bhi.n	8008478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	0f1b      	lsrs	r3, r3, #28
 8008464:	b2da      	uxtb	r2, r3
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4619      	mov	r1, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	440b      	add	r3, r1
 8008470:	3230      	adds	r2, #48	; 0x30
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e00a      	b.n	800848e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	0f1b      	lsrs	r3, r3, #28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4619      	mov	r1, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	440b      	add	r3, r1
 8008488:	3237      	adds	r2, #55	; 0x37
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	3301      	adds	r3, #1
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
 80084a8:	7dfa      	ldrb	r2, [r7, #23]
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3d3      	bcc.n	8008458 <IntToUnicode+0x18>
  }
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr

080084bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a0d      	ldr	r2, [pc, #52]	; (8008500 <HAL_PCD_MspInit+0x44>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d113      	bne.n	80084f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084ce:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <HAL_PCD_MspInit+0x48>)
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	4a0c      	ldr	r2, [pc, #48]	; (8008504 <HAL_PCD_MspInit+0x48>)
 80084d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084d8:	61d3      	str	r3, [r2, #28]
 80084da:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <HAL_PCD_MspInit+0x48>)
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	2014      	movs	r0, #20
 80084ec:	f7f9 fba5 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80084f0:	2014      	movs	r0, #20
 80084f2:	f7f9 fbbe 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	40005c00 	.word	0x40005c00
 8008504:	40021000 	.word	0x40021000

08008508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7fe fdb3 	bl	800708a <USBD_LL_SetupStage>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	440b      	add	r3, r1
 800854c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	4619      	mov	r1, r3
 8008556:	f7fe fde5 	bl	8007124 <USBD_LL_DataOutStage>
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	440b      	add	r3, r1
 8008582:	333c      	adds	r3, #60	; 0x3c
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	4619      	mov	r1, r3
 800858a:	f7fe fe3c 	bl	8007206 <USBD_LL_DataInStage>
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe ff4c 	bl	8007442 <USBD_LL_SOF>
}
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d001      	beq.n	80085ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085c6:	f7f8 fca7 	bl	8000f18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085d0:	7bfa      	ldrb	r2, [r7, #15]
 80085d2:	4611      	mov	r1, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe fefc 	bl	80073d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe feb5 	bl	8007350 <USBD_LL_Reset>
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fef6 	bl	80073f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800860c:	4b04      	ldr	r3, [pc, #16]	; (8008620 <HAL_PCD_SuspendCallback+0x30>)
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	4a03      	ldr	r2, [pc, #12]	; (8008620 <HAL_PCD_SuspendCallback+0x30>)
 8008612:	f043 0306 	orr.w	r3, r3, #6
 8008616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	e000ed00 	.word	0xe000ed00

08008624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fef0 	bl	8007418 <USBD_LL_Resume>
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008648:	4a28      	ldr	r2, [pc, #160]	; (80086ec <USBD_LL_Init+0xac>)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a26      	ldr	r2, [pc, #152]	; (80086ec <USBD_LL_Init+0xac>)
 8008654:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008658:	4b24      	ldr	r3, [pc, #144]	; (80086ec <USBD_LL_Init+0xac>)
 800865a:	4a25      	ldr	r2, [pc, #148]	; (80086f0 <USBD_LL_Init+0xb0>)
 800865c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800865e:	4b23      	ldr	r3, [pc, #140]	; (80086ec <USBD_LL_Init+0xac>)
 8008660:	2208      	movs	r2, #8
 8008662:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008664:	4b21      	ldr	r3, [pc, #132]	; (80086ec <USBD_LL_Init+0xac>)
 8008666:	2202      	movs	r2, #2
 8008668:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800866a:	4b20      	ldr	r3, [pc, #128]	; (80086ec <USBD_LL_Init+0xac>)
 800866c:	2200      	movs	r2, #0
 800866e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008670:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <USBD_LL_Init+0xac>)
 8008672:	2200      	movs	r2, #0
 8008674:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008676:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <USBD_LL_Init+0xac>)
 8008678:	2200      	movs	r2, #0
 800867a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800867c:	481b      	ldr	r0, [pc, #108]	; (80086ec <USBD_LL_Init+0xac>)
 800867e:	f7f9 fcc6 	bl	800200e <HAL_PCD_Init>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008688:	f7f8 fc46 	bl	8000f18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008692:	2318      	movs	r3, #24
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	f7fb f808 	bl	80036ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086a2:	2358      	movs	r3, #88	; 0x58
 80086a4:	2200      	movs	r2, #0
 80086a6:	2180      	movs	r1, #128	; 0x80
 80086a8:	f7fb f800 	bl	80036ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086b2:	23c0      	movs	r3, #192	; 0xc0
 80086b4:	2200      	movs	r2, #0
 80086b6:	2181      	movs	r1, #129	; 0x81
 80086b8:	f7fa fff8 	bl	80036ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80086c6:	2200      	movs	r2, #0
 80086c8:	2101      	movs	r1, #1
 80086ca:	f7fa ffef 	bl	80036ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086d8:	2200      	movs	r2, #0
 80086da:	2182      	movs	r1, #130	; 0x82
 80086dc:	f7fa ffe6 	bl	80036ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20001278 	.word	0x20001278
 80086f0:	40005c00 	.word	0x40005c00

080086f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800870a:	4618      	mov	r0, r3
 800870c:	f7f9 fd8a 	bl	8002224 <HAL_PCD_Start>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f94e 	bl	80089b8 <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	461a      	mov	r2, r3
 8008738:	4603      	mov	r3, r0
 800873a:	70fb      	strb	r3, [r7, #3]
 800873c:	460b      	mov	r3, r1
 800873e:	70bb      	strb	r3, [r7, #2]
 8008740:	4613      	mov	r3, r2
 8008742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008752:	78bb      	ldrb	r3, [r7, #2]
 8008754:	883a      	ldrh	r2, [r7, #0]
 8008756:	78f9      	ldrb	r1, [r7, #3]
 8008758:	f7f9 ff04 	bl	8002564 <HAL_PCD_EP_Open>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f928 	bl	80089b8 <USBD_Get_USB_Status>
 8008768:	4603      	mov	r3, r0
 800876a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876c:	7bbb      	ldrb	r3, [r7, #14]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7f9 ff4b 	bl	8002630 <HAL_PCD_EP_Close>
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 f909 	bl	80089b8 <USBD_Get_USB_Status>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fa f80b 	bl	80027ee <HAL_PCD_EP_SetStall>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 f8ea 	bl	80089b8 <USBD_Get_USB_Status>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f7fa f84c 	bl	80028ae <HAL_PCD_EP_ClrStall>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f8cb 	bl	80089b8 <USBD_Get_USB_Status>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008826:	7bbb      	ldrb	r3, [r7, #14]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008848:	2b00      	cmp	r3, #0
 800884a:	da0c      	bge.n	8008866 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	440b      	add	r3, r1
 8008860:	3302      	adds	r3, #2
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	e00b      	b.n	800887e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800886c:	68f9      	ldr	r1, [r7, #12]
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	440b      	add	r3, r1
 8008878:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800887c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f9 fe37 	bl	800251a <HAL_PCD_SetAddress>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f880 	bl	80089b8 <USBD_Get_USB_Status>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	461a      	mov	r2, r3
 80088d2:	460b      	mov	r3, r1
 80088d4:	72fb      	strb	r3, [r7, #11]
 80088d6:	4613      	mov	r3, r2
 80088d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088e8:	893b      	ldrh	r3, [r7, #8]
 80088ea:	7af9      	ldrb	r1, [r7, #11]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	f7f9 ff3b 	bl	8002768 <HAL_PCD_EP_Transmit>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f85d 	bl	80089b8 <USBD_Get_USB_Status>
 80088fe:	4603      	mov	r3, r0
 8008900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008902:	7dbb      	ldrb	r3, [r7, #22]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	461a      	mov	r2, r3
 8008918:	460b      	mov	r3, r1
 800891a:	72fb      	strb	r3, [r7, #11]
 800891c:	4613      	mov	r3, r2
 800891e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800892e:	893b      	ldrh	r3, [r7, #8]
 8008930:	7af9      	ldrb	r1, [r7, #11]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	f7f9 fec4 	bl	80026c0 <HAL_PCD_EP_Receive>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f83a 	bl	80089b8 <USBD_Get_USB_Status>
 8008944:	4603      	mov	r3, r0
 8008946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008948:	7dbb      	ldrb	r3, [r7, #22]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	460b      	mov	r3, r1
 800895c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f7f9 fee6 	bl	800273a <HAL_PCD_EP_GetRxCount>
 800896e:	4603      	mov	r3, r0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008980:	4b02      	ldr	r3, [pc, #8]	; (800898c <USBD_static_malloc+0x14>)
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr
 800898c:	2000026c 	.word	0x2000026c

08008990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]

}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr

080089a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d817      	bhi.n	80089fc <USBD_Get_USB_Status+0x44>
 80089cc:	a201      	add	r2, pc, #4	; (adr r2, 80089d4 <USBD_Get_USB_Status+0x1c>)
 80089ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d2:	bf00      	nop
 80089d4:	080089e5 	.word	0x080089e5
 80089d8:	080089eb 	.word	0x080089eb
 80089dc:	080089f1 	.word	0x080089f1
 80089e0:	080089f7 	.word	0x080089f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
    break;
 80089e8:	e00b      	b.n	8008a02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089ea:	2302      	movs	r3, #2
 80089ec:	73fb      	strb	r3, [r7, #15]
    break;
 80089ee:	e008      	b.n	8008a02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089f0:	2301      	movs	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
    break;
 80089f4:	e005      	b.n	8008a02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089f6:	2302      	movs	r3, #2
 80089f8:	73fb      	strb	r3, [r7, #15]
    break;
 80089fa:	e002      	b.n	8008a02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089fc:	2302      	movs	r3, #2
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	bf00      	nop
  }
  return usb_status;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop

08008a10 <__errno>:
 8008a10:	4b01      	ldr	r3, [pc, #4]	; (8008a18 <__errno+0x8>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	200001ac 	.word	0x200001ac

08008a1c <__libc_init_array>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	2600      	movs	r6, #0
 8008a20:	4d0c      	ldr	r5, [pc, #48]	; (8008a54 <__libc_init_array+0x38>)
 8008a22:	4c0d      	ldr	r4, [pc, #52]	; (8008a58 <__libc_init_array+0x3c>)
 8008a24:	1b64      	subs	r4, r4, r5
 8008a26:	10a4      	asrs	r4, r4, #2
 8008a28:	42a6      	cmp	r6, r4
 8008a2a:	d109      	bne.n	8008a40 <__libc_init_array+0x24>
 8008a2c:	f001 fe30 	bl	800a690 <_init>
 8008a30:	2600      	movs	r6, #0
 8008a32:	4d0a      	ldr	r5, [pc, #40]	; (8008a5c <__libc_init_array+0x40>)
 8008a34:	4c0a      	ldr	r4, [pc, #40]	; (8008a60 <__libc_init_array+0x44>)
 8008a36:	1b64      	subs	r4, r4, r5
 8008a38:	10a4      	asrs	r4, r4, #2
 8008a3a:	42a6      	cmp	r6, r4
 8008a3c:	d105      	bne.n	8008a4a <__libc_init_array+0x2e>
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a44:	4798      	blx	r3
 8008a46:	3601      	adds	r6, #1
 8008a48:	e7ee      	b.n	8008a28 <__libc_init_array+0xc>
 8008a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4e:	4798      	blx	r3
 8008a50:	3601      	adds	r6, #1
 8008a52:	e7f2      	b.n	8008a3a <__libc_init_array+0x1e>
 8008a54:	0800a954 	.word	0x0800a954
 8008a58:	0800a954 	.word	0x0800a954
 8008a5c:	0800a954 	.word	0x0800a954
 8008a60:	0800a958 	.word	0x0800a958

08008a64 <malloc>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <malloc+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f000 b865 	b.w	8008b38 <_malloc_r>
 8008a6e:	bf00      	nop
 8008a70:	200001ac 	.word	0x200001ac

08008a74 <memcpy>:
 8008a74:	440a      	add	r2, r1
 8008a76:	4291      	cmp	r1, r2
 8008a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a7c:	d100      	bne.n	8008a80 <memcpy+0xc>
 8008a7e:	4770      	bx	lr
 8008a80:	b510      	push	{r4, lr}
 8008a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a86:	4291      	cmp	r1, r2
 8008a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8c:	d1f9      	bne.n	8008a82 <memcpy+0xe>
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <memset>:
 8008a90:	4603      	mov	r3, r0
 8008a92:	4402      	add	r2, r0
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d100      	bne.n	8008a9a <memset+0xa>
 8008a98:	4770      	bx	lr
 8008a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9e:	e7f9      	b.n	8008a94 <memset+0x4>

08008aa0 <_free_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d043      	beq.n	8008b30 <_free_r+0x90>
 8008aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aac:	1f0c      	subs	r4, r1, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	18e4      	addlt	r4, r4, r3
 8008ab4:	f000 fa90 	bl	8008fd8 <__malloc_lock>
 8008ab8:	4a1e      	ldr	r2, [pc, #120]	; (8008b34 <_free_r+0x94>)
 8008aba:	6813      	ldr	r3, [r2, #0]
 8008abc:	4610      	mov	r0, r2
 8008abe:	b933      	cbnz	r3, 8008ace <_free_r+0x2e>
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	6014      	str	r4, [r2, #0]
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aca:	f000 ba8b 	b.w	8008fe4 <__malloc_unlock>
 8008ace:	42a3      	cmp	r3, r4
 8008ad0:	d90a      	bls.n	8008ae8 <_free_r+0x48>
 8008ad2:	6821      	ldr	r1, [r4, #0]
 8008ad4:	1862      	adds	r2, r4, r1
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	bf01      	itttt	eq
 8008ada:	681a      	ldreq	r2, [r3, #0]
 8008adc:	685b      	ldreq	r3, [r3, #4]
 8008ade:	1852      	addeq	r2, r2, r1
 8008ae0:	6022      	streq	r2, [r4, #0]
 8008ae2:	6063      	str	r3, [r4, #4]
 8008ae4:	6004      	str	r4, [r0, #0]
 8008ae6:	e7ed      	b.n	8008ac4 <_free_r+0x24>
 8008ae8:	461a      	mov	r2, r3
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	b10b      	cbz	r3, 8008af2 <_free_r+0x52>
 8008aee:	42a3      	cmp	r3, r4
 8008af0:	d9fa      	bls.n	8008ae8 <_free_r+0x48>
 8008af2:	6811      	ldr	r1, [r2, #0]
 8008af4:	1850      	adds	r0, r2, r1
 8008af6:	42a0      	cmp	r0, r4
 8008af8:	d10b      	bne.n	8008b12 <_free_r+0x72>
 8008afa:	6820      	ldr	r0, [r4, #0]
 8008afc:	4401      	add	r1, r0
 8008afe:	1850      	adds	r0, r2, r1
 8008b00:	4283      	cmp	r3, r0
 8008b02:	6011      	str	r1, [r2, #0]
 8008b04:	d1de      	bne.n	8008ac4 <_free_r+0x24>
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	4401      	add	r1, r0
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	6053      	str	r3, [r2, #4]
 8008b10:	e7d8      	b.n	8008ac4 <_free_r+0x24>
 8008b12:	d902      	bls.n	8008b1a <_free_r+0x7a>
 8008b14:	230c      	movs	r3, #12
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	e7d4      	b.n	8008ac4 <_free_r+0x24>
 8008b1a:	6820      	ldr	r0, [r4, #0]
 8008b1c:	1821      	adds	r1, r4, r0
 8008b1e:	428b      	cmp	r3, r1
 8008b20:	bf01      	itttt	eq
 8008b22:	6819      	ldreq	r1, [r3, #0]
 8008b24:	685b      	ldreq	r3, [r3, #4]
 8008b26:	1809      	addeq	r1, r1, r0
 8008b28:	6021      	streq	r1, [r4, #0]
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	6054      	str	r4, [r2, #4]
 8008b2e:	e7c9      	b.n	8008ac4 <_free_r+0x24>
 8008b30:	bd38      	pop	{r3, r4, r5, pc}
 8008b32:	bf00      	nop
 8008b34:	2000048c 	.word	0x2000048c

08008b38 <_malloc_r>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	1ccd      	adds	r5, r1, #3
 8008b3c:	f025 0503 	bic.w	r5, r5, #3
 8008b40:	3508      	adds	r5, #8
 8008b42:	2d0c      	cmp	r5, #12
 8008b44:	bf38      	it	cc
 8008b46:	250c      	movcc	r5, #12
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	db01      	blt.n	8008b52 <_malloc_r+0x1a>
 8008b4e:	42a9      	cmp	r1, r5
 8008b50:	d903      	bls.n	8008b5a <_malloc_r+0x22>
 8008b52:	230c      	movs	r3, #12
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	2000      	movs	r0, #0
 8008b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b5a:	f000 fa3d 	bl	8008fd8 <__malloc_lock>
 8008b5e:	4921      	ldr	r1, [pc, #132]	; (8008be4 <_malloc_r+0xac>)
 8008b60:	680a      	ldr	r2, [r1, #0]
 8008b62:	4614      	mov	r4, r2
 8008b64:	b99c      	cbnz	r4, 8008b8e <_malloc_r+0x56>
 8008b66:	4f20      	ldr	r7, [pc, #128]	; (8008be8 <_malloc_r+0xb0>)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	b923      	cbnz	r3, 8008b76 <_malloc_r+0x3e>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f000 f854 	bl	8008c1c <_sbrk_r>
 8008b74:	6038      	str	r0, [r7, #0]
 8008b76:	4629      	mov	r1, r5
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f000 f84f 	bl	8008c1c <_sbrk_r>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d123      	bne.n	8008bca <_malloc_r+0x92>
 8008b82:	230c      	movs	r3, #12
 8008b84:	4630      	mov	r0, r6
 8008b86:	6033      	str	r3, [r6, #0]
 8008b88:	f000 fa2c 	bl	8008fe4 <__malloc_unlock>
 8008b8c:	e7e3      	b.n	8008b56 <_malloc_r+0x1e>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	1b5b      	subs	r3, r3, r5
 8008b92:	d417      	bmi.n	8008bc4 <_malloc_r+0x8c>
 8008b94:	2b0b      	cmp	r3, #11
 8008b96:	d903      	bls.n	8008ba0 <_malloc_r+0x68>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	441c      	add	r4, r3
 8008b9c:	6025      	str	r5, [r4, #0]
 8008b9e:	e004      	b.n	8008baa <_malloc_r+0x72>
 8008ba0:	6863      	ldr	r3, [r4, #4]
 8008ba2:	42a2      	cmp	r2, r4
 8008ba4:	bf0c      	ite	eq
 8008ba6:	600b      	streq	r3, [r1, #0]
 8008ba8:	6053      	strne	r3, [r2, #4]
 8008baa:	4630      	mov	r0, r6
 8008bac:	f000 fa1a 	bl	8008fe4 <__malloc_unlock>
 8008bb0:	f104 000b 	add.w	r0, r4, #11
 8008bb4:	1d23      	adds	r3, r4, #4
 8008bb6:	f020 0007 	bic.w	r0, r0, #7
 8008bba:	1ac2      	subs	r2, r0, r3
 8008bbc:	d0cc      	beq.n	8008b58 <_malloc_r+0x20>
 8008bbe:	1a1b      	subs	r3, r3, r0
 8008bc0:	50a3      	str	r3, [r4, r2]
 8008bc2:	e7c9      	b.n	8008b58 <_malloc_r+0x20>
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	6864      	ldr	r4, [r4, #4]
 8008bc8:	e7cc      	b.n	8008b64 <_malloc_r+0x2c>
 8008bca:	1cc4      	adds	r4, r0, #3
 8008bcc:	f024 0403 	bic.w	r4, r4, #3
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	d0e3      	beq.n	8008b9c <_malloc_r+0x64>
 8008bd4:	1a21      	subs	r1, r4, r0
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f820 	bl	8008c1c <_sbrk_r>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d1dd      	bne.n	8008b9c <_malloc_r+0x64>
 8008be0:	e7cf      	b.n	8008b82 <_malloc_r+0x4a>
 8008be2:	bf00      	nop
 8008be4:	2000048c 	.word	0x2000048c
 8008be8:	20000490 	.word	0x20000490

08008bec <iprintf>:
 8008bec:	b40f      	push	{r0, r1, r2, r3}
 8008bee:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <iprintf+0x2c>)
 8008bf0:	b513      	push	{r0, r1, r4, lr}
 8008bf2:	681c      	ldr	r4, [r3, #0]
 8008bf4:	b124      	cbz	r4, 8008c00 <iprintf+0x14>
 8008bf6:	69a3      	ldr	r3, [r4, #24]
 8008bf8:	b913      	cbnz	r3, 8008c00 <iprintf+0x14>
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f93a 	bl	8008e74 <__sinit>
 8008c00:	ab05      	add	r3, sp, #20
 8008c02:	4620      	mov	r0, r4
 8008c04:	9a04      	ldr	r2, [sp, #16]
 8008c06:	68a1      	ldr	r1, [r4, #8]
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f000 fd49 	bl	80096a0 <_vfiprintf_r>
 8008c0e:	b002      	add	sp, #8
 8008c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c14:	b004      	add	sp, #16
 8008c16:	4770      	bx	lr
 8008c18:	200001ac 	.word	0x200001ac

08008c1c <_sbrk_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4d05      	ldr	r5, [pc, #20]	; (8008c38 <_sbrk_r+0x1c>)
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f8 fe48 	bl	80018bc <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_sbrk_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_sbrk_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	20001570 	.word	0x20001570

08008c3c <siprintf>:
 8008c3c:	b40e      	push	{r1, r2, r3}
 8008c3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c42:	b500      	push	{lr}
 8008c44:	b09c      	sub	sp, #112	; 0x70
 8008c46:	ab1d      	add	r3, sp, #116	; 0x74
 8008c48:	9002      	str	r0, [sp, #8]
 8008c4a:	9006      	str	r0, [sp, #24]
 8008c4c:	9107      	str	r1, [sp, #28]
 8008c4e:	9104      	str	r1, [sp, #16]
 8008c50:	4808      	ldr	r0, [pc, #32]	; (8008c74 <siprintf+0x38>)
 8008c52:	4909      	ldr	r1, [pc, #36]	; (8008c78 <siprintf+0x3c>)
 8008c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c58:	9105      	str	r1, [sp, #20]
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	a902      	add	r1, sp, #8
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	f000 fa22 	bl	80090a8 <_svfiprintf_r>
 8008c64:	2200      	movs	r2, #0
 8008c66:	9b02      	ldr	r3, [sp, #8]
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	b01c      	add	sp, #112	; 0x70
 8008c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c70:	b003      	add	sp, #12
 8008c72:	4770      	bx	lr
 8008c74:	200001ac 	.word	0x200001ac
 8008c78:	ffff0208 	.word	0xffff0208

08008c7c <siscanf>:
 8008c7c:	b40e      	push	{r1, r2, r3}
 8008c7e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008c82:	b530      	push	{r4, r5, lr}
 8008c84:	b09c      	sub	sp, #112	; 0x70
 8008c86:	ac1f      	add	r4, sp, #124	; 0x7c
 8008c88:	f854 5b04 	ldr.w	r5, [r4], #4
 8008c8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008c90:	9002      	str	r0, [sp, #8]
 8008c92:	9006      	str	r0, [sp, #24]
 8008c94:	f7f7 fa66 	bl	8000164 <strlen>
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <siscanf+0x4c>)
 8008c9a:	9003      	str	r0, [sp, #12]
 8008c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ca2:	9314      	str	r3, [sp, #80]	; 0x50
 8008ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ca8:	9007      	str	r0, [sp, #28]
 8008caa:	4808      	ldr	r0, [pc, #32]	; (8008ccc <siscanf+0x50>)
 8008cac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4623      	mov	r3, r4
 8008cb4:	a902      	add	r1, sp, #8
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	9401      	str	r4, [sp, #4]
 8008cba:	f000 fb4f 	bl	800935c <__ssvfiscanf_r>
 8008cbe:	b01c      	add	sp, #112	; 0x70
 8008cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	08008cf3 	.word	0x08008cf3
 8008ccc:	200001ac 	.word	0x200001ac

08008cd0 <__sread>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f001 f8f2 	bl	8009ec0 <_read_r>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bfab      	itete	ge
 8008ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce4:	181b      	addge	r3, r3, r0
 8008ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cea:	bfac      	ite	ge
 8008cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cee:	81a3      	strhlt	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__seofread>:
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	4770      	bx	lr

08008cf6 <__swrite>:
 8008cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfa:	461f      	mov	r7, r3
 8008cfc:	898b      	ldrh	r3, [r1, #12]
 8008cfe:	4605      	mov	r5, r0
 8008d00:	05db      	lsls	r3, r3, #23
 8008d02:	460c      	mov	r4, r1
 8008d04:	4616      	mov	r6, r2
 8008d06:	d505      	bpl.n	8008d14 <__swrite+0x1e>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f950 	bl	8008fb4 <_lseek_r>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	4632      	mov	r2, r6
 8008d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	463b      	mov	r3, r7
 8008d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2a:	f000 b829 	b.w	8008d80 <_write_r>

08008d2e <__sseek>:
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	460c      	mov	r4, r1
 8008d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d36:	f000 f93d 	bl	8008fb4 <_lseek_r>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	bf15      	itete	ne
 8008d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d4a:	81a3      	strheq	r3, [r4, #12]
 8008d4c:	bf18      	it	ne
 8008d4e:	81a3      	strhne	r3, [r4, #12]
 8008d50:	bd10      	pop	{r4, pc}

08008d52 <__sclose>:
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 b825 	b.w	8008da4 <_close_r>

08008d5a <strncmp>:
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	b16a      	cbz	r2, 8008d7a <strncmp+0x20>
 8008d5e:	3901      	subs	r1, #1
 8008d60:	1884      	adds	r4, r0, r2
 8008d62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d103      	bne.n	8008d76 <strncmp+0x1c>
 8008d6e:	42a0      	cmp	r0, r4
 8008d70:	d001      	beq.n	8008d76 <strncmp+0x1c>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f5      	bne.n	8008d62 <strncmp+0x8>
 8008d76:	1a98      	subs	r0, r3, r2
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	e7fc      	b.n	8008d78 <strncmp+0x1e>
	...

08008d80 <_write_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	4611      	mov	r1, r2
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4d05      	ldr	r5, [pc, #20]	; (8008da0 <_write_r+0x20>)
 8008d8c:	602a      	str	r2, [r5, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f7f8 fd47 	bl	8001822 <_write>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_write_r+0x1e>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_write_r+0x1e>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20001570 	.word	0x20001570

08008da4 <_close_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	2300      	movs	r3, #0
 8008da8:	4d05      	ldr	r5, [pc, #20]	; (8008dc0 <_close_r+0x1c>)
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f8 fd53 	bl	800185a <_close>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_close_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_close_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20001570 	.word	0x20001570

08008dc4 <std>:
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	4604      	mov	r4, r0
 8008dca:	e9c0 3300 	strd	r3, r3, [r0]
 8008dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dd2:	6083      	str	r3, [r0, #8]
 8008dd4:	8181      	strh	r1, [r0, #12]
 8008dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8008dd8:	81c2      	strh	r2, [r0, #14]
 8008dda:	6183      	str	r3, [r0, #24]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	2208      	movs	r2, #8
 8008de0:	305c      	adds	r0, #92	; 0x5c
 8008de2:	f7ff fe55 	bl	8008a90 <memset>
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x38>)
 8008de8:	6224      	str	r4, [r4, #32]
 8008dea:	6263      	str	r3, [r4, #36]	; 0x24
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <std+0x3c>)
 8008dee:	62a3      	str	r3, [r4, #40]	; 0x28
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <std+0x40>)
 8008df2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008df4:	4b04      	ldr	r3, [pc, #16]	; (8008e08 <std+0x44>)
 8008df6:	6323      	str	r3, [r4, #48]	; 0x30
 8008df8:	bd10      	pop	{r4, pc}
 8008dfa:	bf00      	nop
 8008dfc:	08008cd1 	.word	0x08008cd1
 8008e00:	08008cf7 	.word	0x08008cf7
 8008e04:	08008d2f 	.word	0x08008d2f
 8008e08:	08008d53 	.word	0x08008d53

08008e0c <_cleanup_r>:
 8008e0c:	4901      	ldr	r1, [pc, #4]	; (8008e14 <_cleanup_r+0x8>)
 8008e0e:	f000 b8af 	b.w	8008f70 <_fwalk_reent>
 8008e12:	bf00      	nop
 8008e14:	0800a461 	.word	0x0800a461

08008e18 <__sfmoreglue>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	2568      	movs	r5, #104	; 0x68
 8008e1c:	1e4a      	subs	r2, r1, #1
 8008e1e:	4355      	muls	r5, r2
 8008e20:	460e      	mov	r6, r1
 8008e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e26:	f7ff fe87 	bl	8008b38 <_malloc_r>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	b140      	cbz	r0, 8008e40 <__sfmoreglue+0x28>
 8008e2e:	2100      	movs	r1, #0
 8008e30:	e9c0 1600 	strd	r1, r6, [r0]
 8008e34:	300c      	adds	r0, #12
 8008e36:	60a0      	str	r0, [r4, #8]
 8008e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e3c:	f7ff fe28 	bl	8008a90 <memset>
 8008e40:	4620      	mov	r0, r4
 8008e42:	bd70      	pop	{r4, r5, r6, pc}

08008e44 <__sfp_lock_acquire>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__sfp_lock_acquire+0x8>)
 8008e46:	f000 b8b3 	b.w	8008fb0 <__retarget_lock_acquire_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	2000156c 	.word	0x2000156c

08008e50 <__sfp_lock_release>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sfp_lock_release+0x8>)
 8008e52:	f000 b8ae 	b.w	8008fb2 <__retarget_lock_release_recursive>
 8008e56:	bf00      	nop
 8008e58:	2000156c 	.word	0x2000156c

08008e5c <__sinit_lock_acquire>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__sinit_lock_acquire+0x8>)
 8008e5e:	f000 b8a7 	b.w	8008fb0 <__retarget_lock_acquire_recursive>
 8008e62:	bf00      	nop
 8008e64:	20001567 	.word	0x20001567

08008e68 <__sinit_lock_release>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__sinit_lock_release+0x8>)
 8008e6a:	f000 b8a2 	b.w	8008fb2 <__retarget_lock_release_recursive>
 8008e6e:	bf00      	nop
 8008e70:	20001567 	.word	0x20001567

08008e74 <__sinit>:
 8008e74:	b510      	push	{r4, lr}
 8008e76:	4604      	mov	r4, r0
 8008e78:	f7ff fff0 	bl	8008e5c <__sinit_lock_acquire>
 8008e7c:	69a3      	ldr	r3, [r4, #24]
 8008e7e:	b11b      	cbz	r3, 8008e88 <__sinit+0x14>
 8008e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e84:	f7ff bff0 	b.w	8008e68 <__sinit_lock_release>
 8008e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <__sinit+0x68>)
 8008e90:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <__sinit+0x6c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	bf08      	it	eq
 8008e9a:	2301      	moveq	r3, #1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	bf08      	it	eq
 8008ea0:	61a3      	streq	r3, [r4, #24]
 8008ea2:	f000 f81f 	bl	8008ee4 <__sfp>
 8008ea6:	6060      	str	r0, [r4, #4]
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 f81b 	bl	8008ee4 <__sfp>
 8008eae:	60a0      	str	r0, [r4, #8]
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 f817 	bl	8008ee4 <__sfp>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2104      	movs	r1, #4
 8008eba:	60e0      	str	r0, [r4, #12]
 8008ebc:	6860      	ldr	r0, [r4, #4]
 8008ebe:	f7ff ff81 	bl	8008dc4 <std>
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	2109      	movs	r1, #9
 8008ec6:	68a0      	ldr	r0, [r4, #8]
 8008ec8:	f7ff ff7c 	bl	8008dc4 <std>
 8008ecc:	2202      	movs	r2, #2
 8008ece:	2112      	movs	r1, #18
 8008ed0:	68e0      	ldr	r0, [r4, #12]
 8008ed2:	f7ff ff77 	bl	8008dc4 <std>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	61a3      	str	r3, [r4, #24]
 8008eda:	e7d1      	b.n	8008e80 <__sinit+0xc>
 8008edc:	0800a7a0 	.word	0x0800a7a0
 8008ee0:	08008e0d 	.word	0x08008e0d

08008ee4 <__sfp>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	f7ff ffac 	bl	8008e44 <__sfp_lock_acquire>
 8008eec:	4b1e      	ldr	r3, [pc, #120]	; (8008f68 <__sfp+0x84>)
 8008eee:	681e      	ldr	r6, [r3, #0]
 8008ef0:	69b3      	ldr	r3, [r6, #24]
 8008ef2:	b913      	cbnz	r3, 8008efa <__sfp+0x16>
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff ffbd 	bl	8008e74 <__sinit>
 8008efa:	3648      	adds	r6, #72	; 0x48
 8008efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	d503      	bpl.n	8008f0c <__sfp+0x28>
 8008f04:	6833      	ldr	r3, [r6, #0]
 8008f06:	b30b      	cbz	r3, 8008f4c <__sfp+0x68>
 8008f08:	6836      	ldr	r6, [r6, #0]
 8008f0a:	e7f7      	b.n	8008efc <__sfp+0x18>
 8008f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f10:	b9d5      	cbnz	r5, 8008f48 <__sfp+0x64>
 8008f12:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <__sfp+0x88>)
 8008f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f18:	60e3      	str	r3, [r4, #12]
 8008f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f1c:	f000 f847 	bl	8008fae <__retarget_lock_init_recursive>
 8008f20:	f7ff ff96 	bl	8008e50 <__sfp_lock_release>
 8008f24:	2208      	movs	r2, #8
 8008f26:	4629      	mov	r1, r5
 8008f28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f30:	6025      	str	r5, [r4, #0]
 8008f32:	61a5      	str	r5, [r4, #24]
 8008f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f38:	f7ff fdaa 	bl	8008a90 <memset>
 8008f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f44:	4620      	mov	r0, r4
 8008f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f48:	3468      	adds	r4, #104	; 0x68
 8008f4a:	e7d9      	b.n	8008f00 <__sfp+0x1c>
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	4638      	mov	r0, r7
 8008f50:	f7ff ff62 	bl	8008e18 <__sfmoreglue>
 8008f54:	4604      	mov	r4, r0
 8008f56:	6030      	str	r0, [r6, #0]
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1d5      	bne.n	8008f08 <__sfp+0x24>
 8008f5c:	f7ff ff78 	bl	8008e50 <__sfp_lock_release>
 8008f60:	230c      	movs	r3, #12
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	e7ee      	b.n	8008f44 <__sfp+0x60>
 8008f66:	bf00      	nop
 8008f68:	0800a7a0 	.word	0x0800a7a0
 8008f6c:	ffff0001 	.word	0xffff0001

08008f70 <_fwalk_reent>:
 8008f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f74:	4606      	mov	r6, r0
 8008f76:	4688      	mov	r8, r1
 8008f78:	2700      	movs	r7, #0
 8008f7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f82:	f1b9 0901 	subs.w	r9, r9, #1
 8008f86:	d505      	bpl.n	8008f94 <_fwalk_reent+0x24>
 8008f88:	6824      	ldr	r4, [r4, #0]
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	d1f7      	bne.n	8008f7e <_fwalk_reent+0xe>
 8008f8e:	4638      	mov	r0, r7
 8008f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f94:	89ab      	ldrh	r3, [r5, #12]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d907      	bls.n	8008faa <_fwalk_reent+0x3a>
 8008f9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	d003      	beq.n	8008faa <_fwalk_reent+0x3a>
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	47c0      	blx	r8
 8008fa8:	4307      	orrs	r7, r0
 8008faa:	3568      	adds	r5, #104	; 0x68
 8008fac:	e7e9      	b.n	8008f82 <_fwalk_reent+0x12>

08008fae <__retarget_lock_init_recursive>:
 8008fae:	4770      	bx	lr

08008fb0 <__retarget_lock_acquire_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_release_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <_lseek_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4d05      	ldr	r5, [pc, #20]	; (8008fd4 <_lseek_r+0x20>)
 8008fc0:	602a      	str	r2, [r5, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f7f8 fc6d 	bl	80018a2 <_lseek>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_lseek_r+0x1e>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_lseek_r+0x1e>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	20001570 	.word	0x20001570

08008fd8 <__malloc_lock>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	; (8008fe0 <__malloc_lock+0x8>)
 8008fda:	f7ff bfe9 	b.w	8008fb0 <__retarget_lock_acquire_recursive>
 8008fde:	bf00      	nop
 8008fe0:	20001568 	.word	0x20001568

08008fe4 <__malloc_unlock>:
 8008fe4:	4801      	ldr	r0, [pc, #4]	; (8008fec <__malloc_unlock+0x8>)
 8008fe6:	f7ff bfe4 	b.w	8008fb2 <__retarget_lock_release_recursive>
 8008fea:	bf00      	nop
 8008fec:	20001568 	.word	0x20001568

08008ff0 <__ssputs_r>:
 8008ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	688e      	ldr	r6, [r1, #8]
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	429e      	cmp	r6, r3
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	4690      	mov	r8, r2
 8008ffe:	461f      	mov	r7, r3
 8009000:	d838      	bhi.n	8009074 <__ssputs_r+0x84>
 8009002:	898a      	ldrh	r2, [r1, #12]
 8009004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009008:	d032      	beq.n	8009070 <__ssputs_r+0x80>
 800900a:	6825      	ldr	r5, [r4, #0]
 800900c:	6909      	ldr	r1, [r1, #16]
 800900e:	3301      	adds	r3, #1
 8009010:	eba5 0901 	sub.w	r9, r5, r1
 8009014:	6965      	ldr	r5, [r4, #20]
 8009016:	444b      	add	r3, r9
 8009018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800901c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009020:	106d      	asrs	r5, r5, #1
 8009022:	429d      	cmp	r5, r3
 8009024:	bf38      	it	cc
 8009026:	461d      	movcc	r5, r3
 8009028:	0553      	lsls	r3, r2, #21
 800902a:	d531      	bpl.n	8009090 <__ssputs_r+0xa0>
 800902c:	4629      	mov	r1, r5
 800902e:	f7ff fd83 	bl	8008b38 <_malloc_r>
 8009032:	4606      	mov	r6, r0
 8009034:	b950      	cbnz	r0, 800904c <__ssputs_r+0x5c>
 8009036:	230c      	movs	r3, #12
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	f8ca 3000 	str.w	r3, [sl]
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904c:	464a      	mov	r2, r9
 800904e:	6921      	ldr	r1, [r4, #16]
 8009050:	f7ff fd10 	bl	8008a74 <memcpy>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800905a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	6126      	str	r6, [r4, #16]
 8009062:	444e      	add	r6, r9
 8009064:	6026      	str	r6, [r4, #0]
 8009066:	463e      	mov	r6, r7
 8009068:	6165      	str	r5, [r4, #20]
 800906a:	eba5 0509 	sub.w	r5, r5, r9
 800906e:	60a5      	str	r5, [r4, #8]
 8009070:	42be      	cmp	r6, r7
 8009072:	d900      	bls.n	8009076 <__ssputs_r+0x86>
 8009074:	463e      	mov	r6, r7
 8009076:	4632      	mov	r2, r6
 8009078:	4641      	mov	r1, r8
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	f001 fa9e 	bl	800a5bc <memmove>
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	6822      	ldr	r2, [r4, #0]
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	4432      	add	r2, r6
 8009088:	2000      	movs	r0, #0
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	6022      	str	r2, [r4, #0]
 800908e:	e7db      	b.n	8009048 <__ssputs_r+0x58>
 8009090:	462a      	mov	r2, r5
 8009092:	f001 faad 	bl	800a5f0 <_realloc_r>
 8009096:	4606      	mov	r6, r0
 8009098:	2800      	cmp	r0, #0
 800909a:	d1e1      	bne.n	8009060 <__ssputs_r+0x70>
 800909c:	4650      	mov	r0, sl
 800909e:	6921      	ldr	r1, [r4, #16]
 80090a0:	f7ff fcfe 	bl	8008aa0 <_free_r>
 80090a4:	e7c7      	b.n	8009036 <__ssputs_r+0x46>
	...

080090a8 <_svfiprintf_r>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4698      	mov	r8, r3
 80090ae:	898b      	ldrh	r3, [r1, #12]
 80090b0:	4607      	mov	r7, r0
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	460d      	mov	r5, r1
 80090b6:	4614      	mov	r4, r2
 80090b8:	b09d      	sub	sp, #116	; 0x74
 80090ba:	d50e      	bpl.n	80090da <_svfiprintf_r+0x32>
 80090bc:	690b      	ldr	r3, [r1, #16]
 80090be:	b963      	cbnz	r3, 80090da <_svfiprintf_r+0x32>
 80090c0:	2140      	movs	r1, #64	; 0x40
 80090c2:	f7ff fd39 	bl	8008b38 <_malloc_r>
 80090c6:	6028      	str	r0, [r5, #0]
 80090c8:	6128      	str	r0, [r5, #16]
 80090ca:	b920      	cbnz	r0, 80090d6 <_svfiprintf_r+0x2e>
 80090cc:	230c      	movs	r3, #12
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	e0d1      	b.n	800927a <_svfiprintf_r+0x1d2>
 80090d6:	2340      	movs	r3, #64	; 0x40
 80090d8:	616b      	str	r3, [r5, #20]
 80090da:	2300      	movs	r3, #0
 80090dc:	9309      	str	r3, [sp, #36]	; 0x24
 80090de:	2320      	movs	r3, #32
 80090e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e4:	2330      	movs	r3, #48	; 0x30
 80090e6:	f04f 0901 	mov.w	r9, #1
 80090ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009294 <_svfiprintf_r+0x1ec>
 80090f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090f6:	4623      	mov	r3, r4
 80090f8:	469a      	mov	sl, r3
 80090fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fe:	b10a      	cbz	r2, 8009104 <_svfiprintf_r+0x5c>
 8009100:	2a25      	cmp	r2, #37	; 0x25
 8009102:	d1f9      	bne.n	80090f8 <_svfiprintf_r+0x50>
 8009104:	ebba 0b04 	subs.w	fp, sl, r4
 8009108:	d00b      	beq.n	8009122 <_svfiprintf_r+0x7a>
 800910a:	465b      	mov	r3, fp
 800910c:	4622      	mov	r2, r4
 800910e:	4629      	mov	r1, r5
 8009110:	4638      	mov	r0, r7
 8009112:	f7ff ff6d 	bl	8008ff0 <__ssputs_r>
 8009116:	3001      	adds	r0, #1
 8009118:	f000 80aa 	beq.w	8009270 <_svfiprintf_r+0x1c8>
 800911c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800911e:	445a      	add	r2, fp
 8009120:	9209      	str	r2, [sp, #36]	; 0x24
 8009122:	f89a 3000 	ldrb.w	r3, [sl]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80a2 	beq.w	8009270 <_svfiprintf_r+0x1c8>
 800912c:	2300      	movs	r3, #0
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009136:	f10a 0a01 	add.w	sl, sl, #1
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	9307      	str	r3, [sp, #28]
 800913e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009142:	931a      	str	r3, [sp, #104]	; 0x68
 8009144:	4654      	mov	r4, sl
 8009146:	2205      	movs	r2, #5
 8009148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914c:	4851      	ldr	r0, [pc, #324]	; (8009294 <_svfiprintf_r+0x1ec>)
 800914e:	f001 fa27 	bl	800a5a0 <memchr>
 8009152:	9a04      	ldr	r2, [sp, #16]
 8009154:	b9d8      	cbnz	r0, 800918e <_svfiprintf_r+0xe6>
 8009156:	06d0      	lsls	r0, r2, #27
 8009158:	bf44      	itt	mi
 800915a:	2320      	movmi	r3, #32
 800915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009160:	0711      	lsls	r1, r2, #28
 8009162:	bf44      	itt	mi
 8009164:	232b      	movmi	r3, #43	; 0x2b
 8009166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916a:	f89a 3000 	ldrb.w	r3, [sl]
 800916e:	2b2a      	cmp	r3, #42	; 0x2a
 8009170:	d015      	beq.n	800919e <_svfiprintf_r+0xf6>
 8009172:	4654      	mov	r4, sl
 8009174:	2000      	movs	r0, #0
 8009176:	f04f 0c0a 	mov.w	ip, #10
 800917a:	9a07      	ldr	r2, [sp, #28]
 800917c:	4621      	mov	r1, r4
 800917e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009182:	3b30      	subs	r3, #48	; 0x30
 8009184:	2b09      	cmp	r3, #9
 8009186:	d94e      	bls.n	8009226 <_svfiprintf_r+0x17e>
 8009188:	b1b0      	cbz	r0, 80091b8 <_svfiprintf_r+0x110>
 800918a:	9207      	str	r2, [sp, #28]
 800918c:	e014      	b.n	80091b8 <_svfiprintf_r+0x110>
 800918e:	eba0 0308 	sub.w	r3, r0, r8
 8009192:	fa09 f303 	lsl.w	r3, r9, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	46a2      	mov	sl, r4
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	e7d2      	b.n	8009144 <_svfiprintf_r+0x9c>
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	1d19      	adds	r1, r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	9103      	str	r1, [sp, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfbb      	ittet	lt
 80091aa:	425b      	neglt	r3, r3
 80091ac:	f042 0202 	orrlt.w	r2, r2, #2
 80091b0:	9307      	strge	r3, [sp, #28]
 80091b2:	9307      	strlt	r3, [sp, #28]
 80091b4:	bfb8      	it	lt
 80091b6:	9204      	strlt	r2, [sp, #16]
 80091b8:	7823      	ldrb	r3, [r4, #0]
 80091ba:	2b2e      	cmp	r3, #46	; 0x2e
 80091bc:	d10c      	bne.n	80091d8 <_svfiprintf_r+0x130>
 80091be:	7863      	ldrb	r3, [r4, #1]
 80091c0:	2b2a      	cmp	r3, #42	; 0x2a
 80091c2:	d135      	bne.n	8009230 <_svfiprintf_r+0x188>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	3402      	adds	r4, #2
 80091c8:	1d1a      	adds	r2, r3, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	9203      	str	r2, [sp, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bfb8      	it	lt
 80091d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80091d6:	9305      	str	r3, [sp, #20]
 80091d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092a4 <_svfiprintf_r+0x1fc>
 80091dc:	2203      	movs	r2, #3
 80091de:	4650      	mov	r0, sl
 80091e0:	7821      	ldrb	r1, [r4, #0]
 80091e2:	f001 f9dd 	bl	800a5a0 <memchr>
 80091e6:	b140      	cbz	r0, 80091fa <_svfiprintf_r+0x152>
 80091e8:	2340      	movs	r3, #64	; 0x40
 80091ea:	eba0 000a 	sub.w	r0, r0, sl
 80091ee:	fa03 f000 	lsl.w	r0, r3, r0
 80091f2:	9b04      	ldr	r3, [sp, #16]
 80091f4:	3401      	adds	r4, #1
 80091f6:	4303      	orrs	r3, r0
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fe:	2206      	movs	r2, #6
 8009200:	4825      	ldr	r0, [pc, #148]	; (8009298 <_svfiprintf_r+0x1f0>)
 8009202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009206:	f001 f9cb 	bl	800a5a0 <memchr>
 800920a:	2800      	cmp	r0, #0
 800920c:	d038      	beq.n	8009280 <_svfiprintf_r+0x1d8>
 800920e:	4b23      	ldr	r3, [pc, #140]	; (800929c <_svfiprintf_r+0x1f4>)
 8009210:	bb1b      	cbnz	r3, 800925a <_svfiprintf_r+0x1b2>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	3307      	adds	r3, #7
 8009216:	f023 0307 	bic.w	r3, r3, #7
 800921a:	3308      	adds	r3, #8
 800921c:	9303      	str	r3, [sp, #12]
 800921e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009220:	4433      	add	r3, r6
 8009222:	9309      	str	r3, [sp, #36]	; 0x24
 8009224:	e767      	b.n	80090f6 <_svfiprintf_r+0x4e>
 8009226:	460c      	mov	r4, r1
 8009228:	2001      	movs	r0, #1
 800922a:	fb0c 3202 	mla	r2, ip, r2, r3
 800922e:	e7a5      	b.n	800917c <_svfiprintf_r+0xd4>
 8009230:	2300      	movs	r3, #0
 8009232:	f04f 0c0a 	mov.w	ip, #10
 8009236:	4619      	mov	r1, r3
 8009238:	3401      	adds	r4, #1
 800923a:	9305      	str	r3, [sp, #20]
 800923c:	4620      	mov	r0, r4
 800923e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009242:	3a30      	subs	r2, #48	; 0x30
 8009244:	2a09      	cmp	r2, #9
 8009246:	d903      	bls.n	8009250 <_svfiprintf_r+0x1a8>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0c5      	beq.n	80091d8 <_svfiprintf_r+0x130>
 800924c:	9105      	str	r1, [sp, #20]
 800924e:	e7c3      	b.n	80091d8 <_svfiprintf_r+0x130>
 8009250:	4604      	mov	r4, r0
 8009252:	2301      	movs	r3, #1
 8009254:	fb0c 2101 	mla	r1, ip, r1, r2
 8009258:	e7f0      	b.n	800923c <_svfiprintf_r+0x194>
 800925a:	ab03      	add	r3, sp, #12
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	462a      	mov	r2, r5
 8009260:	4638      	mov	r0, r7
 8009262:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <_svfiprintf_r+0x1f8>)
 8009264:	a904      	add	r1, sp, #16
 8009266:	f3af 8000 	nop.w
 800926a:	1c42      	adds	r2, r0, #1
 800926c:	4606      	mov	r6, r0
 800926e:	d1d6      	bne.n	800921e <_svfiprintf_r+0x176>
 8009270:	89ab      	ldrh	r3, [r5, #12]
 8009272:	065b      	lsls	r3, r3, #25
 8009274:	f53f af2c 	bmi.w	80090d0 <_svfiprintf_r+0x28>
 8009278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927a:	b01d      	add	sp, #116	; 0x74
 800927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	462a      	mov	r2, r5
 8009286:	4638      	mov	r0, r7
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <_svfiprintf_r+0x1f8>)
 800928a:	a904      	add	r1, sp, #16
 800928c:	f000 fba8 	bl	80099e0 <_printf_i>
 8009290:	e7eb      	b.n	800926a <_svfiprintf_r+0x1c2>
 8009292:	bf00      	nop
 8009294:	0800a804 	.word	0x0800a804
 8009298:	0800a80e 	.word	0x0800a80e
 800929c:	00000000 	.word	0x00000000
 80092a0:	08008ff1 	.word	0x08008ff1
 80092a4:	0800a80a 	.word	0x0800a80a

080092a8 <_sungetc_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	1c4b      	adds	r3, r1, #1
 80092ac:	4614      	mov	r4, r2
 80092ae:	d103      	bne.n	80092b8 <_sungetc_r+0x10>
 80092b0:	f04f 35ff 	mov.w	r5, #4294967295
 80092b4:	4628      	mov	r0, r5
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	8993      	ldrh	r3, [r2, #12]
 80092ba:	b2cd      	uxtb	r5, r1
 80092bc:	f023 0320 	bic.w	r3, r3, #32
 80092c0:	8193      	strh	r3, [r2, #12]
 80092c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092c4:	6852      	ldr	r2, [r2, #4]
 80092c6:	b18b      	cbz	r3, 80092ec <_sungetc_r+0x44>
 80092c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092ca:	4293      	cmp	r3, r2
 80092cc:	dd08      	ble.n	80092e0 <_sungetc_r+0x38>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	1e5a      	subs	r2, r3, #1
 80092d2:	6022      	str	r2, [r4, #0]
 80092d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80092d8:	6863      	ldr	r3, [r4, #4]
 80092da:	3301      	adds	r3, #1
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	e7e9      	b.n	80092b4 <_sungetc_r+0xc>
 80092e0:	4621      	mov	r1, r4
 80092e2:	f000 ff3f 	bl	800a164 <__submore>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0f1      	beq.n	80092ce <_sungetc_r+0x26>
 80092ea:	e7e1      	b.n	80092b0 <_sungetc_r+0x8>
 80092ec:	6921      	ldr	r1, [r4, #16]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	b151      	cbz	r1, 8009308 <_sungetc_r+0x60>
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d208      	bcs.n	8009308 <_sungetc_r+0x60>
 80092f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80092fa:	42a9      	cmp	r1, r5
 80092fc:	d104      	bne.n	8009308 <_sungetc_r+0x60>
 80092fe:	3b01      	subs	r3, #1
 8009300:	3201      	adds	r2, #1
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	6062      	str	r2, [r4, #4]
 8009306:	e7d5      	b.n	80092b4 <_sungetc_r+0xc>
 8009308:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800930c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009310:	6363      	str	r3, [r4, #52]	; 0x34
 8009312:	2303      	movs	r3, #3
 8009314:	63a3      	str	r3, [r4, #56]	; 0x38
 8009316:	4623      	mov	r3, r4
 8009318:	f803 5f46 	strb.w	r5, [r3, #70]!
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	2301      	movs	r3, #1
 8009320:	e7dc      	b.n	80092dc <_sungetc_r+0x34>

08009322 <__ssrefill_r>:
 8009322:	b510      	push	{r4, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009328:	b169      	cbz	r1, 8009346 <__ssrefill_r+0x24>
 800932a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800932e:	4299      	cmp	r1, r3
 8009330:	d001      	beq.n	8009336 <__ssrefill_r+0x14>
 8009332:	f7ff fbb5 	bl	8008aa0 <_free_r>
 8009336:	2000      	movs	r0, #0
 8009338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800933a:	6360      	str	r0, [r4, #52]	; 0x34
 800933c:	6063      	str	r3, [r4, #4]
 800933e:	b113      	cbz	r3, 8009346 <__ssrefill_r+0x24>
 8009340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	bd10      	pop	{r4, pc}
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	6063      	str	r3, [r4, #4]
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f043 0320 	orr.w	r3, r3, #32
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e7f3      	b.n	8009344 <__ssrefill_r+0x22>

0800935c <__ssvfiscanf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	460c      	mov	r4, r1
 8009362:	2100      	movs	r1, #0
 8009364:	4606      	mov	r6, r0
 8009366:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800936a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800936e:	49b3      	ldr	r1, [pc, #716]	; (800963c <__ssvfiscanf_r+0x2e0>)
 8009370:	f10d 0804 	add.w	r8, sp, #4
 8009374:	91a0      	str	r1, [sp, #640]	; 0x280
 8009376:	49b2      	ldr	r1, [pc, #712]	; (8009640 <__ssvfiscanf_r+0x2e4>)
 8009378:	4fb2      	ldr	r7, [pc, #712]	; (8009644 <__ssvfiscanf_r+0x2e8>)
 800937a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009648 <__ssvfiscanf_r+0x2ec>
 800937e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009382:	91a1      	str	r1, [sp, #644]	; 0x284
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	f892 a000 	ldrb.w	sl, [r2]
 800938a:	f1ba 0f00 	cmp.w	sl, #0
 800938e:	f000 8153 	beq.w	8009638 <__ssvfiscanf_r+0x2dc>
 8009392:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009396:	1c55      	adds	r5, r2, #1
 8009398:	f013 0308 	ands.w	r3, r3, #8
 800939c:	d019      	beq.n	80093d2 <__ssvfiscanf_r+0x76>
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dd0f      	ble.n	80093c4 <__ssvfiscanf_r+0x68>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	5cba      	ldrb	r2, [r7, r2]
 80093aa:	0712      	lsls	r2, r2, #28
 80093ac:	d401      	bmi.n	80093b2 <__ssvfiscanf_r+0x56>
 80093ae:	462a      	mov	r2, r5
 80093b0:	e7e9      	b.n	8009386 <__ssvfiscanf_r+0x2a>
 80093b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80093b4:	3301      	adds	r3, #1
 80093b6:	3201      	adds	r2, #1
 80093b8:	9245      	str	r2, [sp, #276]	; 0x114
 80093ba:	6862      	ldr	r2, [r4, #4]
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	3a01      	subs	r2, #1
 80093c0:	6062      	str	r2, [r4, #4]
 80093c2:	e7ec      	b.n	800939e <__ssvfiscanf_r+0x42>
 80093c4:	4621      	mov	r1, r4
 80093c6:	4630      	mov	r0, r6
 80093c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80093ca:	4798      	blx	r3
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d0e9      	beq.n	80093a4 <__ssvfiscanf_r+0x48>
 80093d0:	e7ed      	b.n	80093ae <__ssvfiscanf_r+0x52>
 80093d2:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80093d6:	f040 8086 	bne.w	80094e6 <__ssvfiscanf_r+0x18a>
 80093da:	9341      	str	r3, [sp, #260]	; 0x104
 80093dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80093de:	7853      	ldrb	r3, [r2, #1]
 80093e0:	2b2a      	cmp	r3, #42	; 0x2a
 80093e2:	bf04      	itt	eq
 80093e4:	2310      	moveq	r3, #16
 80093e6:	1c95      	addeq	r5, r2, #2
 80093e8:	f04f 020a 	mov.w	r2, #10
 80093ec:	bf08      	it	eq
 80093ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80093f0:	46ab      	mov	fp, r5
 80093f2:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80093f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80093fa:	2b09      	cmp	r3, #9
 80093fc:	d91d      	bls.n	800943a <__ssvfiscanf_r+0xde>
 80093fe:	2203      	movs	r2, #3
 8009400:	4891      	ldr	r0, [pc, #580]	; (8009648 <__ssvfiscanf_r+0x2ec>)
 8009402:	f001 f8cd 	bl	800a5a0 <memchr>
 8009406:	b140      	cbz	r0, 800941a <__ssvfiscanf_r+0xbe>
 8009408:	2301      	movs	r3, #1
 800940a:	465d      	mov	r5, fp
 800940c:	eba0 0009 	sub.w	r0, r0, r9
 8009410:	fa03 f000 	lsl.w	r0, r3, r0
 8009414:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009416:	4318      	orrs	r0, r3
 8009418:	9041      	str	r0, [sp, #260]	; 0x104
 800941a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800941e:	2b78      	cmp	r3, #120	; 0x78
 8009420:	d806      	bhi.n	8009430 <__ssvfiscanf_r+0xd4>
 8009422:	2b57      	cmp	r3, #87	; 0x57
 8009424:	d810      	bhi.n	8009448 <__ssvfiscanf_r+0xec>
 8009426:	2b25      	cmp	r3, #37	; 0x25
 8009428:	d05d      	beq.n	80094e6 <__ssvfiscanf_r+0x18a>
 800942a:	d857      	bhi.n	80094dc <__ssvfiscanf_r+0x180>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d075      	beq.n	800951c <__ssvfiscanf_r+0x1c0>
 8009430:	2303      	movs	r3, #3
 8009432:	9347      	str	r3, [sp, #284]	; 0x11c
 8009434:	230a      	movs	r3, #10
 8009436:	9342      	str	r3, [sp, #264]	; 0x108
 8009438:	e082      	b.n	8009540 <__ssvfiscanf_r+0x1e4>
 800943a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800943c:	465d      	mov	r5, fp
 800943e:	fb02 1303 	mla	r3, r2, r3, r1
 8009442:	3b30      	subs	r3, #48	; 0x30
 8009444:	9343      	str	r3, [sp, #268]	; 0x10c
 8009446:	e7d3      	b.n	80093f0 <__ssvfiscanf_r+0x94>
 8009448:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800944c:	2a20      	cmp	r2, #32
 800944e:	d8ef      	bhi.n	8009430 <__ssvfiscanf_r+0xd4>
 8009450:	a101      	add	r1, pc, #4	; (adr r1, 8009458 <__ssvfiscanf_r+0xfc>)
 8009452:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009456:	bf00      	nop
 8009458:	0800952b 	.word	0x0800952b
 800945c:	08009431 	.word	0x08009431
 8009460:	08009431 	.word	0x08009431
 8009464:	08009589 	.word	0x08009589
 8009468:	08009431 	.word	0x08009431
 800946c:	08009431 	.word	0x08009431
 8009470:	08009431 	.word	0x08009431
 8009474:	08009431 	.word	0x08009431
 8009478:	08009431 	.word	0x08009431
 800947c:	08009431 	.word	0x08009431
 8009480:	08009431 	.word	0x08009431
 8009484:	0800959f 	.word	0x0800959f
 8009488:	08009575 	.word	0x08009575
 800948c:	080094e3 	.word	0x080094e3
 8009490:	080094e3 	.word	0x080094e3
 8009494:	080094e3 	.word	0x080094e3
 8009498:	08009431 	.word	0x08009431
 800949c:	08009579 	.word	0x08009579
 80094a0:	08009431 	.word	0x08009431
 80094a4:	08009431 	.word	0x08009431
 80094a8:	08009431 	.word	0x08009431
 80094ac:	08009431 	.word	0x08009431
 80094b0:	080095af 	.word	0x080095af
 80094b4:	08009581 	.word	0x08009581
 80094b8:	08009523 	.word	0x08009523
 80094bc:	08009431 	.word	0x08009431
 80094c0:	08009431 	.word	0x08009431
 80094c4:	080095ab 	.word	0x080095ab
 80094c8:	08009431 	.word	0x08009431
 80094cc:	08009575 	.word	0x08009575
 80094d0:	08009431 	.word	0x08009431
 80094d4:	08009431 	.word	0x08009431
 80094d8:	0800952b 	.word	0x0800952b
 80094dc:	3b45      	subs	r3, #69	; 0x45
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d8a6      	bhi.n	8009430 <__ssvfiscanf_r+0xd4>
 80094e2:	2305      	movs	r3, #5
 80094e4:	e02b      	b.n	800953e <__ssvfiscanf_r+0x1e2>
 80094e6:	6863      	ldr	r3, [r4, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dd0d      	ble.n	8009508 <__ssvfiscanf_r+0x1ac>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	4552      	cmp	r2, sl
 80094f2:	f040 80a1 	bne.w	8009638 <__ssvfiscanf_r+0x2dc>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6862      	ldr	r2, [r4, #4]
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80094fe:	3a01      	subs	r2, #1
 8009500:	3301      	adds	r3, #1
 8009502:	6062      	str	r2, [r4, #4]
 8009504:	9345      	str	r3, [sp, #276]	; 0x114
 8009506:	e752      	b.n	80093ae <__ssvfiscanf_r+0x52>
 8009508:	4621      	mov	r1, r4
 800950a:	4630      	mov	r0, r6
 800950c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800950e:	4798      	blx	r3
 8009510:	2800      	cmp	r0, #0
 8009512:	d0eb      	beq.n	80094ec <__ssvfiscanf_r+0x190>
 8009514:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009516:	2800      	cmp	r0, #0
 8009518:	f040 8084 	bne.w	8009624 <__ssvfiscanf_r+0x2c8>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	e086      	b.n	8009630 <__ssvfiscanf_r+0x2d4>
 8009522:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009524:	f042 0220 	orr.w	r2, r2, #32
 8009528:	9241      	str	r2, [sp, #260]	; 0x104
 800952a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800952c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009530:	9241      	str	r2, [sp, #260]	; 0x104
 8009532:	2210      	movs	r2, #16
 8009534:	2b6f      	cmp	r3, #111	; 0x6f
 8009536:	bf34      	ite	cc
 8009538:	2303      	movcc	r3, #3
 800953a:	2304      	movcs	r3, #4
 800953c:	9242      	str	r2, [sp, #264]	; 0x108
 800953e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dd41      	ble.n	80095ca <__ssvfiscanf_r+0x26e>
 8009546:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009548:	0659      	lsls	r1, r3, #25
 800954a:	d404      	bmi.n	8009556 <__ssvfiscanf_r+0x1fa>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	5cba      	ldrb	r2, [r7, r2]
 8009552:	0712      	lsls	r2, r2, #28
 8009554:	d440      	bmi.n	80095d8 <__ssvfiscanf_r+0x27c>
 8009556:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009558:	2b02      	cmp	r3, #2
 800955a:	dc4f      	bgt.n	80095fc <__ssvfiscanf_r+0x2a0>
 800955c:	466b      	mov	r3, sp
 800955e:	4622      	mov	r2, r4
 8009560:	4630      	mov	r0, r6
 8009562:	a941      	add	r1, sp, #260	; 0x104
 8009564:	f000 fb62 	bl	8009c2c <_scanf_chars>
 8009568:	2801      	cmp	r0, #1
 800956a:	d065      	beq.n	8009638 <__ssvfiscanf_r+0x2dc>
 800956c:	2802      	cmp	r0, #2
 800956e:	f47f af1e 	bne.w	80093ae <__ssvfiscanf_r+0x52>
 8009572:	e7cf      	b.n	8009514 <__ssvfiscanf_r+0x1b8>
 8009574:	220a      	movs	r2, #10
 8009576:	e7dd      	b.n	8009534 <__ssvfiscanf_r+0x1d8>
 8009578:	2300      	movs	r3, #0
 800957a:	9342      	str	r3, [sp, #264]	; 0x108
 800957c:	2303      	movs	r3, #3
 800957e:	e7de      	b.n	800953e <__ssvfiscanf_r+0x1e2>
 8009580:	2308      	movs	r3, #8
 8009582:	9342      	str	r3, [sp, #264]	; 0x108
 8009584:	2304      	movs	r3, #4
 8009586:	e7da      	b.n	800953e <__ssvfiscanf_r+0x1e2>
 8009588:	4629      	mov	r1, r5
 800958a:	4640      	mov	r0, r8
 800958c:	f000 fcaa 	bl	8009ee4 <__sccl>
 8009590:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009592:	4605      	mov	r5, r0
 8009594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009598:	9341      	str	r3, [sp, #260]	; 0x104
 800959a:	2301      	movs	r3, #1
 800959c:	e7cf      	b.n	800953e <__ssvfiscanf_r+0x1e2>
 800959e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095a4:	9341      	str	r3, [sp, #260]	; 0x104
 80095a6:	2300      	movs	r3, #0
 80095a8:	e7c9      	b.n	800953e <__ssvfiscanf_r+0x1e2>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e7c7      	b.n	800953e <__ssvfiscanf_r+0x1e2>
 80095ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 80095b0:	06c3      	lsls	r3, r0, #27
 80095b2:	f53f aefc 	bmi.w	80093ae <__ssvfiscanf_r+0x52>
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095ba:	1d19      	adds	r1, r3, #4
 80095bc:	9100      	str	r1, [sp, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	07c0      	lsls	r0, r0, #31
 80095c2:	bf4c      	ite	mi
 80095c4:	801a      	strhmi	r2, [r3, #0]
 80095c6:	601a      	strpl	r2, [r3, #0]
 80095c8:	e6f1      	b.n	80093ae <__ssvfiscanf_r+0x52>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4630      	mov	r0, r6
 80095ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095d0:	4798      	blx	r3
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0b7      	beq.n	8009546 <__ssvfiscanf_r+0x1ea>
 80095d6:	e79d      	b.n	8009514 <__ssvfiscanf_r+0x1b8>
 80095d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095da:	3201      	adds	r2, #1
 80095dc:	9245      	str	r2, [sp, #276]	; 0x114
 80095de:	6862      	ldr	r2, [r4, #4]
 80095e0:	3a01      	subs	r2, #1
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	6062      	str	r2, [r4, #4]
 80095e6:	dd02      	ble.n	80095ee <__ssvfiscanf_r+0x292>
 80095e8:	3301      	adds	r3, #1
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	e7ae      	b.n	800954c <__ssvfiscanf_r+0x1f0>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4630      	mov	r0, r6
 80095f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095f4:	4798      	blx	r3
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0a8      	beq.n	800954c <__ssvfiscanf_r+0x1f0>
 80095fa:	e78b      	b.n	8009514 <__ssvfiscanf_r+0x1b8>
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	dc06      	bgt.n	800960e <__ssvfiscanf_r+0x2b2>
 8009600:	466b      	mov	r3, sp
 8009602:	4622      	mov	r2, r4
 8009604:	4630      	mov	r0, r6
 8009606:	a941      	add	r1, sp, #260	; 0x104
 8009608:	f000 fb68 	bl	8009cdc <_scanf_i>
 800960c:	e7ac      	b.n	8009568 <__ssvfiscanf_r+0x20c>
 800960e:	4b0f      	ldr	r3, [pc, #60]	; (800964c <__ssvfiscanf_r+0x2f0>)
 8009610:	2b00      	cmp	r3, #0
 8009612:	f43f aecc 	beq.w	80093ae <__ssvfiscanf_r+0x52>
 8009616:	466b      	mov	r3, sp
 8009618:	4622      	mov	r2, r4
 800961a:	4630      	mov	r0, r6
 800961c:	a941      	add	r1, sp, #260	; 0x104
 800961e:	f3af 8000 	nop.w
 8009622:	e7a1      	b.n	8009568 <__ssvfiscanf_r+0x20c>
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	f013 0f40 	tst.w	r3, #64	; 0x40
 800962a:	bf18      	it	ne
 800962c:	f04f 30ff 	movne.w	r0, #4294967295
 8009630:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009638:	9844      	ldr	r0, [sp, #272]	; 0x110
 800963a:	e7f9      	b.n	8009630 <__ssvfiscanf_r+0x2d4>
 800963c:	080092a9 	.word	0x080092a9
 8009640:	08009323 	.word	0x08009323
 8009644:	0800a853 	.word	0x0800a853
 8009648:	0800a80a 	.word	0x0800a80a
 800964c:	00000000 	.word	0x00000000

08009650 <__sfputc_r>:
 8009650:	6893      	ldr	r3, [r2, #8]
 8009652:	b410      	push	{r4}
 8009654:	3b01      	subs	r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	6093      	str	r3, [r2, #8]
 800965a:	da07      	bge.n	800966c <__sfputc_r+0x1c>
 800965c:	6994      	ldr	r4, [r2, #24]
 800965e:	42a3      	cmp	r3, r4
 8009660:	db01      	blt.n	8009666 <__sfputc_r+0x16>
 8009662:	290a      	cmp	r1, #10
 8009664:	d102      	bne.n	800966c <__sfputc_r+0x1c>
 8009666:	bc10      	pop	{r4}
 8009668:	f000 bdb4 	b.w	800a1d4 <__swbuf_r>
 800966c:	6813      	ldr	r3, [r2, #0]
 800966e:	1c58      	adds	r0, r3, #1
 8009670:	6010      	str	r0, [r2, #0]
 8009672:	7019      	strb	r1, [r3, #0]
 8009674:	4608      	mov	r0, r1
 8009676:	bc10      	pop	{r4}
 8009678:	4770      	bx	lr

0800967a <__sfputs_r>:
 800967a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	4614      	mov	r4, r2
 8009682:	18d5      	adds	r5, r2, r3
 8009684:	42ac      	cmp	r4, r5
 8009686:	d101      	bne.n	800968c <__sfputs_r+0x12>
 8009688:	2000      	movs	r0, #0
 800968a:	e007      	b.n	800969c <__sfputs_r+0x22>
 800968c:	463a      	mov	r2, r7
 800968e:	4630      	mov	r0, r6
 8009690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009694:	f7ff ffdc 	bl	8009650 <__sfputc_r>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d1f3      	bne.n	8009684 <__sfputs_r+0xa>
 800969c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096a0 <_vfiprintf_r>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	460d      	mov	r5, r1
 80096a6:	4614      	mov	r4, r2
 80096a8:	4698      	mov	r8, r3
 80096aa:	4606      	mov	r6, r0
 80096ac:	b09d      	sub	sp, #116	; 0x74
 80096ae:	b118      	cbz	r0, 80096b8 <_vfiprintf_r+0x18>
 80096b0:	6983      	ldr	r3, [r0, #24]
 80096b2:	b90b      	cbnz	r3, 80096b8 <_vfiprintf_r+0x18>
 80096b4:	f7ff fbde 	bl	8008e74 <__sinit>
 80096b8:	4b89      	ldr	r3, [pc, #548]	; (80098e0 <_vfiprintf_r+0x240>)
 80096ba:	429d      	cmp	r5, r3
 80096bc:	d11b      	bne.n	80096f6 <_vfiprintf_r+0x56>
 80096be:	6875      	ldr	r5, [r6, #4]
 80096c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c2:	07d9      	lsls	r1, r3, #31
 80096c4:	d405      	bmi.n	80096d2 <_vfiprintf_r+0x32>
 80096c6:	89ab      	ldrh	r3, [r5, #12]
 80096c8:	059a      	lsls	r2, r3, #22
 80096ca:	d402      	bmi.n	80096d2 <_vfiprintf_r+0x32>
 80096cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ce:	f7ff fc6f 	bl	8008fb0 <__retarget_lock_acquire_recursive>
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	071b      	lsls	r3, r3, #28
 80096d6:	d501      	bpl.n	80096dc <_vfiprintf_r+0x3c>
 80096d8:	692b      	ldr	r3, [r5, #16]
 80096da:	b9eb      	cbnz	r3, 8009718 <_vfiprintf_r+0x78>
 80096dc:	4629      	mov	r1, r5
 80096de:	4630      	mov	r0, r6
 80096e0:	f000 fdca 	bl	800a278 <__swsetup_r>
 80096e4:	b1c0      	cbz	r0, 8009718 <_vfiprintf_r+0x78>
 80096e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e8:	07dc      	lsls	r4, r3, #31
 80096ea:	d50e      	bpl.n	800970a <_vfiprintf_r+0x6a>
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	b01d      	add	sp, #116	; 0x74
 80096f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f6:	4b7b      	ldr	r3, [pc, #492]	; (80098e4 <_vfiprintf_r+0x244>)
 80096f8:	429d      	cmp	r5, r3
 80096fa:	d101      	bne.n	8009700 <_vfiprintf_r+0x60>
 80096fc:	68b5      	ldr	r5, [r6, #8]
 80096fe:	e7df      	b.n	80096c0 <_vfiprintf_r+0x20>
 8009700:	4b79      	ldr	r3, [pc, #484]	; (80098e8 <_vfiprintf_r+0x248>)
 8009702:	429d      	cmp	r5, r3
 8009704:	bf08      	it	eq
 8009706:	68f5      	ldreq	r5, [r6, #12]
 8009708:	e7da      	b.n	80096c0 <_vfiprintf_r+0x20>
 800970a:	89ab      	ldrh	r3, [r5, #12]
 800970c:	0598      	lsls	r0, r3, #22
 800970e:	d4ed      	bmi.n	80096ec <_vfiprintf_r+0x4c>
 8009710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009712:	f7ff fc4e 	bl	8008fb2 <__retarget_lock_release_recursive>
 8009716:	e7e9      	b.n	80096ec <_vfiprintf_r+0x4c>
 8009718:	2300      	movs	r3, #0
 800971a:	9309      	str	r3, [sp, #36]	; 0x24
 800971c:	2320      	movs	r3, #32
 800971e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009722:	2330      	movs	r3, #48	; 0x30
 8009724:	f04f 0901 	mov.w	r9, #1
 8009728:	f8cd 800c 	str.w	r8, [sp, #12]
 800972c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80098ec <_vfiprintf_r+0x24c>
 8009730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009734:	4623      	mov	r3, r4
 8009736:	469a      	mov	sl, r3
 8009738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973c:	b10a      	cbz	r2, 8009742 <_vfiprintf_r+0xa2>
 800973e:	2a25      	cmp	r2, #37	; 0x25
 8009740:	d1f9      	bne.n	8009736 <_vfiprintf_r+0x96>
 8009742:	ebba 0b04 	subs.w	fp, sl, r4
 8009746:	d00b      	beq.n	8009760 <_vfiprintf_r+0xc0>
 8009748:	465b      	mov	r3, fp
 800974a:	4622      	mov	r2, r4
 800974c:	4629      	mov	r1, r5
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ff93 	bl	800967a <__sfputs_r>
 8009754:	3001      	adds	r0, #1
 8009756:	f000 80aa 	beq.w	80098ae <_vfiprintf_r+0x20e>
 800975a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975c:	445a      	add	r2, fp
 800975e:	9209      	str	r2, [sp, #36]	; 0x24
 8009760:	f89a 3000 	ldrb.w	r3, [sl]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 80a2 	beq.w	80098ae <_vfiprintf_r+0x20e>
 800976a:	2300      	movs	r3, #0
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009774:	f10a 0a01 	add.w	sl, sl, #1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	9307      	str	r3, [sp, #28]
 800977c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009780:	931a      	str	r3, [sp, #104]	; 0x68
 8009782:	4654      	mov	r4, sl
 8009784:	2205      	movs	r2, #5
 8009786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978a:	4858      	ldr	r0, [pc, #352]	; (80098ec <_vfiprintf_r+0x24c>)
 800978c:	f000 ff08 	bl	800a5a0 <memchr>
 8009790:	9a04      	ldr	r2, [sp, #16]
 8009792:	b9d8      	cbnz	r0, 80097cc <_vfiprintf_r+0x12c>
 8009794:	06d1      	lsls	r1, r2, #27
 8009796:	bf44      	itt	mi
 8009798:	2320      	movmi	r3, #32
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979e:	0713      	lsls	r3, r2, #28
 80097a0:	bf44      	itt	mi
 80097a2:	232b      	movmi	r3, #43	; 0x2b
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a8:	f89a 3000 	ldrb.w	r3, [sl]
 80097ac:	2b2a      	cmp	r3, #42	; 0x2a
 80097ae:	d015      	beq.n	80097dc <_vfiprintf_r+0x13c>
 80097b0:	4654      	mov	r4, sl
 80097b2:	2000      	movs	r0, #0
 80097b4:	f04f 0c0a 	mov.w	ip, #10
 80097b8:	9a07      	ldr	r2, [sp, #28]
 80097ba:	4621      	mov	r1, r4
 80097bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c0:	3b30      	subs	r3, #48	; 0x30
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	d94e      	bls.n	8009864 <_vfiprintf_r+0x1c4>
 80097c6:	b1b0      	cbz	r0, 80097f6 <_vfiprintf_r+0x156>
 80097c8:	9207      	str	r2, [sp, #28]
 80097ca:	e014      	b.n	80097f6 <_vfiprintf_r+0x156>
 80097cc:	eba0 0308 	sub.w	r3, r0, r8
 80097d0:	fa09 f303 	lsl.w	r3, r9, r3
 80097d4:	4313      	orrs	r3, r2
 80097d6:	46a2      	mov	sl, r4
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	e7d2      	b.n	8009782 <_vfiprintf_r+0xe2>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	1d19      	adds	r1, r3, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	9103      	str	r1, [sp, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfbb      	ittet	lt
 80097e8:	425b      	neglt	r3, r3
 80097ea:	f042 0202 	orrlt.w	r2, r2, #2
 80097ee:	9307      	strge	r3, [sp, #28]
 80097f0:	9307      	strlt	r3, [sp, #28]
 80097f2:	bfb8      	it	lt
 80097f4:	9204      	strlt	r2, [sp, #16]
 80097f6:	7823      	ldrb	r3, [r4, #0]
 80097f8:	2b2e      	cmp	r3, #46	; 0x2e
 80097fa:	d10c      	bne.n	8009816 <_vfiprintf_r+0x176>
 80097fc:	7863      	ldrb	r3, [r4, #1]
 80097fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009800:	d135      	bne.n	800986e <_vfiprintf_r+0x1ce>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	3402      	adds	r4, #2
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	9203      	str	r2, [sp, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	bfb8      	it	lt
 8009810:	f04f 33ff 	movlt.w	r3, #4294967295
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098fc <_vfiprintf_r+0x25c>
 800981a:	2203      	movs	r2, #3
 800981c:	4650      	mov	r0, sl
 800981e:	7821      	ldrb	r1, [r4, #0]
 8009820:	f000 febe 	bl	800a5a0 <memchr>
 8009824:	b140      	cbz	r0, 8009838 <_vfiprintf_r+0x198>
 8009826:	2340      	movs	r3, #64	; 0x40
 8009828:	eba0 000a 	sub.w	r0, r0, sl
 800982c:	fa03 f000 	lsl.w	r0, r3, r0
 8009830:	9b04      	ldr	r3, [sp, #16]
 8009832:	3401      	adds	r4, #1
 8009834:	4303      	orrs	r3, r0
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983c:	2206      	movs	r2, #6
 800983e:	482c      	ldr	r0, [pc, #176]	; (80098f0 <_vfiprintf_r+0x250>)
 8009840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009844:	f000 feac 	bl	800a5a0 <memchr>
 8009848:	2800      	cmp	r0, #0
 800984a:	d03f      	beq.n	80098cc <_vfiprintf_r+0x22c>
 800984c:	4b29      	ldr	r3, [pc, #164]	; (80098f4 <_vfiprintf_r+0x254>)
 800984e:	bb1b      	cbnz	r3, 8009898 <_vfiprintf_r+0x1f8>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	3307      	adds	r3, #7
 8009854:	f023 0307 	bic.w	r3, r3, #7
 8009858:	3308      	adds	r3, #8
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985e:	443b      	add	r3, r7
 8009860:	9309      	str	r3, [sp, #36]	; 0x24
 8009862:	e767      	b.n	8009734 <_vfiprintf_r+0x94>
 8009864:	460c      	mov	r4, r1
 8009866:	2001      	movs	r0, #1
 8009868:	fb0c 3202 	mla	r2, ip, r2, r3
 800986c:	e7a5      	b.n	80097ba <_vfiprintf_r+0x11a>
 800986e:	2300      	movs	r3, #0
 8009870:	f04f 0c0a 	mov.w	ip, #10
 8009874:	4619      	mov	r1, r3
 8009876:	3401      	adds	r4, #1
 8009878:	9305      	str	r3, [sp, #20]
 800987a:	4620      	mov	r0, r4
 800987c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009880:	3a30      	subs	r2, #48	; 0x30
 8009882:	2a09      	cmp	r2, #9
 8009884:	d903      	bls.n	800988e <_vfiprintf_r+0x1ee>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0c5      	beq.n	8009816 <_vfiprintf_r+0x176>
 800988a:	9105      	str	r1, [sp, #20]
 800988c:	e7c3      	b.n	8009816 <_vfiprintf_r+0x176>
 800988e:	4604      	mov	r4, r0
 8009890:	2301      	movs	r3, #1
 8009892:	fb0c 2101 	mla	r1, ip, r1, r2
 8009896:	e7f0      	b.n	800987a <_vfiprintf_r+0x1da>
 8009898:	ab03      	add	r3, sp, #12
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	462a      	mov	r2, r5
 800989e:	4630      	mov	r0, r6
 80098a0:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <_vfiprintf_r+0x258>)
 80098a2:	a904      	add	r1, sp, #16
 80098a4:	f3af 8000 	nop.w
 80098a8:	4607      	mov	r7, r0
 80098aa:	1c78      	adds	r0, r7, #1
 80098ac:	d1d6      	bne.n	800985c <_vfiprintf_r+0x1bc>
 80098ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b0:	07d9      	lsls	r1, r3, #31
 80098b2:	d405      	bmi.n	80098c0 <_vfiprintf_r+0x220>
 80098b4:	89ab      	ldrh	r3, [r5, #12]
 80098b6:	059a      	lsls	r2, r3, #22
 80098b8:	d402      	bmi.n	80098c0 <_vfiprintf_r+0x220>
 80098ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098bc:	f7ff fb79 	bl	8008fb2 <__retarget_lock_release_recursive>
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	065b      	lsls	r3, r3, #25
 80098c4:	f53f af12 	bmi.w	80096ec <_vfiprintf_r+0x4c>
 80098c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ca:	e711      	b.n	80096f0 <_vfiprintf_r+0x50>
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4630      	mov	r0, r6
 80098d4:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <_vfiprintf_r+0x258>)
 80098d6:	a904      	add	r1, sp, #16
 80098d8:	f000 f882 	bl	80099e0 <_printf_i>
 80098dc:	e7e4      	b.n	80098a8 <_vfiprintf_r+0x208>
 80098de:	bf00      	nop
 80098e0:	0800a7c4 	.word	0x0800a7c4
 80098e4:	0800a7e4 	.word	0x0800a7e4
 80098e8:	0800a7a4 	.word	0x0800a7a4
 80098ec:	0800a804 	.word	0x0800a804
 80098f0:	0800a80e 	.word	0x0800a80e
 80098f4:	00000000 	.word	0x00000000
 80098f8:	0800967b 	.word	0x0800967b
 80098fc:	0800a80a 	.word	0x0800a80a

08009900 <_printf_common>:
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	4616      	mov	r6, r2
 8009906:	4699      	mov	r9, r3
 8009908:	688a      	ldr	r2, [r1, #8]
 800990a:	690b      	ldr	r3, [r1, #16]
 800990c:	4607      	mov	r7, r0
 800990e:	4293      	cmp	r3, r2
 8009910:	bfb8      	it	lt
 8009912:	4613      	movlt	r3, r2
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800991a:	460c      	mov	r4, r1
 800991c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009920:	b10a      	cbz	r2, 8009926 <_printf_common+0x26>
 8009922:	3301      	adds	r3, #1
 8009924:	6033      	str	r3, [r6, #0]
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	0699      	lsls	r1, r3, #26
 800992a:	bf42      	ittt	mi
 800992c:	6833      	ldrmi	r3, [r6, #0]
 800992e:	3302      	addmi	r3, #2
 8009930:	6033      	strmi	r3, [r6, #0]
 8009932:	6825      	ldr	r5, [r4, #0]
 8009934:	f015 0506 	ands.w	r5, r5, #6
 8009938:	d106      	bne.n	8009948 <_printf_common+0x48>
 800993a:	f104 0a19 	add.w	sl, r4, #25
 800993e:	68e3      	ldr	r3, [r4, #12]
 8009940:	6832      	ldr	r2, [r6, #0]
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	42ab      	cmp	r3, r5
 8009946:	dc28      	bgt.n	800999a <_printf_common+0x9a>
 8009948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800994c:	1e13      	subs	r3, r2, #0
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	bf18      	it	ne
 8009952:	2301      	movne	r3, #1
 8009954:	0692      	lsls	r2, r2, #26
 8009956:	d42d      	bmi.n	80099b4 <_printf_common+0xb4>
 8009958:	4649      	mov	r1, r9
 800995a:	4638      	mov	r0, r7
 800995c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009960:	47c0      	blx	r8
 8009962:	3001      	adds	r0, #1
 8009964:	d020      	beq.n	80099a8 <_printf_common+0xa8>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	68e5      	ldr	r5, [r4, #12]
 800996a:	f003 0306 	and.w	r3, r3, #6
 800996e:	2b04      	cmp	r3, #4
 8009970:	bf18      	it	ne
 8009972:	2500      	movne	r5, #0
 8009974:	6832      	ldr	r2, [r6, #0]
 8009976:	f04f 0600 	mov.w	r6, #0
 800997a:	68a3      	ldr	r3, [r4, #8]
 800997c:	bf08      	it	eq
 800997e:	1aad      	subeq	r5, r5, r2
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	bf08      	it	eq
 8009984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009988:	4293      	cmp	r3, r2
 800998a:	bfc4      	itt	gt
 800998c:	1a9b      	subgt	r3, r3, r2
 800998e:	18ed      	addgt	r5, r5, r3
 8009990:	341a      	adds	r4, #26
 8009992:	42b5      	cmp	r5, r6
 8009994:	d11a      	bne.n	80099cc <_printf_common+0xcc>
 8009996:	2000      	movs	r0, #0
 8009998:	e008      	b.n	80099ac <_printf_common+0xac>
 800999a:	2301      	movs	r3, #1
 800999c:	4652      	mov	r2, sl
 800999e:	4649      	mov	r1, r9
 80099a0:	4638      	mov	r0, r7
 80099a2:	47c0      	blx	r8
 80099a4:	3001      	adds	r0, #1
 80099a6:	d103      	bne.n	80099b0 <_printf_common+0xb0>
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b0:	3501      	adds	r5, #1
 80099b2:	e7c4      	b.n	800993e <_printf_common+0x3e>
 80099b4:	2030      	movs	r0, #48	; 0x30
 80099b6:	18e1      	adds	r1, r4, r3
 80099b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099c2:	4422      	add	r2, r4
 80099c4:	3302      	adds	r3, #2
 80099c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099ca:	e7c5      	b.n	8009958 <_printf_common+0x58>
 80099cc:	2301      	movs	r3, #1
 80099ce:	4622      	mov	r2, r4
 80099d0:	4649      	mov	r1, r9
 80099d2:	4638      	mov	r0, r7
 80099d4:	47c0      	blx	r8
 80099d6:	3001      	adds	r0, #1
 80099d8:	d0e6      	beq.n	80099a8 <_printf_common+0xa8>
 80099da:	3601      	adds	r6, #1
 80099dc:	e7d9      	b.n	8009992 <_printf_common+0x92>
	...

080099e0 <_printf_i>:
 80099e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099e4:	460c      	mov	r4, r1
 80099e6:	7e27      	ldrb	r7, [r4, #24]
 80099e8:	4691      	mov	r9, r2
 80099ea:	2f78      	cmp	r7, #120	; 0x78
 80099ec:	4680      	mov	r8, r0
 80099ee:	469a      	mov	sl, r3
 80099f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099f6:	d807      	bhi.n	8009a08 <_printf_i+0x28>
 80099f8:	2f62      	cmp	r7, #98	; 0x62
 80099fa:	d80a      	bhi.n	8009a12 <_printf_i+0x32>
 80099fc:	2f00      	cmp	r7, #0
 80099fe:	f000 80d9 	beq.w	8009bb4 <_printf_i+0x1d4>
 8009a02:	2f58      	cmp	r7, #88	; 0x58
 8009a04:	f000 80a4 	beq.w	8009b50 <_printf_i+0x170>
 8009a08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a10:	e03a      	b.n	8009a88 <_printf_i+0xa8>
 8009a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a16:	2b15      	cmp	r3, #21
 8009a18:	d8f6      	bhi.n	8009a08 <_printf_i+0x28>
 8009a1a:	a001      	add	r0, pc, #4	; (adr r0, 8009a20 <_printf_i+0x40>)
 8009a1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a20:	08009a79 	.word	0x08009a79
 8009a24:	08009a8d 	.word	0x08009a8d
 8009a28:	08009a09 	.word	0x08009a09
 8009a2c:	08009a09 	.word	0x08009a09
 8009a30:	08009a09 	.word	0x08009a09
 8009a34:	08009a09 	.word	0x08009a09
 8009a38:	08009a8d 	.word	0x08009a8d
 8009a3c:	08009a09 	.word	0x08009a09
 8009a40:	08009a09 	.word	0x08009a09
 8009a44:	08009a09 	.word	0x08009a09
 8009a48:	08009a09 	.word	0x08009a09
 8009a4c:	08009b9b 	.word	0x08009b9b
 8009a50:	08009abd 	.word	0x08009abd
 8009a54:	08009b7d 	.word	0x08009b7d
 8009a58:	08009a09 	.word	0x08009a09
 8009a5c:	08009a09 	.word	0x08009a09
 8009a60:	08009bbd 	.word	0x08009bbd
 8009a64:	08009a09 	.word	0x08009a09
 8009a68:	08009abd 	.word	0x08009abd
 8009a6c:	08009a09 	.word	0x08009a09
 8009a70:	08009a09 	.word	0x08009a09
 8009a74:	08009b85 	.word	0x08009b85
 8009a78:	680b      	ldr	r3, [r1, #0]
 8009a7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a7e:	1d1a      	adds	r2, r3, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	600a      	str	r2, [r1, #0]
 8009a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e0a4      	b.n	8009bd6 <_printf_i+0x1f6>
 8009a8c:	6825      	ldr	r5, [r4, #0]
 8009a8e:	6808      	ldr	r0, [r1, #0]
 8009a90:	062e      	lsls	r6, r5, #24
 8009a92:	f100 0304 	add.w	r3, r0, #4
 8009a96:	d50a      	bpl.n	8009aae <_printf_i+0xce>
 8009a98:	6805      	ldr	r5, [r0, #0]
 8009a9a:	600b      	str	r3, [r1, #0]
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	da03      	bge.n	8009aa8 <_printf_i+0xc8>
 8009aa0:	232d      	movs	r3, #45	; 0x2d
 8009aa2:	426d      	negs	r5, r5
 8009aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa8:	230a      	movs	r3, #10
 8009aaa:	485e      	ldr	r0, [pc, #376]	; (8009c24 <_printf_i+0x244>)
 8009aac:	e019      	b.n	8009ae2 <_printf_i+0x102>
 8009aae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ab2:	6805      	ldr	r5, [r0, #0]
 8009ab4:	600b      	str	r3, [r1, #0]
 8009ab6:	bf18      	it	ne
 8009ab8:	b22d      	sxthne	r5, r5
 8009aba:	e7ef      	b.n	8009a9c <_printf_i+0xbc>
 8009abc:	680b      	ldr	r3, [r1, #0]
 8009abe:	6825      	ldr	r5, [r4, #0]
 8009ac0:	1d18      	adds	r0, r3, #4
 8009ac2:	6008      	str	r0, [r1, #0]
 8009ac4:	0628      	lsls	r0, r5, #24
 8009ac6:	d501      	bpl.n	8009acc <_printf_i+0xec>
 8009ac8:	681d      	ldr	r5, [r3, #0]
 8009aca:	e002      	b.n	8009ad2 <_printf_i+0xf2>
 8009acc:	0669      	lsls	r1, r5, #25
 8009ace:	d5fb      	bpl.n	8009ac8 <_printf_i+0xe8>
 8009ad0:	881d      	ldrh	r5, [r3, #0]
 8009ad2:	2f6f      	cmp	r7, #111	; 0x6f
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2308      	moveq	r3, #8
 8009ad8:	230a      	movne	r3, #10
 8009ada:	4852      	ldr	r0, [pc, #328]	; (8009c24 <_printf_i+0x244>)
 8009adc:	2100      	movs	r1, #0
 8009ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ae2:	6866      	ldr	r6, [r4, #4]
 8009ae4:	2e00      	cmp	r6, #0
 8009ae6:	bfa8      	it	ge
 8009ae8:	6821      	ldrge	r1, [r4, #0]
 8009aea:	60a6      	str	r6, [r4, #8]
 8009aec:	bfa4      	itt	ge
 8009aee:	f021 0104 	bicge.w	r1, r1, #4
 8009af2:	6021      	strge	r1, [r4, #0]
 8009af4:	b90d      	cbnz	r5, 8009afa <_printf_i+0x11a>
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d04d      	beq.n	8009b96 <_printf_i+0x1b6>
 8009afa:	4616      	mov	r6, r2
 8009afc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b00:	fb03 5711 	mls	r7, r3, r1, r5
 8009b04:	5dc7      	ldrb	r7, [r0, r7]
 8009b06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b0a:	462f      	mov	r7, r5
 8009b0c:	42bb      	cmp	r3, r7
 8009b0e:	460d      	mov	r5, r1
 8009b10:	d9f4      	bls.n	8009afc <_printf_i+0x11c>
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d10b      	bne.n	8009b2e <_printf_i+0x14e>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	07df      	lsls	r7, r3, #31
 8009b1a:	d508      	bpl.n	8009b2e <_printf_i+0x14e>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	6861      	ldr	r1, [r4, #4]
 8009b20:	4299      	cmp	r1, r3
 8009b22:	bfde      	ittt	le
 8009b24:	2330      	movle	r3, #48	; 0x30
 8009b26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b2e:	1b92      	subs	r2, r2, r6
 8009b30:	6122      	str	r2, [r4, #16]
 8009b32:	464b      	mov	r3, r9
 8009b34:	4621      	mov	r1, r4
 8009b36:	4640      	mov	r0, r8
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	aa03      	add	r2, sp, #12
 8009b3e:	f7ff fedf 	bl	8009900 <_printf_common>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d14c      	bne.n	8009be0 <_printf_i+0x200>
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4a:	b004      	add	sp, #16
 8009b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b50:	4834      	ldr	r0, [pc, #208]	; (8009c24 <_printf_i+0x244>)
 8009b52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b56:	680e      	ldr	r6, [r1, #0]
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b5e:	061f      	lsls	r7, r3, #24
 8009b60:	600e      	str	r6, [r1, #0]
 8009b62:	d514      	bpl.n	8009b8e <_printf_i+0x1ae>
 8009b64:	07d9      	lsls	r1, r3, #31
 8009b66:	bf44      	itt	mi
 8009b68:	f043 0320 	orrmi.w	r3, r3, #32
 8009b6c:	6023      	strmi	r3, [r4, #0]
 8009b6e:	b91d      	cbnz	r5, 8009b78 <_printf_i+0x198>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	f023 0320 	bic.w	r3, r3, #32
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	2310      	movs	r3, #16
 8009b7a:	e7af      	b.n	8009adc <_printf_i+0xfc>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	f043 0320 	orr.w	r3, r3, #32
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	2378      	movs	r3, #120	; 0x78
 8009b86:	4828      	ldr	r0, [pc, #160]	; (8009c28 <_printf_i+0x248>)
 8009b88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b8c:	e7e3      	b.n	8009b56 <_printf_i+0x176>
 8009b8e:	065e      	lsls	r6, r3, #25
 8009b90:	bf48      	it	mi
 8009b92:	b2ad      	uxthmi	r5, r5
 8009b94:	e7e6      	b.n	8009b64 <_printf_i+0x184>
 8009b96:	4616      	mov	r6, r2
 8009b98:	e7bb      	b.n	8009b12 <_printf_i+0x132>
 8009b9a:	680b      	ldr	r3, [r1, #0]
 8009b9c:	6826      	ldr	r6, [r4, #0]
 8009b9e:	1d1d      	adds	r5, r3, #4
 8009ba0:	6960      	ldr	r0, [r4, #20]
 8009ba2:	600d      	str	r5, [r1, #0]
 8009ba4:	0635      	lsls	r5, r6, #24
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	d501      	bpl.n	8009bae <_printf_i+0x1ce>
 8009baa:	6018      	str	r0, [r3, #0]
 8009bac:	e002      	b.n	8009bb4 <_printf_i+0x1d4>
 8009bae:	0671      	lsls	r1, r6, #25
 8009bb0:	d5fb      	bpl.n	8009baa <_printf_i+0x1ca>
 8009bb2:	8018      	strh	r0, [r3, #0]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4616      	mov	r6, r2
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	e7ba      	b.n	8009b32 <_printf_i+0x152>
 8009bbc:	680b      	ldr	r3, [r1, #0]
 8009bbe:	1d1a      	adds	r2, r3, #4
 8009bc0:	600a      	str	r2, [r1, #0]
 8009bc2:	681e      	ldr	r6, [r3, #0]
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	6862      	ldr	r2, [r4, #4]
 8009bca:	f000 fce9 	bl	800a5a0 <memchr>
 8009bce:	b108      	cbz	r0, 8009bd4 <_printf_i+0x1f4>
 8009bd0:	1b80      	subs	r0, r0, r6
 8009bd2:	6060      	str	r0, [r4, #4]
 8009bd4:	6863      	ldr	r3, [r4, #4]
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bde:	e7a8      	b.n	8009b32 <_printf_i+0x152>
 8009be0:	4632      	mov	r2, r6
 8009be2:	4649      	mov	r1, r9
 8009be4:	4640      	mov	r0, r8
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	47d0      	blx	sl
 8009bea:	3001      	adds	r0, #1
 8009bec:	d0ab      	beq.n	8009b46 <_printf_i+0x166>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	079b      	lsls	r3, r3, #30
 8009bf2:	d413      	bmi.n	8009c1c <_printf_i+0x23c>
 8009bf4:	68e0      	ldr	r0, [r4, #12]
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	4298      	cmp	r0, r3
 8009bfa:	bfb8      	it	lt
 8009bfc:	4618      	movlt	r0, r3
 8009bfe:	e7a4      	b.n	8009b4a <_printf_i+0x16a>
 8009c00:	2301      	movs	r3, #1
 8009c02:	4632      	mov	r2, r6
 8009c04:	4649      	mov	r1, r9
 8009c06:	4640      	mov	r0, r8
 8009c08:	47d0      	blx	sl
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d09b      	beq.n	8009b46 <_printf_i+0x166>
 8009c0e:	3501      	adds	r5, #1
 8009c10:	68e3      	ldr	r3, [r4, #12]
 8009c12:	9903      	ldr	r1, [sp, #12]
 8009c14:	1a5b      	subs	r3, r3, r1
 8009c16:	42ab      	cmp	r3, r5
 8009c18:	dcf2      	bgt.n	8009c00 <_printf_i+0x220>
 8009c1a:	e7eb      	b.n	8009bf4 <_printf_i+0x214>
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	f104 0619 	add.w	r6, r4, #25
 8009c22:	e7f5      	b.n	8009c10 <_printf_i+0x230>
 8009c24:	0800a815 	.word	0x0800a815
 8009c28:	0800a826 	.word	0x0800a826

08009c2c <_scanf_chars>:
 8009c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c30:	4615      	mov	r5, r2
 8009c32:	688a      	ldr	r2, [r1, #8]
 8009c34:	4680      	mov	r8, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	b932      	cbnz	r2, 8009c48 <_scanf_chars+0x1c>
 8009c3a:	698a      	ldr	r2, [r1, #24]
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	bf0c      	ite	eq
 8009c40:	2201      	moveq	r2, #1
 8009c42:	f04f 32ff 	movne.w	r2, #4294967295
 8009c46:	608a      	str	r2, [r1, #8]
 8009c48:	2700      	movs	r7, #0
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009cd8 <_scanf_chars+0xac>
 8009c50:	06d1      	lsls	r1, r2, #27
 8009c52:	bf5f      	itttt	pl
 8009c54:	681a      	ldrpl	r2, [r3, #0]
 8009c56:	1d11      	addpl	r1, r2, #4
 8009c58:	6019      	strpl	r1, [r3, #0]
 8009c5a:	6816      	ldrpl	r6, [r2, #0]
 8009c5c:	69a0      	ldr	r0, [r4, #24]
 8009c5e:	b188      	cbz	r0, 8009c84 <_scanf_chars+0x58>
 8009c60:	2801      	cmp	r0, #1
 8009c62:	d107      	bne.n	8009c74 <_scanf_chars+0x48>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	6963      	ldr	r3, [r4, #20]
 8009c6a:	5c9b      	ldrb	r3, [r3, r2]
 8009c6c:	b953      	cbnz	r3, 8009c84 <_scanf_chars+0x58>
 8009c6e:	bb27      	cbnz	r7, 8009cba <_scanf_chars+0x8e>
 8009c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c74:	2802      	cmp	r0, #2
 8009c76:	d120      	bne.n	8009cba <_scanf_chars+0x8e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009c80:	071b      	lsls	r3, r3, #28
 8009c82:	d41a      	bmi.n	8009cba <_scanf_chars+0x8e>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	3701      	adds	r7, #1
 8009c88:	06da      	lsls	r2, r3, #27
 8009c8a:	bf5e      	ittt	pl
 8009c8c:	682b      	ldrpl	r3, [r5, #0]
 8009c8e:	781b      	ldrbpl	r3, [r3, #0]
 8009c90:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009c94:	682a      	ldr	r2, [r5, #0]
 8009c96:	686b      	ldr	r3, [r5, #4]
 8009c98:	3201      	adds	r2, #1
 8009c9a:	602a      	str	r2, [r5, #0]
 8009c9c:	68a2      	ldr	r2, [r4, #8]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	3a01      	subs	r2, #1
 8009ca2:	606b      	str	r3, [r5, #4]
 8009ca4:	60a2      	str	r2, [r4, #8]
 8009ca6:	b142      	cbz	r2, 8009cba <_scanf_chars+0x8e>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dcd7      	bgt.n	8009c5c <_scanf_chars+0x30>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cb4:	4798      	blx	r3
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0d0      	beq.n	8009c5c <_scanf_chars+0x30>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	f013 0310 	ands.w	r3, r3, #16
 8009cc0:	d105      	bne.n	8009cce <_scanf_chars+0xa2>
 8009cc2:	68e2      	ldr	r2, [r4, #12]
 8009cc4:	3201      	adds	r2, #1
 8009cc6:	60e2      	str	r2, [r4, #12]
 8009cc8:	69a2      	ldr	r2, [r4, #24]
 8009cca:	b102      	cbz	r2, 8009cce <_scanf_chars+0xa2>
 8009ccc:	7033      	strb	r3, [r6, #0]
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	441f      	add	r7, r3
 8009cd4:	6127      	str	r7, [r4, #16]
 8009cd6:	e7cb      	b.n	8009c70 <_scanf_chars+0x44>
 8009cd8:	0800a853 	.word	0x0800a853

08009cdc <_scanf_i>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	4698      	mov	r8, r3
 8009ce4:	4b72      	ldr	r3, [pc, #456]	; (8009eb0 <_scanf_i+0x1d4>)
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	4682      	mov	sl, r0
 8009cea:	4616      	mov	r6, r2
 8009cec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009cf6:	4b6f      	ldr	r3, [pc, #444]	; (8009eb4 <_scanf_i+0x1d8>)
 8009cf8:	69a1      	ldr	r1, [r4, #24]
 8009cfa:	4a6f      	ldr	r2, [pc, #444]	; (8009eb8 <_scanf_i+0x1dc>)
 8009cfc:	4627      	mov	r7, r4
 8009cfe:	2903      	cmp	r1, #3
 8009d00:	bf18      	it	ne
 8009d02:	461a      	movne	r2, r3
 8009d04:	68a3      	ldr	r3, [r4, #8]
 8009d06:	9201      	str	r2, [sp, #4]
 8009d08:	1e5a      	subs	r2, r3, #1
 8009d0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d0e:	bf81      	itttt	hi
 8009d10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d14:	eb03 0905 	addhi.w	r9, r3, r5
 8009d18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d1c:	60a3      	strhi	r3, [r4, #8]
 8009d1e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009d22:	bf98      	it	ls
 8009d24:	f04f 0900 	movls.w	r9, #0
 8009d28:	463d      	mov	r5, r7
 8009d2a:	f04f 0b00 	mov.w	fp, #0
 8009d2e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	6831      	ldr	r1, [r6, #0]
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	2202      	movs	r2, #2
 8009d3a:	7809      	ldrb	r1, [r1, #0]
 8009d3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009d40:	f000 fc2e 	bl	800a5a0 <memchr>
 8009d44:	b328      	cbz	r0, 8009d92 <_scanf_i+0xb6>
 8009d46:	f1bb 0f01 	cmp.w	fp, #1
 8009d4a:	d159      	bne.n	8009e00 <_scanf_i+0x124>
 8009d4c:	6862      	ldr	r2, [r4, #4]
 8009d4e:	b92a      	cbnz	r2, 8009d5c <_scanf_i+0x80>
 8009d50:	2308      	movs	r3, #8
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	6063      	str	r3, [r4, #4]
 8009d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	6822      	ldr	r2, [r4, #0]
 8009d5e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	68a2      	ldr	r2, [r4, #8]
 8009d66:	1e51      	subs	r1, r2, #1
 8009d68:	60a1      	str	r1, [r4, #8]
 8009d6a:	b192      	cbz	r2, 8009d92 <_scanf_i+0xb6>
 8009d6c:	6832      	ldr	r2, [r6, #0]
 8009d6e:	1c51      	adds	r1, r2, #1
 8009d70:	6031      	str	r1, [r6, #0]
 8009d72:	7812      	ldrb	r2, [r2, #0]
 8009d74:	f805 2b01 	strb.w	r2, [r5], #1
 8009d78:	6872      	ldr	r2, [r6, #4]
 8009d7a:	3a01      	subs	r2, #1
 8009d7c:	2a00      	cmp	r2, #0
 8009d7e:	6072      	str	r2, [r6, #4]
 8009d80:	dc07      	bgt.n	8009d92 <_scanf_i+0xb6>
 8009d82:	4631      	mov	r1, r6
 8009d84:	4650      	mov	r0, sl
 8009d86:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009d8a:	4790      	blx	r2
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f040 8085 	bne.w	8009e9c <_scanf_i+0x1c0>
 8009d92:	f10b 0b01 	add.w	fp, fp, #1
 8009d96:	f1bb 0f03 	cmp.w	fp, #3
 8009d9a:	d1cb      	bne.n	8009d34 <_scanf_i+0x58>
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	b90b      	cbnz	r3, 8009da4 <_scanf_i+0xc8>
 8009da0:	230a      	movs	r3, #10
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	4945      	ldr	r1, [pc, #276]	; (8009ebc <_scanf_i+0x1e0>)
 8009da8:	6960      	ldr	r0, [r4, #20]
 8009daa:	1ac9      	subs	r1, r1, r3
 8009dac:	f000 f89a 	bl	8009ee4 <__sccl>
 8009db0:	f04f 0b00 	mov.w	fp, #0
 8009db4:	68a3      	ldr	r3, [r4, #8]
 8009db6:	6822      	ldr	r2, [r4, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d03d      	beq.n	8009e38 <_scanf_i+0x15c>
 8009dbc:	6831      	ldr	r1, [r6, #0]
 8009dbe:	6960      	ldr	r0, [r4, #20]
 8009dc0:	f891 c000 	ldrb.w	ip, [r1]
 8009dc4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d035      	beq.n	8009e38 <_scanf_i+0x15c>
 8009dcc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009dd0:	d124      	bne.n	8009e1c <_scanf_i+0x140>
 8009dd2:	0510      	lsls	r0, r2, #20
 8009dd4:	d522      	bpl.n	8009e1c <_scanf_i+0x140>
 8009dd6:	f10b 0b01 	add.w	fp, fp, #1
 8009dda:	f1b9 0f00 	cmp.w	r9, #0
 8009dde:	d003      	beq.n	8009de8 <_scanf_i+0x10c>
 8009de0:	3301      	adds	r3, #1
 8009de2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009de6:	60a3      	str	r3, [r4, #8]
 8009de8:	6873      	ldr	r3, [r6, #4]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	6073      	str	r3, [r6, #4]
 8009df0:	dd1b      	ble.n	8009e2a <_scanf_i+0x14e>
 8009df2:	6833      	ldr	r3, [r6, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	6033      	str	r3, [r6, #0]
 8009df8:	68a3      	ldr	r3, [r4, #8]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	60a3      	str	r3, [r4, #8]
 8009dfe:	e7d9      	b.n	8009db4 <_scanf_i+0xd8>
 8009e00:	f1bb 0f02 	cmp.w	fp, #2
 8009e04:	d1ae      	bne.n	8009d64 <_scanf_i+0x88>
 8009e06:	6822      	ldr	r2, [r4, #0]
 8009e08:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009e0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e10:	d1bf      	bne.n	8009d92 <_scanf_i+0xb6>
 8009e12:	2310      	movs	r3, #16
 8009e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	e7a2      	b.n	8009d62 <_scanf_i+0x86>
 8009e1c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009e20:	6022      	str	r2, [r4, #0]
 8009e22:	780b      	ldrb	r3, [r1, #0]
 8009e24:	f805 3b01 	strb.w	r3, [r5], #1
 8009e28:	e7de      	b.n	8009de8 <_scanf_i+0x10c>
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e32:	4798      	blx	r3
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d0df      	beq.n	8009df8 <_scanf_i+0x11c>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	05d9      	lsls	r1, r3, #23
 8009e3c:	d50d      	bpl.n	8009e5a <_scanf_i+0x17e>
 8009e3e:	42bd      	cmp	r5, r7
 8009e40:	d909      	bls.n	8009e56 <_scanf_i+0x17a>
 8009e42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e46:	4632      	mov	r2, r6
 8009e48:	4650      	mov	r0, sl
 8009e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009e52:	4798      	blx	r3
 8009e54:	464d      	mov	r5, r9
 8009e56:	42bd      	cmp	r5, r7
 8009e58:	d028      	beq.n	8009eac <_scanf_i+0x1d0>
 8009e5a:	6822      	ldr	r2, [r4, #0]
 8009e5c:	f012 0210 	ands.w	r2, r2, #16
 8009e60:	d113      	bne.n	8009e8a <_scanf_i+0x1ae>
 8009e62:	702a      	strb	r2, [r5, #0]
 8009e64:	4639      	mov	r1, r7
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	4650      	mov	r0, sl
 8009e6a:	9e01      	ldr	r6, [sp, #4]
 8009e6c:	47b0      	blx	r6
 8009e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e72:	6821      	ldr	r1, [r4, #0]
 8009e74:	1d1a      	adds	r2, r3, #4
 8009e76:	f8c8 2000 	str.w	r2, [r8]
 8009e7a:	f011 0f20 	tst.w	r1, #32
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	d00f      	beq.n	8009ea2 <_scanf_i+0x1c6>
 8009e82:	6018      	str	r0, [r3, #0]
 8009e84:	68e3      	ldr	r3, [r4, #12]
 8009e86:	3301      	adds	r3, #1
 8009e88:	60e3      	str	r3, [r4, #12]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	1bed      	subs	r5, r5, r7
 8009e8e:	44ab      	add	fp, r5
 8009e90:	6925      	ldr	r5, [r4, #16]
 8009e92:	445d      	add	r5, fp
 8009e94:	6125      	str	r5, [r4, #16]
 8009e96:	b007      	add	sp, #28
 8009e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9c:	f04f 0b00 	mov.w	fp, #0
 8009ea0:	e7ca      	b.n	8009e38 <_scanf_i+0x15c>
 8009ea2:	07ca      	lsls	r2, r1, #31
 8009ea4:	bf4c      	ite	mi
 8009ea6:	8018      	strhmi	r0, [r3, #0]
 8009ea8:	6018      	strpl	r0, [r3, #0]
 8009eaa:	e7eb      	b.n	8009e84 <_scanf_i+0x1a8>
 8009eac:	2001      	movs	r0, #1
 8009eae:	e7f2      	b.n	8009e96 <_scanf_i+0x1ba>
 8009eb0:	0800a784 	.word	0x0800a784
 8009eb4:	0800a161 	.word	0x0800a161
 8009eb8:	0800a065 	.word	0x0800a065
 8009ebc:	0800a850 	.word	0x0800a850

08009ec0 <_read_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4d05      	ldr	r5, [pc, #20]	; (8009ee0 <_read_r+0x20>)
 8009ecc:	602a      	str	r2, [r5, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f7f7 fc8a 	bl	80017e8 <_read>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_read_r+0x1e>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_read_r+0x1e>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20001570 	.word	0x20001570

08009ee4 <__sccl>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	780b      	ldrb	r3, [r1, #0]
 8009ee8:	4604      	mov	r4, r0
 8009eea:	2b5e      	cmp	r3, #94	; 0x5e
 8009eec:	bf13      	iteet	ne
 8009eee:	2200      	movne	r2, #0
 8009ef0:	2201      	moveq	r2, #1
 8009ef2:	784b      	ldrbeq	r3, [r1, #1]
 8009ef4:	1c48      	addne	r0, r1, #1
 8009ef6:	bf08      	it	eq
 8009ef8:	1c88      	addeq	r0, r1, #2
 8009efa:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009efe:	1e61      	subs	r1, r4, #1
 8009f00:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009f04:	42a9      	cmp	r1, r5
 8009f06:	d1fb      	bne.n	8009f00 <__sccl+0x1c>
 8009f08:	b90b      	cbnz	r3, 8009f0e <__sccl+0x2a>
 8009f0a:	3801      	subs	r0, #1
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	f082 0101 	eor.w	r1, r2, #1
 8009f12:	54e1      	strb	r1, [r4, r3]
 8009f14:	1c42      	adds	r2, r0, #1
 8009f16:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	2d2d      	cmp	r5, #45	; 0x2d
 8009f1e:	f102 36ff 	add.w	r6, r2, #4294967295
 8009f22:	d006      	beq.n	8009f32 <__sccl+0x4e>
 8009f24:	2d5d      	cmp	r5, #93	; 0x5d
 8009f26:	d0f1      	beq.n	8009f0c <__sccl+0x28>
 8009f28:	b90d      	cbnz	r5, 8009f2e <__sccl+0x4a>
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	e7ee      	b.n	8009f0c <__sccl+0x28>
 8009f2e:	462b      	mov	r3, r5
 8009f30:	e7ef      	b.n	8009f12 <__sccl+0x2e>
 8009f32:	7816      	ldrb	r6, [r2, #0]
 8009f34:	2e5d      	cmp	r6, #93	; 0x5d
 8009f36:	d0fa      	beq.n	8009f2e <__sccl+0x4a>
 8009f38:	42b3      	cmp	r3, r6
 8009f3a:	dcf8      	bgt.n	8009f2e <__sccl+0x4a>
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3001      	adds	r0, #1
 8009f40:	4286      	cmp	r6, r0
 8009f42:	5421      	strb	r1, [r4, r0]
 8009f44:	dcfb      	bgt.n	8009f3e <__sccl+0x5a>
 8009f46:	43d8      	mvns	r0, r3
 8009f48:	4430      	add	r0, r6
 8009f4a:	42b3      	cmp	r3, r6
 8009f4c:	bfa8      	it	ge
 8009f4e:	2000      	movge	r0, #0
 8009f50:	1c5d      	adds	r5, r3, #1
 8009f52:	182b      	adds	r3, r5, r0
 8009f54:	3202      	adds	r2, #2
 8009f56:	e7de      	b.n	8009f16 <__sccl+0x32>

08009f58 <_strtol_l.isra.0>:
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f5e:	4686      	mov	lr, r0
 8009f60:	d001      	beq.n	8009f66 <_strtol_l.isra.0+0xe>
 8009f62:	2b24      	cmp	r3, #36	; 0x24
 8009f64:	d906      	bls.n	8009f74 <_strtol_l.isra.0+0x1c>
 8009f66:	f7fe fd53 	bl	8008a10 <__errno>
 8009f6a:	2316      	movs	r3, #22
 8009f6c:	6003      	str	r3, [r0, #0]
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f74:	468c      	mov	ip, r1
 8009f76:	4e3a      	ldr	r6, [pc, #232]	; (800a060 <_strtol_l.isra.0+0x108>)
 8009f78:	4660      	mov	r0, ip
 8009f7a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f7e:	5da5      	ldrb	r5, [r4, r6]
 8009f80:	f015 0508 	ands.w	r5, r5, #8
 8009f84:	d1f8      	bne.n	8009f78 <_strtol_l.isra.0+0x20>
 8009f86:	2c2d      	cmp	r4, #45	; 0x2d
 8009f88:	d133      	bne.n	8009ff2 <_strtol_l.isra.0+0x9a>
 8009f8a:	f04f 0801 	mov.w	r8, #1
 8009f8e:	f89c 4000 	ldrb.w	r4, [ip]
 8009f92:	f100 0c02 	add.w	ip, r0, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d05d      	beq.n	800a056 <_strtol_l.isra.0+0xfe>
 8009f9a:	2b10      	cmp	r3, #16
 8009f9c:	d10c      	bne.n	8009fb8 <_strtol_l.isra.0+0x60>
 8009f9e:	2c30      	cmp	r4, #48	; 0x30
 8009fa0:	d10a      	bne.n	8009fb8 <_strtol_l.isra.0+0x60>
 8009fa2:	f89c 0000 	ldrb.w	r0, [ip]
 8009fa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009faa:	2858      	cmp	r0, #88	; 0x58
 8009fac:	d14e      	bne.n	800a04c <_strtol_l.isra.0+0xf4>
 8009fae:	2310      	movs	r3, #16
 8009fb0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009fb4:	f10c 0c02 	add.w	ip, ip, #2
 8009fb8:	2500      	movs	r5, #0
 8009fba:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009fbe:	3f01      	subs	r7, #1
 8009fc0:	fbb7 f9f3 	udiv	r9, r7, r3
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	fb03 7a19 	mls	sl, r3, r9, r7
 8009fca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009fce:	2e09      	cmp	r6, #9
 8009fd0:	d818      	bhi.n	800a004 <_strtol_l.isra.0+0xac>
 8009fd2:	4634      	mov	r4, r6
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	dd24      	ble.n	800a022 <_strtol_l.isra.0+0xca>
 8009fd8:	2d00      	cmp	r5, #0
 8009fda:	db1f      	blt.n	800a01c <_strtol_l.isra.0+0xc4>
 8009fdc:	4581      	cmp	r9, r0
 8009fde:	d31d      	bcc.n	800a01c <_strtol_l.isra.0+0xc4>
 8009fe0:	d101      	bne.n	8009fe6 <_strtol_l.isra.0+0x8e>
 8009fe2:	45a2      	cmp	sl, r4
 8009fe4:	db1a      	blt.n	800a01c <_strtol_l.isra.0+0xc4>
 8009fe6:	2501      	movs	r5, #1
 8009fe8:	fb00 4003 	mla	r0, r0, r3, r4
 8009fec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ff0:	e7eb      	b.n	8009fca <_strtol_l.isra.0+0x72>
 8009ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ff4:	bf08      	it	eq
 8009ff6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009ffa:	46a8      	mov	r8, r5
 8009ffc:	bf08      	it	eq
 8009ffe:	f100 0c02 	addeq.w	ip, r0, #2
 800a002:	e7c8      	b.n	8009f96 <_strtol_l.isra.0+0x3e>
 800a004:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a008:	2e19      	cmp	r6, #25
 800a00a:	d801      	bhi.n	800a010 <_strtol_l.isra.0+0xb8>
 800a00c:	3c37      	subs	r4, #55	; 0x37
 800a00e:	e7e1      	b.n	8009fd4 <_strtol_l.isra.0+0x7c>
 800a010:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a014:	2e19      	cmp	r6, #25
 800a016:	d804      	bhi.n	800a022 <_strtol_l.isra.0+0xca>
 800a018:	3c57      	subs	r4, #87	; 0x57
 800a01a:	e7db      	b.n	8009fd4 <_strtol_l.isra.0+0x7c>
 800a01c:	f04f 35ff 	mov.w	r5, #4294967295
 800a020:	e7e4      	b.n	8009fec <_strtol_l.isra.0+0x94>
 800a022:	2d00      	cmp	r5, #0
 800a024:	da08      	bge.n	800a038 <_strtol_l.isra.0+0xe0>
 800a026:	2322      	movs	r3, #34	; 0x22
 800a028:	4638      	mov	r0, r7
 800a02a:	f8ce 3000 	str.w	r3, [lr]
 800a02e:	2a00      	cmp	r2, #0
 800a030:	d09e      	beq.n	8009f70 <_strtol_l.isra.0+0x18>
 800a032:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a036:	e007      	b.n	800a048 <_strtol_l.isra.0+0xf0>
 800a038:	f1b8 0f00 	cmp.w	r8, #0
 800a03c:	d000      	beq.n	800a040 <_strtol_l.isra.0+0xe8>
 800a03e:	4240      	negs	r0, r0
 800a040:	2a00      	cmp	r2, #0
 800a042:	d095      	beq.n	8009f70 <_strtol_l.isra.0+0x18>
 800a044:	2d00      	cmp	r5, #0
 800a046:	d1f4      	bne.n	800a032 <_strtol_l.isra.0+0xda>
 800a048:	6011      	str	r1, [r2, #0]
 800a04a:	e791      	b.n	8009f70 <_strtol_l.isra.0+0x18>
 800a04c:	2430      	movs	r4, #48	; 0x30
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1b2      	bne.n	8009fb8 <_strtol_l.isra.0+0x60>
 800a052:	2308      	movs	r3, #8
 800a054:	e7b0      	b.n	8009fb8 <_strtol_l.isra.0+0x60>
 800a056:	2c30      	cmp	r4, #48	; 0x30
 800a058:	d0a3      	beq.n	8009fa2 <_strtol_l.isra.0+0x4a>
 800a05a:	230a      	movs	r3, #10
 800a05c:	e7ac      	b.n	8009fb8 <_strtol_l.isra.0+0x60>
 800a05e:	bf00      	nop
 800a060:	0800a853 	.word	0x0800a853

0800a064 <_strtol_r>:
 800a064:	f7ff bf78 	b.w	8009f58 <_strtol_l.isra.0>

0800a068 <_strtoul_l.isra.0>:
 800a068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a06c:	468c      	mov	ip, r1
 800a06e:	4686      	mov	lr, r0
 800a070:	4e3a      	ldr	r6, [pc, #232]	; (800a15c <_strtoul_l.isra.0+0xf4>)
 800a072:	4660      	mov	r0, ip
 800a074:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a078:	5da5      	ldrb	r5, [r4, r6]
 800a07a:	f015 0508 	ands.w	r5, r5, #8
 800a07e:	d1f8      	bne.n	800a072 <_strtoul_l.isra.0+0xa>
 800a080:	2c2d      	cmp	r4, #45	; 0x2d
 800a082:	d134      	bne.n	800a0ee <_strtoul_l.isra.0+0x86>
 800a084:	f04f 0801 	mov.w	r8, #1
 800a088:	f89c 4000 	ldrb.w	r4, [ip]
 800a08c:	f100 0c02 	add.w	ip, r0, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d05e      	beq.n	800a152 <_strtoul_l.isra.0+0xea>
 800a094:	2b10      	cmp	r3, #16
 800a096:	d10c      	bne.n	800a0b2 <_strtoul_l.isra.0+0x4a>
 800a098:	2c30      	cmp	r4, #48	; 0x30
 800a09a:	d10a      	bne.n	800a0b2 <_strtoul_l.isra.0+0x4a>
 800a09c:	f89c 0000 	ldrb.w	r0, [ip]
 800a0a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0a4:	2858      	cmp	r0, #88	; 0x58
 800a0a6:	d14f      	bne.n	800a148 <_strtoul_l.isra.0+0xe0>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a0ae:	f10c 0c02 	add.w	ip, ip, #2
 800a0b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a0b6:	fbb7 f7f3 	udiv	r7, r7, r3
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	fb03 f907 	mul.w	r9, r3, r7
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	ea6f 0909 	mvn.w	r9, r9
 800a0c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a0ca:	2e09      	cmp	r6, #9
 800a0cc:	d818      	bhi.n	800a100 <_strtoul_l.isra.0+0x98>
 800a0ce:	4634      	mov	r4, r6
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	dd24      	ble.n	800a11e <_strtoul_l.isra.0+0xb6>
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	db1f      	blt.n	800a118 <_strtoul_l.isra.0+0xb0>
 800a0d8:	4287      	cmp	r7, r0
 800a0da:	d31d      	bcc.n	800a118 <_strtoul_l.isra.0+0xb0>
 800a0dc:	d101      	bne.n	800a0e2 <_strtoul_l.isra.0+0x7a>
 800a0de:	45a1      	cmp	r9, r4
 800a0e0:	db1a      	blt.n	800a118 <_strtoul_l.isra.0+0xb0>
 800a0e2:	2501      	movs	r5, #1
 800a0e4:	fb00 4003 	mla	r0, r0, r3, r4
 800a0e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a0ec:	e7eb      	b.n	800a0c6 <_strtoul_l.isra.0+0x5e>
 800a0ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a0f0:	bf08      	it	eq
 800a0f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a0f6:	46a8      	mov	r8, r5
 800a0f8:	bf08      	it	eq
 800a0fa:	f100 0c02 	addeq.w	ip, r0, #2
 800a0fe:	e7c7      	b.n	800a090 <_strtoul_l.isra.0+0x28>
 800a100:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a104:	2e19      	cmp	r6, #25
 800a106:	d801      	bhi.n	800a10c <_strtoul_l.isra.0+0xa4>
 800a108:	3c37      	subs	r4, #55	; 0x37
 800a10a:	e7e1      	b.n	800a0d0 <_strtoul_l.isra.0+0x68>
 800a10c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a110:	2e19      	cmp	r6, #25
 800a112:	d804      	bhi.n	800a11e <_strtoul_l.isra.0+0xb6>
 800a114:	3c57      	subs	r4, #87	; 0x57
 800a116:	e7db      	b.n	800a0d0 <_strtoul_l.isra.0+0x68>
 800a118:	f04f 35ff 	mov.w	r5, #4294967295
 800a11c:	e7e4      	b.n	800a0e8 <_strtoul_l.isra.0+0x80>
 800a11e:	2d00      	cmp	r5, #0
 800a120:	da07      	bge.n	800a132 <_strtoul_l.isra.0+0xca>
 800a122:	2322      	movs	r3, #34	; 0x22
 800a124:	f04f 30ff 	mov.w	r0, #4294967295
 800a128:	f8ce 3000 	str.w	r3, [lr]
 800a12c:	b942      	cbnz	r2, 800a140 <_strtoul_l.isra.0+0xd8>
 800a12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a132:	f1b8 0f00 	cmp.w	r8, #0
 800a136:	d000      	beq.n	800a13a <_strtoul_l.isra.0+0xd2>
 800a138:	4240      	negs	r0, r0
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d0f7      	beq.n	800a12e <_strtoul_l.isra.0+0xc6>
 800a13e:	b10d      	cbz	r5, 800a144 <_strtoul_l.isra.0+0xdc>
 800a140:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	e7f2      	b.n	800a12e <_strtoul_l.isra.0+0xc6>
 800a148:	2430      	movs	r4, #48	; 0x30
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1b1      	bne.n	800a0b2 <_strtoul_l.isra.0+0x4a>
 800a14e:	2308      	movs	r3, #8
 800a150:	e7af      	b.n	800a0b2 <_strtoul_l.isra.0+0x4a>
 800a152:	2c30      	cmp	r4, #48	; 0x30
 800a154:	d0a2      	beq.n	800a09c <_strtoul_l.isra.0+0x34>
 800a156:	230a      	movs	r3, #10
 800a158:	e7ab      	b.n	800a0b2 <_strtoul_l.isra.0+0x4a>
 800a15a:	bf00      	nop
 800a15c:	0800a853 	.word	0x0800a853

0800a160 <_strtoul_r>:
 800a160:	f7ff bf82 	b.w	800a068 <_strtoul_l.isra.0>

0800a164 <__submore>:
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	460c      	mov	r4, r1
 800a16a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a170:	4299      	cmp	r1, r3
 800a172:	d11b      	bne.n	800a1ac <__submore+0x48>
 800a174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a178:	f7fe fcde 	bl	8008b38 <_malloc_r>
 800a17c:	b918      	cbnz	r0, 800a186 <__submore+0x22>
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a18a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a18c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a190:	6360      	str	r0, [r4, #52]	; 0x34
 800a192:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a196:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a19a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a19e:	7043      	strb	r3, [r0, #1]
 800a1a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1a4:	7003      	strb	r3, [r0, #0]
 800a1a6:	6020      	str	r0, [r4, #0]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e7ea      	b.n	800a182 <__submore+0x1e>
 800a1ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a1ae:	0077      	lsls	r7, r6, #1
 800a1b0:	463a      	mov	r2, r7
 800a1b2:	f000 fa1d 	bl	800a5f0 <_realloc_r>
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d0e0      	beq.n	800a17e <__submore+0x1a>
 800a1bc:	eb00 0806 	add.w	r8, r0, r6
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	f7fe fc55 	bl	8008a74 <memcpy>
 800a1ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a1ce:	f8c4 8000 	str.w	r8, [r4]
 800a1d2:	e7e9      	b.n	800a1a8 <__submore+0x44>

0800a1d4 <__swbuf_r>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	460e      	mov	r6, r1
 800a1d8:	4614      	mov	r4, r2
 800a1da:	4605      	mov	r5, r0
 800a1dc:	b118      	cbz	r0, 800a1e6 <__swbuf_r+0x12>
 800a1de:	6983      	ldr	r3, [r0, #24]
 800a1e0:	b90b      	cbnz	r3, 800a1e6 <__swbuf_r+0x12>
 800a1e2:	f7fe fe47 	bl	8008e74 <__sinit>
 800a1e6:	4b21      	ldr	r3, [pc, #132]	; (800a26c <__swbuf_r+0x98>)
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	d12b      	bne.n	800a244 <__swbuf_r+0x70>
 800a1ec:	686c      	ldr	r4, [r5, #4]
 800a1ee:	69a3      	ldr	r3, [r4, #24]
 800a1f0:	60a3      	str	r3, [r4, #8]
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	071a      	lsls	r2, r3, #28
 800a1f6:	d52f      	bpl.n	800a258 <__swbuf_r+0x84>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	b36b      	cbz	r3, 800a258 <__swbuf_r+0x84>
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	6820      	ldr	r0, [r4, #0]
 800a200:	b2f6      	uxtb	r6, r6
 800a202:	1ac0      	subs	r0, r0, r3
 800a204:	6963      	ldr	r3, [r4, #20]
 800a206:	4637      	mov	r7, r6
 800a208:	4283      	cmp	r3, r0
 800a20a:	dc04      	bgt.n	800a216 <__swbuf_r+0x42>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 f926 	bl	800a460 <_fflush_r>
 800a214:	bb30      	cbnz	r0, 800a264 <__swbuf_r+0x90>
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	3001      	adds	r0, #1
 800a21a:	3b01      	subs	r3, #1
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	6022      	str	r2, [r4, #0]
 800a224:	701e      	strb	r6, [r3, #0]
 800a226:	6963      	ldr	r3, [r4, #20]
 800a228:	4283      	cmp	r3, r0
 800a22a:	d004      	beq.n	800a236 <__swbuf_r+0x62>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	07db      	lsls	r3, r3, #31
 800a230:	d506      	bpl.n	800a240 <__swbuf_r+0x6c>
 800a232:	2e0a      	cmp	r6, #10
 800a234:	d104      	bne.n	800a240 <__swbuf_r+0x6c>
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 f911 	bl	800a460 <_fflush_r>
 800a23e:	b988      	cbnz	r0, 800a264 <__swbuf_r+0x90>
 800a240:	4638      	mov	r0, r7
 800a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a244:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <__swbuf_r+0x9c>)
 800a246:	429c      	cmp	r4, r3
 800a248:	d101      	bne.n	800a24e <__swbuf_r+0x7a>
 800a24a:	68ac      	ldr	r4, [r5, #8]
 800a24c:	e7cf      	b.n	800a1ee <__swbuf_r+0x1a>
 800a24e:	4b09      	ldr	r3, [pc, #36]	; (800a274 <__swbuf_r+0xa0>)
 800a250:	429c      	cmp	r4, r3
 800a252:	bf08      	it	eq
 800a254:	68ec      	ldreq	r4, [r5, #12]
 800a256:	e7ca      	b.n	800a1ee <__swbuf_r+0x1a>
 800a258:	4621      	mov	r1, r4
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 f80c 	bl	800a278 <__swsetup_r>
 800a260:	2800      	cmp	r0, #0
 800a262:	d0cb      	beq.n	800a1fc <__swbuf_r+0x28>
 800a264:	f04f 37ff 	mov.w	r7, #4294967295
 800a268:	e7ea      	b.n	800a240 <__swbuf_r+0x6c>
 800a26a:	bf00      	nop
 800a26c:	0800a7c4 	.word	0x0800a7c4
 800a270:	0800a7e4 	.word	0x0800a7e4
 800a274:	0800a7a4 	.word	0x0800a7a4

0800a278 <__swsetup_r>:
 800a278:	4b32      	ldr	r3, [pc, #200]	; (800a344 <__swsetup_r+0xcc>)
 800a27a:	b570      	push	{r4, r5, r6, lr}
 800a27c:	681d      	ldr	r5, [r3, #0]
 800a27e:	4606      	mov	r6, r0
 800a280:	460c      	mov	r4, r1
 800a282:	b125      	cbz	r5, 800a28e <__swsetup_r+0x16>
 800a284:	69ab      	ldr	r3, [r5, #24]
 800a286:	b913      	cbnz	r3, 800a28e <__swsetup_r+0x16>
 800a288:	4628      	mov	r0, r5
 800a28a:	f7fe fdf3 	bl	8008e74 <__sinit>
 800a28e:	4b2e      	ldr	r3, [pc, #184]	; (800a348 <__swsetup_r+0xd0>)
 800a290:	429c      	cmp	r4, r3
 800a292:	d10f      	bne.n	800a2b4 <__swsetup_r+0x3c>
 800a294:	686c      	ldr	r4, [r5, #4]
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a29c:	0719      	lsls	r1, r3, #28
 800a29e:	d42c      	bmi.n	800a2fa <__swsetup_r+0x82>
 800a2a0:	06dd      	lsls	r5, r3, #27
 800a2a2:	d411      	bmi.n	800a2c8 <__swsetup_r+0x50>
 800a2a4:	2309      	movs	r3, #9
 800a2a6:	6033      	str	r3, [r6, #0]
 800a2a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b0:	81a3      	strh	r3, [r4, #12]
 800a2b2:	e03e      	b.n	800a332 <__swsetup_r+0xba>
 800a2b4:	4b25      	ldr	r3, [pc, #148]	; (800a34c <__swsetup_r+0xd4>)
 800a2b6:	429c      	cmp	r4, r3
 800a2b8:	d101      	bne.n	800a2be <__swsetup_r+0x46>
 800a2ba:	68ac      	ldr	r4, [r5, #8]
 800a2bc:	e7eb      	b.n	800a296 <__swsetup_r+0x1e>
 800a2be:	4b24      	ldr	r3, [pc, #144]	; (800a350 <__swsetup_r+0xd8>)
 800a2c0:	429c      	cmp	r4, r3
 800a2c2:	bf08      	it	eq
 800a2c4:	68ec      	ldreq	r4, [r5, #12]
 800a2c6:	e7e6      	b.n	800a296 <__swsetup_r+0x1e>
 800a2c8:	0758      	lsls	r0, r3, #29
 800a2ca:	d512      	bpl.n	800a2f2 <__swsetup_r+0x7a>
 800a2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ce:	b141      	cbz	r1, 800a2e2 <__swsetup_r+0x6a>
 800a2d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2d4:	4299      	cmp	r1, r3
 800a2d6:	d002      	beq.n	800a2de <__swsetup_r+0x66>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7fe fbe1 	bl	8008aa0 <_free_r>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6063      	str	r3, [r4, #4]
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	f043 0308 	orr.w	r3, r3, #8
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	b94b      	cbnz	r3, 800a312 <__swsetup_r+0x9a>
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a308:	d003      	beq.n	800a312 <__swsetup_r+0x9a>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 f907 	bl	800a520 <__smakebuf_r>
 800a312:	89a0      	ldrh	r0, [r4, #12]
 800a314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a318:	f010 0301 	ands.w	r3, r0, #1
 800a31c:	d00a      	beq.n	800a334 <__swsetup_r+0xbc>
 800a31e:	2300      	movs	r3, #0
 800a320:	60a3      	str	r3, [r4, #8]
 800a322:	6963      	ldr	r3, [r4, #20]
 800a324:	425b      	negs	r3, r3
 800a326:	61a3      	str	r3, [r4, #24]
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	b943      	cbnz	r3, 800a33e <__swsetup_r+0xc6>
 800a32c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a330:	d1ba      	bne.n	800a2a8 <__swsetup_r+0x30>
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	0781      	lsls	r1, r0, #30
 800a336:	bf58      	it	pl
 800a338:	6963      	ldrpl	r3, [r4, #20]
 800a33a:	60a3      	str	r3, [r4, #8]
 800a33c:	e7f4      	b.n	800a328 <__swsetup_r+0xb0>
 800a33e:	2000      	movs	r0, #0
 800a340:	e7f7      	b.n	800a332 <__swsetup_r+0xba>
 800a342:	bf00      	nop
 800a344:	200001ac 	.word	0x200001ac
 800a348:	0800a7c4 	.word	0x0800a7c4
 800a34c:	0800a7e4 	.word	0x0800a7e4
 800a350:	0800a7a4 	.word	0x0800a7a4

0800a354 <__sflush_r>:
 800a354:	898a      	ldrh	r2, [r1, #12]
 800a356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	4605      	mov	r5, r0
 800a35c:	0710      	lsls	r0, r2, #28
 800a35e:	460c      	mov	r4, r1
 800a360:	d458      	bmi.n	800a414 <__sflush_r+0xc0>
 800a362:	684b      	ldr	r3, [r1, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	dc05      	bgt.n	800a374 <__sflush_r+0x20>
 800a368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	dc02      	bgt.n	800a374 <__sflush_r+0x20>
 800a36e:	2000      	movs	r0, #0
 800a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a376:	2e00      	cmp	r6, #0
 800a378:	d0f9      	beq.n	800a36e <__sflush_r+0x1a>
 800a37a:	2300      	movs	r3, #0
 800a37c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a380:	682f      	ldr	r7, [r5, #0]
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	d032      	beq.n	800a3ec <__sflush_r+0x98>
 800a386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	075a      	lsls	r2, r3, #29
 800a38c:	d505      	bpl.n	800a39a <__sflush_r+0x46>
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	1ac0      	subs	r0, r0, r3
 800a392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a394:	b10b      	cbz	r3, 800a39a <__sflush_r+0x46>
 800a396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a398:	1ac0      	subs	r0, r0, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	4602      	mov	r2, r0
 800a39e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	6a21      	ldr	r1, [r4, #32]
 800a3a4:	47b0      	blx	r6
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	d106      	bne.n	800a3ba <__sflush_r+0x66>
 800a3ac:	6829      	ldr	r1, [r5, #0]
 800a3ae:	291d      	cmp	r1, #29
 800a3b0:	d82c      	bhi.n	800a40c <__sflush_r+0xb8>
 800a3b2:	4a2a      	ldr	r2, [pc, #168]	; (800a45c <__sflush_r+0x108>)
 800a3b4:	40ca      	lsrs	r2, r1
 800a3b6:	07d6      	lsls	r6, r2, #31
 800a3b8:	d528      	bpl.n	800a40c <__sflush_r+0xb8>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	6062      	str	r2, [r4, #4]
 800a3be:	6922      	ldr	r2, [r4, #16]
 800a3c0:	04d9      	lsls	r1, r3, #19
 800a3c2:	6022      	str	r2, [r4, #0]
 800a3c4:	d504      	bpl.n	800a3d0 <__sflush_r+0x7c>
 800a3c6:	1c42      	adds	r2, r0, #1
 800a3c8:	d101      	bne.n	800a3ce <__sflush_r+0x7a>
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	b903      	cbnz	r3, 800a3d0 <__sflush_r+0x7c>
 800a3ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d2:	602f      	str	r7, [r5, #0]
 800a3d4:	2900      	cmp	r1, #0
 800a3d6:	d0ca      	beq.n	800a36e <__sflush_r+0x1a>
 800a3d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3dc:	4299      	cmp	r1, r3
 800a3de:	d002      	beq.n	800a3e6 <__sflush_r+0x92>
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f7fe fb5d 	bl	8008aa0 <_free_r>
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3ea:	e7c1      	b.n	800a370 <__sflush_r+0x1c>
 800a3ec:	6a21      	ldr	r1, [r4, #32]
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b0      	blx	r6
 800a3f4:	1c41      	adds	r1, r0, #1
 800a3f6:	d1c7      	bne.n	800a388 <__sflush_r+0x34>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0c4      	beq.n	800a388 <__sflush_r+0x34>
 800a3fe:	2b1d      	cmp	r3, #29
 800a400:	d001      	beq.n	800a406 <__sflush_r+0xb2>
 800a402:	2b16      	cmp	r3, #22
 800a404:	d101      	bne.n	800a40a <__sflush_r+0xb6>
 800a406:	602f      	str	r7, [r5, #0]
 800a408:	e7b1      	b.n	800a36e <__sflush_r+0x1a>
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	e7ad      	b.n	800a370 <__sflush_r+0x1c>
 800a414:	690f      	ldr	r7, [r1, #16]
 800a416:	2f00      	cmp	r7, #0
 800a418:	d0a9      	beq.n	800a36e <__sflush_r+0x1a>
 800a41a:	0793      	lsls	r3, r2, #30
 800a41c:	bf18      	it	ne
 800a41e:	2300      	movne	r3, #0
 800a420:	680e      	ldr	r6, [r1, #0]
 800a422:	bf08      	it	eq
 800a424:	694b      	ldreq	r3, [r1, #20]
 800a426:	eba6 0807 	sub.w	r8, r6, r7
 800a42a:	600f      	str	r7, [r1, #0]
 800a42c:	608b      	str	r3, [r1, #8]
 800a42e:	f1b8 0f00 	cmp.w	r8, #0
 800a432:	dd9c      	ble.n	800a36e <__sflush_r+0x1a>
 800a434:	4643      	mov	r3, r8
 800a436:	463a      	mov	r2, r7
 800a438:	4628      	mov	r0, r5
 800a43a:	6a21      	ldr	r1, [r4, #32]
 800a43c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a43e:	47b0      	blx	r6
 800a440:	2800      	cmp	r0, #0
 800a442:	dc06      	bgt.n	800a452 <__sflush_r+0xfe>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f04f 30ff 	mov.w	r0, #4294967295
 800a44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	e78e      	b.n	800a370 <__sflush_r+0x1c>
 800a452:	4407      	add	r7, r0
 800a454:	eba8 0800 	sub.w	r8, r8, r0
 800a458:	e7e9      	b.n	800a42e <__sflush_r+0xda>
 800a45a:	bf00      	nop
 800a45c:	20400001 	.word	0x20400001

0800a460 <_fflush_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	690b      	ldr	r3, [r1, #16]
 800a464:	4605      	mov	r5, r0
 800a466:	460c      	mov	r4, r1
 800a468:	b913      	cbnz	r3, 800a470 <_fflush_r+0x10>
 800a46a:	2500      	movs	r5, #0
 800a46c:	4628      	mov	r0, r5
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	b118      	cbz	r0, 800a47a <_fflush_r+0x1a>
 800a472:	6983      	ldr	r3, [r0, #24]
 800a474:	b90b      	cbnz	r3, 800a47a <_fflush_r+0x1a>
 800a476:	f7fe fcfd 	bl	8008e74 <__sinit>
 800a47a:	4b14      	ldr	r3, [pc, #80]	; (800a4cc <_fflush_r+0x6c>)
 800a47c:	429c      	cmp	r4, r3
 800a47e:	d11b      	bne.n	800a4b8 <_fflush_r+0x58>
 800a480:	686c      	ldr	r4, [r5, #4]
 800a482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0ef      	beq.n	800a46a <_fflush_r+0xa>
 800a48a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a48c:	07d0      	lsls	r0, r2, #31
 800a48e:	d404      	bmi.n	800a49a <_fflush_r+0x3a>
 800a490:	0599      	lsls	r1, r3, #22
 800a492:	d402      	bmi.n	800a49a <_fflush_r+0x3a>
 800a494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a496:	f7fe fd8b 	bl	8008fb0 <__retarget_lock_acquire_recursive>
 800a49a:	4628      	mov	r0, r5
 800a49c:	4621      	mov	r1, r4
 800a49e:	f7ff ff59 	bl	800a354 <__sflush_r>
 800a4a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	07da      	lsls	r2, r3, #31
 800a4a8:	d4e0      	bmi.n	800a46c <_fflush_r+0xc>
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	059b      	lsls	r3, r3, #22
 800a4ae:	d4dd      	bmi.n	800a46c <_fflush_r+0xc>
 800a4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4b2:	f7fe fd7e 	bl	8008fb2 <__retarget_lock_release_recursive>
 800a4b6:	e7d9      	b.n	800a46c <_fflush_r+0xc>
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <_fflush_r+0x70>)
 800a4ba:	429c      	cmp	r4, r3
 800a4bc:	d101      	bne.n	800a4c2 <_fflush_r+0x62>
 800a4be:	68ac      	ldr	r4, [r5, #8]
 800a4c0:	e7df      	b.n	800a482 <_fflush_r+0x22>
 800a4c2:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <_fflush_r+0x74>)
 800a4c4:	429c      	cmp	r4, r3
 800a4c6:	bf08      	it	eq
 800a4c8:	68ec      	ldreq	r4, [r5, #12]
 800a4ca:	e7da      	b.n	800a482 <_fflush_r+0x22>
 800a4cc:	0800a7c4 	.word	0x0800a7c4
 800a4d0:	0800a7e4 	.word	0x0800a7e4
 800a4d4:	0800a7a4 	.word	0x0800a7a4

0800a4d8 <__swhatbuf_r>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	460e      	mov	r6, r1
 800a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	461d      	mov	r5, r3
 800a4e6:	b096      	sub	sp, #88	; 0x58
 800a4e8:	da07      	bge.n	800a4fa <__swhatbuf_r+0x22>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	602b      	str	r3, [r5, #0]
 800a4ee:	89b3      	ldrh	r3, [r6, #12]
 800a4f0:	061a      	lsls	r2, r3, #24
 800a4f2:	d410      	bmi.n	800a516 <__swhatbuf_r+0x3e>
 800a4f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4f8:	e00e      	b.n	800a518 <__swhatbuf_r+0x40>
 800a4fa:	466a      	mov	r2, sp
 800a4fc:	f000 f89e 	bl	800a63c <_fstat_r>
 800a500:	2800      	cmp	r0, #0
 800a502:	dbf2      	blt.n	800a4ea <__swhatbuf_r+0x12>
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a50a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a50e:	425a      	negs	r2, r3
 800a510:	415a      	adcs	r2, r3
 800a512:	602a      	str	r2, [r5, #0]
 800a514:	e7ee      	b.n	800a4f4 <__swhatbuf_r+0x1c>
 800a516:	2340      	movs	r3, #64	; 0x40
 800a518:	2000      	movs	r0, #0
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	b016      	add	sp, #88	; 0x58
 800a51e:	bd70      	pop	{r4, r5, r6, pc}

0800a520 <__smakebuf_r>:
 800a520:	898b      	ldrh	r3, [r1, #12]
 800a522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a524:	079d      	lsls	r5, r3, #30
 800a526:	4606      	mov	r6, r0
 800a528:	460c      	mov	r4, r1
 800a52a:	d507      	bpl.n	800a53c <__smakebuf_r+0x1c>
 800a52c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	2301      	movs	r3, #1
 800a536:	6163      	str	r3, [r4, #20]
 800a538:	b002      	add	sp, #8
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	466a      	mov	r2, sp
 800a53e:	ab01      	add	r3, sp, #4
 800a540:	f7ff ffca 	bl	800a4d8 <__swhatbuf_r>
 800a544:	9900      	ldr	r1, [sp, #0]
 800a546:	4605      	mov	r5, r0
 800a548:	4630      	mov	r0, r6
 800a54a:	f7fe faf5 	bl	8008b38 <_malloc_r>
 800a54e:	b948      	cbnz	r0, 800a564 <__smakebuf_r+0x44>
 800a550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a554:	059a      	lsls	r2, r3, #22
 800a556:	d4ef      	bmi.n	800a538 <__smakebuf_r+0x18>
 800a558:	f023 0303 	bic.w	r3, r3, #3
 800a55c:	f043 0302 	orr.w	r3, r3, #2
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	e7e3      	b.n	800a52c <__smakebuf_r+0xc>
 800a564:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <__smakebuf_r+0x7c>)
 800a566:	62b3      	str	r3, [r6, #40]	; 0x28
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	6020      	str	r0, [r4, #0]
 800a56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	9b00      	ldr	r3, [sp, #0]
 800a574:	6120      	str	r0, [r4, #16]
 800a576:	6163      	str	r3, [r4, #20]
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	b15b      	cbz	r3, 800a594 <__smakebuf_r+0x74>
 800a57c:	4630      	mov	r0, r6
 800a57e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a582:	f000 f86d 	bl	800a660 <_isatty_r>
 800a586:	b128      	cbz	r0, 800a594 <__smakebuf_r+0x74>
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	89a0      	ldrh	r0, [r4, #12]
 800a596:	4305      	orrs	r5, r0
 800a598:	81a5      	strh	r5, [r4, #12]
 800a59a:	e7cd      	b.n	800a538 <__smakebuf_r+0x18>
 800a59c:	08008e0d 	.word	0x08008e0d

0800a5a0 <memchr>:
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	b510      	push	{r4, lr}
 800a5a4:	b2c9      	uxtb	r1, r1
 800a5a6:	4402      	add	r2, r0
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	d101      	bne.n	800a5b2 <memchr+0x12>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e003      	b.n	800a5ba <memchr+0x1a>
 800a5b2:	7804      	ldrb	r4, [r0, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	428c      	cmp	r4, r1
 800a5b8:	d1f6      	bne.n	800a5a8 <memchr+0x8>
 800a5ba:	bd10      	pop	{r4, pc}

0800a5bc <memmove>:
 800a5bc:	4288      	cmp	r0, r1
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	eb01 0402 	add.w	r4, r1, r2
 800a5c4:	d902      	bls.n	800a5cc <memmove+0x10>
 800a5c6:	4284      	cmp	r4, r0
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	d807      	bhi.n	800a5dc <memmove+0x20>
 800a5cc:	1e43      	subs	r3, r0, #1
 800a5ce:	42a1      	cmp	r1, r4
 800a5d0:	d008      	beq.n	800a5e4 <memmove+0x28>
 800a5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5da:	e7f8      	b.n	800a5ce <memmove+0x12>
 800a5dc:	4601      	mov	r1, r0
 800a5de:	4402      	add	r2, r0
 800a5e0:	428a      	cmp	r2, r1
 800a5e2:	d100      	bne.n	800a5e6 <memmove+0x2a>
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ee:	e7f7      	b.n	800a5e0 <memmove+0x24>

0800a5f0 <_realloc_r>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	b921      	cbnz	r1, 800a604 <_realloc_r+0x14>
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a600:	f7fe ba9a 	b.w	8008b38 <_malloc_r>
 800a604:	b922      	cbnz	r2, 800a610 <_realloc_r+0x20>
 800a606:	f7fe fa4b 	bl	8008aa0 <_free_r>
 800a60a:	4625      	mov	r5, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a610:	f000 f836 	bl	800a680 <_malloc_usable_size_r>
 800a614:	42a0      	cmp	r0, r4
 800a616:	d20f      	bcs.n	800a638 <_realloc_r+0x48>
 800a618:	4621      	mov	r1, r4
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7fe fa8c 	bl	8008b38 <_malloc_r>
 800a620:	4605      	mov	r5, r0
 800a622:	2800      	cmp	r0, #0
 800a624:	d0f2      	beq.n	800a60c <_realloc_r+0x1c>
 800a626:	4631      	mov	r1, r6
 800a628:	4622      	mov	r2, r4
 800a62a:	f7fe fa23 	bl	8008a74 <memcpy>
 800a62e:	4631      	mov	r1, r6
 800a630:	4638      	mov	r0, r7
 800a632:	f7fe fa35 	bl	8008aa0 <_free_r>
 800a636:	e7e9      	b.n	800a60c <_realloc_r+0x1c>
 800a638:	4635      	mov	r5, r6
 800a63a:	e7e7      	b.n	800a60c <_realloc_r+0x1c>

0800a63c <_fstat_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	2300      	movs	r3, #0
 800a640:	4d06      	ldr	r5, [pc, #24]	; (800a65c <_fstat_r+0x20>)
 800a642:	4604      	mov	r4, r0
 800a644:	4608      	mov	r0, r1
 800a646:	4611      	mov	r1, r2
 800a648:	602b      	str	r3, [r5, #0]
 800a64a:	f7f7 f911 	bl	8001870 <_fstat>
 800a64e:	1c43      	adds	r3, r0, #1
 800a650:	d102      	bne.n	800a658 <_fstat_r+0x1c>
 800a652:	682b      	ldr	r3, [r5, #0]
 800a654:	b103      	cbz	r3, 800a658 <_fstat_r+0x1c>
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	bd38      	pop	{r3, r4, r5, pc}
 800a65a:	bf00      	nop
 800a65c:	20001570 	.word	0x20001570

0800a660 <_isatty_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	2300      	movs	r3, #0
 800a664:	4d05      	ldr	r5, [pc, #20]	; (800a67c <_isatty_r+0x1c>)
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	f7f7 f90f 	bl	800188e <_isatty>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_isatty_r+0x1a>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_isatty_r+0x1a>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20001570 	.word	0x20001570

0800a680 <_malloc_usable_size_r>:
 800a680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a684:	1f18      	subs	r0, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	bfbc      	itt	lt
 800a68a:	580b      	ldrlt	r3, [r1, r0]
 800a68c:	18c0      	addlt	r0, r0, r3
 800a68e:	4770      	bx	lr

0800a690 <_init>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr

0800a69c <_fini>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr
