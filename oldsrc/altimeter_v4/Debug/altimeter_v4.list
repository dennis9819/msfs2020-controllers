
altimeter_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b09c  0800b09c  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800b09c  0800b09c  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b09c  0800b09c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800b0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000218  0800b2bc  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800b2bc  000216b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f01  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003777  00000000  00000000  00032185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00035900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0d  00000000  00000000  00036a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bafa  00000000  00000000  00037765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016390  00000000  00000000  0005325f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eaa9  00000000  00000000  000695ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005380  00000000  00000000  000f8098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fd418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae3c 	.word	0x0800ae3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800ae3c 	.word	0x0800ae3c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	; 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__aeabi_d2iz>:
 8000740:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000744:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000748:	d215      	bcs.n	8000776 <__aeabi_d2iz+0x36>
 800074a:	d511      	bpl.n	8000770 <__aeabi_d2iz+0x30>
 800074c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000750:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000754:	d912      	bls.n	800077c <__aeabi_d2iz+0x3c>
 8000756:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800075a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000762:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000766:	fa23 f002 	lsr.w	r0, r3, r2
 800076a:	bf18      	it	ne
 800076c:	4240      	negne	r0, r0
 800076e:	4770      	bx	lr
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	4770      	bx	lr
 8000776:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800077a:	d105      	bne.n	8000788 <__aeabi_d2iz+0x48>
 800077c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000780:	bf08      	it	eq
 8000782:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <__aeabi_frsub>:
 8000790:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000794:	e002      	b.n	800079c <__addsf3>
 8000796:	bf00      	nop

08000798 <__aeabi_fsub>:
 8000798:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800079c <__addsf3>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	bf1f      	itttt	ne
 80007a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007a4:	ea92 0f03 	teqne	r2, r3
 80007a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007b0:	d06a      	beq.n	8000888 <__addsf3+0xec>
 80007b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007ba:	bfc1      	itttt	gt
 80007bc:	18d2      	addgt	r2, r2, r3
 80007be:	4041      	eorgt	r1, r0
 80007c0:	4048      	eorgt	r0, r1
 80007c2:	4041      	eorgt	r1, r0
 80007c4:	bfb8      	it	lt
 80007c6:	425b      	neglt	r3, r3
 80007c8:	2b19      	cmp	r3, #25
 80007ca:	bf88      	it	hi
 80007cc:	4770      	bxhi	lr
 80007ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007da:	bf18      	it	ne
 80007dc:	4240      	negne	r0, r0
 80007de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007ea:	bf18      	it	ne
 80007ec:	4249      	negne	r1, r1
 80007ee:	ea92 0f03 	teq	r2, r3
 80007f2:	d03f      	beq.n	8000874 <__addsf3+0xd8>
 80007f4:	f1a2 0201 	sub.w	r2, r2, #1
 80007f8:	fa41 fc03 	asr.w	ip, r1, r3
 80007fc:	eb10 000c 	adds.w	r0, r0, ip
 8000800:	f1c3 0320 	rsb	r3, r3, #32
 8000804:	fa01 f103 	lsl.w	r1, r1, r3
 8000808:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__addsf3+0x78>
 800080e:	4249      	negs	r1, r1
 8000810:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000814:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000818:	d313      	bcc.n	8000842 <__addsf3+0xa6>
 800081a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800081e:	d306      	bcc.n	800082e <__addsf3+0x92>
 8000820:	0840      	lsrs	r0, r0, #1
 8000822:	ea4f 0131 	mov.w	r1, r1, rrx
 8000826:	f102 0201 	add.w	r2, r2, #1
 800082a:	2afe      	cmp	r2, #254	; 0xfe
 800082c:	d251      	bcs.n	80008d2 <__addsf3+0x136>
 800082e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000832:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000836:	bf08      	it	eq
 8000838:	f020 0001 	biceq.w	r0, r0, #1
 800083c:	ea40 0003 	orr.w	r0, r0, r3
 8000840:	4770      	bx	lr
 8000842:	0049      	lsls	r1, r1, #1
 8000844:	eb40 0000 	adc.w	r0, r0, r0
 8000848:	3a01      	subs	r2, #1
 800084a:	bf28      	it	cs
 800084c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000850:	d2ed      	bcs.n	800082e <__addsf3+0x92>
 8000852:	fab0 fc80 	clz	ip, r0
 8000856:	f1ac 0c08 	sub.w	ip, ip, #8
 800085a:	ebb2 020c 	subs.w	r2, r2, ip
 800085e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000862:	bfaa      	itet	ge
 8000864:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000868:	4252      	neglt	r2, r2
 800086a:	4318      	orrge	r0, r3
 800086c:	bfbc      	itt	lt
 800086e:	40d0      	lsrlt	r0, r2
 8000870:	4318      	orrlt	r0, r3
 8000872:	4770      	bx	lr
 8000874:	f092 0f00 	teq	r2, #0
 8000878:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800087c:	bf06      	itte	eq
 800087e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000882:	3201      	addeq	r2, #1
 8000884:	3b01      	subne	r3, #1
 8000886:	e7b5      	b.n	80007f4 <__addsf3+0x58>
 8000888:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800088c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000890:	bf18      	it	ne
 8000892:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000896:	d021      	beq.n	80008dc <__addsf3+0x140>
 8000898:	ea92 0f03 	teq	r2, r3
 800089c:	d004      	beq.n	80008a8 <__addsf3+0x10c>
 800089e:	f092 0f00 	teq	r2, #0
 80008a2:	bf08      	it	eq
 80008a4:	4608      	moveq	r0, r1
 80008a6:	4770      	bx	lr
 80008a8:	ea90 0f01 	teq	r0, r1
 80008ac:	bf1c      	itt	ne
 80008ae:	2000      	movne	r0, #0
 80008b0:	4770      	bxne	lr
 80008b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008b6:	d104      	bne.n	80008c2 <__addsf3+0x126>
 80008b8:	0040      	lsls	r0, r0, #1
 80008ba:	bf28      	it	cs
 80008bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008c6:	bf3c      	itt	cc
 80008c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bxcc	lr
 80008ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008da:	4770      	bx	lr
 80008dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008e0:	bf16      	itet	ne
 80008e2:	4608      	movne	r0, r1
 80008e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008e8:	4601      	movne	r1, r0
 80008ea:	0242      	lsls	r2, r0, #9
 80008ec:	bf06      	itte	eq
 80008ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008f2:	ea90 0f01 	teqeq	r0, r1
 80008f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008fa:	4770      	bx	lr

080008fc <__aeabi_ui2f>:
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	e004      	b.n	800090c <__aeabi_i2f+0x8>
 8000902:	bf00      	nop

08000904 <__aeabi_i2f>:
 8000904:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000908:	bf48      	it	mi
 800090a:	4240      	negmi	r0, r0
 800090c:	ea5f 0c00 	movs.w	ip, r0
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000918:	4601      	mov	r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	e01c      	b.n	800095a <__aeabi_l2f+0x2a>

08000920 <__aeabi_ul2f>:
 8000920:	ea50 0201 	orrs.w	r2, r0, r1
 8000924:	bf08      	it	eq
 8000926:	4770      	bxeq	lr
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e00a      	b.n	8000944 <__aeabi_l2f+0x14>
 800092e:	bf00      	nop

08000930 <__aeabi_l2f>:
 8000930:	ea50 0201 	orrs.w	r2, r0, r1
 8000934:	bf08      	it	eq
 8000936:	4770      	bxeq	lr
 8000938:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800093c:	d502      	bpl.n	8000944 <__aeabi_l2f+0x14>
 800093e:	4240      	negs	r0, r0
 8000940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000944:	ea5f 0c01 	movs.w	ip, r1
 8000948:	bf02      	ittt	eq
 800094a:	4684      	moveq	ip, r0
 800094c:	4601      	moveq	r1, r0
 800094e:	2000      	moveq	r0, #0
 8000950:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000954:	bf08      	it	eq
 8000956:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800095a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800095e:	fabc f28c 	clz	r2, ip
 8000962:	3a08      	subs	r2, #8
 8000964:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000968:	db10      	blt.n	800098c <__aeabi_l2f+0x5c>
 800096a:	fa01 fc02 	lsl.w	ip, r1, r2
 800096e:	4463      	add	r3, ip
 8000970:	fa00 fc02 	lsl.w	ip, r0, r2
 8000974:	f1c2 0220 	rsb	r2, r2, #32
 8000978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800097c:	fa20 f202 	lsr.w	r2, r0, r2
 8000980:	eb43 0002 	adc.w	r0, r3, r2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f102 0220 	add.w	r2, r2, #32
 8000990:	fa01 fc02 	lsl.w	ip, r1, r2
 8000994:	f1c2 0220 	rsb	r2, r2, #32
 8000998:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800099c:	fa21 f202 	lsr.w	r2, r1, r2
 80009a0:	eb43 0002 	adc.w	r0, r3, r2
 80009a4:	bf08      	it	eq
 80009a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009aa:	4770      	bx	lr

080009ac <protoInit>:
	uint8_t txBuf[] = "-ALIVE\n";
	CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));

}

void protoInit(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

	uint8_t *txBuf = malloc(32);
 80009b2:	2020      	movs	r0, #32
 80009b4:	f008 fc76 	bl	80092a4 <malloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	60fb      	str	r3, [r7, #12]
	sprintf(txBuf,"EV CONNECTED 0x%04x\n",device_type);
 80009bc:	2306      	movs	r3, #6
 80009be:	461a      	mov	r2, r3
 80009c0:	490a      	ldr	r1, [pc, #40]	; (80009ec <protoInit+0x40>)
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f008 fde4 	bl	8009590 <siprintf>
	struct MSG msg;
	msg.txBuf = txBuf;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	607b      	str	r3, [r7, #4]
	msg.len = strlen(txBuf);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fbc9 	bl	8000164 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	60bb      	str	r3, [r7, #8]
	tx_stack_push(&msg);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f991 	bl	8000d00 <tx_stack_push>
	//init steppers
	homeAll();
 80009de:	f000 ff47 	bl	8001870 <homeAll>

}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800ae64 	.word	0x0800ae64

080009f0 <protoSetAlt>:

void protoSetAlt(uint8_t* Buf, uint32_t *Len){
 80009f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009f4:	b08b      	sub	sp, #44	; 0x2c
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
 80009fc:	466b      	mov	r3, sp
 80009fe:	461e      	mov	r6, r3
	uint32_t length = *Len -7;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3b07      	subs	r3, #7
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
	char number[length];
 8000a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	2300      	movs	r3, #0
 8000a12:	4688      	mov	r8, r1
 8000a14:	4699      	mov	r9, r3
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	460c      	mov	r4, r1
 8000a2e:	461d      	mov	r5, r3
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	00eb      	lsls	r3, r5, #3
 8000a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a3e:	00e2      	lsls	r2, r4, #3
 8000a40:	1dcb      	adds	r3, r1, #7
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	ebad 0d03 	sub.w	sp, sp, r3
 8000a4a:	466b      	mov	r3, sp
 8000a4c:	3300      	adds	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
	long int val;
	memcpy( number, &Buf[6], length );
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3306      	adds	r3, #6
 8000a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	69f8      	ldr	r0, [r7, #28]
 8000a5a:	f008 fec5 	bl	80097e8 <memcpy>
	sscanf(number, "%d", &val);
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	461a      	mov	r2, r3
 8000a64:	4911      	ldr	r1, [pc, #68]	; (8000aac <protoSetAlt+0xbc>)
 8000a66:	69f8      	ldr	r0, [r7, #28]
 8000a68:	f008 fdb2 	bl	80095d0 <siscanf>
	inst_set_alt(val);
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f9fa 	bl	8000e68 <inst_set_alt>

	uint8_t txBuf[] = "+RT OK\n";
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <protoSetAlt+0xc0>)
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7e:	e883 0003 	stmia.w	r3, {r0, r1}
	struct MSG msg;
	msg.txBuf = txBuf;
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	60bb      	str	r3, [r7, #8]
	msg.len = strlen(txBuf);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb69 	bl	8000164 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	60fb      	str	r3, [r7, #12]
	tx_stack_push(&msg);
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f930 	bl	8000d00 <tx_stack_push>
 8000aa0:	46b5      	mov	sp, r6

}
 8000aa2:	bf00      	nop
 8000aa4:	372c      	adds	r7, #44	; 0x2c
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aac:	0800ae7c 	.word	0x0800ae7c
 8000ab0:	0800ae80 	.word	0x0800ae80

08000ab4 <protoSetBaro>:

void protoSetBaro(uint8_t* Buf, uint32_t *Len){
 8000ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ab8:	b08b      	sub	sp, #44	; 0x2c
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
 8000ac0:	466b      	mov	r3, sp
 8000ac2:	461e      	mov	r6, r3
	uint32_t length = *Len -7;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3b07      	subs	r3, #7
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
	char number[length];
 8000acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ace:	460b      	mov	r3, r1
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	4699      	mov	r9, r3
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aee:	2300      	movs	r3, #0
 8000af0:	460c      	mov	r4, r1
 8000af2:	461d      	mov	r5, r3
 8000af4:	f04f 0200 	mov.w	r2, #0
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	00eb      	lsls	r3, r5, #3
 8000afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b02:	00e2      	lsls	r2, r4, #3
 8000b04:	1dcb      	adds	r3, r1, #7
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b0e:	466b      	mov	r3, sp
 8000b10:	3300      	adds	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
	long int val;
	memcpy( number, &Buf[6], length );
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3306      	adds	r3, #6
 8000b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	69f8      	ldr	r0, [r7, #28]
 8000b1e:	f008 fe63 	bl	80097e8 <memcpy>
	sscanf(number, "%d", &val);
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	461a      	mov	r2, r3
 8000b28:	4911      	ldr	r1, [pc, #68]	; (8000b70 <protoSetBaro+0xbc>)
 8000b2a:	69f8      	ldr	r0, [r7, #28]
 8000b2c:	f008 fd50 	bl	80095d0 <siscanf>
	inst_set_qnh(val);
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f962 	bl	8000dfc <inst_set_qnh>

	uint8_t txBuf[] = "+RT OK\n";
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <protoSetBaro+0xc0>)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b42:	e883 0003 	stmia.w	r3, {r0, r1}
	struct MSG msg;
	msg.txBuf = txBuf;
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	60bb      	str	r3, [r7, #8]
	msg.len = strlen(txBuf);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb07 	bl	8000164 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	60fb      	str	r3, [r7, #12]
	tx_stack_push(&msg);
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f8ce 	bl	8000d00 <tx_stack_push>
 8000b64:	46b5      	mov	sp, r6

}
 8000b66:	bf00      	nop
 8000b68:	372c      	adds	r7, #44	; 0x2c
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b70:	0800ae7c 	.word	0x0800ae7c
 8000b74:	0800ae80 	.word	0x0800ae80

08000b78 <usb_data_rx>:
char RESP_ALT[]	= "S ALT";
char RESP_BARO[]	= "S BAR";
char RESP_IDENT[]	= "GS IDENT\n";
char RESP_TYPE[]	= "GS TYPE\n";

void usb_data_rx(uint8_t* Buf, uint32_t *Len){
 8000b78:	b5b0      	push	{r4, r5, r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	if (strcmp((const char *)Buf, RESP_INIT) == 0)
 8000b82:	494d      	ldr	r1, [pc, #308]	; (8000cb8 <usb_data_rx+0x140>)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fae3 	bl	8000150 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d109      	bne.n	8000ba4 <usb_data_rx+0x2c>
	{
		protoInit();
 8000b90:	f7ff ff0c 	bl	80009ac <protoInit>
		memset(&Buf[0], 0, *Len);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f008 fd86 	bl	80096ae <memset>
		return;
 8000ba2:	e086      	b.n	8000cb2 <usb_data_rx+0x13a>
	}
	if (strcmp((const char *)Buf, RESP_IDENT) == 0)
 8000ba4:	4945      	ldr	r1, [pc, #276]	; (8000cbc <usb_data_rx+0x144>)
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fad2 	bl	8000150 <strcmp>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d11a      	bne.n	8000be8 <usb_data_rx+0x70>
	{
		uint8_t *txBuf = malloc(32);
 8000bb2:	2020      	movs	r0, #32
 8000bb4:	f008 fb76 	bl	80092a4 <malloc>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
		sprintf(txBuf,"+0x%04x\n+RT OK\n",0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4940      	ldr	r1, [pc, #256]	; (8000cc0 <usb_data_rx+0x148>)
 8000bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bc2:	f008 fce5 	bl	8009590 <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 8000bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bc8:	f7ff facc 	bl	8000164 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bd4:	f007 ff88 	bl	8008ae8 <CDC_Transmit_FS>
		memset(&Buf[0], 0, *Len);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f008 fd64 	bl	80096ae <memset>
		return;
 8000be6:	e064      	b.n	8000cb2 <usb_data_rx+0x13a>
	}
	if (strcmp((const char *)Buf, RESP_TYPE) == 0)
 8000be8:	4936      	ldr	r1, [pc, #216]	; (8000cc4 <usb_data_rx+0x14c>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fab0 	bl	8000150 <strcmp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11b      	bne.n	8000c2e <usb_data_rx+0xb6>
	{
		uint8_t *txBuf = malloc(32);
 8000bf6:	2020      	movs	r0, #32
 8000bf8:	f008 fb54 	bl	80092a4 <malloc>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(txBuf,"+0x%04x\n+RT OK\n",device_type);
 8000c00:	2306      	movs	r3, #6
 8000c02:	461a      	mov	r2, r3
 8000c04:	492e      	ldr	r1, [pc, #184]	; (8000cc0 <usb_data_rx+0x148>)
 8000c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c08:	f008 fcc2 	bl	8009590 <siprintf>
		CDC_Transmit_FS((uint8_t*)txBuf, strlen(txBuf));
 8000c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c0e:	f7ff faa9 	bl	8000164 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c1a:	f007 ff65 	bl	8008ae8 <CDC_Transmit_FS>
		memset(&Buf[0], 0, *Len);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f008 fd41 	bl	80096ae <memset>
		return;
 8000c2c:	e041      	b.n	8000cb2 <usb_data_rx+0x13a>
	}
	if (strncmp((const char *)Buf, RESP_ALT,5) == 0)
 8000c2e:	2205      	movs	r2, #5
 8000c30:	4925      	ldr	r1, [pc, #148]	; (8000cc8 <usb_data_rx+0x150>)
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f008 fd43 	bl	80096be <strncmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10b      	bne.n	8000c56 <usb_data_rx+0xde>
	{
		protoSetAlt(Buf,Len);
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fed5 	bl	80009f0 <protoSetAlt>
		memset(&Buf[0], 0, *Len);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f008 fd2d 	bl	80096ae <memset>
		return;
 8000c54:	e02d      	b.n	8000cb2 <usb_data_rx+0x13a>
	}
	if (strncmp((const char *)Buf, RESP_BARO,5) == 0)
 8000c56:	2205      	movs	r2, #5
 8000c58:	491c      	ldr	r1, [pc, #112]	; (8000ccc <usb_data_rx+0x154>)
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f008 fd2f 	bl	80096be <strncmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10b      	bne.n	8000c7e <usb_data_rx+0x106>
	{
		protoSetBaro(Buf,Len);
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff23 	bl	8000ab4 <protoSetBaro>
		memset(&Buf[0], 0, *Len);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f008 fd19 	bl	80096ae <memset>
		return;
 8000c7c:	e019      	b.n	8000cb2 <usb_data_rx+0x13a>
	}

	uint8_t txBuf[] = "-RT INVALID_COMMAND\n";
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <usb_data_rx+0x158>)
 8000c80:	f107 0410 	add.w	r4, r7, #16
 8000c84:	461d      	mov	r5, r3
 8000c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c8e:	6020      	str	r0, [r4, #0]
 8000c90:	3404      	adds	r4, #4
 8000c92:	7021      	strb	r1, [r4, #0]
	struct MSG msg;
    msg.txBuf = txBuf;
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	60bb      	str	r3, [r7, #8]
    msg.len = strlen(txBuf);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa60 	bl	8000164 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60fb      	str	r3, [r7, #12]
    tx_stack_push(&msg);
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f827 	bl	8000d00 <tx_stack_push>

}
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000018 	.word	0x20000018
 8000cc0:	0800ae88 	.word	0x0800ae88
 8000cc4:	20000024 	.word	0x20000024
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000010 	.word	0x20000010
 8000cd0:	0800ae98 	.word	0x0800ae98

08000cd4 <tx_stack_init>:

tx_stack_init(){
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	stack_max=64;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <tx_stack_init+0x20>)
 8000cda:	2240      	movs	r2, #64	; 0x40
 8000cdc:	701a      	strb	r2, [r3, #0]
	stack_pointer=0;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <tx_stack_init+0x24>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	stack_top=0;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <tx_stack_init+0x28>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000234 	.word	0x20000234
 8000cf8:	20000235 	.word	0x20000235
 8000cfc:	20000236 	.word	0x20000236

08000d00 <tx_stack_push>:

tx_stack_push(struct MSG *message){
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	uint8_t pointer = stack_top % stack_max;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <tx_stack_push+0x48>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <tx_stack_push+0x4c>)
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d14:	fb01 f202 	mul.w	r2, r1, r2
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	73fb      	strb	r3, [r7, #15]
	stack[pointer] = message;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	490b      	ldr	r1, [pc, #44]	; (8000d50 <tx_stack_push+0x50>)
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	stack_top = (pointer + 1) % stack_max;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <tx_stack_push+0x4c>)
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d32:	fb01 f202 	mul.w	r2, r1, r2
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <tx_stack_push+0x48>)
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000236 	.word	0x20000236
 8000d4c:	20000234 	.word	0x20000234
 8000d50:	20000238 	.word	0x20000238

08000d54 <tx_stack_process>:

tx_stack_process(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	uint8_t remaining = ((stack_top + stack_max) - stack_pointer) % stack_max;
 8000d5a:	4b24      	ldr	r3, [pc, #144]	; (8000dec <tx_stack_process+0x98>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <tx_stack_process+0x9c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <tx_stack_process+0xa0>)
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <tx_stack_process+0x9c>)
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d74:	fb01 f202 	mul.w	r2, r1, r2
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	71fb      	strb	r3, [r7, #7]
	while (remaining > 0){
 8000d7c:	e02d      	b.n	8000dda <tx_stack_process+0x86>
		//send
		struct MSG *current;
		current = stack[stack_pointer];
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <tx_stack_process+0xa0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <tx_stack_process+0xa4>)
 8000d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8a:	603b      	str	r3, [r7, #0]
		CDC_Transmit_FS(current->txBuf, current->len);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	f007 fea5 	bl	8008ae8 <CDC_Transmit_FS>
		stack_pointer = (stack_pointer + 1) % stack_max;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <tx_stack_process+0xa0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <tx_stack_process+0x9c>)
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000dac:	fb01 f202 	mul.w	r2, r1, r2
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <tx_stack_process+0xa0>)
 8000db6:	701a      	strb	r2, [r3, #0]
		remaining = ((stack_top + stack_max) - stack_pointer) % stack_max;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <tx_stack_process+0x98>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <tx_stack_process+0x9c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <tx_stack_process+0xa0>)
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <tx_stack_process+0x9c>)
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	fb93 f1f2 	sdiv	r1, r3, r2
 8000dd2:	fb01 f202 	mul.w	r2, r1, r2
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]
	while (remaining > 0){
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1ce      	bne.n	8000d7e <tx_stack_process+0x2a>
	}
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000236 	.word	0x20000236
 8000df0:	20000234 	.word	0x20000234
 8000df4:	20000235 	.word	0x20000235
 8000df8:	20000238 	.word	0x20000238

08000dfc <inst_set_qnh>:
const double step_calib_001 = 4.11632758333;
const double step_calib_010 = 0.411632758333;
const double step_calib_100 = 0.0411632758333;
const double step_calib_baro = 34.5;

void inst_set_qnh(long int val){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	INST_QNH_VAL = val;
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fd7d 	bl	8000904 <__aeabi_i2f>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <inst_set_qnh+0x5c>)
 8000e0e:	6013      	str	r3, [r2, #0]

	long int req_baro_value = (val - 2799) * step_calib_baro ;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f6a3 23ef 	subw	r3, r3, #2799	; 0xaef
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc28 	bl	800066c <__aeabi_i2d>
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <inst_set_qnh+0x60>)
 8000e22:	f7ff f9a7 	bl	8000174 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff fc87 	bl	8000740 <__aeabi_d2iz>
 8000e32:	4603      	mov	r3, r0
 8000e34:	60fb      	str	r3, [r7, #12]
	long int movement = req_baro_value-STEPS_BARO_CURR;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <inst_set_qnh+0x64>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	60bb      	str	r3, [r7, #8]
	moveStepper(1, movement);
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 fa2e 	bl	80012a4 <moveStepper>

	STEPS_BARO_CURR = req_baro_value;
 8000e48:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <inst_set_qnh+0x64>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	40414000 	.word	0x40414000
 8000e60:	20000348 	.word	0x20000348
 8000e64:	00000000 	.word	0x00000000

08000e68 <inst_set_alt>:

void inst_set_alt(long int val){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	INST_ALT_VAL = val;
 8000e70:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <inst_set_alt+0xd8>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]


	long int req_steps_001 = val * step_calib_001;
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fbf8 	bl	800066c <__aeabi_i2d>
 8000e7c:	a32a      	add	r3, pc, #168	; (adr r3, 8000f28 <inst_set_alt+0xc0>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff f977 	bl	8000174 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fc57 	bl	8000740 <__aeabi_d2iz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	617b      	str	r3, [r7, #20]
	long int req_steps_010 = val * step_calib_010;
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fbe8 	bl	800066c <__aeabi_i2d>
 8000e9c:	a324      	add	r3, pc, #144	; (adr r3, 8000f30 <inst_set_alt+0xc8>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	f7ff f967 	bl	8000174 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fc47 	bl	8000740 <__aeabi_d2iz>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	613b      	str	r3, [r7, #16]
	long int req_steps_100 = val * step_calib_100;
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fbd8 	bl	800066c <__aeabi_i2d>
 8000ebc:	a31e      	add	r3, pc, #120	; (adr r3, 8000f38 <inst_set_alt+0xd0>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff f957 	bl	8000174 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fc37 	bl	8000740 <__aeabi_d2iz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60fb      	str	r3, [r7, #12]

	moveStepper(0,req_steps_001-STEPS_001_CURR);
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <inst_set_alt+0xdc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 f9df 	bl	80012a4 <moveStepper>
	moveStepper(2,(req_steps_010-STEPS_010_CURR) * (-1));
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <inst_set_alt+0xe0>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f000 f9d7 	bl	80012a4 <moveStepper>
	moveStepper(3,(req_steps_100-STEPS_100_CURR) * (-1));
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <inst_set_alt+0xe4>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f9cf 	bl	80012a4 <moveStepper>

	STEPS_001_CURR = req_steps_001;
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <inst_set_alt+0xdc>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	6013      	str	r3, [r2, #0]
	STEPS_010_CURR = req_steps_010;
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <inst_set_alt+0xe0>)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	6013      	str	r3, [r2, #0]
	STEPS_100_CURR = req_steps_100;
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <inst_set_alt+0xe4>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6013      	str	r3, [r2, #0]

	printf("debug");
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <inst_set_alt+0xe8>)
 8000f1a:	f008 fb27 	bl	800956c <iprintf>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	93f819ab 	.word	0x93f819ab
 8000f2c:	4010771e 	.word	0x4010771e
 8000f30:	ecc02911 	.word	0xecc02911
 8000f34:	3fda5830 	.word	0x3fda5830
 8000f38:	570020da 	.word	0x570020da
 8000f3c:	3fa5135a 	.word	0x3fa5135a
 8000f40:	20000338 	.word	0x20000338
 8000f44:	20000344 	.word	0x20000344
 8000f48:	20000340 	.word	0x20000340
 8000f4c:	2000033c 	.word	0x2000033c
 8000f50:	0800aeb0 	.word	0x0800aeb0

08000f54 <USB_DEVICE_MasterHardReset>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void USB_DEVICE_MasterHardReset(void)


{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0


    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <USB_DEVICE_MasterHardReset+0x40>)
 8000f72:	f001 f85d 	bl	8002030 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <USB_DEVICE_MasterHardReset+0x40>)
 8000f7e:	f001 f9f2 	bl	8002366 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f000 ff21 	bl	8001dcc <HAL_Delay>

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010800 	.word	0x40010800

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 feb4 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f82c 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f8d6 	bl	8001154 <MX_GPIO_Init>
  USB_DEVICE_MasterHardReset();
 8000fa8:	f7ff ffd4 	bl	8000f54 <USB_DEVICE_MasterHardReset>
  MX_USB_DEVICE_Init();
 8000fac:	f007 fcc6 	bl	800893c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000fb0:	f000 f880 	bl	80010b4 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  tx_stack_init();
 8000fb4:	f7ff fe8e 	bl	8000cd4 <tx_stack_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	tx_stack_process();
 8000fb8:	f7ff fecc 	bl	8000d54 <tx_stack_process>
 8000fbc:	e7fc      	b.n	8000fb8 <main+0x20>
	...

08000fc0 <HAL_TIM_PeriodElapsedCallback>:

uint16_t cdc_isr_prescaler = 1600;
uint16_t cdc_isr_timer = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	stepperServiceRoutine();
 8000fc8:	f000 f9aa 	bl	8001320 <stepperServiceRoutine>

	cdc_isr_timer ++;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	if (cdc_isr_timer == cdc_isr_prescaler){
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d102      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x2a>
		cdc_isr_timer = 0;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	801a      	strh	r2, [r3, #0]

	}
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000394 	.word	0x20000394
 8000ff8:	20000034 	.word	0x20000034

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f008 fb4f 	bl	80096ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103a:	2301      	movs	r3, #1
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fd2e 	bl	8003ab4 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800105e:	f000 f91b 	bl	8001298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f002 ff9a 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800108a:	f000 f905 	bl	8001298 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800108e:	2310      	movs	r3, #16
 8001090:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f8f2 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010a6:	f000 f8f7 	bl	8001298 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010da:	220a      	movs	r2, #10
 80010dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f8:	4815      	ldr	r0, [pc, #84]	; (8001150 <MX_TIM2_Init+0x9c>)
 80010fa:	f003 f979 	bl	80043f0 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001104:	f000 f8c8 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	480e      	ldr	r0, [pc, #56]	; (8001150 <MX_TIM2_Init+0x9c>)
 8001116:	f003 fb15 	bl	8004744 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 f8ba 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM2_Init+0x9c>)
 8001132:	f003 fce7 	bl	8004b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800113c:	f000 f8ac 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM2_Init+0x9c>)
 8001142:	f003 f9a5 	bl	8004490 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000034c 	.word	0x2000034c

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	4b47      	ldr	r3, [pc, #284]	; (8001288 <MX_GPIO_Init+0x134>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <MX_GPIO_Init+0x134>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b44      	ldr	r3, [pc, #272]	; (8001288 <MX_GPIO_Init+0x134>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <MX_GPIO_Init+0x134>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a40      	ldr	r2, [pc, #256]	; (8001288 <MX_GPIO_Init+0x134>)
 8001186:	f043 0320 	orr.w	r3, r3, #32
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <MX_GPIO_Init+0x134>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <MX_GPIO_Init+0x134>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a3a      	ldr	r2, [pc, #232]	; (8001288 <MX_GPIO_Init+0x134>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <MX_GPIO_Init+0x134>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <MX_GPIO_Init+0x134>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a34      	ldr	r2, [pc, #208]	; (8001288 <MX_GPIO_Init+0x134>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <MX_GPIO_Init+0x134>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	482f      	ldr	r0, [pc, #188]	; (800128c <MX_GPIO_Init+0x138>)
 80011d0:	f001 f8c9 	bl	8002366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 80011d4:	2200      	movs	r2, #0
 80011d6:	21ff      	movs	r1, #255	; 0xff
 80011d8:	482d      	ldr	r0, [pc, #180]	; (8001290 <MX_GPIO_Init+0x13c>)
 80011da:	f001 f8c4 	bl	8002366 <HAL_GPIO_WritePin>
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f24f 11e0 	movw	r1, #61920	; 0xf1e0
 80011e4:	482b      	ldr	r0, [pc, #172]	; (8001294 <MX_GPIO_Init+0x140>)
 80011e6:	f001 f8be 	bl	8002366 <HAL_GPIO_WritePin>
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	4822      	ldr	r0, [pc, #136]	; (800128c <MX_GPIO_Init+0x138>)
 8001204:	f000 ff14 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_A1_Pin M3_A2_Pin M3_B1_Pin M3_B2_Pin
                           M4_A1_Pin M4_A2_Pin M4_B1_Pin M4_B2_Pin */
  GPIO_InitStruct.Pin = M3_A1_Pin|M3_A2_Pin|M3_B1_Pin|M3_B2_Pin
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	613b      	str	r3, [r7, #16]
                          |M4_A1_Pin|M4_A2_Pin|M4_B1_Pin|M4_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_GPIO_Init+0x13c>)
 8001220:	f000 ff06 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A1_Pin M1_A2_Pin M1_B1_Pin M1_B2_Pin
                           M2_A1_Pin M2_A2_Pin M2_B1_Pin M2_B2_Pin */
  GPIO_InitStruct.Pin = M1_A1_Pin|M1_A2_Pin|M1_B1_Pin|M1_B2_Pin
 8001224:	f24f 13e0 	movw	r3, #61920	; 0xf1e0
 8001228:	613b      	str	r3, [r7, #16]
                          |M2_A1_Pin|M2_A2_Pin|M2_B1_Pin|M2_B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	4815      	ldr	r0, [pc, #84]	; (8001294 <MX_GPIO_Init+0x140>)
 800123e:	f000 fef7 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin  */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_GPIO_Init+0x13c>)
 800125c:	f000 fee8 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_2_Pin HAL_3_Pin HAL_4_Pin HAL_1_Pin */
  GPIO_InitStruct.Pin = HAL_3_Pin|HAL_4_Pin|HAL_1_Pin|HAL_2_Pin;
 8001260:	f640 6302 	movw	r3, #3586	; 0xe02
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2302      	movs	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_GPIO_Init+0x140>)
 800127a:	f000 fed9 	bl	8002030 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40011000 	.word	0x40011000
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <moveStepper>:

int dly_step = 10;

int homing = 0;

void moveStepper(int id, int steps) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	switch(id){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d827      	bhi.n	8001304 <moveStepper+0x60>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <moveStepper+0x18>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012db 	.word	0x080012db
 80012c4:	080012e9 	.word	0x080012e9
 80012c8:	080012f7 	.word	0x080012f7
		case 0: stepper_1_change += steps; break;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <moveStepper+0x6c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <moveStepper+0x6c>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e014      	b.n	8001304 <moveStepper+0x60>
		case 1: stepper_2_change += steps; break;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <moveStepper+0x70>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <moveStepper+0x70>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00d      	b.n	8001304 <moveStepper+0x60>
		case 2: stepper_3_change += steps; break;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <moveStepper+0x74>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <moveStepper+0x74>)
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e006      	b.n	8001304 <moveStepper+0x60>
		case 3: stepper_4_change += steps; break;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <moveStepper+0x78>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <moveStepper+0x78>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	bf00      	nop
	}
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000398 	.word	0x20000398
 8001314:	2000039c 	.word	0x2000039c
 8001318:	200003a0 	.word	0x200003a0
 800131c:	200003a4 	.word	0x200003a4

08001320 <stepperServiceRoutine>:

void stepperServiceRoutine(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	if (homing > 0){
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <stepperServiceRoutine+0x1c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd02      	ble.n	8001332 <stepperServiceRoutine+0x12>
		homeISR();
 800132c:	f000 f92c 	bl	8001588 <homeISR>
	}else{
		doStepISR();
	}

}
 8001330:	e001      	b.n	8001336 <stepperServiceRoutine+0x16>
		doStepISR();
 8001332:	f000 f805 	bl	8001340 <doStepISR>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200003b8 	.word	0x200003b8

08001340 <doStepISR>:

void doStepISR(){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af02      	add	r7, sp, #8
	if (stepper_1_change > 0){
 8001346:	4b86      	ldr	r3, [pc, #536]	; (8001560 <doStepISR+0x220>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd1f      	ble.n	800138e <doStepISR+0x4e>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 800134e:	4b85      	ldr	r3, [pc, #532]	; (8001564 <doStepISR+0x224>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001366:	4880      	ldr	r0, [pc, #512]	; (8001568 <doStepISR+0x228>)
 8001368:	f000 fa90 	bl	800188c <doStep>
		stepper_1_change --;
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <doStepISR+0x220>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <doStepISR+0x220>)
 8001374:	6013      	str	r3, [r2, #0]
		stepper_1_state ++;
 8001376:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <doStepISR+0x224>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a79      	ldr	r2, [pc, #484]	; (8001564 <doStepISR+0x224>)
 800137e:	6013      	str	r3, [r2, #0]
		if (stepper_1_state == 8){stepper_1_state = 0;}
 8001380:	4b78      	ldr	r3, [pc, #480]	; (8001564 <doStepISR+0x224>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d102      	bne.n	800138e <doStepISR+0x4e>
 8001388:	4b76      	ldr	r3, [pc, #472]	; (8001564 <doStepISR+0x224>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
	}
	if (stepper_1_change < 0){
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <doStepISR+0x220>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da1f      	bge.n	80013d6 <doStepISR+0x96>
		doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <doStepISR+0x224>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	486e      	ldr	r0, [pc, #440]	; (8001568 <doStepISR+0x228>)
 80013b0:	f000 fa6c 	bl	800188c <doStep>
		stepper_1_change ++;
 80013b4:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <doStepISR+0x220>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a69      	ldr	r2, [pc, #420]	; (8001560 <doStepISR+0x220>)
 80013bc:	6013      	str	r3, [r2, #0]
		stepper_1_state --;
 80013be:	4b69      	ldr	r3, [pc, #420]	; (8001564 <doStepISR+0x224>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a67      	ldr	r2, [pc, #412]	; (8001564 <doStepISR+0x224>)
 80013c6:	6013      	str	r3, [r2, #0]
		if (stepper_1_state < 0){stepper_1_state = 7;}
 80013c8:	4b66      	ldr	r3, [pc, #408]	; (8001564 <doStepISR+0x224>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da02      	bge.n	80013d6 <doStepISR+0x96>
 80013d0:	4b64      	ldr	r3, [pc, #400]	; (8001564 <doStepISR+0x224>)
 80013d2:	2207      	movs	r2, #7
 80013d4:	601a      	str	r2, [r3, #0]
	}

	if (stepper_2_change > 0){
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <doStepISR+0x22c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd1c      	ble.n	8001418 <doStepISR+0xd8>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <doStepISR+0x230>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	2120      	movs	r1, #32
 80013f0:	485d      	ldr	r0, [pc, #372]	; (8001568 <doStepISR+0x228>)
 80013f2:	f000 fa4b 	bl	800188c <doStep>
		stepper_2_change --;
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <doStepISR+0x22c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a5b      	ldr	r2, [pc, #364]	; (800156c <doStepISR+0x22c>)
 80013fe:	6013      	str	r3, [r2, #0]
		stepper_2_state ++;
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <doStepISR+0x230>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <doStepISR+0x230>)
 8001408:	6013      	str	r3, [r2, #0]
		if (stepper_2_state == 8){stepper_2_state = 0;}
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <doStepISR+0x230>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d102      	bne.n	8001418 <doStepISR+0xd8>
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <doStepISR+0x230>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	}
	if (stepper_2_change < 0){
 8001418:	4b54      	ldr	r3, [pc, #336]	; (800156c <doStepISR+0x22c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	da1c      	bge.n	800145a <doStepISR+0x11a>
		doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <doStepISR+0x230>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	2120      	movs	r1, #32
 8001432:	484d      	ldr	r0, [pc, #308]	; (8001568 <doStepISR+0x228>)
 8001434:	f000 fa2a 	bl	800188c <doStep>
		stepper_2_change ++;
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <doStepISR+0x22c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a4b      	ldr	r2, [pc, #300]	; (800156c <doStepISR+0x22c>)
 8001440:	6013      	str	r3, [r2, #0]
		stepper_2_state --;
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <doStepISR+0x230>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3b01      	subs	r3, #1
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <doStepISR+0x230>)
 800144a:	6013      	str	r3, [r2, #0]
		if (stepper_2_state < 0){stepper_2_state = 7;}
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <doStepISR+0x230>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da02      	bge.n	800145a <doStepISR+0x11a>
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <doStepISR+0x230>)
 8001456:	2207      	movs	r2, #7
 8001458:	601a      	str	r2, [r3, #0]
	}

	if (stepper_3_change > 0){
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <doStepISR+0x234>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	dd1b      	ble.n	800149a <doStepISR+0x15a>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 8001462:	4b45      	ldr	r3, [pc, #276]	; (8001578 <doStepISR+0x238>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	2308      	movs	r3, #8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2304      	movs	r3, #4
 800146e:	2202      	movs	r2, #2
 8001470:	2101      	movs	r1, #1
 8001472:	4842      	ldr	r0, [pc, #264]	; (800157c <doStepISR+0x23c>)
 8001474:	f000 fa0a 	bl	800188c <doStep>
		stepper_3_change --;
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <doStepISR+0x234>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <doStepISR+0x234>)
 8001480:	6013      	str	r3, [r2, #0]
		stepper_3_state ++;
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <doStepISR+0x238>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a3b      	ldr	r2, [pc, #236]	; (8001578 <doStepISR+0x238>)
 800148a:	6013      	str	r3, [r2, #0]
		if (stepper_3_state == 8){stepper_3_state = 0;}
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <doStepISR+0x238>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d102      	bne.n	800149a <doStepISR+0x15a>
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <doStepISR+0x238>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
	}
	if (stepper_3_change < 0){
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <doStepISR+0x234>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da1b      	bge.n	80014da <doStepISR+0x19a>
		doStep(M3_A1_GPIO_Port, M3_A1_Pin, M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <doStepISR+0x238>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	2308      	movs	r3, #8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2304      	movs	r3, #4
 80014ae:	2202      	movs	r2, #2
 80014b0:	2101      	movs	r1, #1
 80014b2:	4832      	ldr	r0, [pc, #200]	; (800157c <doStepISR+0x23c>)
 80014b4:	f000 f9ea 	bl	800188c <doStep>
		stepper_3_change ++;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <doStepISR+0x234>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <doStepISR+0x234>)
 80014c0:	6013      	str	r3, [r2, #0]
		stepper_3_state --;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <doStepISR+0x238>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <doStepISR+0x238>)
 80014ca:	6013      	str	r3, [r2, #0]
		if (stepper_3_state < 0){stepper_3_state = 7;}
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <doStepISR+0x238>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da02      	bge.n	80014da <doStepISR+0x19a>
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <doStepISR+0x238>)
 80014d6:	2207      	movs	r2, #7
 80014d8:	601a      	str	r2, [r3, #0]
	}

	if (stepper_4_change > 0){
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <doStepISR+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dd1b      	ble.n	800151a <doStepISR+0x1da>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <doStepISR+0x244>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2340      	movs	r3, #64	; 0x40
 80014ee:	2220      	movs	r2, #32
 80014f0:	2110      	movs	r1, #16
 80014f2:	4822      	ldr	r0, [pc, #136]	; (800157c <doStepISR+0x23c>)
 80014f4:	f000 f9ca 	bl	800188c <doStep>
		stepper_4_change --;
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <doStepISR+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <doStepISR+0x240>)
 8001500:	6013      	str	r3, [r2, #0]
		stepper_4_state ++;
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <doStepISR+0x244>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <doStepISR+0x244>)
 800150a:	6013      	str	r3, [r2, #0]
		if (stepper_4_state == 8){stepper_4_state = 0;}
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <doStepISR+0x244>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b08      	cmp	r3, #8
 8001512:	d102      	bne.n	800151a <doStepISR+0x1da>
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <doStepISR+0x244>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	}
	if (stepper_4_change < 0){
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <doStepISR+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da1b      	bge.n	800155a <doStepISR+0x21a>
		doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <doStepISR+0x244>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	2220      	movs	r2, #32
 8001530:	2110      	movs	r1, #16
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <doStepISR+0x23c>)
 8001534:	f000 f9aa 	bl	800188c <doStep>
		stepper_4_change ++;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <doStepISR+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <doStepISR+0x240>)
 8001540:	6013      	str	r3, [r2, #0]
		stepper_4_state --;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <doStepISR+0x244>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <doStepISR+0x244>)
 800154a:	6013      	str	r3, [r2, #0]
		if (stepper_4_state < 0){stepper_4_state = 7;}
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <doStepISR+0x244>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da02      	bge.n	800155a <doStepISR+0x21a>
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <doStepISR+0x244>)
 8001556:	2207      	movs	r2, #7
 8001558:	601a      	str	r2, [r3, #0]
	}

}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000398 	.word	0x20000398
 8001564:	200003a8 	.word	0x200003a8
 8001568:	40010c00 	.word	0x40010c00
 800156c:	2000039c 	.word	0x2000039c
 8001570:	200003ac 	.word	0x200003ac
 8001574:	200003a0 	.word	0x200003a0
 8001578:	200003b0 	.word	0x200003b0
 800157c:	40010800 	.word	0x40010800
 8001580:	200003a4 	.word	0x200003a4
 8001584:	200003b4 	.word	0x200003b4

08001588 <homeISR>:

void homeISR(){
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
	//stepper1 100
	if (homing == 1){
 800158e:	4b8e      	ldr	r3, [pc, #568]	; (80017c8 <homeISR+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d137      	bne.n	8001606 <homeISR+0x7e>
		if (stepper_1_change == 0){
 8001596:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <homeISR+0x244>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d131      	bne.n	8001602 <homeISR+0x7a>
			printf("home s1");
 800159e:	488c      	ldr	r0, [pc, #560]	; (80017d0 <homeISR+0x248>)
 80015a0:	f007 ffe4 	bl	800956c <iprintf>
			if(HAL_GPIO_ReadPin(HAL_1_GPIO_Port, HAL_1_Pin)){
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	488a      	ldr	r0, [pc, #552]	; (80017d4 <homeISR+0x24c>)
 80015aa:	f000 fec5 	bl	8002338 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01b      	beq.n	80015ec <homeISR+0x64>
				doStep(M1_A1_GPIO_Port, M1_A1_Pin, M1_A2_Pin, M1_B1_Pin, M1_B2_Pin, stepper_1_state);
 80015b4:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <homeISR+0x250>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015cc:	4881      	ldr	r0, [pc, #516]	; (80017d4 <homeISR+0x24c>)
 80015ce:	f000 f95d 	bl	800188c <doStep>
				stepper_1_state --;
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <homeISR+0x250>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	4a7f      	ldr	r2, [pc, #508]	; (80017d8 <homeISR+0x250>)
 80015da:	6013      	str	r3, [r2, #0]
				if (stepper_1_state < 0){stepper_1_state = 7;}
 80015dc:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <homeISR+0x250>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da10      	bge.n	8001606 <homeISR+0x7e>
 80015e4:	4b7c      	ldr	r3, [pc, #496]	; (80017d8 <homeISR+0x250>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e00c      	b.n	8001606 <homeISR+0x7e>
			}else{
				homing ++;
 80015ec:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <homeISR+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a75      	ldr	r2, [pc, #468]	; (80017c8 <homeISR+0x240>)
 80015f4:	6013      	str	r3, [r2, #0]
				moveStepper(0,-160);
 80015f6:	f06f 019f 	mvn.w	r1, #159	; 0x9f
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fe52 	bl	80012a4 <moveStepper>
 8001600:	e001      	b.n	8001606 <homeISR+0x7e>
			}
		}else{
			doStepISR();
 8001602:	f7ff fe9d 	bl	8001340 <doStepISR>

		}
	}
	if (homing == 2){
 8001606:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <homeISR+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d110      	bne.n	8001630 <homeISR+0xa8>
		//stepper1
		if (stepper_1_change == 0){
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <homeISR+0x244>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10a      	bne.n	800162c <homeISR+0xa4>
			moveStepper(1,500);
 8001616:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fe42 	bl	80012a4 <moveStepper>
			homing ++;
 8001620:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <homeISR+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <homeISR+0x240>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e001      	b.n	8001630 <homeISR+0xa8>
		}else{
			doStepISR();
 800162c:	f7ff fe88 	bl	8001340 <doStepISR>

		}
	}

	//stepper2 QNH
	if (homing == 3){
 8001630:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <homeISR+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d133      	bne.n	80016a0 <homeISR+0x118>
		if (stepper_2_change == 0){
 8001638:	4b68      	ldr	r3, [pc, #416]	; (80017dc <homeISR+0x254>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d12d      	bne.n	800169c <homeISR+0x114>
			printf("home s2");
 8001640:	4867      	ldr	r0, [pc, #412]	; (80017e0 <homeISR+0x258>)
 8001642:	f007 ff93 	bl	800956c <iprintf>
			if(HAL_GPIO_ReadPin(HAL_2_GPIO_Port, HAL_2_Pin)){
 8001646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800164a:	4862      	ldr	r0, [pc, #392]	; (80017d4 <homeISR+0x24c>)
 800164c:	f000 fe74 	bl	8002338 <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d018      	beq.n	8001688 <homeISR+0x100>
				doStep(M2_A1_GPIO_Port, M2_A1_Pin, M2_A2_Pin, M2_B1_Pin, M2_B2_Pin, stepper_2_state);
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <homeISR+0x25c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2120      	movs	r1, #32
 8001668:	485a      	ldr	r0, [pc, #360]	; (80017d4 <homeISR+0x24c>)
 800166a:	f000 f90f 	bl	800188c <doStep>
				stepper_2_state --;
 800166e:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <homeISR+0x25c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3b01      	subs	r3, #1
 8001674:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <homeISR+0x25c>)
 8001676:	6013      	str	r3, [r2, #0]
				if (stepper_2_state < 0){stepper_2_state = 7;}
 8001678:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <homeISR+0x25c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0f      	bge.n	80016a0 <homeISR+0x118>
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <homeISR+0x25c>)
 8001682:	2207      	movs	r2, #7
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e00b      	b.n	80016a0 <homeISR+0x118>
			}else{
				homing ++;
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <homeISR+0x240>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <homeISR+0x240>)
 8001690:	6013      	str	r3, [r2, #0]
				moveStepper(1,-5450);
 8001692:	4955      	ldr	r1, [pc, #340]	; (80017e8 <homeISR+0x260>)
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fe05 	bl	80012a4 <moveStepper>
 800169a:	e001      	b.n	80016a0 <homeISR+0x118>
			}
		}else{
			doStepISR();
 800169c:	f7ff fe50 	bl	8001340 <doStepISR>

		}
	}
	if (homing == 4){
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <homeISR+0x240>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d110      	bne.n	80016ca <homeISR+0x142>
		//stepper2
		if (stepper_2_change == 0){
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <homeISR+0x254>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <homeISR+0x13e>
			moveStepper(2,500);
 80016b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff fdf5 	bl	80012a4 <moveStepper>
			homing ++;
 80016ba:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <homeISR+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a41      	ldr	r2, [pc, #260]	; (80017c8 <homeISR+0x240>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e001      	b.n	80016ca <homeISR+0x142>
		}else{
			doStepISR();
 80016c6:	f7ff fe3b 	bl	8001340 <doStepISR>

		}
	}

	//stepper3 1k
	if (homing == 5){
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <homeISR+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d132      	bne.n	8001738 <homeISR+0x1b0>
		if (stepper_3_change == 0){
 80016d2:	4b46      	ldr	r3, [pc, #280]	; (80017ec <homeISR+0x264>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d12c      	bne.n	8001734 <homeISR+0x1ac>
			printf("home s3");
 80016da:	4845      	ldr	r0, [pc, #276]	; (80017f0 <homeISR+0x268>)
 80016dc:	f007 ff46 	bl	800956c <iprintf>
			if(HAL_GPIO_ReadPin(HAL_3_GPIO_Port, HAL_3_Pin)){
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	483b      	ldr	r0, [pc, #236]	; (80017d4 <homeISR+0x24c>)
 80016e6:	f000 fe27 	bl	8002338 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d017      	beq.n	8001720 <homeISR+0x198>
				doStep(M3_A1_GPIO_Port, M3_A1_Pin,M3_A2_Pin, M3_B1_Pin, M3_B2_Pin, stepper_3_state);
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <homeISR+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2308      	movs	r3, #8
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2304      	movs	r3, #4
 80016fc:	2202      	movs	r2, #2
 80016fe:	2101      	movs	r1, #1
 8001700:	483d      	ldr	r0, [pc, #244]	; (80017f8 <homeISR+0x270>)
 8001702:	f000 f8c3 	bl	800188c <doStep>
				stepper_3_state --;
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <homeISR+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <homeISR+0x26c>)
 800170e:	6013      	str	r3, [r2, #0]
				if (stepper_3_state < 0){stepper_3_state = 7;}
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <homeISR+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da0f      	bge.n	8001738 <homeISR+0x1b0>
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <homeISR+0x26c>)
 800171a:	2207      	movs	r2, #7
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e00b      	b.n	8001738 <homeISR+0x1b0>
			}else{
				homing ++;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <homeISR+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <homeISR+0x240>)
 8001728:	6013      	str	r3, [r2, #0]
				moveStepper(2,0);
 800172a:	2100      	movs	r1, #0
 800172c:	2002      	movs	r0, #2
 800172e:	f7ff fdb9 	bl	80012a4 <moveStepper>
 8001732:	e001      	b.n	8001738 <homeISR+0x1b0>
			}
		}else{
			doStepISR();
 8001734:	f7ff fe04 	bl	8001340 <doStepISR>

		}
	}
	if (homing == 6){
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <homeISR+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b06      	cmp	r3, #6
 800173e:	d10f      	bne.n	8001760 <homeISR+0x1d8>
		//stepper2
		if (stepper_3_change == 0){
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <homeISR+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <homeISR+0x1d4>
			moveStepper(3,-500);
 8001748:	492c      	ldr	r1, [pc, #176]	; (80017fc <homeISR+0x274>)
 800174a:	2003      	movs	r0, #3
 800174c:	f7ff fdaa 	bl	80012a4 <moveStepper>
			homing ++;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <homeISR+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <homeISR+0x240>)
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e001      	b.n	8001760 <homeISR+0x1d8>
		}else{
			doStepISR();
 800175c:	f7ff fdf0 	bl	8001340 <doStepISR>

		}
	}
	//stepper4 10k
	if (homing == 7){
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <homeISR+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b07      	cmp	r3, #7
 8001766:	d151      	bne.n	800180c <homeISR+0x284>
		if (stepper_4_change == 0){
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <homeISR+0x278>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d14b      	bne.n	8001808 <homeISR+0x280>
			printf("home s3");
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <homeISR+0x268>)
 8001772:	f007 fefb 	bl	800956c <iprintf>
			if(HAL_GPIO_ReadPin(HAL_4_GPIO_Port, HAL_4_Pin)){
 8001776:	2102      	movs	r1, #2
 8001778:	4816      	ldr	r0, [pc, #88]	; (80017d4 <homeISR+0x24c>)
 800177a:	f000 fddd 	bl	8002338 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d017      	beq.n	80017b4 <homeISR+0x22c>
				doStep(M4_A1_GPIO_Port, M4_A1_Pin, M4_A2_Pin, M4_B1_Pin, M4_B2_Pin, stepper_4_state);
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <homeISR+0x27c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	2220      	movs	r2, #32
 8001792:	2110      	movs	r1, #16
 8001794:	4818      	ldr	r0, [pc, #96]	; (80017f8 <homeISR+0x270>)
 8001796:	f000 f879 	bl	800188c <doStep>
				stepper_4_state ++;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <homeISR+0x27c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <homeISR+0x27c>)
 80017a2:	6013      	str	r3, [r2, #0]
				if (stepper_4_state == 8){stepper_4_state = 0;}
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <homeISR+0x27c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d12f      	bne.n	800180c <homeISR+0x284>
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <homeISR+0x27c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e02b      	b.n	800180c <homeISR+0x284>
			}else{
				homing ++;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <homeISR+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <homeISR+0x240>)
 80017bc:	6013      	str	r3, [r2, #0]
				moveStepper(3,200);
 80017be:	21c8      	movs	r1, #200	; 0xc8
 80017c0:	2003      	movs	r0, #3
 80017c2:	f7ff fd6f 	bl	80012a4 <moveStepper>
 80017c6:	e021      	b.n	800180c <homeISR+0x284>
 80017c8:	200003b8 	.word	0x200003b8
 80017cc:	20000398 	.word	0x20000398
 80017d0:	0800aeb8 	.word	0x0800aeb8
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	200003a8 	.word	0x200003a8
 80017dc:	2000039c 	.word	0x2000039c
 80017e0:	0800aec0 	.word	0x0800aec0
 80017e4:	200003ac 	.word	0x200003ac
 80017e8:	ffffeab6 	.word	0xffffeab6
 80017ec:	200003a0 	.word	0x200003a0
 80017f0:	0800aec8 	.word	0x0800aec8
 80017f4:	200003b0 	.word	0x200003b0
 80017f8:	40010800 	.word	0x40010800
 80017fc:	fffffe0c 	.word	0xfffffe0c
 8001800:	200003a4 	.word	0x200003a4
 8001804:	200003b4 	.word	0x200003b4
			}
		}else{
			doStepISR();
 8001808:	f7ff fd9a 	bl	8001340 <doStepISR>

		}
	}
	if (homing == 8){
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <homeISR+0x2dc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b08      	cmp	r3, #8
 8001812:	d122      	bne.n	800185a <homeISR+0x2d2>
		//stepper2
		if (stepper_4_change == 0){
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <homeISR+0x2e0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11c      	bne.n	8001856 <homeISR+0x2ce>
			uint8_t txBuf[] = "+INIT\n";
 800181c:	4a13      	ldr	r2, [pc, #76]	; (800186c <homeISR+0x2e4>)
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001826:	6018      	str	r0, [r3, #0]
 8001828:	3304      	adds	r3, #4
 800182a:	8019      	strh	r1, [r3, #0]
 800182c:	3302      	adds	r3, #2
 800182e:	0c0a      	lsrs	r2, r1, #16
 8001830:	701a      	strb	r2, [r3, #0]
			struct MSG msg;
			msg.txBuf = txBuf;
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	603b      	str	r3, [r7, #0]
			msg.len = strlen(txBuf);
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fc91 	bl	8000164 <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	607b      	str	r3, [r7, #4]
			tx_stack_push(&msg);
 8001846:	463b      	mov	r3, r7
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa59 	bl	8000d00 <tx_stack_push>
			homing = 0;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <homeISR+0x2dc>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
		}else{
			doStepISR();

		}
	}
}
 8001854:	e001      	b.n	800185a <homeISR+0x2d2>
			doStepISR();
 8001856:	f7ff fd73 	bl	8001340 <doStepISR>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200003b8 	.word	0x200003b8
 8001868:	200003a4 	.word	0x200003a4
 800186c:	0800aed0 	.word	0x0800aed0

08001870 <homeAll>:



void homeAll(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	moveStepper(0,500);
 8001874:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fd13 	bl	80012a4 <moveStepper>
	//stepper_2_change = 600;
	//stepper_3_change = 600;
	//stepper_4_change = 600;
	homing = 1;
 800187e:	4b02      	ldr	r3, [pc, #8]	; (8001888 <homeAll+0x18>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
	//while(homing > 0){
		//wait
	//}
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200003b8 	.word	0x200003b8

0800188c <doStep>:

void doStep(GPIO_TypeDef *PORT, uint16_t  PIN1, uint16_t  PIN2, uint16_t  PIN3, uint16_t  PIN4, int step){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	817b      	strh	r3, [r7, #10]
 800189e:	460b      	mov	r3, r1
 80018a0:	813b      	strh	r3, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
	switch(step){
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2b07      	cmp	r3, #7
 80018aa:	f200 80db 	bhi.w	8001a64 <doStep+0x1d8>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <doStep+0x28>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018d5 	.word	0x080018d5
 80018b8:	08001907 	.word	0x08001907
 80018bc:	08001939 	.word	0x08001939
 80018c0:	0800196b 	.word	0x0800196b
 80018c4:	0800199d 	.word	0x0800199d
 80018c8:	080019cf 	.word	0x080019cf
 80018cc:	08001a01 	.word	0x08001a01
 80018d0:	08001a33 	.word	0x08001a33
		case 0:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fd43 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80018e0:	893b      	ldrh	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fd3d 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fd37 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80018f8:	8b3b      	ldrh	r3, [r7, #24]
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fd31 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 8001904:	e0ae      	b.n	8001a64 <doStep+0x1d8>
		case 1:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	2201      	movs	r2, #1
 800190a:	4619      	mov	r1, r3
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fd2a 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	2201      	movs	r2, #1
 8001916:	4619      	mov	r1, r3
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fd24 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fd1e 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 800192a:	8b3b      	ldrh	r3, [r7, #24]
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 fd18 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 8001936:	e095      	b.n	8001a64 <doStep+0x1d8>
		case 2:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001938:	897b      	ldrh	r3, [r7, #10]
 800193a:	2200      	movs	r2, #0
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fd11 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 8001944:	893b      	ldrh	r3, [r7, #8]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 fd0b 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fd05 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 800195c:	8b3b      	ldrh	r3, [r7, #24]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fcff 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 8001968:	e07c      	b.n	8001a64 <doStep+0x1d8>
		case 3:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 800196a:	897b      	ldrh	r3, [r7, #10]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fcf8 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_SET);
 8001976:	893b      	ldrh	r3, [r7, #8]
 8001978:	2201      	movs	r2, #1
 800197a:	4619      	mov	r1, r3
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fcf2 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fcec 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 800198e:	8b3b      	ldrh	r3, [r7, #24]
 8001990:	2200      	movs	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fce6 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 800199a:	e063      	b.n	8001a64 <doStep+0x1d8>
		case 4:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 800199c:	897b      	ldrh	r3, [r7, #10]
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fcdf 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80019a8:	893b      	ldrh	r3, [r7, #8]
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fcd9 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4619      	mov	r1, r3
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 fcd3 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_RESET);
 80019c0:	8b3b      	ldrh	r3, [r7, #24]
 80019c2:	2200      	movs	r2, #0
 80019c4:	4619      	mov	r1, r3
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fccd 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 80019cc:	e04a      	b.n	8001a64 <doStep+0x1d8>
		case 5:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fcc6 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 80019da:	893b      	ldrh	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fcc0 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_SET);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fcba 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 80019f2:	8b3b      	ldrh	r3, [r7, #24]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 fcb4 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 80019fe:	e031      	b.n	8001a64 <doStep+0x1d8>
		case 6:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_RESET);
 8001a00:	897b      	ldrh	r3, [r7, #10]
 8001a02:	2200      	movs	r2, #0
 8001a04:	4619      	mov	r1, r3
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fcad 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001a0c:	893b      	ldrh	r3, [r7, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fca7 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fca1 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 8001a24:	8b3b      	ldrh	r3, [r7, #24]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fc9b 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 8001a30:	e018      	b.n	8001a64 <doStep+0x1d8>
		case 7:
			HAL_GPIO_WritePin(PORT, PIN1, GPIO_PIN_SET);
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4619      	mov	r1, r3
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fc94 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN2, GPIO_PIN_RESET);
 8001a3e:	893b      	ldrh	r3, [r7, #8]
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fc8e 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN3, GPIO_PIN_RESET);
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fc88 	bl	8002366 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PORT, PIN4, GPIO_PIN_SET);
 8001a56:	8b3b      	ldrh	r3, [r7, #24]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fc82 	bl	8002366 <HAL_GPIO_WritePin>
			break;
 8001a62:	bf00      	nop
		}
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_MspInit+0x40>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_MspInit+0x40>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_MspInit+0x40>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_MspInit+0x40>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_MspInit+0x40>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_MspInit+0x40>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d113      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f000 fa6f 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae4:	201c      	movs	r0, #28
 8001ae6:	f000 fa88 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <NMI_Handler+0x4>

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 f929 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b4e:	f000 fd53 	bl	80025f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000105c 	.word	0x2000105c

08001b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM2_IRQHandler+0x10>)
 8001b62:	f002 fce7 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000034c 	.word	0x2000034c

08001b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
	}

return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
	}
	return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c08:	605a      	str	r2, [r3, #4]
	return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <_isatty>:

int _isatty(int file)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
	return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f007 fd8c 	bl	8009790 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20005000 	.word	0x20005000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	200003bc 	.word	0x200003bc
 8001cac:	200016b8 	.word	0x200016b8

08001cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cbe:	e003      	b.n	8001cc8 <LoopCopyDataInit>

08001cc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cc6:	3104      	adds	r1, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ccc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cd0:	d3f6      	bcc.n	8001cc0 <CopyDataInit>
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cd4:	e002      	b.n	8001cdc <LoopFillZerobss>

08001cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cd8:	f842 3b04 	str.w	r3, [r2], #4

08001cdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ce0:	d3f9      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ce2:	f7ff ffe5 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f007 fd59 	bl	800979c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cea:	f7ff f955 	bl	8000f98 <main>
  bx lr
 8001cee:	4770      	bx	lr
  ldr r3, =_sidata
 8001cf0:	0800b0a4 	.word	0x0800b0a4
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cf8:	20000218 	.word	0x20000218
  ldr r2, =_sbss
 8001cfc:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 8001d00:	200016b4 	.word	0x200016b4

08001d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC1_2_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_Init+0x28>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_Init+0x28>)
 8001d12:	f043 0310 	orr.w	r3, r3, #16
 8001d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 f947 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f808 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fea2 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40022000 	.word	0x40022000

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f95f 	bl	8002016 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f000 f927 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000038 	.word	0x20000038
 8001d8c:	20000040 	.word	0x20000040
 8001d90:	2000003c 	.word	0x2000003c

08001d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_IncTick+0x1c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_IncTick+0x20>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <HAL_IncTick+0x20>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000040 	.word	0x20000040
 8001db4:	200003c0 	.word	0x200003c0

08001db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b02      	ldr	r3, [pc, #8]	; (8001dc8 <HAL_GetTick+0x10>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	200003c0 	.word	0x200003c0

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffe0 	bl	8001db8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000040 	.word	0x20000040

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4906      	ldr	r1, [pc, #24]	; (8001eac <__NVIC_EnableIRQ+0x34>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7ff ff90 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff2d 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff42 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff90 	bl	8001f04 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5f 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff35 	bl	8001e78 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002042:	e169      	b.n	8002318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002044:	2201      	movs	r2, #1
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8158 	bne.w	8002312 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a9a      	ldr	r2, [pc, #616]	; (80022d0 <HAL_GPIO_Init+0x2a0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d05e      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 800206c:	4a98      	ldr	r2, [pc, #608]	; (80022d0 <HAL_GPIO_Init+0x2a0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d875      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 8002072:	4a98      	ldr	r2, [pc, #608]	; (80022d4 <HAL_GPIO_Init+0x2a4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d058      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002078:	4a96      	ldr	r2, [pc, #600]	; (80022d4 <HAL_GPIO_Init+0x2a4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d86f      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 800207e:	4a96      	ldr	r2, [pc, #600]	; (80022d8 <HAL_GPIO_Init+0x2a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d052      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002084:	4a94      	ldr	r2, [pc, #592]	; (80022d8 <HAL_GPIO_Init+0x2a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d869      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 800208a:	4a94      	ldr	r2, [pc, #592]	; (80022dc <HAL_GPIO_Init+0x2ac>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04c      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002090:	4a92      	ldr	r2, [pc, #584]	; (80022dc <HAL_GPIO_Init+0x2ac>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d863      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 8002096:	4a92      	ldr	r2, [pc, #584]	; (80022e0 <HAL_GPIO_Init+0x2b0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d046      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 800209c:	4a90      	ldr	r2, [pc, #576]	; (80022e0 <HAL_GPIO_Init+0x2b0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d85d      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 80020a2:	2b12      	cmp	r3, #18
 80020a4:	d82a      	bhi.n	80020fc <HAL_GPIO_Init+0xcc>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d859      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_GPIO_Init+0x80>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	0800212b 	.word	0x0800212b
 80020b4:	08002105 	.word	0x08002105
 80020b8:	08002117 	.word	0x08002117
 80020bc:	08002159 	.word	0x08002159
 80020c0:	0800215f 	.word	0x0800215f
 80020c4:	0800215f 	.word	0x0800215f
 80020c8:	0800215f 	.word	0x0800215f
 80020cc:	0800215f 	.word	0x0800215f
 80020d0:	0800215f 	.word	0x0800215f
 80020d4:	0800215f 	.word	0x0800215f
 80020d8:	0800215f 	.word	0x0800215f
 80020dc:	0800215f 	.word	0x0800215f
 80020e0:	0800215f 	.word	0x0800215f
 80020e4:	0800215f 	.word	0x0800215f
 80020e8:	0800215f 	.word	0x0800215f
 80020ec:	0800215f 	.word	0x0800215f
 80020f0:	0800215f 	.word	0x0800215f
 80020f4:	0800210d 	.word	0x0800210d
 80020f8:	08002121 	.word	0x08002121
 80020fc:	4a79      	ldr	r2, [pc, #484]	; (80022e4 <HAL_GPIO_Init+0x2b4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002102:	e02c      	b.n	800215e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e029      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e024      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	3308      	adds	r3, #8
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e01f      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	330c      	adds	r3, #12
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e01a      	b.n	8002160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002132:	2304      	movs	r3, #4
 8002134:	623b      	str	r3, [r7, #32]
          break;
 8002136:	e013      	b.n	8002160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002140:	2308      	movs	r3, #8
 8002142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	611a      	str	r2, [r3, #16]
          break;
 800214a:	e009      	b.n	8002160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800214c:	2308      	movs	r3, #8
 800214e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	615a      	str	r2, [r3, #20]
          break;
 8002156:	e003      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x130>
          break;
 800215e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	d801      	bhi.n	800216a <HAL_GPIO_Init+0x13a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	e001      	b.n	800216e <HAL_GPIO_Init+0x13e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2bff      	cmp	r3, #255	; 0xff
 8002174:	d802      	bhi.n	800217c <HAL_GPIO_Init+0x14c>
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0x152>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3b08      	subs	r3, #8
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	210f      	movs	r1, #15
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	6a39      	ldr	r1, [r7, #32]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80b1 	beq.w	8002312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b0:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_GPIO_Init+0x2bc>)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_GPIO_Init+0x1ec>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3f      	ldr	r2, [pc, #252]	; (80022f4 <HAL_GPIO_Init+0x2c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00d      	beq.n	8002218 <HAL_GPIO_Init+0x1e8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <HAL_GPIO_Init+0x2c8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <HAL_GPIO_Init+0x1e4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_GPIO_Init+0x1e0>
 800220c:	2303      	movs	r3, #3
 800220e:	e006      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002210:	2304      	movs	r3, #4
 8002212:	e004      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002214:	2302      	movs	r3, #2
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 800221c:	2300      	movs	r3, #0
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	f002 0203 	and.w	r2, r2, #3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4093      	lsls	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222e:	492f      	ldr	r1, [pc, #188]	; (80022ec <HAL_GPIO_Init+0x2bc>)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	492c      	ldr	r1, [pc, #176]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	43db      	mvns	r3, r3
 800225e:	4928      	ldr	r1, [pc, #160]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002260:	4013      	ands	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002270:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	491e      	ldr	r1, [pc, #120]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4918      	ldr	r1, [pc, #96]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4914      	ldr	r1, [pc, #80]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d021      	beq.n	8002304 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
 80022cc:	e021      	b.n	8002312 <HAL_GPIO_Init+0x2e2>
 80022ce:	bf00      	nop
 80022d0:	10320000 	.word	0x10320000
 80022d4:	10310000 	.word	0x10310000
 80022d8:	10220000 	.word	0x10220000
 80022dc:	10210000 	.word	0x10210000
 80022e0:	10120000 	.word	0x10120000
 80022e4:	10110000 	.word	0x10110000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40010800 	.word	0x40010800
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	40011000 	.word	0x40011000
 80022fc:	40011400 	.word	0x40011400
 8002300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_GPIO_Init+0x304>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	43db      	mvns	r3, r3
 800230c:	4909      	ldr	r1, [pc, #36]	; (8002334 <HAL_GPIO_Init+0x304>)
 800230e:	4013      	ands	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f47f ae8e 	bne.w	8002044 <HAL_GPIO_Init+0x14>
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	372c      	adds	r7, #44	; 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e001      	b.n	800235a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	807b      	strh	r3, [r7, #2]
 8002372:	4613      	mov	r3, r2
 8002374:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002376:	787b      	ldrb	r3, [r7, #1]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237c:	887a      	ldrh	r2, [r7, #2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002382:	e003      	b.n	800238c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	041a      	lsls	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	611a      	str	r2, [r3, #16]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002398:	b08b      	sub	sp, #44	; 0x2c
 800239a:	af06      	add	r7, sp, #24
 800239c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0fd      	b.n	80025a4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 fcc7 	bl	8008d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fc2e 	bl	8004c30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	687e      	ldr	r6, [r7, #4]
 80023dc:	466d      	mov	r5, sp
 80023de:	f106 0410 	add.w	r4, r6, #16
 80023e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	602b      	str	r3, [r5, #0]
 80023ea:	1d33      	adds	r3, r6, #4
 80023ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	f002 fbf8 	bl	8004be4 <USB_CoreInit>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0ce      	b.n	80025a4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fc29 	bl	8004c64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	e04c      	b.n	80024b2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3301      	adds	r3, #1
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	b298      	uxth	r0, r3
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3336      	adds	r3, #54	; 0x36
 8002456:	4602      	mov	r2, r0
 8002458:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3303      	adds	r3, #3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	3338      	adds	r3, #56	; 0x38
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	333c      	adds	r3, #60	; 0x3c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	3340      	adds	r3, #64	; 0x40
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d3ad      	bcc.n	8002418 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e044      	b.n	800254c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	3301      	adds	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d3b5      	bcc.n	80024c2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	687e      	ldr	r6, [r7, #4]
 800255e:	466d      	mov	r5, sp
 8002560:	f106 0410 	add.w	r4, r6, #16
 8002564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	602b      	str	r3, [r5, #0]
 800256c:	1d33      	adds	r3, r6, #4
 800256e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002570:	6838      	ldr	r0, [r7, #0]
 8002572:	f002 fb83 	bl	8004c7c <USB_DevInit>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e00d      	b.n	80025a4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f004 fda4 	bl	80070ea <USB_DevDisconnect>

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_Start+0x16>
 80025be:	2302      	movs	r3, #2
 80025c0:	e016      	b.n	80025f0 <HAL_PCD_Start+0x44>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fb18 	bl	8004c04 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80025d4:	2101      	movs	r1, #1
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f006 fe2d 	bl	8009236 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fd78 	bl	80070d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f004 fd7a 	bl	80070fe <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002614:	d102      	bne.n	800261c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fb5f 	bl	8002cda <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f004 fd6c 	bl	80070fe <USB_ReadInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002630:	d112      	bne.n	8002658 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	b292      	uxth	r2, r2
 8002646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 fbfb 	bl	8008e46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002650:	2100      	movs	r1, #0
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f923 	bl	800289e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 fd4e 	bl	80070fe <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d10b      	bne.n	8002686 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002680:	b292      	uxth	r2, r2
 8002682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fd37 	bl	80070fe <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	d10b      	bne.n	80026b4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ae:	b292      	uxth	r2, r2
 80026b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f004 fd20 	bl	80070fe <USB_ReadInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d126      	bne.n	8002718 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0204 	bic.w	r2, r2, #4
 80026dc:	b292      	uxth	r2, r2
 80026de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0208 	bic.w	r2, r2, #8
 80026f4:	b292      	uxth	r2, r2
 80026f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f006 fbdc 	bl	8008eb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002712:	b292      	uxth	r2, r2
 8002714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f004 fcee 	bl	80070fe <USB_ReadInterrupts>
 8002722:	4603      	mov	r3, r0
 8002724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272c:	f040 8082 	bne.w	8002834 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002730:	2300      	movs	r3, #0
 8002732:	77fb      	strb	r3, [r7, #31]
 8002734:	e010      	b.n	8002758 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	8812      	ldrh	r2, [r2, #0]
 8002746:	b292      	uxth	r2, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	3320      	adds	r3, #32
 800274c:	443b      	add	r3, r7
 800274e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	3301      	adds	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	7ffb      	ldrb	r3, [r7, #31]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d9eb      	bls.n	8002736 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	b292      	uxth	r2, r2
 8002772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	b292      	uxth	r2, r2
 800278a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800278e:	bf00      	nop
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002798:	b29b      	uxth	r3, r3
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f6      	beq.n	8002790 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b4:	b292      	uxth	r2, r2
 80027b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	77fb      	strb	r3, [r7, #31]
 80027be:	e00f      	b.n	80027e0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	4611      	mov	r1, r2
 80027c8:	7ffa      	ldrb	r2, [r7, #31]
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	440a      	add	r2, r1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	3320      	adds	r3, #32
 80027d2:	443b      	add	r3, r7
 80027d4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027d8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80027da:	7ffb      	ldrb	r3, [r7, #31]
 80027dc:	3301      	adds	r3, #1
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
 80027e2:	2b07      	cmp	r3, #7
 80027e4:	d9ec      	bls.n	80027c0 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0208 	orr.w	r2, r2, #8
 80027f8:	b292      	uxth	r2, r2
 80027fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002806:	b29a      	uxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002810:	b292      	uxth	r2, r2
 8002812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0204 	orr.w	r2, r2, #4
 8002828:	b292      	uxth	r2, r2
 800282a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f006 fb28 	bl	8008e84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f004 fc60 	bl	80070fe <USB_ReadInterrupts>
 800283e:	4603      	mov	r3, r0
 8002840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002848:	d10e      	bne.n	8002868 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800285c:	b292      	uxth	r2, r2
 800285e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f006 fae1 	bl	8008e2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fc46 	bl	80070fe <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287c:	d10b      	bne.n	8002896 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002890:	b292      	uxth	r2, r2
 8002892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002896:	bf00      	nop
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_PCD_SetAddress+0x1a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e013      	b.n	80028e0 <HAL_PCD_SetAddress+0x42>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 fbed 	bl	80070b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	70fb      	strb	r3, [r7, #3]
 80028fa:	460b      	mov	r3, r1
 80028fc:	803b      	strh	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0e      	bge.n	800292c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	705a      	strb	r2, [r3, #1]
 800292a:	e00e      	b.n	800294a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 0207 	and.w	r2, r3, #7
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002956:	883a      	ldrh	r2, [r7, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	78ba      	ldrb	r2, [r7, #2]
 8002960:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002974:	78bb      	ldrb	r3, [r7, #2]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d102      	bne.n	8002980 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_PCD_EP_Open+0xa6>
 800298a:	2302      	movs	r3, #2
 800298c:	e00e      	b.n	80029ac <HAL_PCD_EP_Open+0xc4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	4618      	mov	r0, r3
 800299e:	f002 f98d 	bl	8004cbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80029aa:	7afb      	ldrb	r3, [r7, #11]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da0e      	bge.n	80029e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00e      	b.n	8002a04 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 0207 	and.w	r2, r3, #7
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_PCD_EP_Close+0x6a>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e00e      	b.n	8002a3c <HAL_PCD_EP_Close+0x88>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fcaf 	bl	8005390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	460b      	mov	r3, r1
 8002a52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 0207 	and.w	r2, r3, #7
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a84:	7afb      	ldrb	r3, [r7, #11]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6979      	ldr	r1, [r7, #20]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fe61 	bl	8005768 <USB_EPStartXfer>
 8002aa6:	e005      	b.n	8002ab4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6979      	ldr	r1, [r7, #20]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fe5a 	bl	8005768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 0207 	and.w	r2, r3, #7
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ae0:	681b      	ldr	r3, [r3, #0]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 fe07 	bl	8005768 <USB_EPStartXfer>
 8002b5a:	e005      	b.n	8002b68 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6979      	ldr	r1, [r7, #20]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 fe00 	bl	8005768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 0207 	and.w	r2, r3, #7
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d901      	bls.n	8002b90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04c      	b.n	8002c2a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0e      	bge.n	8002bb6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	705a      	strb	r2, [r3, #1]
 8002bb4:	e00c      	b.n	8002bd0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_PCD_EP_SetStall+0x7e>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e01c      	b.n	8002c2a <HAL_PCD_EP_SetStall+0xb8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 f959 	bl	8006eb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f004 fa7e 	bl	800711c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d901      	bls.n	8002c50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e040      	b.n	8002cd2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da0e      	bge.n	8002c76 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	705a      	strb	r2, [r3, #1]
 8002c74:	e00e      	b.n	8002c94 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 0207 	and.w	r2, r3, #7
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_EP_ClrStall+0x82>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e00e      	b.n	8002cd2 <HAL_PCD_EP_ClrStall+0xa0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 f947 	bl	8006f56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08e      	sub	sp, #56	; 0x38
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ce2:	e2df      	b.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002cfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8158 	bne.w	8002fb4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d152      	bne.n	8002db4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	81fb      	strh	r3, [r7, #14]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3328      	adds	r3, #40	; 0x28
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	441a      	add	r2, r3
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d72:	2100      	movs	r1, #0
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f006 f83e 	bl	8008df6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 828e 	beq.w	80032a4 <PCD_EP_ISR_Handler+0x5ca>
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 8289 	bne.w	80032a4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b292      	uxth	r2, r2
 8002da6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002db2:	e277      	b.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002dc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d034      	beq.n	8002e38 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	3306      	adds	r3, #6
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f004 f9d5 	bl	80071bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e1e:	4013      	ands	r3, r2
 8002e20:	823b      	strh	r3, [r7, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	8a3a      	ldrh	r2, [r7, #16]
 8002e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f005 ffb3 	bl	8008d9c <HAL_PCD_SetupStageCallback>
 8002e36:	e235      	b.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f280 8231 	bge.w	80032a4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e4e:	4013      	ands	r3, r2
 8002e50:	83bb      	strh	r3, [r7, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	8bba      	ldrh	r2, [r7, #28]
 8002e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	3306      	adds	r3, #6
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d019      	beq.n	8002ec8 <PCD_EP_ISR_Handler+0x1ee>
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	6959      	ldr	r1, [r3, #20]
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f004 f985 	bl	80071bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	441a      	add	r2, r3
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f005 ff7c 	bl	8008dc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d112      	bne.n	8002f16 <PCD_EP_ISR_Handler+0x23c>
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	e02f      	b.n	8002f76 <PCD_EP_ISR_Handler+0x29c>
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f1c:	d813      	bhi.n	8002f46 <PCD_EP_ISR_Handler+0x26c>
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <PCD_EP_ISR_Handler+0x25e>
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	3301      	adds	r3, #1
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	029b      	lsls	r3, r3, #10
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	e017      	b.n	8002f76 <PCD_EP_ISR_Handler+0x29c>
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <PCD_EP_ISR_Handler+0x286>
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	029b      	lsls	r3, r3, #10
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	827b      	strh	r3, [r7, #18]
 8002f88:	8a7b      	ldrh	r3, [r7, #18]
 8002f8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f8e:	827b      	strh	r3, [r7, #18]
 8002f90:	8a7b      	ldrh	r3, [r7, #18]
 8002f92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f96:	827b      	strh	r3, [r7, #18]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	8a7b      	ldrh	r3, [r7, #18]
 8002f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8013      	strh	r3, [r2, #0]
 8002fb2:	e177      	b.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fc6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f280 80ea 	bge.w	80031a4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	853b      	strh	r3, [r7, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ffe:	b292      	uxth	r2, r2
 8003000:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003002:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	7b1b      	ldrb	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d122      	bne.n	8003066 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003028:	b29b      	uxth	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	3306      	adds	r3, #6
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003048:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800304a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8087 	beq.w	8003160 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6959      	ldr	r1, [r3, #20]
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	88da      	ldrh	r2, [r3, #6]
 800305e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003060:	f004 f8ac 	bl	80071bc <USB_ReadPMA>
 8003064:	e07c      	b.n	8003160 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	78db      	ldrb	r3, [r3, #3]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d108      	bne.n	8003080 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800306e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003070:	461a      	mov	r2, r3
 8003072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f923 	bl	80032c0 <HAL_PCD_EP_DB_Receive>
 800307a:	4603      	mov	r3, r0
 800307c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800307e:	e06f      	b.n	8003160 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	847b      	strh	r3, [r7, #34]	; 0x22
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030bc:	b29b      	uxth	r3, r3
 80030be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d021      	beq.n	800311e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	3302      	adds	r3, #2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003102:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003104:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02a      	beq.n	8003160 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	6959      	ldr	r1, [r3, #20]
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	891a      	ldrh	r2, [r3, #8]
 8003116:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003118:	f004 f850 	bl	80071bc <USB_ReadPMA>
 800311c:	e020      	b.n	8003160 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	3306      	adds	r3, #6
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003146:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	6959      	ldr	r1, [r3, #20]
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	895a      	ldrh	r2, [r3, #10]
 800315a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800315c:	f004 f82e 	bl	80071bc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003166:	441a      	add	r2, r3
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003172:	441a      	add	r2, r3
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <PCD_EP_ISR_Handler+0x4b0>
 8003180:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	429a      	cmp	r2, r3
 8003188:	d206      	bcs.n	8003198 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f005 fe15 	bl	8008dc0 <HAL_PCD_DataOutStageCallback>
 8003196:	e005      	b.n	80031a4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fae2 	bl	8005768 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d07a      	beq.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80031ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031dc:	843b      	strh	r3, [r7, #32]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	8c3b      	ldrh	r3, [r7, #32]
 80031ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	78db      	ldrb	r3, [r3, #3]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d108      	bne.n	8003214 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003206:	2b02      	cmp	r3, #2
 8003208:	d146      	bne.n	8003298 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800320a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d141      	bne.n	8003298 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321c:	b29b      	uxth	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	3302      	adds	r3, #2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800323c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	8bfb      	ldrh	r3, [r7, #30]
 8003244:	429a      	cmp	r2, r3
 8003246:	d906      	bls.n	8003256 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	8bfb      	ldrh	r3, [r7, #30]
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	619a      	str	r2, [r3, #24]
 8003254:	e002      	b.n	800325c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f005 fdc3 	bl	8008df6 <HAL_PCD_DataInStageCallback>
 8003270:	e018      	b.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	8bfb      	ldrh	r3, [r7, #30]
 8003278:	441a      	add	r2, r3
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	8bfb      	ldrh	r3, [r7, #30]
 8003284:	441a      	add	r2, r3
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003290:	4618      	mov	r0, r3
 8003292:	f002 fa69 	bl	8005768 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003296:	e005      	b.n	80032a4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003298:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800329a:	461a      	mov	r2, r3
 800329c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f91b 	bl	80034da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f6ff ad17 	blt.w	8002ce4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3738      	adds	r7, #56	; 0x38
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d07e      	beq.n	80033d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	3302      	adds	r3, #2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003300:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	8b7b      	ldrh	r3, [r7, #26]
 8003308:	429a      	cmp	r2, r3
 800330a:	d306      	bcc.n	800331a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	8b7b      	ldrh	r3, [r7, #26]
 8003312:	1ad2      	subs	r2, r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	619a      	str	r2, [r3, #24]
 8003318:	e002      	b.n	8003320 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d123      	bne.n	8003370 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	833b      	strh	r3, [r7, #24]
 8003344:	8b3b      	ldrh	r3, [r7, #24]
 8003346:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800334a:	833b      	strh	r3, [r7, #24]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	441a      	add	r2, r3
 800335a:	8b3b      	ldrh	r3, [r7, #24]
 800335c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	b29b      	uxth	r3, r3
 800336e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01f      	beq.n	80033ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003394:	82fb      	strh	r3, [r7, #22]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	8afb      	ldrh	r3, [r7, #22]
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ba:	8b7b      	ldrh	r3, [r7, #26]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8087 	beq.w	80034d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6959      	ldr	r1, [r3, #20]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	891a      	ldrh	r2, [r3, #8]
 80033ce:	8b7b      	ldrh	r3, [r7, #26]
 80033d0:	f003 fef4 	bl	80071bc <USB_ReadPMA>
 80033d4:	e07c      	b.n	80034d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033de:	b29b      	uxth	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	3306      	adds	r3, #6
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	8b7b      	ldrh	r3, [r7, #26]
 8003406:	429a      	cmp	r2, r3
 8003408:	d306      	bcc.n	8003418 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	8b7b      	ldrh	r3, [r7, #26]
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	619a      	str	r2, [r3, #24]
 8003416:	e002      	b.n	800341e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d123      	bne.n	800346e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	83fb      	strh	r3, [r7, #30]
 8003442:	8bfb      	ldrh	r3, [r7, #30]
 8003444:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003448:	83fb      	strh	r3, [r7, #30]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11f      	bne.n	80034b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	83bb      	strh	r3, [r7, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	8bbb      	ldrh	r3, [r7, #28]
 80034a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034b8:	8b7b      	ldrh	r3, [r7, #26]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6959      	ldr	r1, [r3, #20]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	895a      	ldrh	r2, [r3, #10]
 80034ca:	8b7b      	ldrh	r3, [r7, #26]
 80034cc:	f003 fe76 	bl	80071bc <USB_ReadPMA>
    }
  }

  return count;
 80034d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b094      	sub	sp, #80	; 0x50
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8138 	beq.w	8003764 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	3302      	adds	r3, #2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003528:	429a      	cmp	r2, r3
 800352a:	d907      	bls.n	800353c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003534:	1ad2      	subs	r2, r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	619a      	str	r2, [r3, #24]
 800353a:	e002      	b.n	8003542 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d12c      	bne.n	80035a4 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	4619      	mov	r1, r3
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f005 fc50 	bl	8008df6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 823a 	beq.w	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	82fb      	strh	r3, [r7, #22]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	8afb      	ldrh	r3, [r7, #22]
 800358e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]
 80035a2:	e218      	b.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01f      	beq.n	80035ee <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	441a      	add	r2, r3
 80035d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 81ee 	bne.w	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003602:	441a      	add	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003610:	441a      	add	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	429a      	cmp	r2, r3
 8003620:	d309      	bcc.n	8003636 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	1ad2      	subs	r2, r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	621a      	str	r2, [r3, #32]
 8003634:	e015      	b.n	8003662 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800363e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003642:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800364c:	e009      	b.n	8003662 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d155      	bne.n	8003716 <HAL_PCD_EP_DB_Transmit+0x23c>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	011a      	lsls	r2, r3, #4
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003694:	2b00      	cmp	r3, #0
 8003696:	d112      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	e047      	b.n	800374e <HAL_PCD_EP_DB_Transmit+0x274>
 80036be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c0:	2b3e      	cmp	r3, #62	; 0x3e
 80036c2:	d811      	bhi.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x20e>
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_PCD_EP_DB_Transmit+0x200>
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	3301      	adds	r3, #1
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	b29b      	uxth	r3, r3
 80036de:	029b      	lsls	r3, r3, #10
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	e032      	b.n	800374e <HAL_PCD_EP_DB_Transmit+0x274>
 80036e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <HAL_PCD_EP_DB_Transmit+0x224>
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	3b01      	subs	r3, #1
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	b29b      	uxth	r3, r3
 8003702:	029b      	lsls	r3, r3, #10
 8003704:	b29b      	uxth	r3, r3
 8003706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370e:	b29a      	uxth	r2, r3
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	801a      	strh	r2, [r3, #0]
 8003714:	e01b      	b.n	800374e <HAL_PCD_EP_DB_Transmit+0x274>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	785b      	ldrb	r3, [r3, #1]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d117      	bne.n	800374e <HAL_PCD_EP_DB_Transmit+0x274>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372c:	b29b      	uxth	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	4413      	add	r3, r2
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	011a      	lsls	r2, r3, #4
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	4413      	add	r3, r2
 8003740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003748:	b29a      	uxth	r2, r3
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6959      	ldr	r1, [r3, #20]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	891a      	ldrh	r2, [r3, #8]
 800375a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375c:	b29b      	uxth	r3, r3
 800375e:	f003 fce8 	bl	8007132 <USB_WritePMA>
 8003762:	e138      	b.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	3306      	adds	r3, #6
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003798:	429a      	cmp	r2, r3
 800379a:	d307      	bcc.n	80037ac <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037a4:	1ad2      	subs	r2, r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	619a      	str	r2, [r3, #24]
 80037aa:	e002      	b.n	80037b2 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d12e      	bne.n	8003818 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	4619      	mov	r1, r3
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f005 fb18 	bl	8008df6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 8102 	bne.w	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003812:	b29b      	uxth	r3, r3
 8003814:	8013      	strh	r3, [r2, #0]
 8003816:	e0de      	b.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11f      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383c:	867b      	strh	r3, [r7, #50]	; 0x32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800384e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800385a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385e:	b29b      	uxth	r3, r3
 8003860:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 80b4 	bne.w	80039d6 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003876:	441a      	add	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003884:	441a      	add	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	429a      	cmp	r2, r3
 8003894:	d309      	bcc.n	80038aa <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6a1a      	ldr	r2, [r3, #32]
 80038a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	621a      	str	r2, [r3, #32]
 80038a8:	e015      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80038b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038b6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038c0:	e009      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2200      	movs	r2, #0
 80038cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d155      	bne.n	8003990 <HAL_PCD_EP_DB_Transmit+0x4b6>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	4413      	add	r3, r2
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	011a      	lsls	r2, r3, #4
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	4413      	add	r3, r2
 8003906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	2b00      	cmp	r3, #0
 8003910:	d112      	bne.n	8003938 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800391c:	b29a      	uxth	r2, r3
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003930:	b29a      	uxth	r2, r3
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e044      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393a:	2b3e      	cmp	r3, #62	; 0x3e
 800393c:	d811      	bhi.n	8003962 <HAL_PCD_EP_DB_Transmit+0x488>
 800393e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_PCD_EP_DB_Transmit+0x47a>
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	3301      	adds	r3, #1
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003956:	b29b      	uxth	r3, r3
 8003958:	029b      	lsls	r3, r3, #10
 800395a:	b29a      	uxth	r2, r3
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e02f      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_PCD_EP_DB_Transmit+0x49e>
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	3b01      	subs	r3, #1
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397a:	b29b      	uxth	r3, r3
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	b29b      	uxth	r3, r3
 8003980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003988:	b29a      	uxth	r2, r3
 800398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	e018      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d114      	bne.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a6:	4413      	add	r3, r2
 80039a8:	643b      	str	r3, [r7, #64]	; 0x40
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	011a      	lsls	r2, r3, #4
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6959      	ldr	r1, [r3, #20]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	895a      	ldrh	r2, [r3, #10]
 80039ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f003 fbae 	bl	8007132 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f0:	82bb      	strh	r3, [r7, #20]
 80039f2:	8abb      	ldrh	r3, [r7, #20]
 80039f4:	f083 0310 	eor.w	r3, r3, #16
 80039f8:	82bb      	strh	r3, [r7, #20]
 80039fa:	8abb      	ldrh	r3, [r7, #20]
 80039fc:	f083 0320 	eor.w	r3, r3, #32
 8003a00:	82bb      	strh	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	441a      	add	r2, r3
 8003a10:	8abb      	ldrh	r3, [r7, #20]
 8003a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3750      	adds	r7, #80	; 0x50
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e009      	b.n	8003a7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a66:	897a      	ldrh	r2, [r7, #10]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	80da      	strh	r2, [r3, #6]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2201      	movs	r2, #1
 8003a94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e272      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8087 	beq.w	8003be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad4:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d00c      	beq.n	8003afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae0:	4b8f      	ldr	r3, [pc, #572]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d112      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5e>
 8003aec:	4b8c      	ldr	r3, [pc, #560]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d10b      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afa:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d06c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x12c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d168      	bne.n	8003be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e24c      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x76>
 8003b1c:	4b80      	ldr	r3, [pc, #512]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7f      	ldr	r2, [pc, #508]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e02e      	b.n	8003b88 <HAL_RCC_OscConfig+0xd4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a77      	ldr	r2, [pc, #476]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xd4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0xbc>
 8003b56:	4b72      	ldr	r3, [pc, #456]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a71      	ldr	r2, [pc, #452]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xd4>
 8003b70:	4b6b      	ldr	r3, [pc, #428]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6a      	ldr	r2, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a67      	ldr	r2, [pc, #412]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f912 	bl	8001db8 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe f90e 	bl	8001db8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e200      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xe4>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f8fe 	bl	8001db8 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe f8fa 	bl	8001db8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1ec      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x10c>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bee:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bfa:	4b49      	ldr	r3, [pc, #292]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d11c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x18c>
 8003c06:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d116      	bne.n	8003c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x176>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1c0      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4939      	ldr	r1, [pc, #228]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	e03a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c48:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe f8b3 	bl	8001db8 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe f8af 	bl	8001db8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1a1      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4927      	ldr	r1, [pc, #156]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe f892 	bl	8001db8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fe f88e 	bl	8001db8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e180      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d03a      	beq.n	8003d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d019      	beq.n	8003cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe f872 	bl	8001db8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe f86e 	bl	8001db8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e160      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f000 faa6 	bl	8004248 <RCC_Delay>
 8003cfc:	e01c      	b.n	8003d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fe f858 	bl	8001db8 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe f854 	bl	8001db8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d908      	bls.n	8003d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e146      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	42420000 	.word	0x42420000
 8003d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e9      	bne.n	8003d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a6 	beq.w	8003e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b8b      	ldr	r3, [pc, #556]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a87      	ldr	r2, [pc, #540]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
 8003d62:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d118      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7e      	ldr	r2, [pc, #504]	; (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fe f815 	bl	8001db8 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fe f811 	bl	8001db8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	; 0x64
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e103      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x312>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6213      	str	r3, [r2, #32]
 8003dc4:	e02d      	b.n	8003e22 <HAL_RCC_OscConfig+0x36e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x334>
 8003dce:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a69      	ldr	r2, [pc, #420]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6213      	str	r3, [r2, #32]
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4a66      	ldr	r2, [pc, #408]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	6213      	str	r3, [r2, #32]
 8003de6:	e01c      	b.n	8003e22 <HAL_RCC_OscConfig+0x36e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x356>
 8003df0:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a60      	ldr	r2, [pc, #384]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e00b      	b.n	8003e22 <HAL_RCC_OscConfig+0x36e>
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a5a      	ldr	r2, [pc, #360]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	6213      	str	r3, [r2, #32]
 8003e16:	4b58      	ldr	r3, [pc, #352]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4a57      	ldr	r2, [pc, #348]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d015      	beq.n	8003e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd ffc5 	bl	8001db8 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd ffc1 	bl	8001db8 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0b1      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCC_OscConfig+0x37e>
 8003e54:	e014      	b.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fd ffaf 	bl	8001db8 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fd ffab 	bl	8001db8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e09b      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e74:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ee      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8087 	beq.w	8003faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e9c:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d061      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d146      	bne.n	8003f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd ff7f 	bl	8001db8 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd ff7b 	bl	8001db8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e06d      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4921      	ldr	r1, [pc, #132]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a19      	ldr	r1, [r3, #32]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	491b      	ldr	r1, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fd ff4f 	bl	8001db8 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd ff4b 	bl	8001db8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46a>
 8003f3c:	e035      	b.n	8003faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd ff38 	bl	8001db8 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd ff34 	bl	8001db8 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e026      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x498>
 8003f6a:	e01e      	b.n	8003faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e019      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_OscConfig+0x500>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0d0      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d910      	bls.n	8003ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	4965      	ldr	r1, [pc, #404]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0b8      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004014:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800401e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a52      	ldr	r2, [pc, #328]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	494d      	ldr	r1, [pc, #308]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d040      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d115      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07f      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e073      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3d      	ldr	r3, [pc, #244]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06b      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b39      	ldr	r3, [pc, #228]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4936      	ldr	r1, [pc, #216]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fd fe86 	bl	8001db8 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fd fe82 	bl	8001db8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e053      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2d      	ldr	r3, [pc, #180]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d210      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 0207 	bic.w	r2, r3, #7
 80040ee:	4922      	ldr	r1, [pc, #136]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e032      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4916      	ldr	r1, [pc, #88]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	490e      	ldr	r1, [pc, #56]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004146:	f000 f821 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	490a      	ldr	r1, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1cc>)
 8004160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x1d0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd fde4 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40022000 	.word	0x40022000
 800417c:	40021000 	.word	0x40021000
 8004180:	0800af3c 	.word	0x0800af3c
 8004184:	20000038 	.word	0x20000038
 8004188:	2000003c 	.word	0x2000003c

0800418c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	b490      	push	{r4, r7}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <HAL_RCC_GetSysClockFreq+0xac>)
 8004194:	1d3c      	adds	r4, r7, #4
 8004196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800419c:	f240 2301 	movw	r3, #513	; 0x201
 80041a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041b6:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCC_GetSysClockFreq+0xb0>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d002      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x40>
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d003      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x46>
 80041ca:	e02b      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041cc:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041ce:	623b      	str	r3, [r7, #32]
      break;
 80041d0:	e02b      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	0c9b      	lsrs	r3, r3, #18
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3328      	adds	r3, #40	; 0x28
 80041dc:	443b      	add	r3, r7
 80041de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <HAL_RCC_GetSysClockFreq+0xb0>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	0c5b      	lsrs	r3, r3, #17
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	3328      	adds	r3, #40	; 0x28
 80041fa:	443b      	add	r3, r7
 80041fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004200:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004206:	fb03 f202 	mul.w	r2, r3, r2
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
 8004212:	e004      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004218:	fb02 f303 	mul.w	r3, r2, r3
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	623b      	str	r3, [r7, #32]
      break;
 8004222:	e002      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004226:	623b      	str	r3, [r7, #32]
      break;
 8004228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422a:	6a3b      	ldr	r3, [r7, #32]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3728      	adds	r7, #40	; 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bc90      	pop	{r4, r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	0800aed8 	.word	0x0800aed8
 800423c:	40021000 	.word	0x40021000
 8004240:	007a1200 	.word	0x007a1200
 8004244:	003d0900 	.word	0x003d0900

08004248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <RCC_Delay+0x34>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <RCC_Delay+0x38>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0a5b      	lsrs	r3, r3, #9
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004264:	bf00      	nop
  }
  while (Delay --);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	60fa      	str	r2, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f9      	bne.n	8004264 <RCC_Delay+0x1c>
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	20000038 	.word	0x20000038
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d07d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a4:	4b4f      	ldr	r3, [pc, #316]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b0:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	61d3      	str	r3, [r2, #28]
 80042bc:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d118      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d8:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a42      	ldr	r2, [pc, #264]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e4:	f7fd fd68 	bl	8001db8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	e008      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ec:	f7fd fd64 	bl	8001db8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e06d      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b3a      	ldr	r3, [pc, #232]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d02e      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d027      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004332:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004338:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800433e:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d014      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd fd33 	bl	8001db8 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd fd2f 	bl	8001db8 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e036      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4917      	ldr	r1, [pc, #92]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	4313      	orrs	r3, r2
 8004388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	490b      	ldr	r1, [pc, #44]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4904      	ldr	r1, [pc, #16]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42420440 	.word	0x42420440

080043f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e041      	b.n	8004486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd fb4a 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f000 fa70 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d001      	beq.n	80044a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e03a      	b.n	800451e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a18      	ldr	r2, [pc, #96]	; (8004528 <HAL_TIM_Base_Start_IT+0x98>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x58>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x58>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <HAL_TIM_Base_Start_IT+0x9c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x58>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <HAL_TIM_Base_Start_IT+0xa0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d010      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450a:	e007      	b.n	800451c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800

08004534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0202 	mvn.w	r2, #2
 8004560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9b1 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9a4 	bl	80048cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9b3 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0204 	mvn.w	r2, #4
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f987 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f97a 	bl	80048cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f989 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0208 	mvn.w	r2, #8
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2204      	movs	r2, #4
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f95d 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f950 	bl	80048cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f95f 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f933 	bl	80048de <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f926 	bl	80048cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f935 	bl	80048f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10e      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0201 	mvn.w	r2, #1
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fc84 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d107      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa77 	bl	8004bd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f8f9 	bl	8004902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa42 	bl	8004bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e0b3      	b.n	80048c4 <HAL_TIM_ConfigClockSource+0x180>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004782:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xd0>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x168>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	f000 8085 	beq.w	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047ac:	2b70      	cmp	r3, #112	; 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xa2>
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047b4:	2b60      	cmp	r3, #96	; 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x116>
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047bc:	2b50      	cmp	r3, #80	; 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xf6>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x136>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x156>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x156>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x156>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f000 f966 	bl	8004ac6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004808:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04e      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f000 f94f 	bl	8004ac6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03b      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f8c6 	bl	80049d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	; 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f91d 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 8004858:	e02b      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f8e4 	bl	8004a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	; 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f90d 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 8004878:	e01b      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	461a      	mov	r2, r3
 8004888:	f000 f8a6 	bl	80049d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	; 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f8fd 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 8004898:	e00b      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 f8f4 	bl	8004a92 <TIM_ITRx_SetConfig>
        break;
 80048aa:	e002      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a29      	ldr	r2, [pc, #164]	; (80049cc <TIM_Base_SetConfig+0xb8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <TIM_Base_SetConfig+0x30>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0x30>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <TIM_Base_SetConfig+0xbc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0x30>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a25      	ldr	r2, [pc, #148]	; (80049d4 <TIM_Base_SetConfig+0xc0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <TIM_Base_SetConfig+0xb8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0x62>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0x62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <TIM_Base_SetConfig+0xbc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0x62>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <TIM_Base_SetConfig+0xc0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <TIM_Base_SetConfig+0xb8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	615a      	str	r2, [r3, #20]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800

080049d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0201 	bic.w	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 030a 	bic.w	r3, r3, #10
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f023 0210 	bic.w	r2, r3, #16
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	031b      	lsls	r3, r3, #12
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f043 0307 	orr.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b087      	sub	sp, #28
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	021a      	lsls	r2, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	609a      	str	r2, [r3, #8]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e046      	b.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b68:	d009      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10c      	bne.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800

08004bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	f107 0014 	add.w	r0, r7, #20
 8004bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	b004      	add	sp, #16
 8004c02:	4770      	bx	lr

08004c04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c38:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	f107 0014 	add.w	r0, r7, #20
 8004c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	b004      	add	sp, #16
 8004cba:	4770      	bx	lr

08004cbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b09b      	sub	sp, #108	; 0x6c
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	78db      	ldrb	r3, [r3, #3]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d81f      	bhi.n	8004d2e <USB_ActivateEndpoint+0x72>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <USB_ActivateEndpoint+0x38>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d21 	.word	0x08004d21
 8004cfc:	08004d37 	.word	0x08004d37
 8004d00:	08004d13 	.word	0x08004d13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d10:	e012      	b.n	8004d38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d1e:	e00b      	b.n	8004d38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d2c:	e004      	b.n	8004d38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d34:	e000      	b.n	8004d38 <USB_ActivateEndpoint+0x7c>
      break;
 8004d36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	7b1b      	ldrb	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 8149 	bne.w	800503c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8084 	beq.w	8004ebc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	88db      	ldrh	r3, [r3, #6]
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	81fb      	strh	r3, [r7, #14]
 8004df6:	89fb      	ldrh	r3, [r7, #14]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <USB_ActivateEndpoint+0x17c>
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	81bb      	strh	r3, [r7, #12]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	89bb      	ldrh	r3, [r7, #12]
 8004e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d020      	beq.n	8004e82 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e56:	813b      	strh	r3, [r7, #8]
 8004e58:	893b      	ldrh	r3, [r7, #8]
 8004e5a:	f083 0320 	eor.w	r3, r3, #32
 8004e5e:	813b      	strh	r3, [r7, #8]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	893b      	ldrh	r3, [r7, #8]
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
 8004e80:	e27f      	b.n	8005382 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	897b      	ldrh	r3, [r7, #10]
 8004ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	8013      	strh	r3, [r2, #0]
 8004eba:	e262      	b.n	8005382 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	4413      	add	r3, r2
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	011a      	lsls	r2, r3, #4
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	88db      	ldrh	r3, [r3, #6]
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	4413      	add	r3, r2
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	011a      	lsls	r2, r3, #4
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d112      	bne.n	8004f42 <USB_ActivateEndpoint+0x286>
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	e02f      	b.n	8004fa2 <USB_ActivateEndpoint+0x2e6>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b3e      	cmp	r3, #62	; 0x3e
 8004f48:	d813      	bhi.n	8004f72 <USB_ActivateEndpoint+0x2b6>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <USB_ActivateEndpoint+0x2a8>
 8004f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f60:	3301      	adds	r3, #1
 8004f62:	663b      	str	r3, [r7, #96]	; 0x60
 8004f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	e017      	b.n	8004fa2 <USB_ActivateEndpoint+0x2e6>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <USB_ActivateEndpoint+0x2d0>
 8004f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	83fb      	strh	r3, [r7, #30]
 8004fb0:	8bfb      	ldrh	r3, [r7, #30]
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01b      	beq.n	8004ff2 <USB_ActivateEndpoint+0x336>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	83bb      	strh	r3, [r7, #28]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	8bbb      	ldrh	r3, [r7, #28]
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	837b      	strh	r3, [r7, #26]
 800500a:	8b7b      	ldrh	r3, [r7, #26]
 800500c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005010:	837b      	strh	r3, [r7, #26]
 8005012:	8b7b      	ldrh	r3, [r7, #26]
 8005014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005018:	837b      	strh	r3, [r7, #26]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8b7b      	ldrh	r3, [r7, #26]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
 800503a:	e1a2      	b.n	8005382 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005074:	b29b      	uxth	r3, r3
 8005076:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	65bb      	str	r3, [r7, #88]	; 0x58
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005088:	4413      	add	r3, r2
 800508a:	65bb      	str	r3, [r7, #88]	; 0x58
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	011a      	lsls	r2, r3, #4
 8005092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005094:	4413      	add	r3, r2
 8005096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509a:	657b      	str	r3, [r7, #84]	; 0x54
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	891b      	ldrh	r3, [r3, #8]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	653b      	str	r3, [r7, #80]	; 0x50
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	4413      	add	r3, r2
 80050be:	653b      	str	r3, [r7, #80]	; 0x50
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	011a      	lsls	r2, r3, #4
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	895b      	ldrh	r3, [r3, #10]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 8091 	bne.w	800520c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01b      	beq.n	800513a <USB_ActivateEndpoint+0x47e>
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	877b      	strh	r3, [r7, #58]	; 0x3a
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	873b      	strh	r3, [r7, #56]	; 0x38
 8005148:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01b      	beq.n	800518a <USB_ActivateEndpoint+0x4ce>
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	86fb      	strh	r3, [r7, #54]	; 0x36
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
 800520a:	e0ba      	b.n	8005382 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800521c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01d      	beq.n	8005264 <USB_ActivateEndpoint+0x5a8>
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005274:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01d      	beq.n	80052bc <USB_ActivateEndpoint+0x600>
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	78db      	ldrb	r3, [r3, #3]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d024      	beq.n	800530e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052e2:	f083 0320 	eor.w	r3, r3, #32
 80052e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]
 800530c:	e01d      	b.n	800534a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	441a      	add	r2, r3
 800536c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800536e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537e:	b29b      	uxth	r3, r3
 8005380:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005382:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005386:	4618      	mov	r0, r3
 8005388:	376c      	adds	r7, #108	; 0x6c
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b08d      	sub	sp, #52	; 0x34
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	7b1b      	ldrb	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 808e 	bne.w	80054c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d044      	beq.n	8005436 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	81bb      	strh	r3, [r7, #12]
 80053ba:	89bb      	ldrh	r3, [r7, #12]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <USB_DeactivateEndpoint+0x6c>
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	817b      	strh	r3, [r7, #10]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	897b      	ldrh	r3, [r7, #10]
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005412:	813b      	strh	r3, [r7, #8]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	893b      	ldrh	r3, [r7, #8]
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
 8005434:	e192      	b.n	800575c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	827b      	strh	r3, [r7, #18]
 8005444:	8a7b      	ldrh	r3, [r7, #18]
 8005446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01b      	beq.n	8005486 <USB_DeactivateEndpoint+0xf6>
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	823b      	strh	r3, [r7, #16]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	8a3b      	ldrh	r3, [r7, #16]
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549c:	81fb      	strh	r3, [r7, #14]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	8013      	strh	r3, [r2, #0]
 80054be:	e14d      	b.n	800575c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 80a5 	bne.w	8005614 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	843b      	strh	r3, [r7, #32]
 80054d8:	8c3b      	ldrh	r3, [r7, #32]
 80054da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01b      	beq.n	800551a <USB_DeactivateEndpoint+0x18a>
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f8:	83fb      	strh	r3, [r7, #30]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	8bfb      	ldrh	r3, [r7, #30]
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	83bb      	strh	r3, [r7, #28]
 8005528:	8bbb      	ldrh	r3, [r7, #28]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01b      	beq.n	800556a <USB_DeactivateEndpoint+0x1da>
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005548:	837b      	strh	r3, [r7, #26]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	8b7b      	ldrh	r3, [r7, #26]
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	833b      	strh	r3, [r7, #24]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	8b3b      	ldrh	r3, [r7, #24]
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	82fb      	strh	r3, [r7, #22]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	441a      	add	r2, r3
 80055c4:	8afb      	ldrh	r3, [r7, #22]
 80055c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	82bb      	strh	r3, [r7, #20]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8abb      	ldrh	r3, [r7, #20]
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
 8005612:	e0a3      	b.n	800575c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005622:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <USB_DeactivateEndpoint+0x2d4>
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005672:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01b      	beq.n	80056b4 <USB_DeactivateEndpoint+0x324>
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	853b      	strh	r3, [r7, #40]	; 0x28
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005702:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	441a      	add	r2, r3
 800570e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005720:	b29b      	uxth	r3, r3
 8005722:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	847b      	strh	r3, [r7, #34]	; 0x22
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3734      	adds	r7, #52	; 0x34
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b0c4      	sub	sp, #272	; 0x110
 800576c:	af00      	add	r7, sp, #0
 800576e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005772:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005776:	6018      	str	r0, [r3, #0]
 8005778:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800577c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005780:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005786:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b01      	cmp	r3, #1
 8005790:	f040 86ec 	bne.w	800656c <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005798:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d908      	bls.n	80057c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80057b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057c0:	e007      	b.n	80057d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80057c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	7b1b      	ldrb	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d142      	bne.n	8005868 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6959      	ldr	r1, [r3, #20]
 80057ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	88da      	ldrh	r2, [r3, #6]
 80057fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005804:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005808:	6800      	ldr	r0, [r0, #0]
 800580a:	f001 fc92 	bl	8007132 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800580e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800581e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005828:	b29b      	uxth	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4413      	add	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005836:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	011a      	lsls	r2, r3, #4
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800584c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005856:	b29a      	uxth	r2, r3
 8005858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800585c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	f000 be34 	b.w	80064d0 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005868:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800586c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	78db      	ldrb	r3, [r3, #3]
 8005874:	2b02      	cmp	r3, #2
 8005876:	f040 843b 	bne.w	80060f0 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800587a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800587e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800588a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	429a      	cmp	r2, r3
 8005894:	f240 83b8 	bls.w	8006008 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800589c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80058c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	441a      	add	r2, r3
 80058dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80058f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800590a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005912:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005920:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 81b4 	beq.w	8005ca2 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800593a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800593e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800594a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d16d      	bne.n	8005a32 <USB_EPStartXfer+0x2ca>
 8005956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800595a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005966:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	4413      	add	r3, r2
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800597e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	011a      	lsls	r2, r3, #4
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	4413      	add	r3, r2
 800598c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
 8005992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d112      	bne.n	80059c0 <USB_EPStartXfer+0x258>
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e05d      	b.n	8005a7c <USB_EPStartXfer+0x314>
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c4:	2b3e      	cmp	r3, #62	; 0x3e
 80059c6:	d817      	bhi.n	80059f8 <USB_EPStartXfer+0x290>
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <USB_EPStartXfer+0x280>
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e2:	3301      	adds	r3, #1
 80059e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	e041      	b.n	8005a7c <USB_EPStartXfer+0x314>
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <USB_EPStartXfer+0x2b0>
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a12:	3b01      	subs	r3, #1
 8005a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	e024      	b.n	8005a7c <USB_EPStartXfer+0x314>
 8005a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a36:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d11c      	bne.n	8005a7c <USB_EPStartXfer+0x314>
 8005a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	4413      	add	r3, r2
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	011a      	lsls	r2, r3, #4
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
 8005a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	895b      	ldrh	r3, [r3, #10]
 8005a88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6959      	ldr	r1, [r3, #20]
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005aa2:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005aa6:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	f001 fb41 	bl	8007132 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ab4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac0:	441a      	add	r2, r3
 8005ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ac6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ad2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ade:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d90f      	bls.n	8005b0a <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8005aea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	621a      	str	r2, [r3, #32]
 8005b08:	e00e      	b.n	8005b28 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b0e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d16d      	bne.n	8005c14 <USB_EPStartXfer+0x4ac>
 8005b38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d112      	bne.n	8005ba2 <USB_EPStartXfer+0x43a>
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	e063      	b.n	8005c6a <USB_EPStartXfer+0x502>
 8005ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba8:	d817      	bhi.n	8005bda <USB_EPStartXfer+0x472>
 8005baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <USB_EPStartXfer+0x462>
 8005bc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e047      	b.n	8005c6a <USB_EPStartXfer+0x502>
 8005bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <USB_EPStartXfer+0x492>
 8005bf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e02a      	b.n	8005c6a <USB_EPStartXfer+0x502>
 8005c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d122      	bne.n	8005c6a <USB_EPStartXfer+0x502>
 8005c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	4413      	add	r3, r2
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	011a      	lsls	r2, r3, #4
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	4413      	add	r3, r2
 8005c5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	891b      	ldrh	r3, [r3, #8]
 8005c76:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6959      	ldr	r1, [r3, #20]
 8005c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c90:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005c94:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005c98:	6800      	ldr	r0, [r0, #0]
 8005c9a:	f001 fa4a 	bl	8007132 <USB_WritePMA>
 8005c9e:	f000 bc17 	b.w	80064d0 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d16d      	bne.n	8005d8e <USB_EPStartXfer+0x626>
 8005cb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd2:	4413      	add	r3, r2
 8005cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	011a      	lsls	r2, r3, #4
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d112      	bne.n	8005d1c <USB_EPStartXfer+0x5b4>
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e063      	b.n	8005de4 <USB_EPStartXfer+0x67c>
 8005d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d20:	2b3e      	cmp	r3, #62	; 0x3e
 8005d22:	d817      	bhi.n	8005d54 <USB_EPStartXfer+0x5ec>
 8005d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <USB_EPStartXfer+0x5dc>
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e047      	b.n	8005de4 <USB_EPStartXfer+0x67c>
 8005d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <USB_EPStartXfer+0x60c>
 8005d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	029b      	lsls	r3, r3, #10
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	e02a      	b.n	8005de4 <USB_EPStartXfer+0x67c>
 8005d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d122      	bne.n	8005de4 <USB_EPStartXfer+0x67c>
 8005d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005da2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	657b      	str	r3, [r7, #84]	; 0x54
 8005daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbe:	4413      	add	r3, r2
 8005dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	011a      	lsls	r2, r3, #4
 8005dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8005dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005de8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	891b      	ldrh	r3, [r3, #8]
 8005df0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005df8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6959      	ldr	r1, [r3, #20]
 8005e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e0a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005e0e:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005e12:	6800      	ldr	r0, [r0, #0]
 8005e14:	f001 f98d 	bl	8007132 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e28:	441a      	add	r2, r3
 8005e2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d90f      	bls.n	8005e72 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8005e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	621a      	str	r2, [r3, #32]
 8005e70:	e00e      	b.n	8005e90 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e76:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ea0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d16d      	bne.n	8005f88 <USB_EPStartXfer+0x820>
 8005eac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	4413      	add	r3, r2
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ed4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	011a      	lsls	r2, r3, #4
 8005ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d112      	bne.n	8005f16 <USB_EPStartXfer+0x7ae>
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e05d      	b.n	8005fd2 <USB_EPStartXfer+0x86a>
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f1c:	d817      	bhi.n	8005f4e <USB_EPStartXfer+0x7e6>
 8005f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <USB_EPStartXfer+0x7d6>
 8005f34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	e041      	b.n	8005fd2 <USB_EPStartXfer+0x86a>
 8005f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <USB_EPStartXfer+0x806>
 8005f64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	e024      	b.n	8005fd2 <USB_EPStartXfer+0x86a>
 8005f88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d11c      	bne.n	8005fd2 <USB_EPStartXfer+0x86a>
 8005f98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fac:	4413      	add	r3, r2
 8005fae:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	011a      	lsls	r2, r3, #4
 8005fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	895b      	ldrh	r3, [r3, #10]
 8005fde:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fe2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fe6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6959      	ldr	r1, [r3, #20]
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ff8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005ffc:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8006000:	6800      	ldr	r0, [r0, #0]
 8006002:	f001 f896 	bl	8007132 <USB_WritePMA>
 8006006:	e263      	b.n	80064d0 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006008:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800600c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006018:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800601c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006026:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006042:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006046:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006050:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	441a      	add	r2, r3
 800605c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006070:	b29b      	uxth	r3, r3
 8006072:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006078:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	663b      	str	r3, [r7, #96]	; 0x60
 8006080:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006084:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006094:	4413      	add	r3, r2
 8006096:	663b      	str	r3, [r7, #96]	; 0x60
 8006098:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800609c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	011a      	lsls	r2, r3, #4
 80060a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a8:	4413      	add	r3, r2
 80060aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	891b      	ldrh	r3, [r3, #8]
 80060c6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6959      	ldr	r1, [r3, #20]
 80060d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80060e0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80060e4:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80060e8:	6800      	ldr	r0, [r0, #0]
 80060ea:	f001 f822 	bl	8007132 <USB_WritePMA>
 80060ee:	e1ef      	b.n	80064d0 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80aa 	beq.w	800626c <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800611c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	67bb      	str	r3, [r7, #120]	; 0x78
 8006124:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006128:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d16d      	bne.n	8006210 <USB_EPStartXfer+0xaa8>
 8006134:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006138:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	673b      	str	r3, [r7, #112]	; 0x70
 8006140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006144:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006154:	4413      	add	r3, r2
 8006156:	673b      	str	r3, [r7, #112]	; 0x70
 8006158:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800615c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006168:	4413      	add	r3, r2
 800616a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800616e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d112      	bne.n	800619e <USB_EPStartXfer+0xa36>
 8006178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006182:	b29a      	uxth	r2, r3
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006196:	b29a      	uxth	r2, r3
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e05d      	b.n	800625a <USB_EPStartXfer+0xaf2>
 800619e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a2:	2b3e      	cmp	r3, #62	; 0x3e
 80061a4:	d817      	bhi.n	80061d6 <USB_EPStartXfer+0xa6e>
 80061a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <USB_EPStartXfer+0xa5e>
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c0:	3301      	adds	r3, #1
 80061c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	029b      	lsls	r3, r3, #10
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e041      	b.n	800625a <USB_EPStartXfer+0xaf2>
 80061d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <USB_EPStartXfer+0xa8e>
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	3b01      	subs	r3, #1
 80061f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	b29b      	uxth	r3, r3
 8006200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006208:	b29a      	uxth	r2, r3
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e024      	b.n	800625a <USB_EPStartXfer+0xaf2>
 8006210:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006214:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d11c      	bne.n	800625a <USB_EPStartXfer+0xaf2>
 8006220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006224:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006234:	4413      	add	r3, r2
 8006236:	67bb      	str	r3, [r7, #120]	; 0x78
 8006238:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800623c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	011a      	lsls	r2, r3, #4
 8006246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006248:	4413      	add	r3, r2
 800624a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800624e:	677b      	str	r3, [r7, #116]	; 0x74
 8006250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006254:	b29a      	uxth	r2, r3
 8006256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006258:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800625a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800625e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	895b      	ldrh	r3, [r3, #10]
 8006266:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800626a:	e0b2      	b.n	80063d2 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800626c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006270:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d171      	bne.n	8006360 <USB_EPStartXfer+0xbf8>
 800627c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006280:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800628a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800628e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006298:	b29b      	uxth	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062a0:	4413      	add	r3, r2
 80062a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	011a      	lsls	r2, r3, #4
 80062b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d112      	bne.n	80062ee <USB_EPStartXfer+0xb86>
 80062c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e069      	b.n	80063c2 <USB_EPStartXfer+0xc5a>
 80062ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f2:	2b3e      	cmp	r3, #62	; 0x3e
 80062f4:	d817      	bhi.n	8006326 <USB_EPStartXfer+0xbbe>
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <USB_EPStartXfer+0xbae>
 800630c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006310:	3301      	adds	r3, #1
 8006312:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006316:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800631a:	b29b      	uxth	r3, r3
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	b29a      	uxth	r2, r3
 8006320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	e04d      	b.n	80063c2 <USB_EPStartXfer+0xc5a>
 8006326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <USB_EPStartXfer+0xbde>
 800633c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006340:	3b01      	subs	r3, #1
 8006342:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006346:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800634a:	b29b      	uxth	r3, r3
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	b29b      	uxth	r3, r3
 8006350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006358:	b29a      	uxth	r2, r3
 800635a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e030      	b.n	80063c2 <USB_EPStartXfer+0xc5a>
 8006360:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006364:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d128      	bne.n	80063c2 <USB_EPStartXfer+0xc5a>
 8006370:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006374:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800637e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006382:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006394:	4413      	add	r3, r2
 8006396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800639a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800639e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	011a      	lsls	r2, r3, #4
 80063a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	891b      	ldrh	r3, [r3, #8]
 80063ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6959      	ldr	r1, [r3, #20]
 80063de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80063e8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80063ec:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80063f0:	6800      	ldr	r0, [r0, #0]
 80063f2:	f000 fe9e 	bl	8007132 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80063f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d12e      	bne.n	8006464 <USB_EPStartXfer+0xcfc>
 8006406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800640a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006414:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006430:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006434:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800643e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800644e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800645e:	b29b      	uxth	r3, r3
 8006460:	8013      	strh	r3, [r2, #0]
 8006462:	e035      	b.n	80064d0 <USB_EPStartXfer+0xd68>
 8006464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d12d      	bne.n	80064d0 <USB_EPStartXfer+0xd68>
 8006474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006478:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006482:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800649e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80064bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80064f2:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fe:	8013      	strh	r3, [r2, #0]
 8006500:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006504:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8006508:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800650c:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 8006510:	8812      	ldrh	r2, [r2, #0]
 8006512:	f082 0210 	eor.w	r2, r2, #16
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800651c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8006520:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006524:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 8006528:	8812      	ldrh	r2, [r2, #0]
 800652a:	f082 0220 	eor.w	r2, r2, #32
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800653e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800654e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]
 8006568:	f000 bc9f 	b.w	8006eaa <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800656c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006570:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	7b1b      	ldrb	r3, [r3, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 80ae 	bne.w	80066da <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800657e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006582:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800658e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d917      	bls.n	80065ca <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800659a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800659e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80065aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	619a      	str	r2, [r3, #24]
 80065c8:	e00e      	b.n	80065e8 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 80065ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80065da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800660c:	4413      	add	r3, r2
 800660e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006616:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	011a      	lsls	r2, r3, #4
 8006620:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006624:	4413      	add	r3, r2
 8006626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800662a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800662e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d116      	bne.n	8006664 <USB_EPStartXfer+0xefc>
 8006636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665a:	b29a      	uxth	r2, r3
 800665c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e3e8      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
 8006664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006668:	2b3e      	cmp	r3, #62	; 0x3e
 800666a:	d818      	bhi.n	800669e <USB_EPStartXfer+0xf36>
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <USB_EPStartXfer+0xf24>
 8006682:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006686:	3301      	adds	r3, #1
 8006688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800668c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006690:	b29b      	uxth	r3, r3
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e3cb      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
 800669e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <USB_EPStartXfer+0xf56>
 80066b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066b8:	3b01      	subs	r3, #1
 80066ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e3ad      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	78db      	ldrb	r3, [r3, #3]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	f040 8200 	bne.w	8006aec <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f040 8091 	bne.w	8006820 <USB_EPStartXfer+0x10b8>
 80066fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006702:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800670c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006710:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006722:	4413      	add	r3, r2
 8006724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006728:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800672c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800673a:	4413      	add	r3, r2
 800673c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006748:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d116      	bne.n	8006782 <USB_EPStartXfer+0x101a>
 8006754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e083      	b.n	800688a <USB_EPStartXfer+0x1122>
 8006782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006786:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b3e      	cmp	r3, #62	; 0x3e
 8006790:	d820      	bhi.n	80067d4 <USB_EPStartXfer+0x106c>
 8006792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006796:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <USB_EPStartXfer+0x105a>
 80067b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067bc:	3301      	adds	r3, #1
 80067be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	e05a      	b.n	800688a <USB_EPStartXfer+0x1122>
 80067d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <USB_EPStartXfer+0x109c>
 80067fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067fe:	3b01      	subs	r3, #1
 8006800:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006808:	b29b      	uxth	r3, r3
 800680a:	029b      	lsls	r3, r3, #10
 800680c:	b29b      	uxth	r3, r3
 800680e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006816:	b29a      	uxth	r2, r3
 8006818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	e034      	b.n	800688a <USB_EPStartXfer+0x1122>
 8006820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006824:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d12c      	bne.n	800688a <USB_EPStartXfer+0x1122>
 8006830:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006834:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800683e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006842:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006854:	4413      	add	r3, r2
 8006856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800685a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800685e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	011a      	lsls	r2, r3, #4
 8006868:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800686c:	4413      	add	r3, r2
 800686e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800687a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800688e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800689c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 8091 	bne.w	80069cc <USB_EPStartXfer+0x1264>
 80068aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ce:	4413      	add	r3, r2
 80068d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	011a      	lsls	r2, r3, #4
 80068e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068e6:	4413      	add	r3, r2
 80068e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d116      	bne.n	800692e <USB_EPStartXfer+0x11c6>
 8006900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800690c:	b29a      	uxth	r2, r3
 800690e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006924:	b29a      	uxth	r2, r3
 8006926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	e07c      	b.n	8006a28 <USB_EPStartXfer+0x12c0>
 800692e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006932:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b3e      	cmp	r3, #62	; 0x3e
 800693c:	d820      	bhi.n	8006980 <USB_EPStartXfer+0x1218>
 800693e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006942:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006954:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <USB_EPStartXfer+0x1206>
 8006964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006968:	3301      	adds	r3, #1
 800696a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006972:	b29b      	uxth	r3, r3
 8006974:	029b      	lsls	r3, r3, #10
 8006976:	b29a      	uxth	r2, r3
 8006978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e053      	b.n	8006a28 <USB_EPStartXfer+0x12c0>
 8006980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006996:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <USB_EPStartXfer+0x1248>
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069aa:	3b01      	subs	r3, #1
 80069ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	e02d      	b.n	8006a28 <USB_EPStartXfer+0x12c0>
 80069cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d125      	bne.n	8006a28 <USB_EPStartXfer+0x12c0>
 80069dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069f2:	4413      	add	r3, r2
 80069f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	011a      	lsls	r2, r3, #4
 8006a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a26:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 81fe 	beq.w	8006e36 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a5a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <USB_EPStartXfer+0x130a>
 8006a66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10d      	bne.n	8006a8e <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a72:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 81db 	bne.w	8006e36 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f040 81d4 	bne.w	8006e36 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006abc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ac6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
 8006aea:	e1a4      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006aec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006af0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	78db      	ldrb	r3, [r3, #3]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	f040 819a 	bne.w	8006e32 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b02:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b0e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d917      	bls.n	8006b4a <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 8006b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006b2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	619a      	str	r2, [r3, #24]
 8006b48:	e00e      	b.n	8006b68 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 8006b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2200      	movs	r2, #0
 8006b66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d178      	bne.n	8006c6a <USB_EPStartXfer+0x1502>
 8006b78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ba6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	011a      	lsls	r2, r3, #4
 8006bb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d116      	bne.n	8006bf4 <USB_EPStartXfer+0x148c>
 8006bc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e06b      	b.n	8006ccc <USB_EPStartXfer+0x1564>
 8006bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bfa:	d818      	bhi.n	8006c2e <USB_EPStartXfer+0x14c6>
 8006bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USB_EPStartXfer+0x14b4>
 8006c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c16:	3301      	adds	r3, #1
 8006c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e04e      	b.n	8006ccc <USB_EPStartXfer+0x1564>
 8006c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <USB_EPStartXfer+0x14e6>
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e030      	b.n	8006ccc <USB_EPStartXfer+0x1564>
 8006c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d128      	bne.n	8006ccc <USB_EPStartXfer+0x1564>
 8006c7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ca4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ca8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	011a      	lsls	r2, r3, #4
 8006cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d178      	bne.n	8006ddc <USB_EPStartXfer+0x1674>
 8006cea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d0e:	4413      	add	r3, r2
 8006d10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	011a      	lsls	r2, r3, #4
 8006d22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d26:	4413      	add	r3, r2
 8006d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d116      	bne.n	8006d66 <USB_EPStartXfer+0x15fe>
 8006d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e067      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
 8006d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d6c:	d818      	bhi.n	8006da0 <USB_EPStartXfer+0x1638>
 8006d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <USB_EPStartXfer+0x1626>
 8006d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e04a      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
 8006da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <USB_EPStartXfer+0x1658>
 8006db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e02c      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
 8006ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006de0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d124      	bne.n	8006e36 <USB_EPStartXfer+0x16ce>
 8006dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006df0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e02:	4413      	add	r3, r2
 8006e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	011a      	lsls	r2, r3, #4
 8006e16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	e001      	b.n	8006e36 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e03a      	b.n	8006eac <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e74:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d020      	beq.n	8006f0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ede:	81bb      	strh	r3, [r7, #12]
 8006ee0:	89bb      	ldrh	r3, [r7, #12]
 8006ee2:	f083 0310 	eor.w	r3, r3, #16
 8006ee6:	81bb      	strh	r3, [r7, #12]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	89bb      	ldrh	r3, [r7, #12]
 8006ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	8013      	strh	r3, [r2, #0]
 8006f08:	e01f      	b.n	8006f4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f20:	81fb      	strh	r3, [r7, #14]
 8006f22:	89fb      	ldrh	r3, [r7, #14]
 8006f24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f28:	81fb      	strh	r3, [r7, #14]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	441a      	add	r2, r3
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr

08006f56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b087      	sub	sp, #28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	7b1b      	ldrb	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 809d 	bne.w	80070a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d04c      	beq.n	800700c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	823b      	strh	r3, [r7, #16]
 8006f80:	8a3b      	ldrh	r3, [r7, #16]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01b      	beq.n	8006fc2 <USB_EPClearStall+0x6c>
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	81fb      	strh	r3, [r7, #14]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	89fb      	ldrh	r3, [r7, #14]
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	78db      	ldrb	r3, [r3, #3]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d06c      	beq.n	80070a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe0:	81bb      	strh	r3, [r7, #12]
 8006fe2:	89bb      	ldrh	r3, [r7, #12]
 8006fe4:	f083 0320 	eor.w	r3, r3, #32
 8006fe8:	81bb      	strh	r3, [r7, #12]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	89bb      	ldrh	r3, [r7, #12]
 8006ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
 800700a:	e04b      	b.n	80070a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	82fb      	strh	r3, [r7, #22]
 800701a:	8afb      	ldrh	r3, [r7, #22]
 800701c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01b      	beq.n	800705c <USB_EPClearStall+0x106>
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29b      	uxth	r3, r3
 8007032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	82bb      	strh	r3, [r7, #20]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	8abb      	ldrh	r3, [r7, #20]
 8007048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007058:	b29b      	uxth	r3, r3
 800705a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	827b      	strh	r3, [r7, #18]
 8007074:	8a7b      	ldrh	r3, [r7, #18]
 8007076:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800707a:	827b      	strh	r3, [r7, #18]
 800707c:	8a7b      	ldrh	r3, [r7, #18]
 800707e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007082:	827b      	strh	r3, [r7, #18]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	8a7b      	ldrh	r3, [r7, #18]
 8007090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr

080070b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2280      	movs	r2, #128	; 0x80
 80070c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800710c:	b29b      	uxth	r3, r3
 800710e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007110:	68fb      	ldr	r3, [r7, #12]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr

0800711c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007132:	b480      	push	{r7}
 8007134:	b08d      	sub	sp, #52	; 0x34
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	4611      	mov	r1, r2
 800713e:	461a      	mov	r2, r3
 8007140:	460b      	mov	r3, r1
 8007142:	80fb      	strh	r3, [r7, #6]
 8007144:	4613      	mov	r3, r2
 8007146:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007148:	88bb      	ldrh	r3, [r7, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	005a      	lsls	r2, r3, #1
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800716a:	e01e      	b.n	80071aa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	3301      	adds	r3, #1
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	b29a      	uxth	r2, r3
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	3302      	adds	r3, #2
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	3302      	adds	r3, #2
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	3301      	adds	r3, #1
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	3b01      	subs	r3, #1
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1dd      	bne.n	800716c <USB_WritePMA+0x3a>
  }
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	3734      	adds	r7, #52	; 0x34
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071bc:	b480      	push	{r7}
 80071be:	b08b      	sub	sp, #44	; 0x2c
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4611      	mov	r1, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	460b      	mov	r3, r1
 80071cc:	80fb      	strh	r3, [r7, #6]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071d2:	88bb      	ldrh	r3, [r7, #4]
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	005a      	lsls	r2, r3, #1
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
 80071f4:	e01b      	b.n	800722e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	3302      	adds	r3, #2
 8007202:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	0a1b      	lsrs	r3, r3, #8
 8007216:	b2da      	uxtb	r2, r3
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	3302      	adds	r3, #2
 8007226:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	3b01      	subs	r3, #1
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e0      	bne.n	80071f6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007234:	88bb      	ldrh	r3, [r7, #4]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	701a      	strb	r2, [r3, #0]
  }
}
 8007250:	bf00      	nop
 8007252:	372c      	adds	r7, #44	; 0x2c
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr

0800725a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7c1b      	ldrb	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d115      	bne.n	800729e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007276:	2202      	movs	r2, #2
 8007278:	2181      	movs	r1, #129	; 0x81
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fe9f 	bl	8008fbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	2202      	movs	r2, #2
 800728c:	2101      	movs	r1, #1
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fe95 	bl	8008fbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800729c:	e012      	b.n	80072c4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800729e:	2340      	movs	r3, #64	; 0x40
 80072a0:	2202      	movs	r2, #2
 80072a2:	2181      	movs	r1, #129	; 0x81
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fe8a 	bl	8008fbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072b0:	2340      	movs	r3, #64	; 0x40
 80072b2:	2202      	movs	r2, #2
 80072b4:	2101      	movs	r1, #1
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fe81 	bl	8008fbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072c4:	2308      	movs	r3, #8
 80072c6:	2203      	movs	r2, #3
 80072c8:	2182      	movs	r1, #130	; 0x82
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fe77 	bl	8008fbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072d6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072da:	f001 ff97 	bl	800920c <USBD_static_malloc>
 80072de:	4602      	mov	r2, r0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80072f0:	2301      	movs	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	e026      	b.n	8007344 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7c1b      	ldrb	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800732a:	2101      	movs	r1, #1
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 ff37 	bl	80091a0 <USBD_LL_PrepareReceive>
 8007332:	e007      	b.n	8007344 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800733a:	2340      	movs	r3, #64	; 0x40
 800733c:	2101      	movs	r1, #1
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 ff2e 	bl	80091a0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800735e:	2181      	movs	r1, #129	; 0x81
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fe52 	bl	800900a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800736c:	2101      	movs	r1, #1
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fe4b 	bl	800900a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800737c:	2182      	movs	r1, #130	; 0x82
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fe43 	bl	800900a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00e      	beq.n	80073b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 ff3d 	bl	8009224 <USBD_static_free>
    pdev->pClassData = NULL;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d039      	beq.n	800745a <USBD_CDC_Setup+0x9e>
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d17f      	bne.n	80074ea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d029      	beq.n	8007446 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b25b      	sxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da11      	bge.n	8007420 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007408:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	88d2      	ldrh	r2, [r2, #6]
 800740e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007410:	6939      	ldr	r1, [r7, #16]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	88db      	ldrh	r3, [r3, #6]
 8007416:	461a      	mov	r2, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fa0a 	bl	8008832 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800741e:	e06b      	b.n	80074f8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785a      	ldrb	r2, [r3, #1]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007436:	6939      	ldr	r1, [r7, #16]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	88db      	ldrh	r3, [r3, #6]
 800743c:	461a      	mov	r2, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fa25 	bl	800888e <USBD_CtlPrepareRx>
      break;
 8007444:	e058      	b.n	80074f8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	7850      	ldrb	r0, [r2, #1]
 8007452:	2200      	movs	r2, #0
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	4798      	blx	r3
      break;
 8007458:	e04e      	b.n	80074f8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b0b      	cmp	r3, #11
 8007460:	d02e      	beq.n	80074c0 <USBD_CDC_Setup+0x104>
 8007462:	2b0b      	cmp	r3, #11
 8007464:	dc38      	bgt.n	80074d8 <USBD_CDC_Setup+0x11c>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <USBD_CDC_Setup+0xb4>
 800746a:	2b0a      	cmp	r3, #10
 800746c:	d014      	beq.n	8007498 <USBD_CDC_Setup+0xdc>
 800746e:	e033      	b.n	80074d8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007476:	2b03      	cmp	r3, #3
 8007478:	d107      	bne.n	800748a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800747a:	f107 030c 	add.w	r3, r7, #12
 800747e:	2202      	movs	r2, #2
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 f9d5 	bl	8008832 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007488:	e02e      	b.n	80074e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f966 	bl	800875e <USBD_CtlError>
            ret = USBD_FAIL;
 8007492:	2302      	movs	r3, #2
 8007494:	75fb      	strb	r3, [r7, #23]
          break;
 8007496:	e027      	b.n	80074e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d107      	bne.n	80074b2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80074a2:	f107 030f 	add.w	r3, r7, #15
 80074a6:	2201      	movs	r2, #1
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 f9c1 	bl	8008832 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074b0:	e01a      	b.n	80074e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f952 	bl	800875e <USBD_CtlError>
            ret = USBD_FAIL;
 80074ba:	2302      	movs	r3, #2
 80074bc:	75fb      	strb	r3, [r7, #23]
          break;
 80074be:	e013      	b.n	80074e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d00d      	beq.n	80074e6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 f946 	bl	800875e <USBD_CtlError>
            ret = USBD_FAIL;
 80074d2:	2302      	movs	r3, #2
 80074d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074d6:	e006      	b.n	80074e6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 f93f 	bl	800875e <USBD_CtlError>
          ret = USBD_FAIL;
 80074e0:	2302      	movs	r3, #2
 80074e2:	75fb      	strb	r3, [r7, #23]
          break;
 80074e4:	e000      	b.n	80074e8 <USBD_CDC_Setup+0x12c>
          break;
 80074e6:	bf00      	nop
      }
      break;
 80074e8:	e006      	b.n	80074f8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f936 	bl	800875e <USBD_CtlError>
      ret = USBD_FAIL;
 80074f2:	2302      	movs	r3, #2
 80074f4:	75fb      	strb	r3, [r7, #23]
      break;
 80074f6:	bf00      	nop
  }

  return ret;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800751c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d03a      	beq.n	800759e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	331c      	adds	r3, #28
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d029      	beq.n	8007592 <USBD_CDC_DataIn+0x90>
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	331c      	adds	r3, #28
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	78f9      	ldrb	r1, [r7, #3]
 8007552:	68b8      	ldr	r0, [r7, #8]
 8007554:	460b      	mov	r3, r1
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4403      	add	r3, r0
 800755e:	3338      	adds	r3, #56	; 0x38
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	fbb2 f1f3 	udiv	r1, r2, r3
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d110      	bne.n	8007592 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	331c      	adds	r3, #28
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007584:	78f9      	ldrb	r1, [r7, #3]
 8007586:	2300      	movs	r3, #0
 8007588:	2200      	movs	r2, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 fde5 	bl	800915a <USBD_LL_Transmit>
 8007590:	e003      	b.n	800759a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 fe10 	bl	80091e6 <USBD_LL_GetRxDataSize>
 80075c6:	4602      	mov	r2, r0
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80075ec:	4611      	mov	r1, r2
 80075ee:	4798      	blx	r3

    return USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e000      	b.n	80075f6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80075f4:	2302      	movs	r3, #2
  }
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007614:	2b00      	cmp	r3, #0
 8007616:	d015      	beq.n	8007644 <USBD_CDC_EP0_RxReady+0x46>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800761e:	2bff      	cmp	r3, #255	; 0xff
 8007620:	d010      	beq.n	8007644 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007630:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007638:	b292      	uxth	r2, r2
 800763a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	22ff      	movs	r2, #255	; 0xff
 8007640:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2243      	movs	r2, #67	; 0x43
 800765c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800765e:	4b03      	ldr	r3, [pc, #12]	; (800766c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200000cc 	.word	0x200000cc

08007670 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2243      	movs	r2, #67	; 0x43
 800767c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800767e:	4b03      	ldr	r3, [pc, #12]	; (800768c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20000088 	.word	0x20000088

08007690 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2243      	movs	r2, #67	; 0x43
 800769c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000110 	.word	0x20000110

080076b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	220a      	movs	r2, #10
 80076bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000044 	.word	0x20000044

080076d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80076da:	2302      	movs	r3, #2
 80076dc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007710:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr

08007754 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007762:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01c      	beq.n	80077a8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007774:	2b00      	cmp	r3, #0
 8007776:	d115      	bne.n	80077a4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007796:	b29b      	uxth	r3, r3
 8007798:	2181      	movs	r1, #129	; 0x81
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fcdd 	bl	800915a <USBD_LL_Transmit>

      return USBD_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e002      	b.n	80077aa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80077a8:	2302      	movs	r3, #2
  }
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7c1b      	ldrb	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077de:	2101      	movs	r1, #1
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 fcdd 	bl	80091a0 <USBD_LL_PrepareReceive>
 80077e6:	e007      	b.n	80077f8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ee:	2340      	movs	r3, #64	; 0x40
 80077f0:	2101      	movs	r1, #1
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fcd4 	bl	80091a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	4613      	mov	r3, r2
 8007812:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800781a:	2302      	movs	r3, #2
 800781c:	e01a      	b.n	8007854 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	79fa      	ldrb	r2, [r7, #7]
 800784a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f001 fb41 	bl	8008ed4 <USBD_LL_Init>

  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]
 800787c:	e001      	b.n	8007882 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800787e:	2302      	movs	r3, #2
 8007880:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fb76 	bl	8008f88 <USBD_LL_Start>

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078c6:	2302      	movs	r3, #2
 80078c8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00c      	beq.n	80078ee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	4611      	mov	r1, r2
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	4611      	mov	r1, r2
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fed8 	bl	80086e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	2b02      	cmp	r3, #2
 8007958:	d016      	beq.n	8007988 <USBD_LL_SetupStage+0x6a>
 800795a:	2b02      	cmp	r3, #2
 800795c:	d81c      	bhi.n	8007998 <USBD_LL_SetupStage+0x7a>
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <USBD_LL_SetupStage+0x4a>
 8007962:	2b01      	cmp	r3, #1
 8007964:	d008      	beq.n	8007978 <USBD_LL_SetupStage+0x5a>
 8007966:	e017      	b.n	8007998 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9cb 	bl	8007d0c <USBD_StdDevReq>
      break;
 8007976:	e01a      	b.n	80079ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa2d 	bl	8007de0 <USBD_StdItfReq>
      break;
 8007986:	e012      	b.n	80079ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa6d 	bl	8007e70 <USBD_StdEPReq>
      break;
 8007996:	e00a      	b.n	80079ae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800799e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fb4e 	bl	8009048 <USBD_LL_StallEP>
      break;
 80079ac:	bf00      	nop
  }

  return USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	460b      	mov	r3, r1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d14b      	bne.n	8007a64 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d134      	bne.n	8007a48 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d919      	bls.n	8007a1e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	1ad2      	subs	r2, r2, r3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d203      	bcs.n	8007a0c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	e002      	b.n	8007a12 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 ff57 	bl	80088ca <USBD_CtlContinueRx>
 8007a1c:	e038      	b.n	8007a90 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d105      	bne.n	8007a40 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 ff54 	bl	80088ee <USBD_CtlSendStatus>
 8007a46:	e023      	b.n	8007a90 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a4e:	2b05      	cmp	r3, #5
 8007a50:	d11e      	bne.n	8007a90 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f001 faf3 	bl	8009048 <USBD_LL_StallEP>
 8007a62:	e015      	b.n	8007a90 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d108      	bne.n	8007a8c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	7afa      	ldrb	r2, [r7, #11]
 8007a84:	4611      	mov	r1, r2
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	4798      	blx	r3
 8007a8a:	e001      	b.n	8007a90 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e000      	b.n	8007a92 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d17f      	bne.n	8007bae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d15c      	bne.n	8007b78 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d915      	bls.n	8007af6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	1ad2      	subs	r2, r2, r3
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fec1 	bl	800886a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2200      	movs	r2, #0
 8007aec:	2100      	movs	r1, #0
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f001 fb56 	bl	80091a0 <USBD_LL_PrepareReceive>
 8007af4:	e04e      	b.n	8007b94 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	6912      	ldr	r2, [r2, #16]
 8007afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b02:	fb01 f202 	mul.w	r2, r1, r2
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11c      	bne.n	8007b46 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d316      	bcc.n	8007b46 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d20f      	bcs.n	8007b46 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 fe9d 	bl	800886a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f001 fb2e 	bl	80091a0 <USBD_LL_PrepareReceive>
 8007b44:	e026      	b.n	8007b94 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d105      	bne.n	8007b68 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007b68:	2180      	movs	r1, #128	; 0x80
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 fa6c 	bl	8009048 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fecf 	bl	8008914 <USBD_CtlReceiveStatus>
 8007b76:	e00d      	b.n	8007b94 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d004      	beq.n	8007b8c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f001 fa5a 	bl	8009048 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d11d      	bne.n	8007bda <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fe81 	bl	80078a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bac:	e015      	b.n	8007bda <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d108      	bne.n	8007bd6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	7afa      	ldrb	r2, [r7, #11]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	4798      	blx	r3
 8007bd4:	e001      	b.n	8007bda <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e000      	b.n	8007bdc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 f9e3 	bl	8008fbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2240      	movs	r2, #64	; 0x40
 8007c04:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c08:	2340      	movs	r3, #64	; 0x40
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2180      	movs	r1, #128	; 0x80
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 f9d5 	bl	8008fbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2240      	movs	r2, #64	; 0x40
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6852      	ldr	r2, [r2, #4]
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	4611      	mov	r1, r2
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
  }

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d105      	bne.n	8007cca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr

08007cd6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d10b      	bne.n	8007d00 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d005      	beq.n	8007d32 <USBD_StdDevReq+0x26>
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	d84f      	bhi.n	8007dca <USBD_StdDevReq+0xbe>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d009      	beq.n	8007d42 <USBD_StdDevReq+0x36>
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d14b      	bne.n	8007dca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
      break;
 8007d40:	e048      	b.n	8007dd4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	785b      	ldrb	r3, [r3, #1]
 8007d46:	2b09      	cmp	r3, #9
 8007d48:	d839      	bhi.n	8007dbe <USBD_StdDevReq+0xb2>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <USBD_StdDevReq+0x44>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007db5 	.word	0x08007db5
 8007d58:	08007dbf 	.word	0x08007dbf
 8007d5c:	08007dab 	.word	0x08007dab
 8007d60:	08007dbf 	.word	0x08007dbf
 8007d64:	08007d83 	.word	0x08007d83
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007dbf 	.word	0x08007dbf
 8007d70:	08007d97 	.word	0x08007d97
 8007d74:	08007d8d 	.word	0x08007d8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9dc 	bl	8008138 <USBD_GetDescriptor>
          break;
 8007d80:	e022      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fb3f 	bl	8008408 <USBD_SetAddress>
          break;
 8007d8a:	e01d      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fb7e 	bl	8008490 <USBD_SetConfig>
          break;
 8007d94:	e018      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fc07 	bl	80085ac <USBD_GetConfig>
          break;
 8007d9e:	e013      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fc37 	bl	8008616 <USBD_GetStatus>
          break;
 8007da8:	e00e      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc65 	bl	800867c <USBD_SetFeature>
          break;
 8007db2:	e009      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fc74 	bl	80086a4 <USBD_ClrFeature>
          break;
 8007dbc:	e004      	b.n	8007dc8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fccc 	bl	800875e <USBD_CtlError>
          break;
 8007dc6:	bf00      	nop
      }
      break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fcc6 	bl	800875e <USBD_CtlError>
      break;
 8007dd2:	bf00      	nop
  }

  return ret;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop

08007de0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d005      	beq.n	8007e06 <USBD_StdItfReq+0x26>
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d82e      	bhi.n	8007e5c <USBD_StdItfReq+0x7c>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <USBD_StdItfReq+0x26>
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d12a      	bne.n	8007e5c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d81d      	bhi.n	8007e4e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	889b      	ldrh	r3, [r3, #4]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d813      	bhi.n	8007e44 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d110      	bne.n	8007e58 <USBD_StdItfReq+0x78>
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10d      	bne.n	8007e58 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fd56 	bl	80088ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e42:	e009      	b.n	8007e58 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fc89 	bl	800875e <USBD_CtlError>
          break;
 8007e4c:	e004      	b.n	8007e58 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fc84 	bl	800875e <USBD_CtlError>
          break;
 8007e56:	e000      	b.n	8007e5a <USBD_StdItfReq+0x7a>
          break;
 8007e58:	bf00      	nop
      }
      break;
 8007e5a:	e004      	b.n	8007e66 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fc7d 	bl	800875e <USBD_CtlError>
      break;
 8007e64:	bf00      	nop
  }

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	889b      	ldrh	r3, [r3, #4]
 8007e82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d007      	beq.n	8007ea0 <USBD_StdEPReq+0x30>
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	f200 8146 	bhi.w	8008122 <USBD_StdEPReq+0x2b2>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <USBD_StdEPReq+0x40>
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	f040 8141 	bne.w	8008122 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
      break;
 8007eae:	e13d      	b.n	800812c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d10a      	bne.n	8007ed2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	e12d      	b.n	800812e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d007      	beq.n	8007eea <USBD_StdEPReq+0x7a>
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	f300 811b 	bgt.w	8008116 <USBD_StdEPReq+0x2a6>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d072      	beq.n	8007fca <USBD_StdEPReq+0x15a>
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d03a      	beq.n	8007f5e <USBD_StdEPReq+0xee>
 8007ee8:	e115      	b.n	8008116 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d002      	beq.n	8007efa <USBD_StdEPReq+0x8a>
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d015      	beq.n	8007f24 <USBD_StdEPReq+0xb4>
 8007ef8:	e02b      	b.n	8007f52 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <USBD_StdEPReq+0xaa>
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d009      	beq.n	8007f1a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 f89c 	bl	8009048 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 f898 	bl	8009048 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f18:	e020      	b.n	8007f5c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fc1e 	bl	800875e <USBD_CtlError>
              break;
 8007f22:	e01b      	b.n	8007f5c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	885b      	ldrh	r3, [r3, #2]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10e      	bne.n	8007f4a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <USBD_StdEPReq+0xda>
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b80      	cmp	r3, #128	; 0x80
 8007f36:	d008      	beq.n	8007f4a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	88db      	ldrh	r3, [r3, #6]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f87f 	bl	8009048 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fccf 	bl	80088ee <USBD_CtlSendStatus>

              break;
 8007f50:	e004      	b.n	8007f5c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc02 	bl	800875e <USBD_CtlError>
              break;
 8007f5a:	bf00      	nop
          }
          break;
 8007f5c:	e0e0      	b.n	8008120 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d002      	beq.n	8007f6e <USBD_StdEPReq+0xfe>
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d015      	beq.n	8007f98 <USBD_StdEPReq+0x128>
 8007f6c:	e026      	b.n	8007fbc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00c      	beq.n	8007f8e <USBD_StdEPReq+0x11e>
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b80      	cmp	r3, #128	; 0x80
 8007f78:	d009      	beq.n	8007f8e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 f862 	bl	8009048 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f84:	2180      	movs	r1, #128	; 0x80
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f85e 	bl	8009048 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f8c:	e01c      	b.n	8007fc8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fbe4 	bl	800875e <USBD_CtlError>
              break;
 8007f96:	e017      	b.n	8007fc8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	885b      	ldrh	r3, [r3, #2]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d112      	bne.n	8007fc6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 f869 	bl	8009086 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc9a 	bl	80088ee <USBD_CtlSendStatus>
              }
              break;
 8007fba:	e004      	b.n	8007fc6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fbcd 	bl	800875e <USBD_CtlError>
              break;
 8007fc4:	e000      	b.n	8007fc8 <USBD_StdEPReq+0x158>
              break;
 8007fc6:	bf00      	nop
          }
          break;
 8007fc8:	e0aa      	b.n	8008120 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d002      	beq.n	8007fda <USBD_StdEPReq+0x16a>
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d032      	beq.n	800803e <USBD_StdEPReq+0x1ce>
 8007fd8:	e097      	b.n	800810a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <USBD_StdEPReq+0x180>
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b80      	cmp	r3, #128	; 0x80
 8007fe4:	d004      	beq.n	8007ff0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fbb8 	bl	800875e <USBD_CtlError>
                break;
 8007fee:	e091      	b.n	8008114 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da0b      	bge.n	8008010 <USBD_StdEPReq+0x1a0>
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	3310      	adds	r3, #16
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	3304      	adds	r3, #4
 800800e:	e00b      	b.n	8008028 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	4413      	add	r3, r2
 8008026:	3304      	adds	r3, #4
 8008028:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2202      	movs	r2, #2
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fbfb 	bl	8008832 <USBD_CtlSendData>
              break;
 800803c:	e06a      	b.n	8008114 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800803e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008042:	2b00      	cmp	r3, #0
 8008044:	da11      	bge.n	800806a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	f003 020f 	and.w	r2, r3, #15
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	3318      	adds	r3, #24
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d117      	bne.n	8008090 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb7b 	bl	800875e <USBD_CtlError>
                  break;
 8008068:	e054      	b.n	8008114 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	f003 020f 	and.w	r2, r3, #15
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d104      	bne.n	8008090 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fb68 	bl	800875e <USBD_CtlError>
                  break;
 800808e:	e041      	b.n	8008114 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da0b      	bge.n	80080b0 <USBD_StdEPReq+0x240>
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	3310      	adds	r3, #16
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	3304      	adds	r3, #4
 80080ae:	e00b      	b.n	80080c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4413      	add	r3, r2
 80080c6:	3304      	adds	r3, #4
 80080c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <USBD_StdEPReq+0x266>
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d103      	bne.n	80080de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	e00e      	b.n	80080fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ffee 	bl	80090c4 <USBD_LL_IsStallEP>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	e002      	b.n	80080fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2202      	movs	r2, #2
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fb95 	bl	8008832 <USBD_CtlSendData>
              break;
 8008108:	e004      	b.n	8008114 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fb26 	bl	800875e <USBD_CtlError>
              break;
 8008112:	bf00      	nop
          }
          break;
 8008114:	e004      	b.n	8008120 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fb20 	bl	800875e <USBD_CtlError>
          break;
 800811e:	bf00      	nop
      }
      break;
 8008120:	e004      	b.n	800812c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fb1a 	bl	800875e <USBD_CtlError>
      break;
 800812a:	bf00      	nop
  }

  return ret;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	885b      	ldrh	r3, [r3, #2]
 8008152:	0a1b      	lsrs	r3, r3, #8
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	2b06      	cmp	r3, #6
 800815a:	f200 8128 	bhi.w	80083ae <USBD_GetDescriptor+0x276>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <USBD_GetDescriptor+0x2c>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008181 	.word	0x08008181
 8008168:	08008199 	.word	0x08008199
 800816c:	080081d9 	.word	0x080081d9
 8008170:	080083af 	.word	0x080083af
 8008174:	080083af 	.word	0x080083af
 8008178:	0800834f 	.word	0x0800834f
 800817c:	0800837b 	.word	0x0800837b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7c12      	ldrb	r2, [r2, #16]
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	60f8      	str	r0, [r7, #12]
      break;
 8008196:	e112      	b.n	80083be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7c1b      	ldrb	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10d      	bne.n	80081bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	f107 0208 	add.w	r2, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3301      	adds	r3, #1
 80081b6:	2202      	movs	r2, #2
 80081b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081ba:	e100      	b.n	80083be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	f107 0208 	add.w	r2, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	2202      	movs	r2, #2
 80081d4:	701a      	strb	r2, [r3, #0]
      break;
 80081d6:	e0f2      	b.n	80083be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	885b      	ldrh	r3, [r3, #2]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b05      	cmp	r3, #5
 80081e0:	f200 80ac 	bhi.w	800833c <USBD_GetDescriptor+0x204>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBD_GetDescriptor+0xb4>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	08008205 	.word	0x08008205
 80081f0:	08008239 	.word	0x08008239
 80081f4:	0800826d 	.word	0x0800826d
 80081f8:	080082a1 	.word	0x080082a1
 80081fc:	080082d5 	.word	0x080082d5
 8008200:	08008309 	.word	0x08008309
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	7c12      	ldrb	r2, [r2, #16]
 800821c:	f107 0108 	add.w	r1, r7, #8
 8008220:	4610      	mov	r0, r2
 8008222:	4798      	blx	r3
 8008224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008226:	e091      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa97 	bl	800875e <USBD_CtlError>
            err++;
 8008230:	7afb      	ldrb	r3, [r7, #11]
 8008232:	3301      	adds	r3, #1
 8008234:	72fb      	strb	r3, [r7, #11]
          break;
 8008236:	e089      	b.n	800834c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	7c12      	ldrb	r2, [r2, #16]
 8008250:	f107 0108 	add.w	r1, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800825a:	e077      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa7d 	bl	800875e <USBD_CtlError>
            err++;
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	3301      	adds	r3, #1
 8008268:	72fb      	strb	r3, [r7, #11]
          break;
 800826a:	e06f      	b.n	800834c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00b      	beq.n	8008290 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	7c12      	ldrb	r2, [r2, #16]
 8008284:	f107 0108 	add.w	r1, r7, #8
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800828e:	e05d      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa63 	bl	800875e <USBD_CtlError>
            err++;
 8008298:	7afb      	ldrb	r3, [r7, #11]
 800829a:	3301      	adds	r3, #1
 800829c:	72fb      	strb	r3, [r7, #11]
          break;
 800829e:	e055      	b.n	800834c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7c12      	ldrb	r2, [r2, #16]
 80082b8:	f107 0108 	add.w	r1, r7, #8
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c2:	e043      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa49 	bl	800875e <USBD_CtlError>
            err++;
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	3301      	adds	r3, #1
 80082d0:	72fb      	strb	r3, [r7, #11]
          break;
 80082d2:	e03b      	b.n	800834c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	7c12      	ldrb	r2, [r2, #16]
 80082ec:	f107 0108 	add.w	r1, r7, #8
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082f6:	e029      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa2f 	bl	800875e <USBD_CtlError>
            err++;
 8008300:	7afb      	ldrb	r3, [r7, #11]
 8008302:	3301      	adds	r3, #1
 8008304:	72fb      	strb	r3, [r7, #11]
          break;
 8008306:	e021      	b.n	800834c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832a:	e00f      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa15 	bl	800875e <USBD_CtlError>
            err++;
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	3301      	adds	r3, #1
 8008338:	72fb      	strb	r3, [r7, #11]
          break;
 800833a:	e007      	b.n	800834c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa0d 	bl	800875e <USBD_CtlError>
          err++;
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	3301      	adds	r3, #1
 8008348:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800834a:	e038      	b.n	80083be <USBD_GetDescriptor+0x286>
 800834c:	e037      	b.n	80083be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7c1b      	ldrb	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835e:	f107 0208 	add.w	r2, r7, #8
 8008362:	4610      	mov	r0, r2
 8008364:	4798      	blx	r3
 8008366:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008368:	e029      	b.n	80083be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f9f6 	bl	800875e <USBD_CtlError>
        err++;
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	3301      	adds	r3, #1
 8008376:	72fb      	strb	r3, [r7, #11]
      break;
 8008378:	e021      	b.n	80083be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7c1b      	ldrb	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10d      	bne.n	800839e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838a:	f107 0208 	add.w	r2, r7, #8
 800838e:	4610      	mov	r0, r2
 8008390:	4798      	blx	r3
 8008392:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	2207      	movs	r2, #7
 800839a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800839c:	e00f      	b.n	80083be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f9dc 	bl	800875e <USBD_CtlError>
        err++;
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	3301      	adds	r3, #1
 80083aa:	72fb      	strb	r3, [r7, #11]
      break;
 80083ac:	e007      	b.n	80083be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f9d4 	bl	800875e <USBD_CtlError>
      err++;
 80083b6:	7afb      	ldrb	r3, [r7, #11]
 80083b8:	3301      	adds	r3, #1
 80083ba:	72fb      	strb	r3, [r7, #11]
      break;
 80083bc:	bf00      	nop
  }

  if (err != 0U)
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d11c      	bne.n	80083fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80083c4:	893b      	ldrh	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d011      	beq.n	80083ee <USBD_GetDescriptor+0x2b6>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	88db      	ldrh	r3, [r3, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00d      	beq.n	80083ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88da      	ldrh	r2, [r3, #6]
 80083d6:	893b      	ldrh	r3, [r7, #8]
 80083d8:	4293      	cmp	r3, r2
 80083da:	bf28      	it	cs
 80083dc:	4613      	movcs	r3, r2
 80083de:	b29b      	uxth	r3, r3
 80083e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083e2:	893b      	ldrh	r3, [r7, #8]
 80083e4:	461a      	mov	r2, r3
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa22 	bl	8008832 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	88db      	ldrh	r3, [r3, #6]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa79 	bl	80088ee <USBD_CtlSendStatus>
 80083fc:	e000      	b.n	8008400 <USBD_GetDescriptor+0x2c8>
    return;
 80083fe:	bf00      	nop
    }
  }
}
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop

08008408 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	889b      	ldrh	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d130      	bne.n	800847c <USBD_SetAddress+0x74>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d12c      	bne.n	800847c <USBD_SetAddress+0x74>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	885b      	ldrh	r3, [r3, #2]
 8008426:	2b7f      	cmp	r3, #127	; 0x7f
 8008428:	d828      	bhi.n	800847c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	885b      	ldrh	r3, [r3, #2]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008434:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843c:	2b03      	cmp	r3, #3
 800843e:	d104      	bne.n	800844a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f98b 	bl	800875e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008448:	e01d      	b.n	8008486 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7bfa      	ldrb	r2, [r7, #15]
 800844e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fe60 	bl	800911c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa46 	bl	80088ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d004      	beq.n	8008472 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008470:	e009      	b.n	8008486 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847a:	e004      	b.n	8008486 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f96d 	bl	800875e <USBD_CtlError>
  }
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	4b41      	ldr	r3, [pc, #260]	; (80085a8 <USBD_SetConfig+0x118>)
 80084a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084a4:	4b40      	ldr	r3, [pc, #256]	; (80085a8 <USBD_SetConfig+0x118>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d904      	bls.n	80084b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f955 	bl	800875e <USBD_CtlError>
 80084b4:	e075      	b.n	80085a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d002      	beq.n	80084c6 <USBD_SetConfig+0x36>
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d023      	beq.n	800850c <USBD_SetConfig+0x7c>
 80084c4:	e062      	b.n	800858c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80084c6:	4b38      	ldr	r3, [pc, #224]	; (80085a8 <USBD_SetConfig+0x118>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d01a      	beq.n	8008504 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80084ce:	4b36      	ldr	r3, [pc, #216]	; (80085a8 <USBD_SetConfig+0x118>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2203      	movs	r2, #3
 80084dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084e0:	4b31      	ldr	r3, [pc, #196]	; (80085a8 <USBD_SetConfig+0x118>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff f9e7 	bl	80078ba <USBD_SetClassConfig>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d104      	bne.n	80084fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f932 	bl	800875e <USBD_CtlError>
            return;
 80084fa:	e052      	b.n	80085a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f9f6 	bl	80088ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008502:	e04e      	b.n	80085a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f9f2 	bl	80088ee <USBD_CtlSendStatus>
        break;
 800850a:	e04a      	b.n	80085a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800850c:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <USBD_SetConfig+0x118>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d112      	bne.n	800853a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800851c:	4b22      	ldr	r3, [pc, #136]	; (80085a8 <USBD_SetConfig+0x118>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008526:	4b20      	ldr	r3, [pc, #128]	; (80085a8 <USBD_SetConfig+0x118>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff f9e3 	bl	80078f8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f9db 	bl	80088ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008538:	e033      	b.n	80085a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <USBD_SetConfig+0x118>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	429a      	cmp	r2, r3
 8008546:	d01d      	beq.n	8008584 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff f9d1 	bl	80078f8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <USBD_SetConfig+0x118>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008560:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <USBD_SetConfig+0x118>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff f9a7 	bl	80078ba <USBD_SetClassConfig>
 800856c:	4603      	mov	r3, r0
 800856e:	2b02      	cmp	r3, #2
 8008570:	d104      	bne.n	800857c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f8f2 	bl	800875e <USBD_CtlError>
            return;
 800857a:	e012      	b.n	80085a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9b6 	bl	80088ee <USBD_CtlSendStatus>
        break;
 8008582:	e00e      	b.n	80085a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f9b2 	bl	80088ee <USBD_CtlSendStatus>
        break;
 800858a:	e00a      	b.n	80085a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f8e5 	bl	800875e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008594:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <USBD_SetConfig+0x118>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff f9ac 	bl	80078f8 <USBD_ClrClassConfig>
        break;
 80085a0:	bf00      	nop
    }
  }
}
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200003c4 	.word	0x200003c4

080085ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	88db      	ldrh	r3, [r3, #6]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d004      	beq.n	80085c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f8cc 	bl	800875e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085c6:	e022      	b.n	800860e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	dc02      	bgt.n	80085d8 <USBD_GetConfig+0x2c>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dc03      	bgt.n	80085de <USBD_GetConfig+0x32>
 80085d6:	e015      	b.n	8008604 <USBD_GetConfig+0x58>
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d00b      	beq.n	80085f4 <USBD_GetConfig+0x48>
 80085dc:	e012      	b.n	8008604 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3308      	adds	r3, #8
 80085e8:	2201      	movs	r2, #1
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f920 	bl	8008832 <USBD_CtlSendData>
        break;
 80085f2:	e00c      	b.n	800860e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	2201      	movs	r2, #1
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f918 	bl	8008832 <USBD_CtlSendData>
        break;
 8008602:	e004      	b.n	800860e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f8a9 	bl	800875e <USBD_CtlError>
        break;
 800860c:	bf00      	nop
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008626:	3b01      	subs	r3, #1
 8008628:	2b02      	cmp	r3, #2
 800862a:	d81e      	bhi.n	800866a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	88db      	ldrh	r3, [r3, #6]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d004      	beq.n	800863e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f891 	bl	800875e <USBD_CtlError>
        break;
 800863c:	e01a      	b.n	8008674 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f043 0202 	orr.w	r2, r3, #2
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	330c      	adds	r3, #12
 800865e:	2202      	movs	r2, #2
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f8e5 	bl	8008832 <USBD_CtlSendData>
      break;
 8008668:	e004      	b.n	8008674 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f876 	bl	800875e <USBD_CtlError>
      break;
 8008672:	bf00      	nop
  }
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	885b      	ldrh	r3, [r3, #2]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d106      	bne.n	800869c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f929 	bl	80088ee <USBD_CtlSendStatus>
  }
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d80b      	bhi.n	80086d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	885b      	ldrh	r3, [r3, #2]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d10c      	bne.n	80086dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f90f 	bl	80088ee <USBD_CtlSendStatus>
      }
      break;
 80086d0:	e004      	b.n	80086dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f842 	bl	800875e <USBD_CtlError>
      break;
 80086da:	e000      	b.n	80086de <USBD_ClrFeature+0x3a>
      break;
 80086dc:	bf00      	nop
  }
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781a      	ldrb	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	785a      	ldrb	r2, [r3, #1]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	3302      	adds	r3, #2
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	b29a      	uxth	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	3303      	adds	r3, #3
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	b29b      	uxth	r3, r3
 8008714:	4413      	add	r3, r2
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	3304      	adds	r3, #4
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	b29a      	uxth	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	3305      	adds	r3, #5
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	b29b      	uxth	r3, r3
 8008730:	4413      	add	r3, r2
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3306      	adds	r3, #6
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b29a      	uxth	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	3307      	adds	r3, #7
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	b29b      	uxth	r3, r3
 800874c:	4413      	add	r3, r2
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	80da      	strh	r2, [r3, #6]

}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008768:	2180      	movs	r1, #128	; 0x80
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fc6c 	bl	8009048 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008770:	2100      	movs	r1, #0
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fc68 	bl	8009048 <USBD_LL_StallEP>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d032      	beq.n	80087fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f834 	bl	8008804 <USBD_GetLen>
 800879c:	4603      	mov	r3, r0
 800879e:	3301      	adds	r3, #1
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	75fa      	strb	r2, [r7, #23]
 80087b0:	461a      	mov	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4413      	add	r3, r2
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	75fa      	strb	r2, [r7, #23]
 80087c2:	461a      	mov	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4413      	add	r3, r2
 80087c8:	2203      	movs	r2, #3
 80087ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80087cc:	e012      	b.n	80087f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	60fa      	str	r2, [r7, #12]
 80087d4:	7dfa      	ldrb	r2, [r7, #23]
 80087d6:	1c51      	adds	r1, r2, #1
 80087d8:	75f9      	strb	r1, [r7, #23]
 80087da:	4611      	mov	r1, r2
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	440a      	add	r2, r1
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	75fa      	strb	r2, [r7, #23]
 80087ea:	461a      	mov	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4413      	add	r3, r2
 80087f0:	2200      	movs	r2, #0
 80087f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e8      	bne.n	80087ce <USBD_GetString+0x4e>
    }
  }
}
 80087fc:	bf00      	nop
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008810:	e005      	b.n	800881e <USBD_GetLen+0x1a>
  {
    len++;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	3301      	adds	r3, #1
 8008816:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3301      	adds	r3, #1
 800881c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f5      	bne.n	8008812 <USBD_GetLen+0xe>
  }

  return len;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	bc80      	pop	{r7}
 8008830:	4770      	bx	lr

08008832 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	4613      	mov	r3, r2
 800883e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2202      	movs	r2, #2
 8008844:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008854:	88fb      	ldrh	r3, [r7, #6]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	2100      	movs	r1, #0
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 fc7d 	bl	800915a <USBD_LL_Transmit>

  return USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	4613      	mov	r3, r2
 8008876:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fc6b 	bl	800915a <USBD_LL_Transmit>

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	4613      	mov	r3, r2
 800889a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2203      	movs	r2, #3
 80088a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088a4:	88fa      	ldrh	r2, [r7, #6]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fc70 	bl	80091a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	4613      	mov	r3, r2
 80088d6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	2100      	movs	r1, #0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fc5e 	bl	80091a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088fe:	2300      	movs	r3, #0
 8008900:	2200      	movs	r2, #0
 8008902:	2100      	movs	r1, #0
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc28 	bl	800915a <USBD_LL_Transmit>

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2205      	movs	r2, #5
 8008920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008924:	2300      	movs	r3, #0
 8008926:	2200      	movs	r2, #0
 8008928:	2100      	movs	r1, #0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc38 	bl	80091a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008940:	2200      	movs	r2, #0
 8008942:	4912      	ldr	r1, [pc, #72]	; (800898c <MX_USB_DEVICE_Init+0x50>)
 8008944:	4812      	ldr	r0, [pc, #72]	; (8008990 <MX_USB_DEVICE_Init+0x54>)
 8008946:	f7fe ff5e 	bl	8007806 <USBD_Init>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008950:	f7f8 fca2 	bl	8001298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008954:	490f      	ldr	r1, [pc, #60]	; (8008994 <MX_USB_DEVICE_Init+0x58>)
 8008956:	480e      	ldr	r0, [pc, #56]	; (8008990 <MX_USB_DEVICE_Init+0x54>)
 8008958:	f7fe ff80 	bl	800785c <USBD_RegisterClass>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008962:	f7f8 fc99 	bl	8001298 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008966:	490c      	ldr	r1, [pc, #48]	; (8008998 <MX_USB_DEVICE_Init+0x5c>)
 8008968:	4809      	ldr	r0, [pc, #36]	; (8008990 <MX_USB_DEVICE_Init+0x54>)
 800896a:	f7fe feb1 	bl	80076d0 <USBD_CDC_RegisterInterface>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008974:	f7f8 fc90 	bl	8001298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008978:	4805      	ldr	r0, [pc, #20]	; (8008990 <MX_USB_DEVICE_Init+0x54>)
 800897a:	f7fe ff88 	bl	800788e <USBD_Start>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008984:	f7f8 fc88 	bl	8001298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008988:	bf00      	nop
 800898a:	bd80      	pop	{r7, pc}
 800898c:	2000016c 	.word	0x2000016c
 8008990:	200003c8 	.word	0x200003c8
 8008994:	20000050 	.word	0x20000050
 8008998:	2000015c 	.word	0x2000015c

0800899c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089a0:	2200      	movs	r2, #0
 80089a2:	4905      	ldr	r1, [pc, #20]	; (80089b8 <CDC_Init_FS+0x1c>)
 80089a4:	4805      	ldr	r0, [pc, #20]	; (80089bc <CDC_Init_FS+0x20>)
 80089a6:	f7fe fea9 	bl	80076fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089aa:	4905      	ldr	r1, [pc, #20]	; (80089c0 <CDC_Init_FS+0x24>)
 80089ac:	4803      	ldr	r0, [pc, #12]	; (80089bc <CDC_Init_FS+0x20>)
 80089ae:	f7fe febe 	bl	800772e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80089b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20000a74 	.word	0x20000a74
 80089bc:	200003c8 	.word	0x200003c8
 80089c0:	2000068c 	.word	0x2000068c

080089c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
	...

080089d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
 80089e0:	4613      	mov	r3, r2
 80089e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b23      	cmp	r3, #35	; 0x23
 80089e8:	d85c      	bhi.n	8008aa4 <CDC_Control_FS+0xd0>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <CDC_Control_FS+0x1c>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008aa5 	.word	0x08008aa5
 80089f4:	08008aa5 	.word	0x08008aa5
 80089f8:	08008aa5 	.word	0x08008aa5
 80089fc:	08008aa5 	.word	0x08008aa5
 8008a00:	08008aa5 	.word	0x08008aa5
 8008a04:	08008aa5 	.word	0x08008aa5
 8008a08:	08008aa5 	.word	0x08008aa5
 8008a0c:	08008aa5 	.word	0x08008aa5
 8008a10:	08008aa5 	.word	0x08008aa5
 8008a14:	08008aa5 	.word	0x08008aa5
 8008a18:	08008aa5 	.word	0x08008aa5
 8008a1c:	08008aa5 	.word	0x08008aa5
 8008a20:	08008aa5 	.word	0x08008aa5
 8008a24:	08008aa5 	.word	0x08008aa5
 8008a28:	08008aa5 	.word	0x08008aa5
 8008a2c:	08008aa5 	.word	0x08008aa5
 8008a30:	08008aa5 	.word	0x08008aa5
 8008a34:	08008aa5 	.word	0x08008aa5
 8008a38:	08008aa5 	.word	0x08008aa5
 8008a3c:	08008aa5 	.word	0x08008aa5
 8008a40:	08008aa5 	.word	0x08008aa5
 8008a44:	08008aa5 	.word	0x08008aa5
 8008a48:	08008aa5 	.word	0x08008aa5
 8008a4c:	08008aa5 	.word	0x08008aa5
 8008a50:	08008aa5 	.word	0x08008aa5
 8008a54:	08008aa5 	.word	0x08008aa5
 8008a58:	08008aa5 	.word	0x08008aa5
 8008a5c:	08008aa5 	.word	0x08008aa5
 8008a60:	08008aa5 	.word	0x08008aa5
 8008a64:	08008aa5 	.word	0x08008aa5
 8008a68:	08008aa5 	.word	0x08008aa5
 8008a6c:	08008aa5 	.word	0x08008aa5
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008a93 	.word	0x08008a93
 8008a78:	08008aa5 	.word	0x08008aa5
 8008a7c:	08008aa5 	.word	0x08008aa5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <CDC_Control_FS+0xe0>)
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	6810      	ldr	r0, [r2, #0]
 8008a86:	6018      	str	r0, [r3, #0]
 8008a88:	8891      	ldrh	r1, [r2, #4]
 8008a8a:	7992      	ldrb	r2, [r2, #6]
 8008a8c:	8099      	strh	r1, [r3, #4]
 8008a8e:	719a      	strb	r2, [r3, #6]
    break;
 8008a90:	e009      	b.n	8008aa6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <CDC_Control_FS+0xe0>)
 8008a96:	6810      	ldr	r0, [r2, #0]
 8008a98:	6018      	str	r0, [r3, #0]
 8008a9a:	8891      	ldrh	r1, [r2, #4]
 8008a9c:	7992      	ldrb	r2, [r2, #6]
 8008a9e:	8099      	strh	r1, [r3, #4]
 8008aa0:	719a      	strb	r2, [r3, #6]
    break;
 8008aa2:	e000      	b.n	8008aa6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008aa4:	bf00      	nop
  }

  return (USBD_OK);
 8008aa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20000154 	.word	0x20000154

08008ab8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4807      	ldr	r0, [pc, #28]	; (8008ae4 <CDC_Receive_FS+0x2c>)
 8008ac6:	f7fe fe32 	bl	800772e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008aca:	4806      	ldr	r0, [pc, #24]	; (8008ae4 <CDC_Receive_FS+0x2c>)
 8008acc:	f7fe fe71 	bl	80077b2 <USBD_CDC_ReceivePacket>
  usb_data_rx(Buf,Len);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7f8 f850 	bl	8000b78 <usb_data_rx>
  return (USBD_OK);
 8008ad8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	200003c8 	.word	0x200003c8

08008ae8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <CDC_Transmit_FS+0x48>)
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e00b      	b.n	8008b26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b0e:	887b      	ldrh	r3, [r7, #2]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	4806      	ldr	r0, [pc, #24]	; (8008b30 <CDC_Transmit_FS+0x48>)
 8008b16:	f7fe fdf1 	bl	80076fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b1a:	4805      	ldr	r0, [pc, #20]	; (8008b30 <CDC_Transmit_FS+0x48>)
 8008b1c:	f7fe fe1a 	bl	8007754 <USBD_CDC_TransmitPacket>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200003c8 	.word	0x200003c8

08008b34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2212      	movs	r2, #18
 8008b44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b46:	4b03      	ldr	r3, [pc, #12]	; (8008b54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc80      	pop	{r7}
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000188 	.word	0x20000188

08008b58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2204      	movs	r2, #4
 8008b68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b6a:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	2000019c 	.word	0x2000019c

08008b7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d105      	bne.n	8008b9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	4907      	ldr	r1, [pc, #28]	; (8008bb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b92:	4808      	ldr	r0, [pc, #32]	; (8008bb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b94:	f7ff fdf4 	bl	8008780 <USBD_GetString>
 8008b98:	e004      	b.n	8008ba4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	4904      	ldr	r1, [pc, #16]	; (8008bb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b9e:	4805      	ldr	r0, [pc, #20]	; (8008bb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ba0:	f7ff fdee 	bl	8008780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba4:	4b02      	ldr	r3, [pc, #8]	; (8008bb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000e5c 	.word	0x20000e5c
 8008bb4:	0800aee8 	.word	0x0800aee8

08008bb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6039      	str	r1, [r7, #0]
 8008bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	4904      	ldr	r1, [pc, #16]	; (8008bd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bc8:	4804      	ldr	r0, [pc, #16]	; (8008bdc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bca:	f7ff fdd9 	bl	8008780 <USBD_GetString>
  return USBD_StrDesc;
 8008bce:	4b02      	ldr	r3, [pc, #8]	; (8008bd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000e5c 	.word	0x20000e5c
 8008bdc:	0800af00 	.word	0x0800af00

08008be0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	221a      	movs	r2, #26
 8008bf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bf2:	f000 f843 	bl	8008c7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bf6:	4b02      	ldr	r3, [pc, #8]	; (8008c00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	200001a0 	.word	0x200001a0

08008c04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d105      	bne.n	8008c22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4907      	ldr	r1, [pc, #28]	; (8008c38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c1a:	4808      	ldr	r0, [pc, #32]	; (8008c3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c1c:	f7ff fdb0 	bl	8008780 <USBD_GetString>
 8008c20:	e004      	b.n	8008c2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4904      	ldr	r1, [pc, #16]	; (8008c38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c28:	f7ff fdaa 	bl	8008780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000e5c 	.word	0x20000e5c
 8008c3c:	0800af14 	.word	0x0800af14

08008c40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c4c:	79fb      	ldrb	r3, [r7, #7]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d105      	bne.n	8008c5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	4907      	ldr	r1, [pc, #28]	; (8008c74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c56:	4808      	ldr	r0, [pc, #32]	; (8008c78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c58:	f7ff fd92 	bl	8008780 <USBD_GetString>
 8008c5c:	e004      	b.n	8008c68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	4904      	ldr	r1, [pc, #16]	; (8008c74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c62:	4805      	ldr	r0, [pc, #20]	; (8008c78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c64:	f7ff fd8c 	bl	8008780 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c68:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000e5c 	.word	0x20000e5c
 8008c78:	0800af20 	.word	0x0800af20

08008c7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c82:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <Get_SerialNum+0x44>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <Get_SerialNum+0x48>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <Get_SerialNum+0x4c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4413      	add	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	4909      	ldr	r1, [pc, #36]	; (8008ccc <Get_SerialNum+0x50>)
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f814 	bl	8008cd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cac:	2204      	movs	r2, #4
 8008cae:	4908      	ldr	r1, [pc, #32]	; (8008cd0 <Get_SerialNum+0x54>)
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f000 f80f 	bl	8008cd4 <IntToUnicode>
  }
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	1ffff7e8 	.word	0x1ffff7e8
 8008cc4:	1ffff7ec 	.word	0x1ffff7ec
 8008cc8:	1ffff7f0 	.word	0x1ffff7f0
 8008ccc:	200001a2 	.word	0x200001a2
 8008cd0:	200001b2 	.word	0x200001b2

08008cd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	75fb      	strb	r3, [r7, #23]
 8008cea:	e027      	b.n	8008d3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	0f1b      	lsrs	r3, r3, #28
 8008cf0:	2b09      	cmp	r3, #9
 8008cf2:	d80b      	bhi.n	8008d0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	0f1b      	lsrs	r3, r3, #28
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	440b      	add	r3, r1
 8008d04:	3230      	adds	r2, #48	; 0x30
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e00a      	b.n	8008d22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	0f1b      	lsrs	r3, r3, #28
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	4619      	mov	r1, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	440b      	add	r3, r1
 8008d1c:	3237      	adds	r2, #55	; 0x37
 8008d1e:	b2d2      	uxtb	r2, r2
 8008d20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4413      	add	r3, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
 8008d3c:	7dfa      	ldrb	r2, [r7, #23]
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d3d3      	bcc.n	8008cec <IntToUnicode+0x18>
  }
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a0d      	ldr	r2, [pc, #52]	; (8008d94 <HAL_PCD_MspInit+0x44>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d113      	bne.n	8008d8a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d62:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <HAL_PCD_MspInit+0x48>)
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	4a0c      	ldr	r2, [pc, #48]	; (8008d98 <HAL_PCD_MspInit+0x48>)
 8008d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d6c:	61d3      	str	r3, [r2, #28]
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <HAL_PCD_MspInit+0x48>)
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	2014      	movs	r0, #20
 8008d80:	f7f9 f91f 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d84:	2014      	movs	r0, #20
 8008d86:	f7f9 f938 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40005c00 	.word	0x40005c00
 8008d98:	40021000 	.word	0x40021000

08008d9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fdb3 	bl	800791e <USBD_LL_SetupStage>
}
 8008db8:	bf00      	nop
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	440b      	add	r3, r1
 8008de0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7fe fde5 	bl	80079b8 <USBD_LL_DataOutStage>
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e08:	78fa      	ldrb	r2, [r7, #3]
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	440b      	add	r3, r1
 8008e16:	333c      	adds	r3, #60	; 0x3c
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f7fe fe3c 	bl	8007a9a <USBD_LL_DataInStage>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe ff4c 	bl	8007cd6 <USBD_LL_SOF>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d001      	beq.n	8008e5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e5a:	f7f8 fa1d 	bl	8001298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e64:	7bfa      	ldrb	r2, [r7, #15]
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fefc 	bl	8007c66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe feb5 	bl	8007be4 <USBD_LL_Reset>
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fef6 	bl	8007c84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea0:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <HAL_PCD_SuspendCallback+0x30>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	4a03      	ldr	r2, [pc, #12]	; (8008eb4 <HAL_PCD_SuspendCallback+0x30>)
 8008ea6:	f043 0306 	orr.w	r3, r3, #6
 8008eaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	e000ed00 	.word	0xe000ed00

08008eb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fef0 	bl	8007cac <USBD_LL_Resume>
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008edc:	4a28      	ldr	r2, [pc, #160]	; (8008f80 <USBD_LL_Init+0xac>)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a26      	ldr	r2, [pc, #152]	; (8008f80 <USBD_LL_Init+0xac>)
 8008ee8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008eec:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <USBD_LL_Init+0xac>)
 8008eee:	4a25      	ldr	r2, [pc, #148]	; (8008f84 <USBD_LL_Init+0xb0>)
 8008ef0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ef2:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <USBD_LL_Init+0xac>)
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ef8:	4b21      	ldr	r3, [pc, #132]	; (8008f80 <USBD_LL_Init+0xac>)
 8008efa:	2202      	movs	r2, #2
 8008efc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <USBD_LL_Init+0xac>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <USBD_LL_Init+0xac>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f0a:	4b1d      	ldr	r3, [pc, #116]	; (8008f80 <USBD_LL_Init+0xac>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f10:	481b      	ldr	r0, [pc, #108]	; (8008f80 <USBD_LL_Init+0xac>)
 8008f12:	f7f9 fa40 	bl	8002396 <HAL_PCD_Init>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f1c:	f7f8 f9bc 	bl	8001298 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f26:	2318      	movs	r3, #24
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f7fa fd80 	bl	8003a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f36:	2358      	movs	r3, #88	; 0x58
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2180      	movs	r1, #128	; 0x80
 8008f3c:	f7fa fd78 	bl	8003a30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f46:	23c0      	movs	r3, #192	; 0xc0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2181      	movs	r1, #129	; 0x81
 8008f4c:	f7fa fd70 	bl	8003a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f56:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	f7fa fd67 	bl	8003a30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2182      	movs	r1, #130	; 0x82
 8008f70:	f7fa fd5e 	bl	8003a30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	2000105c 	.word	0x2000105c
 8008f84:	40005c00 	.word	0x40005c00

08008f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f9 fb04 	bl	80025ac <HAL_PCD_Start>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f94e 	bl	800924c <USBD_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4603      	mov	r3, r0
 8008fce:	70fb      	strb	r3, [r7, #3]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70bb      	strb	r3, [r7, #2]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fe6:	78bb      	ldrb	r3, [r7, #2]
 8008fe8:	883a      	ldrh	r2, [r7, #0]
 8008fea:	78f9      	ldrb	r1, [r7, #3]
 8008fec:	f7f9 fc7c 	bl	80028e8 <HAL_PCD_EP_Open>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f928 	bl	800924c <USBD_Get_USB_Status>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009000:	7bbb      	ldrb	r3, [r7, #14]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	4611      	mov	r1, r2
 8009028:	4618      	mov	r0, r3
 800902a:	f7f9 fcc3 	bl	80029b4 <HAL_PCD_EP_Close>
 800902e:	4603      	mov	r3, r0
 8009030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f909 	bl	800924c <USBD_Get_USB_Status>
 800903a:	4603      	mov	r3, r0
 800903c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7f9 fd83 	bl	8002b72 <HAL_PCD_EP_SetStall>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f8ea 	bl	800924c <USBD_Get_USB_Status>
 8009078:	4603      	mov	r3, r0
 800907a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907c:	7bbb      	ldrb	r3, [r7, #14]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f9 fdc4 	bl	8002c32 <HAL_PCD_EP_ClrStall>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f8cb 	bl	800924c <USBD_Get_USB_Status>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da0c      	bge.n	80090fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	440b      	add	r3, r1
 80090f4:	3302      	adds	r3, #2
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	e00b      	b.n	8009112 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009100:	68f9      	ldr	r1, [r7, #12]
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	440b      	add	r3, r1
 800910c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009110:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	bc80      	pop	{r7}
 800911a:	4770      	bx	lr

0800911c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f7f9 fbaf 	bl	800289e <HAL_PCD_SetAddress>
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f880 	bl	800924c <USBD_Get_USB_Status>
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009150:	7bbb      	ldrb	r3, [r7, #14]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	461a      	mov	r2, r3
 8009166:	460b      	mov	r3, r1
 8009168:	72fb      	strb	r3, [r7, #11]
 800916a:	4613      	mov	r3, r2
 800916c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800917c:	893b      	ldrh	r3, [r7, #8]
 800917e:	7af9      	ldrb	r1, [r7, #11]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f7f9 fcb3 	bl	8002aec <HAL_PCD_EP_Transmit>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f85d 	bl	800924c <USBD_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009196:	7dbb      	ldrb	r3, [r7, #22]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	461a      	mov	r2, r3
 80091ac:	460b      	mov	r3, r1
 80091ae:	72fb      	strb	r3, [r7, #11]
 80091b0:	4613      	mov	r3, r2
 80091b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091c2:	893b      	ldrh	r3, [r7, #8]
 80091c4:	7af9      	ldrb	r1, [r7, #11]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	f7f9 fc3c 	bl	8002a44 <HAL_PCD_EP_Receive>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f83a 	bl	800924c <USBD_Get_USB_Status>
 80091d8:	4603      	mov	r3, r0
 80091da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f8:	78fa      	ldrb	r2, [r7, #3]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f9 fc5e 	bl	8002abe <HAL_PCD_EP_GetRxCount>
 8009202:	4603      	mov	r3, r0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_static_malloc+0x14>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	bc80      	pop	{r7}
 800921e:	4770      	bx	lr
 8009220:	20001348 	.word	0x20001348

08009224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr

08009236 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	460b      	mov	r3, r1
 8009240:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr

0800924c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	2b03      	cmp	r3, #3
 800925e:	d817      	bhi.n	8009290 <USBD_Get_USB_Status+0x44>
 8009260:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <USBD_Get_USB_Status+0x1c>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	08009279 	.word	0x08009279
 800926c:	0800927f 	.word	0x0800927f
 8009270:	08009285 	.word	0x08009285
 8009274:	0800928b 	.word	0x0800928b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
    break;
 800927c:	e00b      	b.n	8009296 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800927e:	2302      	movs	r3, #2
 8009280:	73fb      	strb	r3, [r7, #15]
    break;
 8009282:	e008      	b.n	8009296 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
    break;
 8009288:	e005      	b.n	8009296 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800928a:	2302      	movs	r3, #2
 800928c:	73fb      	strb	r3, [r7, #15]
    break;
 800928e:	e002      	b.n	8009296 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009290:	2302      	movs	r3, #2
 8009292:	73fb      	strb	r3, [r7, #15]
    break;
 8009294:	bf00      	nop
  }
  return usb_status;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	bc80      	pop	{r7}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop

080092a4 <malloc>:
 80092a4:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <malloc+0xc>)
 80092a6:	4601      	mov	r1, r0
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	f000 b823 	b.w	80092f4 <_malloc_r>
 80092ae:	bf00      	nop
 80092b0:	20000214 	.word	0x20000214

080092b4 <sbrk_aligned>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4e0e      	ldr	r6, [pc, #56]	; (80092f0 <sbrk_aligned+0x3c>)
 80092b8:	460c      	mov	r4, r1
 80092ba:	6831      	ldr	r1, [r6, #0]
 80092bc:	4605      	mov	r5, r0
 80092be:	b911      	cbnz	r1, 80092c6 <sbrk_aligned+0x12>
 80092c0:	f000 fa44 	bl	800974c <_sbrk_r>
 80092c4:	6030      	str	r0, [r6, #0]
 80092c6:	4621      	mov	r1, r4
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 fa3f 	bl	800974c <_sbrk_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d00a      	beq.n	80092e8 <sbrk_aligned+0x34>
 80092d2:	1cc4      	adds	r4, r0, #3
 80092d4:	f024 0403 	bic.w	r4, r4, #3
 80092d8:	42a0      	cmp	r0, r4
 80092da:	d007      	beq.n	80092ec <sbrk_aligned+0x38>
 80092dc:	1a21      	subs	r1, r4, r0
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 fa34 	bl	800974c <_sbrk_r>
 80092e4:	3001      	adds	r0, #1
 80092e6:	d101      	bne.n	80092ec <sbrk_aligned+0x38>
 80092e8:	f04f 34ff 	mov.w	r4, #4294967295
 80092ec:	4620      	mov	r0, r4
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	2000156c 	.word	0x2000156c

080092f4 <_malloc_r>:
 80092f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	1ccd      	adds	r5, r1, #3
 80092fa:	f025 0503 	bic.w	r5, r5, #3
 80092fe:	3508      	adds	r5, #8
 8009300:	2d0c      	cmp	r5, #12
 8009302:	bf38      	it	cc
 8009304:	250c      	movcc	r5, #12
 8009306:	2d00      	cmp	r5, #0
 8009308:	4607      	mov	r7, r0
 800930a:	db01      	blt.n	8009310 <_malloc_r+0x1c>
 800930c:	42a9      	cmp	r1, r5
 800930e:	d905      	bls.n	800931c <_malloc_r+0x28>
 8009310:	230c      	movs	r3, #12
 8009312:	2600      	movs	r6, #0
 8009314:	603b      	str	r3, [r7, #0]
 8009316:	4630      	mov	r0, r6
 8009318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093f0 <_malloc_r+0xfc>
 8009320:	f000 f868 	bl	80093f4 <__malloc_lock>
 8009324:	f8d8 3000 	ldr.w	r3, [r8]
 8009328:	461c      	mov	r4, r3
 800932a:	bb5c      	cbnz	r4, 8009384 <_malloc_r+0x90>
 800932c:	4629      	mov	r1, r5
 800932e:	4638      	mov	r0, r7
 8009330:	f7ff ffc0 	bl	80092b4 <sbrk_aligned>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	4604      	mov	r4, r0
 8009338:	d155      	bne.n	80093e6 <_malloc_r+0xf2>
 800933a:	f8d8 4000 	ldr.w	r4, [r8]
 800933e:	4626      	mov	r6, r4
 8009340:	2e00      	cmp	r6, #0
 8009342:	d145      	bne.n	80093d0 <_malloc_r+0xdc>
 8009344:	2c00      	cmp	r4, #0
 8009346:	d048      	beq.n	80093da <_malloc_r+0xe6>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	4631      	mov	r1, r6
 800934c:	4638      	mov	r0, r7
 800934e:	eb04 0903 	add.w	r9, r4, r3
 8009352:	f000 f9fb 	bl	800974c <_sbrk_r>
 8009356:	4581      	cmp	r9, r0
 8009358:	d13f      	bne.n	80093da <_malloc_r+0xe6>
 800935a:	6821      	ldr	r1, [r4, #0]
 800935c:	4638      	mov	r0, r7
 800935e:	1a6d      	subs	r5, r5, r1
 8009360:	4629      	mov	r1, r5
 8009362:	f7ff ffa7 	bl	80092b4 <sbrk_aligned>
 8009366:	3001      	adds	r0, #1
 8009368:	d037      	beq.n	80093da <_malloc_r+0xe6>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	442b      	add	r3, r5
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	f8d8 3000 	ldr.w	r3, [r8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d038      	beq.n	80093ea <_malloc_r+0xf6>
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	42a2      	cmp	r2, r4
 800937c:	d12b      	bne.n	80093d6 <_malloc_r+0xe2>
 800937e:	2200      	movs	r2, #0
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	e00f      	b.n	80093a4 <_malloc_r+0xb0>
 8009384:	6822      	ldr	r2, [r4, #0]
 8009386:	1b52      	subs	r2, r2, r5
 8009388:	d41f      	bmi.n	80093ca <_malloc_r+0xd6>
 800938a:	2a0b      	cmp	r2, #11
 800938c:	d917      	bls.n	80093be <_malloc_r+0xca>
 800938e:	1961      	adds	r1, r4, r5
 8009390:	42a3      	cmp	r3, r4
 8009392:	6025      	str	r5, [r4, #0]
 8009394:	bf18      	it	ne
 8009396:	6059      	strne	r1, [r3, #4]
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	bf08      	it	eq
 800939c:	f8c8 1000 	streq.w	r1, [r8]
 80093a0:	5162      	str	r2, [r4, r5]
 80093a2:	604b      	str	r3, [r1, #4]
 80093a4:	4638      	mov	r0, r7
 80093a6:	f104 060b 	add.w	r6, r4, #11
 80093aa:	f000 f829 	bl	8009400 <__malloc_unlock>
 80093ae:	f026 0607 	bic.w	r6, r6, #7
 80093b2:	1d23      	adds	r3, r4, #4
 80093b4:	1af2      	subs	r2, r6, r3
 80093b6:	d0ae      	beq.n	8009316 <_malloc_r+0x22>
 80093b8:	1b9b      	subs	r3, r3, r6
 80093ba:	50a3      	str	r3, [r4, r2]
 80093bc:	e7ab      	b.n	8009316 <_malloc_r+0x22>
 80093be:	42a3      	cmp	r3, r4
 80093c0:	6862      	ldr	r2, [r4, #4]
 80093c2:	d1dd      	bne.n	8009380 <_malloc_r+0x8c>
 80093c4:	f8c8 2000 	str.w	r2, [r8]
 80093c8:	e7ec      	b.n	80093a4 <_malloc_r+0xb0>
 80093ca:	4623      	mov	r3, r4
 80093cc:	6864      	ldr	r4, [r4, #4]
 80093ce:	e7ac      	b.n	800932a <_malloc_r+0x36>
 80093d0:	4634      	mov	r4, r6
 80093d2:	6876      	ldr	r6, [r6, #4]
 80093d4:	e7b4      	b.n	8009340 <_malloc_r+0x4c>
 80093d6:	4613      	mov	r3, r2
 80093d8:	e7cc      	b.n	8009374 <_malloc_r+0x80>
 80093da:	230c      	movs	r3, #12
 80093dc:	4638      	mov	r0, r7
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	f000 f80e 	bl	8009400 <__malloc_unlock>
 80093e4:	e797      	b.n	8009316 <_malloc_r+0x22>
 80093e6:	6025      	str	r5, [r4, #0]
 80093e8:	e7dc      	b.n	80093a4 <_malloc_r+0xb0>
 80093ea:	605b      	str	r3, [r3, #4]
 80093ec:	deff      	udf	#255	; 0xff
 80093ee:	bf00      	nop
 80093f0:	20001568 	.word	0x20001568

080093f4 <__malloc_lock>:
 80093f4:	4801      	ldr	r0, [pc, #4]	; (80093fc <__malloc_lock+0x8>)
 80093f6:	f000 b9f5 	b.w	80097e4 <__retarget_lock_acquire_recursive>
 80093fa:	bf00      	nop
 80093fc:	200016b0 	.word	0x200016b0

08009400 <__malloc_unlock>:
 8009400:	4801      	ldr	r0, [pc, #4]	; (8009408 <__malloc_unlock+0x8>)
 8009402:	f000 b9f0 	b.w	80097e6 <__retarget_lock_release_recursive>
 8009406:	bf00      	nop
 8009408:	200016b0 	.word	0x200016b0

0800940c <std>:
 800940c:	2300      	movs	r3, #0
 800940e:	b510      	push	{r4, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	e9c0 3300 	strd	r3, r3, [r0]
 8009416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800941a:	6083      	str	r3, [r0, #8]
 800941c:	8181      	strh	r1, [r0, #12]
 800941e:	6643      	str	r3, [r0, #100]	; 0x64
 8009420:	81c2      	strh	r2, [r0, #14]
 8009422:	6183      	str	r3, [r0, #24]
 8009424:	4619      	mov	r1, r3
 8009426:	2208      	movs	r2, #8
 8009428:	305c      	adds	r0, #92	; 0x5c
 800942a:	f000 f940 	bl	80096ae <memset>
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <std+0x38>)
 8009430:	6224      	str	r4, [r4, #32]
 8009432:	6263      	str	r3, [r4, #36]	; 0x24
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <std+0x3c>)
 8009436:	62a3      	str	r3, [r4, #40]	; 0x28
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <std+0x40>)
 800943a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <std+0x44>)
 800943e:	6323      	str	r3, [r4, #48]	; 0x30
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	08009625 	.word	0x08009625
 8009448:	0800964b 	.word	0x0800964b
 800944c:	08009683 	.word	0x08009683
 8009450:	080096a7 	.word	0x080096a7

08009454 <stdio_exit_handler>:
 8009454:	4a02      	ldr	r2, [pc, #8]	; (8009460 <stdio_exit_handler+0xc>)
 8009456:	4903      	ldr	r1, [pc, #12]	; (8009464 <stdio_exit_handler+0x10>)
 8009458:	4803      	ldr	r0, [pc, #12]	; (8009468 <stdio_exit_handler+0x14>)
 800945a:	f000 b869 	b.w	8009530 <_fwalk_sglue>
 800945e:	bf00      	nop
 8009460:	200001bc 	.word	0x200001bc
 8009464:	0800a831 	.word	0x0800a831
 8009468:	200001c8 	.word	0x200001c8

0800946c <cleanup_stdio>:
 800946c:	6841      	ldr	r1, [r0, #4]
 800946e:	4b0c      	ldr	r3, [pc, #48]	; (80094a0 <cleanup_stdio+0x34>)
 8009470:	b510      	push	{r4, lr}
 8009472:	4299      	cmp	r1, r3
 8009474:	4604      	mov	r4, r0
 8009476:	d001      	beq.n	800947c <cleanup_stdio+0x10>
 8009478:	f001 f9da 	bl	800a830 <_fflush_r>
 800947c:	68a1      	ldr	r1, [r4, #8]
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <cleanup_stdio+0x38>)
 8009480:	4299      	cmp	r1, r3
 8009482:	d002      	beq.n	800948a <cleanup_stdio+0x1e>
 8009484:	4620      	mov	r0, r4
 8009486:	f001 f9d3 	bl	800a830 <_fflush_r>
 800948a:	68e1      	ldr	r1, [r4, #12]
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <cleanup_stdio+0x3c>)
 800948e:	4299      	cmp	r1, r3
 8009490:	d004      	beq.n	800949c <cleanup_stdio+0x30>
 8009492:	4620      	mov	r0, r4
 8009494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009498:	f001 b9ca 	b.w	800a830 <_fflush_r>
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop
 80094a0:	20001570 	.word	0x20001570
 80094a4:	200015d8 	.word	0x200015d8
 80094a8:	20001640 	.word	0x20001640

080094ac <global_stdio_init.part.0>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <global_stdio_init.part.0+0x30>)
 80094b0:	4c0b      	ldr	r4, [pc, #44]	; (80094e0 <global_stdio_init.part.0+0x34>)
 80094b2:	4a0c      	ldr	r2, [pc, #48]	; (80094e4 <global_stdio_init.part.0+0x38>)
 80094b4:	4620      	mov	r0, r4
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	2104      	movs	r1, #4
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7ff ffa6 	bl	800940c <std>
 80094c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094c4:	2201      	movs	r2, #1
 80094c6:	2109      	movs	r1, #9
 80094c8:	f7ff ffa0 	bl	800940c <std>
 80094cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094d0:	2202      	movs	r2, #2
 80094d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d6:	2112      	movs	r1, #18
 80094d8:	f7ff bf98 	b.w	800940c <std>
 80094dc:	200016a8 	.word	0x200016a8
 80094e0:	20001570 	.word	0x20001570
 80094e4:	08009455 	.word	0x08009455

080094e8 <__sfp_lock_acquire>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sfp_lock_acquire+0x8>)
 80094ea:	f000 b97b 	b.w	80097e4 <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	200016b1 	.word	0x200016b1

080094f4 <__sfp_lock_release>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__sfp_lock_release+0x8>)
 80094f6:	f000 b976 	b.w	80097e6 <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	200016b1 	.word	0x200016b1

08009500 <__sinit>:
 8009500:	b510      	push	{r4, lr}
 8009502:	4604      	mov	r4, r0
 8009504:	f7ff fff0 	bl	80094e8 <__sfp_lock_acquire>
 8009508:	6a23      	ldr	r3, [r4, #32]
 800950a:	b11b      	cbz	r3, 8009514 <__sinit+0x14>
 800950c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009510:	f7ff bff0 	b.w	80094f4 <__sfp_lock_release>
 8009514:	4b04      	ldr	r3, [pc, #16]	; (8009528 <__sinit+0x28>)
 8009516:	6223      	str	r3, [r4, #32]
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <__sinit+0x2c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f5      	bne.n	800950c <__sinit+0xc>
 8009520:	f7ff ffc4 	bl	80094ac <global_stdio_init.part.0>
 8009524:	e7f2      	b.n	800950c <__sinit+0xc>
 8009526:	bf00      	nop
 8009528:	0800946d 	.word	0x0800946d
 800952c:	200016a8 	.word	0x200016a8

08009530 <_fwalk_sglue>:
 8009530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009534:	4607      	mov	r7, r0
 8009536:	4688      	mov	r8, r1
 8009538:	4614      	mov	r4, r2
 800953a:	2600      	movs	r6, #0
 800953c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009540:	f1b9 0901 	subs.w	r9, r9, #1
 8009544:	d505      	bpl.n	8009552 <_fwalk_sglue+0x22>
 8009546:	6824      	ldr	r4, [r4, #0]
 8009548:	2c00      	cmp	r4, #0
 800954a:	d1f7      	bne.n	800953c <_fwalk_sglue+0xc>
 800954c:	4630      	mov	r0, r6
 800954e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d907      	bls.n	8009568 <_fwalk_sglue+0x38>
 8009558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800955c:	3301      	adds	r3, #1
 800955e:	d003      	beq.n	8009568 <_fwalk_sglue+0x38>
 8009560:	4629      	mov	r1, r5
 8009562:	4638      	mov	r0, r7
 8009564:	47c0      	blx	r8
 8009566:	4306      	orrs	r6, r0
 8009568:	3568      	adds	r5, #104	; 0x68
 800956a:	e7e9      	b.n	8009540 <_fwalk_sglue+0x10>

0800956c <iprintf>:
 800956c:	b40f      	push	{r0, r1, r2, r3}
 800956e:	b507      	push	{r0, r1, r2, lr}
 8009570:	4906      	ldr	r1, [pc, #24]	; (800958c <iprintf+0x20>)
 8009572:	ab04      	add	r3, sp, #16
 8009574:	6808      	ldr	r0, [r1, #0]
 8009576:	f853 2b04 	ldr.w	r2, [r3], #4
 800957a:	6881      	ldr	r1, [r0, #8]
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	f000 fcdb 	bl	8009f38 <_vfiprintf_r>
 8009582:	b003      	add	sp, #12
 8009584:	f85d eb04 	ldr.w	lr, [sp], #4
 8009588:	b004      	add	sp, #16
 800958a:	4770      	bx	lr
 800958c:	20000214 	.word	0x20000214

08009590 <siprintf>:
 8009590:	b40e      	push	{r1, r2, r3}
 8009592:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009596:	b500      	push	{lr}
 8009598:	b09c      	sub	sp, #112	; 0x70
 800959a:	ab1d      	add	r3, sp, #116	; 0x74
 800959c:	9002      	str	r0, [sp, #8]
 800959e:	9006      	str	r0, [sp, #24]
 80095a0:	9107      	str	r1, [sp, #28]
 80095a2:	9104      	str	r1, [sp, #16]
 80095a4:	4808      	ldr	r0, [pc, #32]	; (80095c8 <siprintf+0x38>)
 80095a6:	4909      	ldr	r1, [pc, #36]	; (80095cc <siprintf+0x3c>)
 80095a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	a902      	add	r1, sp, #8
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	f000 f9c8 	bl	8009948 <_svfiprintf_r>
 80095b8:	2200      	movs	r2, #0
 80095ba:	9b02      	ldr	r3, [sp, #8]
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	b01c      	add	sp, #112	; 0x70
 80095c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c4:	b003      	add	sp, #12
 80095c6:	4770      	bx	lr
 80095c8:	20000214 	.word	0x20000214
 80095cc:	ffff0208 	.word	0xffff0208

080095d0 <siscanf>:
 80095d0:	b40e      	push	{r1, r2, r3}
 80095d2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80095d6:	b530      	push	{r4, r5, lr}
 80095d8:	b09c      	sub	sp, #112	; 0x70
 80095da:	ac1f      	add	r4, sp, #124	; 0x7c
 80095dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80095e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80095e4:	9002      	str	r0, [sp, #8]
 80095e6:	9006      	str	r0, [sp, #24]
 80095e8:	f7f6 fdbc 	bl	8000164 <strlen>
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <siscanf+0x4c>)
 80095ee:	9003      	str	r0, [sp, #12]
 80095f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095f2:	2300      	movs	r3, #0
 80095f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80095f6:	9314      	str	r3, [sp, #80]	; 0x50
 80095f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095fc:	9007      	str	r0, [sp, #28]
 80095fe:	4808      	ldr	r0, [pc, #32]	; (8009620 <siscanf+0x50>)
 8009600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009604:	462a      	mov	r2, r5
 8009606:	4623      	mov	r3, r4
 8009608:	a902      	add	r1, sp, #8
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9401      	str	r4, [sp, #4]
 800960e:	f000 faf3 	bl	8009bf8 <__ssvfiscanf_r>
 8009612:	b01c      	add	sp, #112	; 0x70
 8009614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009618:	b003      	add	sp, #12
 800961a:	4770      	bx	lr
 800961c:	08009647 	.word	0x08009647
 8009620:	20000214 	.word	0x20000214

08009624 <__sread>:
 8009624:	b510      	push	{r4, lr}
 8009626:	460c      	mov	r4, r1
 8009628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962c:	f000 f87c 	bl	8009728 <_read_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	bfab      	itete	ge
 8009634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009636:	89a3      	ldrhlt	r3, [r4, #12]
 8009638:	181b      	addge	r3, r3, r0
 800963a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800963e:	bfac      	ite	ge
 8009640:	6563      	strge	r3, [r4, #84]	; 0x54
 8009642:	81a3      	strhlt	r3, [r4, #12]
 8009644:	bd10      	pop	{r4, pc}

08009646 <__seofread>:
 8009646:	2000      	movs	r0, #0
 8009648:	4770      	bx	lr

0800964a <__swrite>:
 800964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	461f      	mov	r7, r3
 8009650:	898b      	ldrh	r3, [r1, #12]
 8009652:	4605      	mov	r5, r0
 8009654:	05db      	lsls	r3, r3, #23
 8009656:	460c      	mov	r4, r1
 8009658:	4616      	mov	r6, r2
 800965a:	d505      	bpl.n	8009668 <__swrite+0x1e>
 800965c:	2302      	movs	r3, #2
 800965e:	2200      	movs	r2, #0
 8009660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009664:	f000 f84e 	bl	8009704 <_lseek_r>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	4632      	mov	r2, r6
 800966c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	4628      	mov	r0, r5
 8009674:	463b      	mov	r3, r7
 8009676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800967a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	f000 b875 	b.w	800976c <_write_r>

08009682 <__sseek>:
 8009682:	b510      	push	{r4, lr}
 8009684:	460c      	mov	r4, r1
 8009686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968a:	f000 f83b 	bl	8009704 <_lseek_r>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	bf15      	itete	ne
 8009694:	6560      	strne	r0, [r4, #84]	; 0x54
 8009696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800969a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800969e:	81a3      	strheq	r3, [r4, #12]
 80096a0:	bf18      	it	ne
 80096a2:	81a3      	strhne	r3, [r4, #12]
 80096a4:	bd10      	pop	{r4, pc}

080096a6 <__sclose>:
 80096a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096aa:	f000 b81b 	b.w	80096e4 <_close_r>

080096ae <memset>:
 80096ae:	4603      	mov	r3, r0
 80096b0:	4402      	add	r2, r0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d100      	bne.n	80096b8 <memset+0xa>
 80096b6:	4770      	bx	lr
 80096b8:	f803 1b01 	strb.w	r1, [r3], #1
 80096bc:	e7f9      	b.n	80096b2 <memset+0x4>

080096be <strncmp>:
 80096be:	b510      	push	{r4, lr}
 80096c0:	b16a      	cbz	r2, 80096de <strncmp+0x20>
 80096c2:	3901      	subs	r1, #1
 80096c4:	1884      	adds	r4, r0, r2
 80096c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d103      	bne.n	80096da <strncmp+0x1c>
 80096d2:	42a0      	cmp	r0, r4
 80096d4:	d001      	beq.n	80096da <strncmp+0x1c>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	d1f5      	bne.n	80096c6 <strncmp+0x8>
 80096da:	1ad0      	subs	r0, r2, r3
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	4610      	mov	r0, r2
 80096e0:	e7fc      	b.n	80096dc <strncmp+0x1e>
	...

080096e4 <_close_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	2300      	movs	r3, #0
 80096e8:	4d05      	ldr	r5, [pc, #20]	; (8009700 <_close_r+0x1c>)
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f8 fa77 	bl	8001be2 <_close>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_close_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_close_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	200016ac 	.word	0x200016ac

08009704 <_lseek_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	4608      	mov	r0, r1
 800970a:	4611      	mov	r1, r2
 800970c:	2200      	movs	r2, #0
 800970e:	4d05      	ldr	r5, [pc, #20]	; (8009724 <_lseek_r+0x20>)
 8009710:	602a      	str	r2, [r5, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	f7f8 fa89 	bl	8001c2a <_lseek>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_lseek_r+0x1e>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_lseek_r+0x1e>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	200016ac 	.word	0x200016ac

08009728 <_read_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	4611      	mov	r1, r2
 8009730:	2200      	movs	r2, #0
 8009732:	4d05      	ldr	r5, [pc, #20]	; (8009748 <_read_r+0x20>)
 8009734:	602a      	str	r2, [r5, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f7f8 fa1a 	bl	8001b70 <_read>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_read_r+0x1e>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_read_r+0x1e>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	200016ac 	.word	0x200016ac

0800974c <_sbrk_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	2300      	movs	r3, #0
 8009750:	4d05      	ldr	r5, [pc, #20]	; (8009768 <_sbrk_r+0x1c>)
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	f7f8 fa74 	bl	8001c44 <_sbrk>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_sbrk_r+0x1a>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_sbrk_r+0x1a>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	200016ac 	.word	0x200016ac

0800976c <_write_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	4611      	mov	r1, r2
 8009774:	2200      	movs	r2, #0
 8009776:	4d05      	ldr	r5, [pc, #20]	; (800978c <_write_r+0x20>)
 8009778:	602a      	str	r2, [r5, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	f7f8 fa15 	bl	8001baa <_write>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_write_r+0x1e>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_write_r+0x1e>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	200016ac 	.word	0x200016ac

08009790 <__errno>:
 8009790:	4b01      	ldr	r3, [pc, #4]	; (8009798 <__errno+0x8>)
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20000214 	.word	0x20000214

0800979c <__libc_init_array>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	2600      	movs	r6, #0
 80097a0:	4d0c      	ldr	r5, [pc, #48]	; (80097d4 <__libc_init_array+0x38>)
 80097a2:	4c0d      	ldr	r4, [pc, #52]	; (80097d8 <__libc_init_array+0x3c>)
 80097a4:	1b64      	subs	r4, r4, r5
 80097a6:	10a4      	asrs	r4, r4, #2
 80097a8:	42a6      	cmp	r6, r4
 80097aa:	d109      	bne.n	80097c0 <__libc_init_array+0x24>
 80097ac:	f001 fb46 	bl	800ae3c <_init>
 80097b0:	2600      	movs	r6, #0
 80097b2:	4d0a      	ldr	r5, [pc, #40]	; (80097dc <__libc_init_array+0x40>)
 80097b4:	4c0a      	ldr	r4, [pc, #40]	; (80097e0 <__libc_init_array+0x44>)
 80097b6:	1b64      	subs	r4, r4, r5
 80097b8:	10a4      	asrs	r4, r4, #2
 80097ba:	42a6      	cmp	r6, r4
 80097bc:	d105      	bne.n	80097ca <__libc_init_array+0x2e>
 80097be:	bd70      	pop	{r4, r5, r6, pc}
 80097c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c4:	4798      	blx	r3
 80097c6:	3601      	adds	r6, #1
 80097c8:	e7ee      	b.n	80097a8 <__libc_init_array+0xc>
 80097ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ce:	4798      	blx	r3
 80097d0:	3601      	adds	r6, #1
 80097d2:	e7f2      	b.n	80097ba <__libc_init_array+0x1e>
 80097d4:	0800b09c 	.word	0x0800b09c
 80097d8:	0800b09c 	.word	0x0800b09c
 80097dc:	0800b09c 	.word	0x0800b09c
 80097e0:	0800b0a0 	.word	0x0800b0a0

080097e4 <__retarget_lock_acquire_recursive>:
 80097e4:	4770      	bx	lr

080097e6 <__retarget_lock_release_recursive>:
 80097e6:	4770      	bx	lr

080097e8 <memcpy>:
 80097e8:	440a      	add	r2, r1
 80097ea:	4291      	cmp	r1, r2
 80097ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80097f0:	d100      	bne.n	80097f4 <memcpy+0xc>
 80097f2:	4770      	bx	lr
 80097f4:	b510      	push	{r4, lr}
 80097f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fa:	4291      	cmp	r1, r2
 80097fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009800:	d1f9      	bne.n	80097f6 <memcpy+0xe>
 8009802:	bd10      	pop	{r4, pc}

08009804 <_free_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4605      	mov	r5, r0
 8009808:	2900      	cmp	r1, #0
 800980a:	d040      	beq.n	800988e <_free_r+0x8a>
 800980c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009810:	1f0c      	subs	r4, r1, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfb8      	it	lt
 8009816:	18e4      	addlt	r4, r4, r3
 8009818:	f7ff fdec 	bl	80093f4 <__malloc_lock>
 800981c:	4a1c      	ldr	r2, [pc, #112]	; (8009890 <_free_r+0x8c>)
 800981e:	6813      	ldr	r3, [r2, #0]
 8009820:	b933      	cbnz	r3, 8009830 <_free_r+0x2c>
 8009822:	6063      	str	r3, [r4, #4]
 8009824:	6014      	str	r4, [r2, #0]
 8009826:	4628      	mov	r0, r5
 8009828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800982c:	f7ff bde8 	b.w	8009400 <__malloc_unlock>
 8009830:	42a3      	cmp	r3, r4
 8009832:	d908      	bls.n	8009846 <_free_r+0x42>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	1821      	adds	r1, r4, r0
 8009838:	428b      	cmp	r3, r1
 800983a:	bf01      	itttt	eq
 800983c:	6819      	ldreq	r1, [r3, #0]
 800983e:	685b      	ldreq	r3, [r3, #4]
 8009840:	1809      	addeq	r1, r1, r0
 8009842:	6021      	streq	r1, [r4, #0]
 8009844:	e7ed      	b.n	8009822 <_free_r+0x1e>
 8009846:	461a      	mov	r2, r3
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	b10b      	cbz	r3, 8009850 <_free_r+0x4c>
 800984c:	42a3      	cmp	r3, r4
 800984e:	d9fa      	bls.n	8009846 <_free_r+0x42>
 8009850:	6811      	ldr	r1, [r2, #0]
 8009852:	1850      	adds	r0, r2, r1
 8009854:	42a0      	cmp	r0, r4
 8009856:	d10b      	bne.n	8009870 <_free_r+0x6c>
 8009858:	6820      	ldr	r0, [r4, #0]
 800985a:	4401      	add	r1, r0
 800985c:	1850      	adds	r0, r2, r1
 800985e:	4283      	cmp	r3, r0
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	d1e0      	bne.n	8009826 <_free_r+0x22>
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4408      	add	r0, r1
 800986a:	6010      	str	r0, [r2, #0]
 800986c:	6053      	str	r3, [r2, #4]
 800986e:	e7da      	b.n	8009826 <_free_r+0x22>
 8009870:	d902      	bls.n	8009878 <_free_r+0x74>
 8009872:	230c      	movs	r3, #12
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	e7d6      	b.n	8009826 <_free_r+0x22>
 8009878:	6820      	ldr	r0, [r4, #0]
 800987a:	1821      	adds	r1, r4, r0
 800987c:	428b      	cmp	r3, r1
 800987e:	bf01      	itttt	eq
 8009880:	6819      	ldreq	r1, [r3, #0]
 8009882:	685b      	ldreq	r3, [r3, #4]
 8009884:	1809      	addeq	r1, r1, r0
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	6054      	str	r4, [r2, #4]
 800988c:	e7cb      	b.n	8009826 <_free_r+0x22>
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20001568 	.word	0x20001568

08009894 <__ssputs_r>:
 8009894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	461f      	mov	r7, r3
 800989a:	688e      	ldr	r6, [r1, #8]
 800989c:	4682      	mov	sl, r0
 800989e:	42be      	cmp	r6, r7
 80098a0:	460c      	mov	r4, r1
 80098a2:	4690      	mov	r8, r2
 80098a4:	680b      	ldr	r3, [r1, #0]
 80098a6:	d82c      	bhi.n	8009902 <__ssputs_r+0x6e>
 80098a8:	898a      	ldrh	r2, [r1, #12]
 80098aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098ae:	d026      	beq.n	80098fe <__ssputs_r+0x6a>
 80098b0:	6965      	ldr	r5, [r4, #20]
 80098b2:	6909      	ldr	r1, [r1, #16]
 80098b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098b8:	eba3 0901 	sub.w	r9, r3, r1
 80098bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c0:	1c7b      	adds	r3, r7, #1
 80098c2:	444b      	add	r3, r9
 80098c4:	106d      	asrs	r5, r5, #1
 80098c6:	429d      	cmp	r5, r3
 80098c8:	bf38      	it	cc
 80098ca:	461d      	movcc	r5, r3
 80098cc:	0553      	lsls	r3, r2, #21
 80098ce:	d527      	bpl.n	8009920 <__ssputs_r+0x8c>
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7ff fd0f 	bl	80092f4 <_malloc_r>
 80098d6:	4606      	mov	r6, r0
 80098d8:	b360      	cbz	r0, 8009934 <__ssputs_r+0xa0>
 80098da:	464a      	mov	r2, r9
 80098dc:	6921      	ldr	r1, [r4, #16]
 80098de:	f7ff ff83 	bl	80097e8 <memcpy>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	6126      	str	r6, [r4, #16]
 80098f0:	444e      	add	r6, r9
 80098f2:	6026      	str	r6, [r4, #0]
 80098f4:	463e      	mov	r6, r7
 80098f6:	6165      	str	r5, [r4, #20]
 80098f8:	eba5 0509 	sub.w	r5, r5, r9
 80098fc:	60a5      	str	r5, [r4, #8]
 80098fe:	42be      	cmp	r6, r7
 8009900:	d900      	bls.n	8009904 <__ssputs_r+0x70>
 8009902:	463e      	mov	r6, r7
 8009904:	4632      	mov	r2, r6
 8009906:	4641      	mov	r1, r8
 8009908:	6820      	ldr	r0, [r4, #0]
 800990a:	f001 f8bf 	bl	800aa8c <memmove>
 800990e:	2000      	movs	r0, #0
 8009910:	68a3      	ldr	r3, [r4, #8]
 8009912:	1b9b      	subs	r3, r3, r6
 8009914:	60a3      	str	r3, [r4, #8]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	4433      	add	r3, r6
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009920:	462a      	mov	r2, r5
 8009922:	f001 f8db 	bl	800aadc <_realloc_r>
 8009926:	4606      	mov	r6, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d1e0      	bne.n	80098ee <__ssputs_r+0x5a>
 800992c:	4650      	mov	r0, sl
 800992e:	6921      	ldr	r1, [r4, #16]
 8009930:	f7ff ff68 	bl	8009804 <_free_r>
 8009934:	230c      	movs	r3, #12
 8009936:	f8ca 3000 	str.w	r3, [sl]
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e7e9      	b.n	800991c <__ssputs_r+0x88>

08009948 <_svfiprintf_r>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	4698      	mov	r8, r3
 800994e:	898b      	ldrh	r3, [r1, #12]
 8009950:	4607      	mov	r7, r0
 8009952:	061b      	lsls	r3, r3, #24
 8009954:	460d      	mov	r5, r1
 8009956:	4614      	mov	r4, r2
 8009958:	b09d      	sub	sp, #116	; 0x74
 800995a:	d50e      	bpl.n	800997a <_svfiprintf_r+0x32>
 800995c:	690b      	ldr	r3, [r1, #16]
 800995e:	b963      	cbnz	r3, 800997a <_svfiprintf_r+0x32>
 8009960:	2140      	movs	r1, #64	; 0x40
 8009962:	f7ff fcc7 	bl	80092f4 <_malloc_r>
 8009966:	6028      	str	r0, [r5, #0]
 8009968:	6128      	str	r0, [r5, #16]
 800996a:	b920      	cbnz	r0, 8009976 <_svfiprintf_r+0x2e>
 800996c:	230c      	movs	r3, #12
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	f04f 30ff 	mov.w	r0, #4294967295
 8009974:	e0d0      	b.n	8009b18 <_svfiprintf_r+0x1d0>
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	616b      	str	r3, [r5, #20]
 800997a:	2300      	movs	r3, #0
 800997c:	9309      	str	r3, [sp, #36]	; 0x24
 800997e:	2320      	movs	r3, #32
 8009980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009984:	2330      	movs	r3, #48	; 0x30
 8009986:	f04f 0901 	mov.w	r9, #1
 800998a:	f8cd 800c 	str.w	r8, [sp, #12]
 800998e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009b30 <_svfiprintf_r+0x1e8>
 8009992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009996:	4623      	mov	r3, r4
 8009998:	469a      	mov	sl, r3
 800999a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800999e:	b10a      	cbz	r2, 80099a4 <_svfiprintf_r+0x5c>
 80099a0:	2a25      	cmp	r2, #37	; 0x25
 80099a2:	d1f9      	bne.n	8009998 <_svfiprintf_r+0x50>
 80099a4:	ebba 0b04 	subs.w	fp, sl, r4
 80099a8:	d00b      	beq.n	80099c2 <_svfiprintf_r+0x7a>
 80099aa:	465b      	mov	r3, fp
 80099ac:	4622      	mov	r2, r4
 80099ae:	4629      	mov	r1, r5
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7ff ff6f 	bl	8009894 <__ssputs_r>
 80099b6:	3001      	adds	r0, #1
 80099b8:	f000 80a9 	beq.w	8009b0e <_svfiprintf_r+0x1c6>
 80099bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099be:	445a      	add	r2, fp
 80099c0:	9209      	str	r2, [sp, #36]	; 0x24
 80099c2:	f89a 3000 	ldrb.w	r3, [sl]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80a1 	beq.w	8009b0e <_svfiprintf_r+0x1c6>
 80099cc:	2300      	movs	r3, #0
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d6:	f10a 0a01 	add.w	sl, sl, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	9307      	str	r3, [sp, #28]
 80099de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e2:	931a      	str	r3, [sp, #104]	; 0x68
 80099e4:	4654      	mov	r4, sl
 80099e6:	2205      	movs	r2, #5
 80099e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ec:	4850      	ldr	r0, [pc, #320]	; (8009b30 <_svfiprintf_r+0x1e8>)
 80099ee:	f001 f867 	bl	800aac0 <memchr>
 80099f2:	9a04      	ldr	r2, [sp, #16]
 80099f4:	b9d8      	cbnz	r0, 8009a2e <_svfiprintf_r+0xe6>
 80099f6:	06d0      	lsls	r0, r2, #27
 80099f8:	bf44      	itt	mi
 80099fa:	2320      	movmi	r3, #32
 80099fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a00:	0711      	lsls	r1, r2, #28
 8009a02:	bf44      	itt	mi
 8009a04:	232b      	movmi	r3, #43	; 0x2b
 8009a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a10:	d015      	beq.n	8009a3e <_svfiprintf_r+0xf6>
 8009a12:	4654      	mov	r4, sl
 8009a14:	2000      	movs	r0, #0
 8009a16:	f04f 0c0a 	mov.w	ip, #10
 8009a1a:	9a07      	ldr	r2, [sp, #28]
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a22:	3b30      	subs	r3, #48	; 0x30
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d94d      	bls.n	8009ac4 <_svfiprintf_r+0x17c>
 8009a28:	b1b0      	cbz	r0, 8009a58 <_svfiprintf_r+0x110>
 8009a2a:	9207      	str	r2, [sp, #28]
 8009a2c:	e014      	b.n	8009a58 <_svfiprintf_r+0x110>
 8009a2e:	eba0 0308 	sub.w	r3, r0, r8
 8009a32:	fa09 f303 	lsl.w	r3, r9, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	46a2      	mov	sl, r4
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	e7d2      	b.n	80099e4 <_svfiprintf_r+0x9c>
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	1d19      	adds	r1, r3, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	9103      	str	r1, [sp, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfbb      	ittet	lt
 8009a4a:	425b      	neglt	r3, r3
 8009a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a50:	9307      	strge	r3, [sp, #28]
 8009a52:	9307      	strlt	r3, [sp, #28]
 8009a54:	bfb8      	it	lt
 8009a56:	9204      	strlt	r2, [sp, #16]
 8009a58:	7823      	ldrb	r3, [r4, #0]
 8009a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5c:	d10c      	bne.n	8009a78 <_svfiprintf_r+0x130>
 8009a5e:	7863      	ldrb	r3, [r4, #1]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d134      	bne.n	8009ace <_svfiprintf_r+0x186>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	3402      	adds	r4, #2
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	9203      	str	r2, [sp, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfb8      	it	lt
 8009a72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a76:	9305      	str	r3, [sp, #20]
 8009a78:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009b34 <_svfiprintf_r+0x1ec>
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	4650      	mov	r0, sl
 8009a80:	7821      	ldrb	r1, [r4, #0]
 8009a82:	f001 f81d 	bl	800aac0 <memchr>
 8009a86:	b138      	cbz	r0, 8009a98 <_svfiprintf_r+0x150>
 8009a88:	2240      	movs	r2, #64	; 0x40
 8009a8a:	9b04      	ldr	r3, [sp, #16]
 8009a8c:	eba0 000a 	sub.w	r0, r0, sl
 8009a90:	4082      	lsls	r2, r0
 8009a92:	4313      	orrs	r3, r2
 8009a94:	3401      	adds	r4, #1
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	2206      	movs	r2, #6
 8009a9e:	4826      	ldr	r0, [pc, #152]	; (8009b38 <_svfiprintf_r+0x1f0>)
 8009aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aa4:	f001 f80c 	bl	800aac0 <memchr>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d038      	beq.n	8009b1e <_svfiprintf_r+0x1d6>
 8009aac:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <_svfiprintf_r+0x1f4>)
 8009aae:	bb1b      	cbnz	r3, 8009af8 <_svfiprintf_r+0x1b0>
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	3307      	adds	r3, #7
 8009ab4:	f023 0307 	bic.w	r3, r3, #7
 8009ab8:	3308      	adds	r3, #8
 8009aba:	9303      	str	r3, [sp, #12]
 8009abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abe:	4433      	add	r3, r6
 8009ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac2:	e768      	b.n	8009996 <_svfiprintf_r+0x4e>
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009acc:	e7a6      	b.n	8009a1c <_svfiprintf_r+0xd4>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f04f 0c0a 	mov.w	ip, #10
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	4620      	mov	r0, r4
 8009adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae0:	3a30      	subs	r2, #48	; 0x30
 8009ae2:	2a09      	cmp	r2, #9
 8009ae4:	d903      	bls.n	8009aee <_svfiprintf_r+0x1a6>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0c6      	beq.n	8009a78 <_svfiprintf_r+0x130>
 8009aea:	9105      	str	r1, [sp, #20]
 8009aec:	e7c4      	b.n	8009a78 <_svfiprintf_r+0x130>
 8009aee:	4604      	mov	r4, r0
 8009af0:	2301      	movs	r3, #1
 8009af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af6:	e7f0      	b.n	8009ada <_svfiprintf_r+0x192>
 8009af8:	ab03      	add	r3, sp, #12
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	462a      	mov	r2, r5
 8009afe:	4638      	mov	r0, r7
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <_svfiprintf_r+0x1f8>)
 8009b02:	a904      	add	r1, sp, #16
 8009b04:	f3af 8000 	nop.w
 8009b08:	1c42      	adds	r2, r0, #1
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	d1d6      	bne.n	8009abc <_svfiprintf_r+0x174>
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	065b      	lsls	r3, r3, #25
 8009b12:	f53f af2d 	bmi.w	8009970 <_svfiprintf_r+0x28>
 8009b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b18:	b01d      	add	sp, #116	; 0x74
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4638      	mov	r0, r7
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <_svfiprintf_r+0x1f8>)
 8009b28:	a904      	add	r1, sp, #16
 8009b2a:	f000 fb91 	bl	800a250 <_printf_i>
 8009b2e:	e7eb      	b.n	8009b08 <_svfiprintf_r+0x1c0>
 8009b30:	0800af4c 	.word	0x0800af4c
 8009b34:	0800af52 	.word	0x0800af52
 8009b38:	0800af56 	.word	0x0800af56
 8009b3c:	00000000 	.word	0x00000000
 8009b40:	08009895 	.word	0x08009895

08009b44 <_sungetc_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	1c4b      	adds	r3, r1, #1
 8009b48:	4614      	mov	r4, r2
 8009b4a:	d103      	bne.n	8009b54 <_sungetc_r+0x10>
 8009b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b50:	4628      	mov	r0, r5
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	8993      	ldrh	r3, [r2, #12]
 8009b56:	b2cd      	uxtb	r5, r1
 8009b58:	f023 0320 	bic.w	r3, r3, #32
 8009b5c:	8193      	strh	r3, [r2, #12]
 8009b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b60:	6852      	ldr	r2, [r2, #4]
 8009b62:	b18b      	cbz	r3, 8009b88 <_sungetc_r+0x44>
 8009b64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b66:	4293      	cmp	r3, r2
 8009b68:	dd08      	ble.n	8009b7c <_sungetc_r+0x38>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	1e5a      	subs	r2, r3, #1
 8009b6e:	6022      	str	r2, [r4, #0]
 8009b70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009b74:	6863      	ldr	r3, [r4, #4]
 8009b76:	3301      	adds	r3, #1
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	e7e9      	b.n	8009b50 <_sungetc_r+0xc>
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	f000 feb8 	bl	800a8f2 <__submore>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d0f1      	beq.n	8009b6a <_sungetc_r+0x26>
 8009b86:	e7e1      	b.n	8009b4c <_sungetc_r+0x8>
 8009b88:	6921      	ldr	r1, [r4, #16]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	b151      	cbz	r1, 8009ba4 <_sungetc_r+0x60>
 8009b8e:	4299      	cmp	r1, r3
 8009b90:	d208      	bcs.n	8009ba4 <_sungetc_r+0x60>
 8009b92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009b96:	42a9      	cmp	r1, r5
 8009b98:	d104      	bne.n	8009ba4 <_sungetc_r+0x60>
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	3201      	adds	r2, #1
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	6062      	str	r2, [r4, #4]
 8009ba2:	e7d5      	b.n	8009b50 <_sungetc_r+0xc>
 8009ba4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bac:	6363      	str	r3, [r4, #52]	; 0x34
 8009bae:	2303      	movs	r3, #3
 8009bb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8009bb2:	4623      	mov	r3, r4
 8009bb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e7dc      	b.n	8009b78 <_sungetc_r+0x34>

08009bbe <__ssrefill_r>:
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009bc4:	b169      	cbz	r1, 8009be2 <__ssrefill_r+0x24>
 8009bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bca:	4299      	cmp	r1, r3
 8009bcc:	d001      	beq.n	8009bd2 <__ssrefill_r+0x14>
 8009bce:	f7ff fe19 	bl	8009804 <_free_r>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bd6:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	b113      	cbz	r3, 8009be2 <__ssrefill_r+0x24>
 8009bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	2300      	movs	r3, #0
 8009bec:	6063      	str	r3, [r4, #4]
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f043 0320 	orr.w	r3, r3, #32
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e7f3      	b.n	8009be0 <__ssrefill_r+0x22>

08009bf8 <__ssvfiscanf_r>:
 8009bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4606      	mov	r6, r0
 8009c02:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009c06:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c0a:	49a6      	ldr	r1, [pc, #664]	; (8009ea4 <__ssvfiscanf_r+0x2ac>)
 8009c0c:	f10d 0804 	add.w	r8, sp, #4
 8009c10:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c12:	49a5      	ldr	r1, [pc, #660]	; (8009ea8 <__ssvfiscanf_r+0x2b0>)
 8009c14:	4fa5      	ldr	r7, [pc, #660]	; (8009eac <__ssvfiscanf_r+0x2b4>)
 8009c16:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009eb0 <__ssvfiscanf_r+0x2b8>
 8009c1a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009c1e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	7813      	ldrb	r3, [r2, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 815a 	beq.w	8009ede <__ssvfiscanf_r+0x2e6>
 8009c2a:	5cf9      	ldrb	r1, [r7, r3]
 8009c2c:	1c55      	adds	r5, r2, #1
 8009c2e:	f011 0108 	ands.w	r1, r1, #8
 8009c32:	d019      	beq.n	8009c68 <__ssvfiscanf_r+0x70>
 8009c34:	6863      	ldr	r3, [r4, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd0f      	ble.n	8009c5a <__ssvfiscanf_r+0x62>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	781a      	ldrb	r2, [r3, #0]
 8009c3e:	5cba      	ldrb	r2, [r7, r2]
 8009c40:	0712      	lsls	r2, r2, #28
 8009c42:	d401      	bmi.n	8009c48 <__ssvfiscanf_r+0x50>
 8009c44:	462a      	mov	r2, r5
 8009c46:	e7ec      	b.n	8009c22 <__ssvfiscanf_r+0x2a>
 8009c48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	3201      	adds	r2, #1
 8009c4e:	9245      	str	r2, [sp, #276]	; 0x114
 8009c50:	6862      	ldr	r2, [r4, #4]
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	3a01      	subs	r2, #1
 8009c56:	6062      	str	r2, [r4, #4]
 8009c58:	e7ec      	b.n	8009c34 <__ssvfiscanf_r+0x3c>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c60:	4798      	blx	r3
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d0e9      	beq.n	8009c3a <__ssvfiscanf_r+0x42>
 8009c66:	e7ed      	b.n	8009c44 <__ssvfiscanf_r+0x4c>
 8009c68:	2b25      	cmp	r3, #37	; 0x25
 8009c6a:	d012      	beq.n	8009c92 <__ssvfiscanf_r+0x9a>
 8009c6c:	469a      	mov	sl, r3
 8009c6e:	6863      	ldr	r3, [r4, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f340 8092 	ble.w	8009d9a <__ssvfiscanf_r+0x1a2>
 8009c76:	6822      	ldr	r2, [r4, #0]
 8009c78:	7813      	ldrb	r3, [r2, #0]
 8009c7a:	4553      	cmp	r3, sl
 8009c7c:	f040 812f 	bne.w	8009ede <__ssvfiscanf_r+0x2e6>
 8009c80:	6863      	ldr	r3, [r4, #4]
 8009c82:	3201      	adds	r2, #1
 8009c84:	3b01      	subs	r3, #1
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009c8a:	6022      	str	r2, [r4, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	9345      	str	r3, [sp, #276]	; 0x114
 8009c90:	e7d8      	b.n	8009c44 <__ssvfiscanf_r+0x4c>
 8009c92:	9141      	str	r1, [sp, #260]	; 0x104
 8009c94:	9143      	str	r1, [sp, #268]	; 0x10c
 8009c96:	7853      	ldrb	r3, [r2, #1]
 8009c98:	2b2a      	cmp	r3, #42	; 0x2a
 8009c9a:	bf04      	itt	eq
 8009c9c:	2310      	moveq	r3, #16
 8009c9e:	1c95      	addeq	r5, r2, #2
 8009ca0:	f04f 020a 	mov.w	r2, #10
 8009ca4:	bf08      	it	eq
 8009ca6:	9341      	streq	r3, [sp, #260]	; 0x104
 8009ca8:	46aa      	mov	sl, r5
 8009caa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009cae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d91c      	bls.n	8009cf0 <__ssvfiscanf_r+0xf8>
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	487d      	ldr	r0, [pc, #500]	; (8009eb0 <__ssvfiscanf_r+0x2b8>)
 8009cba:	f000 ff01 	bl	800aac0 <memchr>
 8009cbe:	b138      	cbz	r0, 8009cd0 <__ssvfiscanf_r+0xd8>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	4655      	mov	r5, sl
 8009cc4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009cc6:	eba0 0009 	sub.w	r0, r0, r9
 8009cca:	4083      	lsls	r3, r0
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	9341      	str	r3, [sp, #260]	; 0x104
 8009cd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cd4:	2b78      	cmp	r3, #120	; 0x78
 8009cd6:	d806      	bhi.n	8009ce6 <__ssvfiscanf_r+0xee>
 8009cd8:	2b57      	cmp	r3, #87	; 0x57
 8009cda:	d810      	bhi.n	8009cfe <__ssvfiscanf_r+0x106>
 8009cdc:	2b25      	cmp	r3, #37	; 0x25
 8009cde:	d0c5      	beq.n	8009c6c <__ssvfiscanf_r+0x74>
 8009ce0:	d856      	bhi.n	8009d90 <__ssvfiscanf_r+0x198>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d064      	beq.n	8009db0 <__ssvfiscanf_r+0x1b8>
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	9347      	str	r3, [sp, #284]	; 0x11c
 8009cea:	230a      	movs	r3, #10
 8009cec:	9342      	str	r3, [sp, #264]	; 0x108
 8009cee:	e075      	b.n	8009ddc <__ssvfiscanf_r+0x1e4>
 8009cf0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009cf2:	4655      	mov	r5, sl
 8009cf4:	fb02 1103 	mla	r1, r2, r3, r1
 8009cf8:	3930      	subs	r1, #48	; 0x30
 8009cfa:	9143      	str	r1, [sp, #268]	; 0x10c
 8009cfc:	e7d4      	b.n	8009ca8 <__ssvfiscanf_r+0xb0>
 8009cfe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009d02:	2a20      	cmp	r2, #32
 8009d04:	d8ef      	bhi.n	8009ce6 <__ssvfiscanf_r+0xee>
 8009d06:	a101      	add	r1, pc, #4	; (adr r1, 8009d0c <__ssvfiscanf_r+0x114>)
 8009d08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d0c:	08009dbf 	.word	0x08009dbf
 8009d10:	08009ce7 	.word	0x08009ce7
 8009d14:	08009ce7 	.word	0x08009ce7
 8009d18:	08009e1d 	.word	0x08009e1d
 8009d1c:	08009ce7 	.word	0x08009ce7
 8009d20:	08009ce7 	.word	0x08009ce7
 8009d24:	08009ce7 	.word	0x08009ce7
 8009d28:	08009ce7 	.word	0x08009ce7
 8009d2c:	08009ce7 	.word	0x08009ce7
 8009d30:	08009ce7 	.word	0x08009ce7
 8009d34:	08009ce7 	.word	0x08009ce7
 8009d38:	08009e33 	.word	0x08009e33
 8009d3c:	08009e19 	.word	0x08009e19
 8009d40:	08009d97 	.word	0x08009d97
 8009d44:	08009d97 	.word	0x08009d97
 8009d48:	08009d97 	.word	0x08009d97
 8009d4c:	08009ce7 	.word	0x08009ce7
 8009d50:	08009dd5 	.word	0x08009dd5
 8009d54:	08009ce7 	.word	0x08009ce7
 8009d58:	08009ce7 	.word	0x08009ce7
 8009d5c:	08009ce7 	.word	0x08009ce7
 8009d60:	08009ce7 	.word	0x08009ce7
 8009d64:	08009e43 	.word	0x08009e43
 8009d68:	08009e11 	.word	0x08009e11
 8009d6c:	08009db7 	.word	0x08009db7
 8009d70:	08009ce7 	.word	0x08009ce7
 8009d74:	08009ce7 	.word	0x08009ce7
 8009d78:	08009e3f 	.word	0x08009e3f
 8009d7c:	08009ce7 	.word	0x08009ce7
 8009d80:	08009e19 	.word	0x08009e19
 8009d84:	08009ce7 	.word	0x08009ce7
 8009d88:	08009ce7 	.word	0x08009ce7
 8009d8c:	08009dbf 	.word	0x08009dbf
 8009d90:	3b45      	subs	r3, #69	; 0x45
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d8a7      	bhi.n	8009ce6 <__ssvfiscanf_r+0xee>
 8009d96:	2305      	movs	r3, #5
 8009d98:	e01f      	b.n	8009dda <__ssvfiscanf_r+0x1e2>
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009da0:	4798      	blx	r3
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f43f af67 	beq.w	8009c76 <__ssvfiscanf_r+0x7e>
 8009da8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f040 808d 	bne.w	8009eca <__ssvfiscanf_r+0x2d2>
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295
 8009db4:	e08f      	b.n	8009ed6 <__ssvfiscanf_r+0x2de>
 8009db6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009db8:	f042 0220 	orr.w	r2, r2, #32
 8009dbc:	9241      	str	r2, [sp, #260]	; 0x104
 8009dbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dc4:	9241      	str	r2, [sp, #260]	; 0x104
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	2b6f      	cmp	r3, #111	; 0x6f
 8009dca:	bf34      	ite	cc
 8009dcc:	2303      	movcc	r3, #3
 8009dce:	2304      	movcs	r3, #4
 8009dd0:	9242      	str	r2, [sp, #264]	; 0x108
 8009dd2:	e002      	b.n	8009dda <__ssvfiscanf_r+0x1e2>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9342      	str	r3, [sp, #264]	; 0x108
 8009dd8:	2303      	movs	r3, #3
 8009dda:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ddc:	6863      	ldr	r3, [r4, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dd3d      	ble.n	8009e5e <__ssvfiscanf_r+0x266>
 8009de2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009de4:	0659      	lsls	r1, r3, #25
 8009de6:	d404      	bmi.n	8009df2 <__ssvfiscanf_r+0x1fa>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	5cba      	ldrb	r2, [r7, r2]
 8009dee:	0712      	lsls	r2, r2, #28
 8009df0:	d43c      	bmi.n	8009e6c <__ssvfiscanf_r+0x274>
 8009df2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	dc4b      	bgt.n	8009e90 <__ssvfiscanf_r+0x298>
 8009df8:	466b      	mov	r3, sp
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	a941      	add	r1, sp, #260	; 0x104
 8009e00:	f000 fb48 	bl	800a494 <_scanf_chars>
 8009e04:	2801      	cmp	r0, #1
 8009e06:	d06a      	beq.n	8009ede <__ssvfiscanf_r+0x2e6>
 8009e08:	2802      	cmp	r0, #2
 8009e0a:	f47f af1b 	bne.w	8009c44 <__ssvfiscanf_r+0x4c>
 8009e0e:	e7cb      	b.n	8009da8 <__ssvfiscanf_r+0x1b0>
 8009e10:	2308      	movs	r3, #8
 8009e12:	9342      	str	r3, [sp, #264]	; 0x108
 8009e14:	2304      	movs	r3, #4
 8009e16:	e7e0      	b.n	8009dda <__ssvfiscanf_r+0x1e2>
 8009e18:	220a      	movs	r2, #10
 8009e1a:	e7d5      	b.n	8009dc8 <__ssvfiscanf_r+0x1d0>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4640      	mov	r0, r8
 8009e20:	f000 fd2e 	bl	800a880 <__sccl>
 8009e24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e26:	4605      	mov	r5, r0
 8009e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e2c:	9341      	str	r3, [sp, #260]	; 0x104
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e7d3      	b.n	8009dda <__ssvfiscanf_r+0x1e2>
 8009e32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e38:	9341      	str	r3, [sp, #260]	; 0x104
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e7cd      	b.n	8009dda <__ssvfiscanf_r+0x1e2>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e7cb      	b.n	8009dda <__ssvfiscanf_r+0x1e2>
 8009e42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009e44:	06c3      	lsls	r3, r0, #27
 8009e46:	f53f aefd 	bmi.w	8009c44 <__ssvfiscanf_r+0x4c>
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e4e:	1d19      	adds	r1, r3, #4
 8009e50:	9100      	str	r1, [sp, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	07c0      	lsls	r0, r0, #31
 8009e56:	bf4c      	ite	mi
 8009e58:	801a      	strhmi	r2, [r3, #0]
 8009e5a:	601a      	strpl	r2, [r3, #0]
 8009e5c:	e6f2      	b.n	8009c44 <__ssvfiscanf_r+0x4c>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4630      	mov	r0, r6
 8009e62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e64:	4798      	blx	r3
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d0bb      	beq.n	8009de2 <__ssvfiscanf_r+0x1ea>
 8009e6a:	e79d      	b.n	8009da8 <__ssvfiscanf_r+0x1b0>
 8009e6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e6e:	3201      	adds	r2, #1
 8009e70:	9245      	str	r2, [sp, #276]	; 0x114
 8009e72:	6862      	ldr	r2, [r4, #4]
 8009e74:	3a01      	subs	r2, #1
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	6062      	str	r2, [r4, #4]
 8009e7a:	dd02      	ble.n	8009e82 <__ssvfiscanf_r+0x28a>
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	e7b2      	b.n	8009de8 <__ssvfiscanf_r+0x1f0>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4630      	mov	r0, r6
 8009e86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e88:	4798      	blx	r3
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d0ac      	beq.n	8009de8 <__ssvfiscanf_r+0x1f0>
 8009e8e:	e78b      	b.n	8009da8 <__ssvfiscanf_r+0x1b0>
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	dc0f      	bgt.n	8009eb4 <__ssvfiscanf_r+0x2bc>
 8009e94:	466b      	mov	r3, sp
 8009e96:	4622      	mov	r2, r4
 8009e98:	4630      	mov	r0, r6
 8009e9a:	a941      	add	r1, sp, #260	; 0x104
 8009e9c:	f000 fb54 	bl	800a548 <_scanf_i>
 8009ea0:	e7b0      	b.n	8009e04 <__ssvfiscanf_r+0x20c>
 8009ea2:	bf00      	nop
 8009ea4:	08009b45 	.word	0x08009b45
 8009ea8:	08009bbf 	.word	0x08009bbf
 8009eac:	0800af9b 	.word	0x0800af9b
 8009eb0:	0800af52 	.word	0x0800af52
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <__ssvfiscanf_r+0x2ec>)
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f43f aec4 	beq.w	8009c44 <__ssvfiscanf_r+0x4c>
 8009ebc:	466b      	mov	r3, sp
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	a941      	add	r1, sp, #260	; 0x104
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	e79c      	b.n	8009e04 <__ssvfiscanf_r+0x20c>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ed0:	bf18      	it	ne
 8009ed2:	f04f 30ff 	movne.w	r0, #4294967295
 8009ed6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ede:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009ee0:	e7f9      	b.n	8009ed6 <__ssvfiscanf_r+0x2de>
 8009ee2:	bf00      	nop
 8009ee4:	00000000 	.word	0x00000000

08009ee8 <__sfputc_r>:
 8009ee8:	6893      	ldr	r3, [r2, #8]
 8009eea:	b410      	push	{r4}
 8009eec:	3b01      	subs	r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	6093      	str	r3, [r2, #8]
 8009ef2:	da07      	bge.n	8009f04 <__sfputc_r+0x1c>
 8009ef4:	6994      	ldr	r4, [r2, #24]
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	db01      	blt.n	8009efe <__sfputc_r+0x16>
 8009efa:	290a      	cmp	r1, #10
 8009efc:	d102      	bne.n	8009f04 <__sfputc_r+0x1c>
 8009efe:	bc10      	pop	{r4}
 8009f00:	f000 bd2f 	b.w	800a962 <__swbuf_r>
 8009f04:	6813      	ldr	r3, [r2, #0]
 8009f06:	1c58      	adds	r0, r3, #1
 8009f08:	6010      	str	r0, [r2, #0]
 8009f0a:	7019      	strb	r1, [r3, #0]
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	bc10      	pop	{r4}
 8009f10:	4770      	bx	lr

08009f12 <__sfputs_r>:
 8009f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	4614      	mov	r4, r2
 8009f1a:	18d5      	adds	r5, r2, r3
 8009f1c:	42ac      	cmp	r4, r5
 8009f1e:	d101      	bne.n	8009f24 <__sfputs_r+0x12>
 8009f20:	2000      	movs	r0, #0
 8009f22:	e007      	b.n	8009f34 <__sfputs_r+0x22>
 8009f24:	463a      	mov	r2, r7
 8009f26:	4630      	mov	r0, r6
 8009f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2c:	f7ff ffdc 	bl	8009ee8 <__sfputc_r>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d1f3      	bne.n	8009f1c <__sfputs_r+0xa>
 8009f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f38 <_vfiprintf_r>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	4614      	mov	r4, r2
 8009f40:	4698      	mov	r8, r3
 8009f42:	4606      	mov	r6, r0
 8009f44:	b09d      	sub	sp, #116	; 0x74
 8009f46:	b118      	cbz	r0, 8009f50 <_vfiprintf_r+0x18>
 8009f48:	6a03      	ldr	r3, [r0, #32]
 8009f4a:	b90b      	cbnz	r3, 8009f50 <_vfiprintf_r+0x18>
 8009f4c:	f7ff fad8 	bl	8009500 <__sinit>
 8009f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f52:	07d9      	lsls	r1, r3, #31
 8009f54:	d405      	bmi.n	8009f62 <_vfiprintf_r+0x2a>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	059a      	lsls	r2, r3, #22
 8009f5a:	d402      	bmi.n	8009f62 <_vfiprintf_r+0x2a>
 8009f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f5e:	f7ff fc41 	bl	80097e4 <__retarget_lock_acquire_recursive>
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	071b      	lsls	r3, r3, #28
 8009f66:	d501      	bpl.n	8009f6c <_vfiprintf_r+0x34>
 8009f68:	692b      	ldr	r3, [r5, #16]
 8009f6a:	b99b      	cbnz	r3, 8009f94 <_vfiprintf_r+0x5c>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f000 fd34 	bl	800a9dc <__swsetup_r>
 8009f74:	b170      	cbz	r0, 8009f94 <_vfiprintf_r+0x5c>
 8009f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f78:	07dc      	lsls	r4, r3, #31
 8009f7a:	d504      	bpl.n	8009f86 <_vfiprintf_r+0x4e>
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	b01d      	add	sp, #116	; 0x74
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	0598      	lsls	r0, r3, #22
 8009f8a:	d4f7      	bmi.n	8009f7c <_vfiprintf_r+0x44>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f7ff fc2a 	bl	80097e6 <__retarget_lock_release_recursive>
 8009f92:	e7f3      	b.n	8009f7c <_vfiprintf_r+0x44>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9e:	2330      	movs	r3, #48	; 0x30
 8009fa0:	f04f 0901 	mov.w	r9, #1
 8009fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a158 <_vfiprintf_r+0x220>
 8009fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	469a      	mov	sl, r3
 8009fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb8:	b10a      	cbz	r2, 8009fbe <_vfiprintf_r+0x86>
 8009fba:	2a25      	cmp	r2, #37	; 0x25
 8009fbc:	d1f9      	bne.n	8009fb2 <_vfiprintf_r+0x7a>
 8009fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc2:	d00b      	beq.n	8009fdc <_vfiprintf_r+0xa4>
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ffa1 	bl	8009f12 <__sfputs_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f000 80a9 	beq.w	800a128 <_vfiprintf_r+0x1f0>
 8009fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd8:	445a      	add	r2, fp
 8009fda:	9209      	str	r2, [sp, #36]	; 0x24
 8009fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80a1 	beq.w	800a128 <_vfiprintf_r+0x1f0>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff0:	f10a 0a01 	add.w	sl, sl, #1
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffe:	4654      	mov	r4, sl
 800a000:	2205      	movs	r2, #5
 800a002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a006:	4854      	ldr	r0, [pc, #336]	; (800a158 <_vfiprintf_r+0x220>)
 800a008:	f000 fd5a 	bl	800aac0 <memchr>
 800a00c:	9a04      	ldr	r2, [sp, #16]
 800a00e:	b9d8      	cbnz	r0, 800a048 <_vfiprintf_r+0x110>
 800a010:	06d1      	lsls	r1, r2, #27
 800a012:	bf44      	itt	mi
 800a014:	2320      	movmi	r3, #32
 800a016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a01a:	0713      	lsls	r3, r2, #28
 800a01c:	bf44      	itt	mi
 800a01e:	232b      	movmi	r3, #43	; 0x2b
 800a020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a024:	f89a 3000 	ldrb.w	r3, [sl]
 800a028:	2b2a      	cmp	r3, #42	; 0x2a
 800a02a:	d015      	beq.n	800a058 <_vfiprintf_r+0x120>
 800a02c:	4654      	mov	r4, sl
 800a02e:	2000      	movs	r0, #0
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	9a07      	ldr	r2, [sp, #28]
 800a036:	4621      	mov	r1, r4
 800a038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03c:	3b30      	subs	r3, #48	; 0x30
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d94d      	bls.n	800a0de <_vfiprintf_r+0x1a6>
 800a042:	b1b0      	cbz	r0, 800a072 <_vfiprintf_r+0x13a>
 800a044:	9207      	str	r2, [sp, #28]
 800a046:	e014      	b.n	800a072 <_vfiprintf_r+0x13a>
 800a048:	eba0 0308 	sub.w	r3, r0, r8
 800a04c:	fa09 f303 	lsl.w	r3, r9, r3
 800a050:	4313      	orrs	r3, r2
 800a052:	46a2      	mov	sl, r4
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	e7d2      	b.n	8009ffe <_vfiprintf_r+0xc6>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	1d19      	adds	r1, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	9103      	str	r1, [sp, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	bfbb      	ittet	lt
 800a064:	425b      	neglt	r3, r3
 800a066:	f042 0202 	orrlt.w	r2, r2, #2
 800a06a:	9307      	strge	r3, [sp, #28]
 800a06c:	9307      	strlt	r3, [sp, #28]
 800a06e:	bfb8      	it	lt
 800a070:	9204      	strlt	r2, [sp, #16]
 800a072:	7823      	ldrb	r3, [r4, #0]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d10c      	bne.n	800a092 <_vfiprintf_r+0x15a>
 800a078:	7863      	ldrb	r3, [r4, #1]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d134      	bne.n	800a0e8 <_vfiprintf_r+0x1b0>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	3402      	adds	r4, #2
 800a082:	1d1a      	adds	r2, r3, #4
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	9203      	str	r2, [sp, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	bfb8      	it	lt
 800a08c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a15c <_vfiprintf_r+0x224>
 800a096:	2203      	movs	r2, #3
 800a098:	4650      	mov	r0, sl
 800a09a:	7821      	ldrb	r1, [r4, #0]
 800a09c:	f000 fd10 	bl	800aac0 <memchr>
 800a0a0:	b138      	cbz	r0, 800a0b2 <_vfiprintf_r+0x17a>
 800a0a2:	2240      	movs	r2, #64	; 0x40
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	eba0 000a 	sub.w	r0, r0, sl
 800a0aa:	4082      	lsls	r2, r0
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	2206      	movs	r2, #6
 800a0b8:	4829      	ldr	r0, [pc, #164]	; (800a160 <_vfiprintf_r+0x228>)
 800a0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0be:	f000 fcff 	bl	800aac0 <memchr>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d03f      	beq.n	800a146 <_vfiprintf_r+0x20e>
 800a0c6:	4b27      	ldr	r3, [pc, #156]	; (800a164 <_vfiprintf_r+0x22c>)
 800a0c8:	bb1b      	cbnz	r3, 800a112 <_vfiprintf_r+0x1da>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	3307      	adds	r3, #7
 800a0ce:	f023 0307 	bic.w	r3, r3, #7
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d8:	443b      	add	r3, r7
 800a0da:	9309      	str	r3, [sp, #36]	; 0x24
 800a0dc:	e768      	b.n	8009fb0 <_vfiprintf_r+0x78>
 800a0de:	460c      	mov	r4, r1
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e6:	e7a6      	b.n	800a036 <_vfiprintf_r+0xfe>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f04f 0c0a 	mov.w	ip, #10
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	3401      	adds	r4, #1
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fa:	3a30      	subs	r2, #48	; 0x30
 800a0fc:	2a09      	cmp	r2, #9
 800a0fe:	d903      	bls.n	800a108 <_vfiprintf_r+0x1d0>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c6      	beq.n	800a092 <_vfiprintf_r+0x15a>
 800a104:	9105      	str	r1, [sp, #20]
 800a106:	e7c4      	b.n	800a092 <_vfiprintf_r+0x15a>
 800a108:	4604      	mov	r4, r0
 800a10a:	2301      	movs	r3, #1
 800a10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a110:	e7f0      	b.n	800a0f4 <_vfiprintf_r+0x1bc>
 800a112:	ab03      	add	r3, sp, #12
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	462a      	mov	r2, r5
 800a118:	4630      	mov	r0, r6
 800a11a:	4b13      	ldr	r3, [pc, #76]	; (800a168 <_vfiprintf_r+0x230>)
 800a11c:	a904      	add	r1, sp, #16
 800a11e:	f3af 8000 	nop.w
 800a122:	4607      	mov	r7, r0
 800a124:	1c78      	adds	r0, r7, #1
 800a126:	d1d6      	bne.n	800a0d6 <_vfiprintf_r+0x19e>
 800a128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a12a:	07d9      	lsls	r1, r3, #31
 800a12c:	d405      	bmi.n	800a13a <_vfiprintf_r+0x202>
 800a12e:	89ab      	ldrh	r3, [r5, #12]
 800a130:	059a      	lsls	r2, r3, #22
 800a132:	d402      	bmi.n	800a13a <_vfiprintf_r+0x202>
 800a134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a136:	f7ff fb56 	bl	80097e6 <__retarget_lock_release_recursive>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	065b      	lsls	r3, r3, #25
 800a13e:	f53f af1d 	bmi.w	8009f7c <_vfiprintf_r+0x44>
 800a142:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a144:	e71c      	b.n	8009f80 <_vfiprintf_r+0x48>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4630      	mov	r0, r6
 800a14e:	4b06      	ldr	r3, [pc, #24]	; (800a168 <_vfiprintf_r+0x230>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	f000 f87d 	bl	800a250 <_printf_i>
 800a156:	e7e4      	b.n	800a122 <_vfiprintf_r+0x1ea>
 800a158:	0800af4c 	.word	0x0800af4c
 800a15c:	0800af52 	.word	0x0800af52
 800a160:	0800af56 	.word	0x0800af56
 800a164:	00000000 	.word	0x00000000
 800a168:	08009f13 	.word	0x08009f13

0800a16c <_printf_common>:
 800a16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	4616      	mov	r6, r2
 800a172:	4699      	mov	r9, r3
 800a174:	688a      	ldr	r2, [r1, #8]
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	4607      	mov	r7, r0
 800a17a:	4293      	cmp	r3, r2
 800a17c:	bfb8      	it	lt
 800a17e:	4613      	movlt	r3, r2
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a186:	460c      	mov	r4, r1
 800a188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a18c:	b10a      	cbz	r2, 800a192 <_printf_common+0x26>
 800a18e:	3301      	adds	r3, #1
 800a190:	6033      	str	r3, [r6, #0]
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	0699      	lsls	r1, r3, #26
 800a196:	bf42      	ittt	mi
 800a198:	6833      	ldrmi	r3, [r6, #0]
 800a19a:	3302      	addmi	r3, #2
 800a19c:	6033      	strmi	r3, [r6, #0]
 800a19e:	6825      	ldr	r5, [r4, #0]
 800a1a0:	f015 0506 	ands.w	r5, r5, #6
 800a1a4:	d106      	bne.n	800a1b4 <_printf_common+0x48>
 800a1a6:	f104 0a19 	add.w	sl, r4, #25
 800a1aa:	68e3      	ldr	r3, [r4, #12]
 800a1ac:	6832      	ldr	r2, [r6, #0]
 800a1ae:	1a9b      	subs	r3, r3, r2
 800a1b0:	42ab      	cmp	r3, r5
 800a1b2:	dc2b      	bgt.n	800a20c <_printf_common+0xa0>
 800a1b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1b8:	1e13      	subs	r3, r2, #0
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	bf18      	it	ne
 800a1be:	2301      	movne	r3, #1
 800a1c0:	0692      	lsls	r2, r2, #26
 800a1c2:	d430      	bmi.n	800a226 <_printf_common+0xba>
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1cc:	47c0      	blx	r8
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d023      	beq.n	800a21a <_printf_common+0xae>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	f003 0306 	and.w	r3, r3, #6
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	bf14      	ite	ne
 800a1de:	2500      	movne	r5, #0
 800a1e0:	6833      	ldreq	r3, [r6, #0]
 800a1e2:	f04f 0600 	mov.w	r6, #0
 800a1e6:	bf08      	it	eq
 800a1e8:	68e5      	ldreq	r5, [r4, #12]
 800a1ea:	f104 041a 	add.w	r4, r4, #26
 800a1ee:	bf08      	it	eq
 800a1f0:	1aed      	subeq	r5, r5, r3
 800a1f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a1f6:	bf08      	it	eq
 800a1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bfc4      	itt	gt
 800a200:	1a9b      	subgt	r3, r3, r2
 800a202:	18ed      	addgt	r5, r5, r3
 800a204:	42b5      	cmp	r5, r6
 800a206:	d11a      	bne.n	800a23e <_printf_common+0xd2>
 800a208:	2000      	movs	r0, #0
 800a20a:	e008      	b.n	800a21e <_printf_common+0xb2>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4652      	mov	r2, sl
 800a210:	4649      	mov	r1, r9
 800a212:	4638      	mov	r0, r7
 800a214:	47c0      	blx	r8
 800a216:	3001      	adds	r0, #1
 800a218:	d103      	bne.n	800a222 <_printf_common+0xb6>
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a222:	3501      	adds	r5, #1
 800a224:	e7c1      	b.n	800a1aa <_printf_common+0x3e>
 800a226:	2030      	movs	r0, #48	; 0x30
 800a228:	18e1      	adds	r1, r4, r3
 800a22a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a234:	4422      	add	r2, r4
 800a236:	3302      	adds	r3, #2
 800a238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a23c:	e7c2      	b.n	800a1c4 <_printf_common+0x58>
 800a23e:	2301      	movs	r3, #1
 800a240:	4622      	mov	r2, r4
 800a242:	4649      	mov	r1, r9
 800a244:	4638      	mov	r0, r7
 800a246:	47c0      	blx	r8
 800a248:	3001      	adds	r0, #1
 800a24a:	d0e6      	beq.n	800a21a <_printf_common+0xae>
 800a24c:	3601      	adds	r6, #1
 800a24e:	e7d9      	b.n	800a204 <_printf_common+0x98>

0800a250 <_printf_i>:
 800a250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a254:	7e0f      	ldrb	r7, [r1, #24]
 800a256:	4691      	mov	r9, r2
 800a258:	2f78      	cmp	r7, #120	; 0x78
 800a25a:	4680      	mov	r8, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	469a      	mov	sl, r3
 800a260:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a266:	d807      	bhi.n	800a278 <_printf_i+0x28>
 800a268:	2f62      	cmp	r7, #98	; 0x62
 800a26a:	d80a      	bhi.n	800a282 <_printf_i+0x32>
 800a26c:	2f00      	cmp	r7, #0
 800a26e:	f000 80d5 	beq.w	800a41c <_printf_i+0x1cc>
 800a272:	2f58      	cmp	r7, #88	; 0x58
 800a274:	f000 80c1 	beq.w	800a3fa <_printf_i+0x1aa>
 800a278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a27c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a280:	e03a      	b.n	800a2f8 <_printf_i+0xa8>
 800a282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a286:	2b15      	cmp	r3, #21
 800a288:	d8f6      	bhi.n	800a278 <_printf_i+0x28>
 800a28a:	a101      	add	r1, pc, #4	; (adr r1, 800a290 <_printf_i+0x40>)
 800a28c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a290:	0800a2e9 	.word	0x0800a2e9
 800a294:	0800a2fd 	.word	0x0800a2fd
 800a298:	0800a279 	.word	0x0800a279
 800a29c:	0800a279 	.word	0x0800a279
 800a2a0:	0800a279 	.word	0x0800a279
 800a2a4:	0800a279 	.word	0x0800a279
 800a2a8:	0800a2fd 	.word	0x0800a2fd
 800a2ac:	0800a279 	.word	0x0800a279
 800a2b0:	0800a279 	.word	0x0800a279
 800a2b4:	0800a279 	.word	0x0800a279
 800a2b8:	0800a279 	.word	0x0800a279
 800a2bc:	0800a403 	.word	0x0800a403
 800a2c0:	0800a329 	.word	0x0800a329
 800a2c4:	0800a3bd 	.word	0x0800a3bd
 800a2c8:	0800a279 	.word	0x0800a279
 800a2cc:	0800a279 	.word	0x0800a279
 800a2d0:	0800a425 	.word	0x0800a425
 800a2d4:	0800a279 	.word	0x0800a279
 800a2d8:	0800a329 	.word	0x0800a329
 800a2dc:	0800a279 	.word	0x0800a279
 800a2e0:	0800a279 	.word	0x0800a279
 800a2e4:	0800a3c5 	.word	0x0800a3c5
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	1d1a      	adds	r2, r3, #4
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	602a      	str	r2, [r5, #0]
 800a2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e0a0      	b.n	800a43e <_printf_i+0x1ee>
 800a2fc:	6820      	ldr	r0, [r4, #0]
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	0607      	lsls	r7, r0, #24
 800a302:	f103 0104 	add.w	r1, r3, #4
 800a306:	6029      	str	r1, [r5, #0]
 800a308:	d501      	bpl.n	800a30e <_printf_i+0xbe>
 800a30a:	681e      	ldr	r6, [r3, #0]
 800a30c:	e003      	b.n	800a316 <_printf_i+0xc6>
 800a30e:	0646      	lsls	r6, r0, #25
 800a310:	d5fb      	bpl.n	800a30a <_printf_i+0xba>
 800a312:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a316:	2e00      	cmp	r6, #0
 800a318:	da03      	bge.n	800a322 <_printf_i+0xd2>
 800a31a:	232d      	movs	r3, #45	; 0x2d
 800a31c:	4276      	negs	r6, r6
 800a31e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a322:	230a      	movs	r3, #10
 800a324:	4859      	ldr	r0, [pc, #356]	; (800a48c <_printf_i+0x23c>)
 800a326:	e012      	b.n	800a34e <_printf_i+0xfe>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	1d19      	adds	r1, r3, #4
 800a32e:	6029      	str	r1, [r5, #0]
 800a330:	0605      	lsls	r5, r0, #24
 800a332:	d501      	bpl.n	800a338 <_printf_i+0xe8>
 800a334:	681e      	ldr	r6, [r3, #0]
 800a336:	e002      	b.n	800a33e <_printf_i+0xee>
 800a338:	0641      	lsls	r1, r0, #25
 800a33a:	d5fb      	bpl.n	800a334 <_printf_i+0xe4>
 800a33c:	881e      	ldrh	r6, [r3, #0]
 800a33e:	2f6f      	cmp	r7, #111	; 0x6f
 800a340:	bf0c      	ite	eq
 800a342:	2308      	moveq	r3, #8
 800a344:	230a      	movne	r3, #10
 800a346:	4851      	ldr	r0, [pc, #324]	; (800a48c <_printf_i+0x23c>)
 800a348:	2100      	movs	r1, #0
 800a34a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a34e:	6865      	ldr	r5, [r4, #4]
 800a350:	2d00      	cmp	r5, #0
 800a352:	bfa8      	it	ge
 800a354:	6821      	ldrge	r1, [r4, #0]
 800a356:	60a5      	str	r5, [r4, #8]
 800a358:	bfa4      	itt	ge
 800a35a:	f021 0104 	bicge.w	r1, r1, #4
 800a35e:	6021      	strge	r1, [r4, #0]
 800a360:	b90e      	cbnz	r6, 800a366 <_printf_i+0x116>
 800a362:	2d00      	cmp	r5, #0
 800a364:	d04b      	beq.n	800a3fe <_printf_i+0x1ae>
 800a366:	4615      	mov	r5, r2
 800a368:	fbb6 f1f3 	udiv	r1, r6, r3
 800a36c:	fb03 6711 	mls	r7, r3, r1, r6
 800a370:	5dc7      	ldrb	r7, [r0, r7]
 800a372:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a376:	4637      	mov	r7, r6
 800a378:	42bb      	cmp	r3, r7
 800a37a:	460e      	mov	r6, r1
 800a37c:	d9f4      	bls.n	800a368 <_printf_i+0x118>
 800a37e:	2b08      	cmp	r3, #8
 800a380:	d10b      	bne.n	800a39a <_printf_i+0x14a>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	07de      	lsls	r6, r3, #31
 800a386:	d508      	bpl.n	800a39a <_printf_i+0x14a>
 800a388:	6923      	ldr	r3, [r4, #16]
 800a38a:	6861      	ldr	r1, [r4, #4]
 800a38c:	4299      	cmp	r1, r3
 800a38e:	bfde      	ittt	le
 800a390:	2330      	movle	r3, #48	; 0x30
 800a392:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a396:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a39a:	1b52      	subs	r2, r2, r5
 800a39c:	6122      	str	r2, [r4, #16]
 800a39e:	464b      	mov	r3, r9
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	f8cd a000 	str.w	sl, [sp]
 800a3a8:	aa03      	add	r2, sp, #12
 800a3aa:	f7ff fedf 	bl	800a16c <_printf_common>
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d14a      	bne.n	800a448 <_printf_i+0x1f8>
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	b004      	add	sp, #16
 800a3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3bc:	6823      	ldr	r3, [r4, #0]
 800a3be:	f043 0320 	orr.w	r3, r3, #32
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	2778      	movs	r7, #120	; 0x78
 800a3c6:	4832      	ldr	r0, [pc, #200]	; (800a490 <_printf_i+0x240>)
 800a3c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	6829      	ldr	r1, [r5, #0]
 800a3d0:	061f      	lsls	r7, r3, #24
 800a3d2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3d6:	d402      	bmi.n	800a3de <_printf_i+0x18e>
 800a3d8:	065f      	lsls	r7, r3, #25
 800a3da:	bf48      	it	mi
 800a3dc:	b2b6      	uxthmi	r6, r6
 800a3de:	07df      	lsls	r7, r3, #31
 800a3e0:	bf48      	it	mi
 800a3e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e6:	6029      	str	r1, [r5, #0]
 800a3e8:	bf48      	it	mi
 800a3ea:	6023      	strmi	r3, [r4, #0]
 800a3ec:	b91e      	cbnz	r6, 800a3f6 <_printf_i+0x1a6>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	f023 0320 	bic.w	r3, r3, #32
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	2310      	movs	r3, #16
 800a3f8:	e7a6      	b.n	800a348 <_printf_i+0xf8>
 800a3fa:	4824      	ldr	r0, [pc, #144]	; (800a48c <_printf_i+0x23c>)
 800a3fc:	e7e4      	b.n	800a3c8 <_printf_i+0x178>
 800a3fe:	4615      	mov	r5, r2
 800a400:	e7bd      	b.n	800a37e <_printf_i+0x12e>
 800a402:	682b      	ldr	r3, [r5, #0]
 800a404:	6826      	ldr	r6, [r4, #0]
 800a406:	1d18      	adds	r0, r3, #4
 800a408:	6961      	ldr	r1, [r4, #20]
 800a40a:	6028      	str	r0, [r5, #0]
 800a40c:	0635      	lsls	r5, r6, #24
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	d501      	bpl.n	800a416 <_printf_i+0x1c6>
 800a412:	6019      	str	r1, [r3, #0]
 800a414:	e002      	b.n	800a41c <_printf_i+0x1cc>
 800a416:	0670      	lsls	r0, r6, #25
 800a418:	d5fb      	bpl.n	800a412 <_printf_i+0x1c2>
 800a41a:	8019      	strh	r1, [r3, #0]
 800a41c:	2300      	movs	r3, #0
 800a41e:	4615      	mov	r5, r2
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	e7bc      	b.n	800a39e <_printf_i+0x14e>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	2100      	movs	r1, #0
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	602a      	str	r2, [r5, #0]
 800a42c:	681d      	ldr	r5, [r3, #0]
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	4628      	mov	r0, r5
 800a432:	f000 fb45 	bl	800aac0 <memchr>
 800a436:	b108      	cbz	r0, 800a43c <_printf_i+0x1ec>
 800a438:	1b40      	subs	r0, r0, r5
 800a43a:	6060      	str	r0, [r4, #4]
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	6123      	str	r3, [r4, #16]
 800a440:	2300      	movs	r3, #0
 800a442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a446:	e7aa      	b.n	800a39e <_printf_i+0x14e>
 800a448:	462a      	mov	r2, r5
 800a44a:	4649      	mov	r1, r9
 800a44c:	4640      	mov	r0, r8
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	47d0      	blx	sl
 800a452:	3001      	adds	r0, #1
 800a454:	d0ad      	beq.n	800a3b2 <_printf_i+0x162>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	079b      	lsls	r3, r3, #30
 800a45a:	d413      	bmi.n	800a484 <_printf_i+0x234>
 800a45c:	68e0      	ldr	r0, [r4, #12]
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	4298      	cmp	r0, r3
 800a462:	bfb8      	it	lt
 800a464:	4618      	movlt	r0, r3
 800a466:	e7a6      	b.n	800a3b6 <_printf_i+0x166>
 800a468:	2301      	movs	r3, #1
 800a46a:	4632      	mov	r2, r6
 800a46c:	4649      	mov	r1, r9
 800a46e:	4640      	mov	r0, r8
 800a470:	47d0      	blx	sl
 800a472:	3001      	adds	r0, #1
 800a474:	d09d      	beq.n	800a3b2 <_printf_i+0x162>
 800a476:	3501      	adds	r5, #1
 800a478:	68e3      	ldr	r3, [r4, #12]
 800a47a:	9903      	ldr	r1, [sp, #12]
 800a47c:	1a5b      	subs	r3, r3, r1
 800a47e:	42ab      	cmp	r3, r5
 800a480:	dcf2      	bgt.n	800a468 <_printf_i+0x218>
 800a482:	e7eb      	b.n	800a45c <_printf_i+0x20c>
 800a484:	2500      	movs	r5, #0
 800a486:	f104 0619 	add.w	r6, r4, #25
 800a48a:	e7f5      	b.n	800a478 <_printf_i+0x228>
 800a48c:	0800af5d 	.word	0x0800af5d
 800a490:	0800af6e 	.word	0x0800af6e

0800a494 <_scanf_chars>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	4615      	mov	r5, r2
 800a49a:	688a      	ldr	r2, [r1, #8]
 800a49c:	4680      	mov	r8, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	b932      	cbnz	r2, 800a4b0 <_scanf_chars+0x1c>
 800a4a2:	698a      	ldr	r2, [r1, #24]
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	bf0c      	ite	eq
 800a4a8:	2201      	moveq	r2, #1
 800a4aa:	f04f 32ff 	movne.w	r2, #4294967295
 800a4ae:	608a      	str	r2, [r1, #8]
 800a4b0:	2700      	movs	r7, #0
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a544 <_scanf_chars+0xb0>
 800a4b8:	06d1      	lsls	r1, r2, #27
 800a4ba:	bf5f      	itttt	pl
 800a4bc:	681a      	ldrpl	r2, [r3, #0]
 800a4be:	1d11      	addpl	r1, r2, #4
 800a4c0:	6019      	strpl	r1, [r3, #0]
 800a4c2:	6816      	ldrpl	r6, [r2, #0]
 800a4c4:	69a0      	ldr	r0, [r4, #24]
 800a4c6:	b188      	cbz	r0, 800a4ec <_scanf_chars+0x58>
 800a4c8:	2801      	cmp	r0, #1
 800a4ca:	d107      	bne.n	800a4dc <_scanf_chars+0x48>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	781a      	ldrb	r2, [r3, #0]
 800a4d0:	6963      	ldr	r3, [r4, #20]
 800a4d2:	5c9b      	ldrb	r3, [r3, r2]
 800a4d4:	b953      	cbnz	r3, 800a4ec <_scanf_chars+0x58>
 800a4d6:	2f00      	cmp	r7, #0
 800a4d8:	d031      	beq.n	800a53e <_scanf_chars+0xaa>
 800a4da:	e022      	b.n	800a522 <_scanf_chars+0x8e>
 800a4dc:	2802      	cmp	r0, #2
 800a4de:	d120      	bne.n	800a522 <_scanf_chars+0x8e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a4e8:	071b      	lsls	r3, r3, #28
 800a4ea:	d41a      	bmi.n	800a522 <_scanf_chars+0x8e>
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	3701      	adds	r7, #1
 800a4f0:	06da      	lsls	r2, r3, #27
 800a4f2:	bf5e      	ittt	pl
 800a4f4:	682b      	ldrpl	r3, [r5, #0]
 800a4f6:	781b      	ldrbpl	r3, [r3, #0]
 800a4f8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a4fc:	682a      	ldr	r2, [r5, #0]
 800a4fe:	686b      	ldr	r3, [r5, #4]
 800a500:	3201      	adds	r2, #1
 800a502:	602a      	str	r2, [r5, #0]
 800a504:	68a2      	ldr	r2, [r4, #8]
 800a506:	3b01      	subs	r3, #1
 800a508:	3a01      	subs	r2, #1
 800a50a:	606b      	str	r3, [r5, #4]
 800a50c:	60a2      	str	r2, [r4, #8]
 800a50e:	b142      	cbz	r2, 800a522 <_scanf_chars+0x8e>
 800a510:	2b00      	cmp	r3, #0
 800a512:	dcd7      	bgt.n	800a4c4 <_scanf_chars+0x30>
 800a514:	4629      	mov	r1, r5
 800a516:	4640      	mov	r0, r8
 800a518:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a51c:	4798      	blx	r3
 800a51e:	2800      	cmp	r0, #0
 800a520:	d0d0      	beq.n	800a4c4 <_scanf_chars+0x30>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	f013 0310 	ands.w	r3, r3, #16
 800a528:	d105      	bne.n	800a536 <_scanf_chars+0xa2>
 800a52a:	68e2      	ldr	r2, [r4, #12]
 800a52c:	3201      	adds	r2, #1
 800a52e:	60e2      	str	r2, [r4, #12]
 800a530:	69a2      	ldr	r2, [r4, #24]
 800a532:	b102      	cbz	r2, 800a536 <_scanf_chars+0xa2>
 800a534:	7033      	strb	r3, [r6, #0]
 800a536:	2000      	movs	r0, #0
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	443b      	add	r3, r7
 800a53c:	6123      	str	r3, [r4, #16]
 800a53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a542:	bf00      	nop
 800a544:	0800af9b 	.word	0x0800af9b

0800a548 <_scanf_i>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	460c      	mov	r4, r1
 800a54e:	4698      	mov	r8, r3
 800a550:	4b72      	ldr	r3, [pc, #456]	; (800a71c <_scanf_i+0x1d4>)
 800a552:	b087      	sub	sp, #28
 800a554:	4682      	mov	sl, r0
 800a556:	4616      	mov	r6, r2
 800a558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a562:	4b6f      	ldr	r3, [pc, #444]	; (800a720 <_scanf_i+0x1d8>)
 800a564:	69a1      	ldr	r1, [r4, #24]
 800a566:	4a6f      	ldr	r2, [pc, #444]	; (800a724 <_scanf_i+0x1dc>)
 800a568:	4627      	mov	r7, r4
 800a56a:	2903      	cmp	r1, #3
 800a56c:	bf18      	it	ne
 800a56e:	461a      	movne	r2, r3
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	9201      	str	r2, [sp, #4]
 800a574:	1e5a      	subs	r2, r3, #1
 800a576:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a57a:	bf81      	itttt	hi
 800a57c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a580:	eb03 0905 	addhi.w	r9, r3, r5
 800a584:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a588:	60a3      	strhi	r3, [r4, #8]
 800a58a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a58e:	bf98      	it	ls
 800a590:	f04f 0900 	movls.w	r9, #0
 800a594:	463d      	mov	r5, r7
 800a596:	f04f 0b00 	mov.w	fp, #0
 800a59a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	6831      	ldr	r1, [r6, #0]
 800a5a2:	ab03      	add	r3, sp, #12
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	7809      	ldrb	r1, [r1, #0]
 800a5a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a5ac:	f000 fa88 	bl	800aac0 <memchr>
 800a5b0:	b328      	cbz	r0, 800a5fe <_scanf_i+0xb6>
 800a5b2:	f1bb 0f01 	cmp.w	fp, #1
 800a5b6:	d159      	bne.n	800a66c <_scanf_i+0x124>
 800a5b8:	6862      	ldr	r2, [r4, #4]
 800a5ba:	b92a      	cbnz	r2, 800a5c8 <_scanf_i+0x80>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	6822      	ldr	r2, [r4, #0]
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c6:	6022      	str	r2, [r4, #0]
 800a5c8:	6822      	ldr	r2, [r4, #0]
 800a5ca:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	68a2      	ldr	r2, [r4, #8]
 800a5d2:	1e51      	subs	r1, r2, #1
 800a5d4:	60a1      	str	r1, [r4, #8]
 800a5d6:	b192      	cbz	r2, 800a5fe <_scanf_i+0xb6>
 800a5d8:	6832      	ldr	r2, [r6, #0]
 800a5da:	1c51      	adds	r1, r2, #1
 800a5dc:	6031      	str	r1, [r6, #0]
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	f805 2b01 	strb.w	r2, [r5], #1
 800a5e4:	6872      	ldr	r2, [r6, #4]
 800a5e6:	3a01      	subs	r2, #1
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	6072      	str	r2, [r6, #4]
 800a5ec:	dc07      	bgt.n	800a5fe <_scanf_i+0xb6>
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a5f6:	4790      	blx	r2
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f040 8085 	bne.w	800a708 <_scanf_i+0x1c0>
 800a5fe:	f10b 0b01 	add.w	fp, fp, #1
 800a602:	f1bb 0f03 	cmp.w	fp, #3
 800a606:	d1cb      	bne.n	800a5a0 <_scanf_i+0x58>
 800a608:	6863      	ldr	r3, [r4, #4]
 800a60a:	b90b      	cbnz	r3, 800a610 <_scanf_i+0xc8>
 800a60c:	230a      	movs	r3, #10
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	4945      	ldr	r1, [pc, #276]	; (800a728 <_scanf_i+0x1e0>)
 800a614:	6960      	ldr	r0, [r4, #20]
 800a616:	1ac9      	subs	r1, r1, r3
 800a618:	f000 f932 	bl	800a880 <__sccl>
 800a61c:	f04f 0b00 	mov.w	fp, #0
 800a620:	68a3      	ldr	r3, [r4, #8]
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d03d      	beq.n	800a6a4 <_scanf_i+0x15c>
 800a628:	6831      	ldr	r1, [r6, #0]
 800a62a:	6960      	ldr	r0, [r4, #20]
 800a62c:	f891 c000 	ldrb.w	ip, [r1]
 800a630:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a634:	2800      	cmp	r0, #0
 800a636:	d035      	beq.n	800a6a4 <_scanf_i+0x15c>
 800a638:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a63c:	d124      	bne.n	800a688 <_scanf_i+0x140>
 800a63e:	0510      	lsls	r0, r2, #20
 800a640:	d522      	bpl.n	800a688 <_scanf_i+0x140>
 800a642:	f10b 0b01 	add.w	fp, fp, #1
 800a646:	f1b9 0f00 	cmp.w	r9, #0
 800a64a:	d003      	beq.n	800a654 <_scanf_i+0x10c>
 800a64c:	3301      	adds	r3, #1
 800a64e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a652:	60a3      	str	r3, [r4, #8]
 800a654:	6873      	ldr	r3, [r6, #4]
 800a656:	3b01      	subs	r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	6073      	str	r3, [r6, #4]
 800a65c:	dd1b      	ble.n	800a696 <_scanf_i+0x14e>
 800a65e:	6833      	ldr	r3, [r6, #0]
 800a660:	3301      	adds	r3, #1
 800a662:	6033      	str	r3, [r6, #0]
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	3b01      	subs	r3, #1
 800a668:	60a3      	str	r3, [r4, #8]
 800a66a:	e7d9      	b.n	800a620 <_scanf_i+0xd8>
 800a66c:	f1bb 0f02 	cmp.w	fp, #2
 800a670:	d1ae      	bne.n	800a5d0 <_scanf_i+0x88>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a678:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a67c:	d1bf      	bne.n	800a5fe <_scanf_i+0xb6>
 800a67e:	2310      	movs	r3, #16
 800a680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	e7a2      	b.n	800a5ce <_scanf_i+0x86>
 800a688:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a68c:	6022      	str	r2, [r4, #0]
 800a68e:	780b      	ldrb	r3, [r1, #0]
 800a690:	f805 3b01 	strb.w	r3, [r5], #1
 800a694:	e7de      	b.n	800a654 <_scanf_i+0x10c>
 800a696:	4631      	mov	r1, r6
 800a698:	4650      	mov	r0, sl
 800a69a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a69e:	4798      	blx	r3
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d0df      	beq.n	800a664 <_scanf_i+0x11c>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	05d9      	lsls	r1, r3, #23
 800a6a8:	d50d      	bpl.n	800a6c6 <_scanf_i+0x17e>
 800a6aa:	42bd      	cmp	r5, r7
 800a6ac:	d909      	bls.n	800a6c2 <_scanf_i+0x17a>
 800a6ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800a6be:	4798      	blx	r3
 800a6c0:	464d      	mov	r5, r9
 800a6c2:	42bd      	cmp	r5, r7
 800a6c4:	d028      	beq.n	800a718 <_scanf_i+0x1d0>
 800a6c6:	6822      	ldr	r2, [r4, #0]
 800a6c8:	f012 0210 	ands.w	r2, r2, #16
 800a6cc:	d113      	bne.n	800a6f6 <_scanf_i+0x1ae>
 800a6ce:	702a      	strb	r2, [r5, #0]
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	6863      	ldr	r3, [r4, #4]
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	9e01      	ldr	r6, [sp, #4]
 800a6d8:	47b0      	blx	r6
 800a6da:	f8d8 3000 	ldr.w	r3, [r8]
 800a6de:	6821      	ldr	r1, [r4, #0]
 800a6e0:	1d1a      	adds	r2, r3, #4
 800a6e2:	f8c8 2000 	str.w	r2, [r8]
 800a6e6:	f011 0f20 	tst.w	r1, #32
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	d00f      	beq.n	800a70e <_scanf_i+0x1c6>
 800a6ee:	6018      	str	r0, [r3, #0]
 800a6f0:	68e3      	ldr	r3, [r4, #12]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	60e3      	str	r3, [r4, #12]
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	1bed      	subs	r5, r5, r7
 800a6fc:	445d      	add	r5, fp
 800a6fe:	442b      	add	r3, r5
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	b007      	add	sp, #28
 800a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	f04f 0b00 	mov.w	fp, #0
 800a70c:	e7ca      	b.n	800a6a4 <_scanf_i+0x15c>
 800a70e:	07ca      	lsls	r2, r1, #31
 800a710:	bf4c      	ite	mi
 800a712:	8018      	strhmi	r0, [r3, #0]
 800a714:	6018      	strpl	r0, [r3, #0]
 800a716:	e7eb      	b.n	800a6f0 <_scanf_i+0x1a8>
 800a718:	2001      	movs	r0, #1
 800a71a:	e7f2      	b.n	800a702 <_scanf_i+0x1ba>
 800a71c:	0800af30 	.word	0x0800af30
 800a720:	0800ad21 	.word	0x0800ad21
 800a724:	0800ac39 	.word	0x0800ac39
 800a728:	0800af8f 	.word	0x0800af8f

0800a72c <__sflush_r>:
 800a72c:	898a      	ldrh	r2, [r1, #12]
 800a72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a730:	4605      	mov	r5, r0
 800a732:	0710      	lsls	r0, r2, #28
 800a734:	460c      	mov	r4, r1
 800a736:	d457      	bmi.n	800a7e8 <__sflush_r+0xbc>
 800a738:	684b      	ldr	r3, [r1, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	dc04      	bgt.n	800a748 <__sflush_r+0x1c>
 800a73e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc01      	bgt.n	800a748 <__sflush_r+0x1c>
 800a744:	2000      	movs	r0, #0
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a74a:	2e00      	cmp	r6, #0
 800a74c:	d0fa      	beq.n	800a744 <__sflush_r+0x18>
 800a74e:	2300      	movs	r3, #0
 800a750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a754:	682f      	ldr	r7, [r5, #0]
 800a756:	6a21      	ldr	r1, [r4, #32]
 800a758:	602b      	str	r3, [r5, #0]
 800a75a:	d032      	beq.n	800a7c2 <__sflush_r+0x96>
 800a75c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	075a      	lsls	r2, r3, #29
 800a762:	d505      	bpl.n	800a770 <__sflush_r+0x44>
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	1ac0      	subs	r0, r0, r3
 800a768:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a76a:	b10b      	cbz	r3, 800a770 <__sflush_r+0x44>
 800a76c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a76e:	1ac0      	subs	r0, r0, r3
 800a770:	2300      	movs	r3, #0
 800a772:	4602      	mov	r2, r0
 800a774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a776:	4628      	mov	r0, r5
 800a778:	6a21      	ldr	r1, [r4, #32]
 800a77a:	47b0      	blx	r6
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	d106      	bne.n	800a790 <__sflush_r+0x64>
 800a782:	6829      	ldr	r1, [r5, #0]
 800a784:	291d      	cmp	r1, #29
 800a786:	d82b      	bhi.n	800a7e0 <__sflush_r+0xb4>
 800a788:	4a28      	ldr	r2, [pc, #160]	; (800a82c <__sflush_r+0x100>)
 800a78a:	410a      	asrs	r2, r1
 800a78c:	07d6      	lsls	r6, r2, #31
 800a78e:	d427      	bmi.n	800a7e0 <__sflush_r+0xb4>
 800a790:	2200      	movs	r2, #0
 800a792:	6062      	str	r2, [r4, #4]
 800a794:	6922      	ldr	r2, [r4, #16]
 800a796:	04d9      	lsls	r1, r3, #19
 800a798:	6022      	str	r2, [r4, #0]
 800a79a:	d504      	bpl.n	800a7a6 <__sflush_r+0x7a>
 800a79c:	1c42      	adds	r2, r0, #1
 800a79e:	d101      	bne.n	800a7a4 <__sflush_r+0x78>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b903      	cbnz	r3, 800a7a6 <__sflush_r+0x7a>
 800a7a4:	6560      	str	r0, [r4, #84]	; 0x54
 800a7a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7a8:	602f      	str	r7, [r5, #0]
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	d0ca      	beq.n	800a744 <__sflush_r+0x18>
 800a7ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7b2:	4299      	cmp	r1, r3
 800a7b4:	d002      	beq.n	800a7bc <__sflush_r+0x90>
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f7ff f824 	bl	8009804 <_free_r>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	6360      	str	r0, [r4, #52]	; 0x34
 800a7c0:	e7c1      	b.n	800a746 <__sflush_r+0x1a>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	47b0      	blx	r6
 800a7c8:	1c41      	adds	r1, r0, #1
 800a7ca:	d1c8      	bne.n	800a75e <__sflush_r+0x32>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0c5      	beq.n	800a75e <__sflush_r+0x32>
 800a7d2:	2b1d      	cmp	r3, #29
 800a7d4:	d001      	beq.n	800a7da <__sflush_r+0xae>
 800a7d6:	2b16      	cmp	r3, #22
 800a7d8:	d101      	bne.n	800a7de <__sflush_r+0xb2>
 800a7da:	602f      	str	r7, [r5, #0]
 800a7dc:	e7b2      	b.n	800a744 <__sflush_r+0x18>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e4:	81a3      	strh	r3, [r4, #12]
 800a7e6:	e7ae      	b.n	800a746 <__sflush_r+0x1a>
 800a7e8:	690f      	ldr	r7, [r1, #16]
 800a7ea:	2f00      	cmp	r7, #0
 800a7ec:	d0aa      	beq.n	800a744 <__sflush_r+0x18>
 800a7ee:	0793      	lsls	r3, r2, #30
 800a7f0:	bf18      	it	ne
 800a7f2:	2300      	movne	r3, #0
 800a7f4:	680e      	ldr	r6, [r1, #0]
 800a7f6:	bf08      	it	eq
 800a7f8:	694b      	ldreq	r3, [r1, #20]
 800a7fa:	1bf6      	subs	r6, r6, r7
 800a7fc:	600f      	str	r7, [r1, #0]
 800a7fe:	608b      	str	r3, [r1, #8]
 800a800:	2e00      	cmp	r6, #0
 800a802:	dd9f      	ble.n	800a744 <__sflush_r+0x18>
 800a804:	4633      	mov	r3, r6
 800a806:	463a      	mov	r2, r7
 800a808:	4628      	mov	r0, r5
 800a80a:	6a21      	ldr	r1, [r4, #32]
 800a80c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a810:	47e0      	blx	ip
 800a812:	2800      	cmp	r0, #0
 800a814:	dc06      	bgt.n	800a824 <__sflush_r+0xf8>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e790      	b.n	800a746 <__sflush_r+0x1a>
 800a824:	4407      	add	r7, r0
 800a826:	1a36      	subs	r6, r6, r0
 800a828:	e7ea      	b.n	800a800 <__sflush_r+0xd4>
 800a82a:	bf00      	nop
 800a82c:	dfbffffe 	.word	0xdfbffffe

0800a830 <_fflush_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	690b      	ldr	r3, [r1, #16]
 800a834:	4605      	mov	r5, r0
 800a836:	460c      	mov	r4, r1
 800a838:	b913      	cbnz	r3, 800a840 <_fflush_r+0x10>
 800a83a:	2500      	movs	r5, #0
 800a83c:	4628      	mov	r0, r5
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	b118      	cbz	r0, 800a84a <_fflush_r+0x1a>
 800a842:	6a03      	ldr	r3, [r0, #32]
 800a844:	b90b      	cbnz	r3, 800a84a <_fflush_r+0x1a>
 800a846:	f7fe fe5b 	bl	8009500 <__sinit>
 800a84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0f3      	beq.n	800a83a <_fflush_r+0xa>
 800a852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a854:	07d0      	lsls	r0, r2, #31
 800a856:	d404      	bmi.n	800a862 <_fflush_r+0x32>
 800a858:	0599      	lsls	r1, r3, #22
 800a85a:	d402      	bmi.n	800a862 <_fflush_r+0x32>
 800a85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a85e:	f7fe ffc1 	bl	80097e4 <__retarget_lock_acquire_recursive>
 800a862:	4628      	mov	r0, r5
 800a864:	4621      	mov	r1, r4
 800a866:	f7ff ff61 	bl	800a72c <__sflush_r>
 800a86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a86c:	4605      	mov	r5, r0
 800a86e:	07da      	lsls	r2, r3, #31
 800a870:	d4e4      	bmi.n	800a83c <_fflush_r+0xc>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	059b      	lsls	r3, r3, #22
 800a876:	d4e1      	bmi.n	800a83c <_fflush_r+0xc>
 800a878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a87a:	f7fe ffb4 	bl	80097e6 <__retarget_lock_release_recursive>
 800a87e:	e7dd      	b.n	800a83c <_fflush_r+0xc>

0800a880 <__sccl>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	780b      	ldrb	r3, [r1, #0]
 800a884:	4604      	mov	r4, r0
 800a886:	2b5e      	cmp	r3, #94	; 0x5e
 800a888:	bf0b      	itete	eq
 800a88a:	784b      	ldrbeq	r3, [r1, #1]
 800a88c:	1c4a      	addne	r2, r1, #1
 800a88e:	1c8a      	addeq	r2, r1, #2
 800a890:	2100      	movne	r1, #0
 800a892:	bf08      	it	eq
 800a894:	2101      	moveq	r1, #1
 800a896:	3801      	subs	r0, #1
 800a898:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a89c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a8a0:	42a8      	cmp	r0, r5
 800a8a2:	d1fb      	bne.n	800a89c <__sccl+0x1c>
 800a8a4:	b90b      	cbnz	r3, 800a8aa <__sccl+0x2a>
 800a8a6:	1e50      	subs	r0, r2, #1
 800a8a8:	bd70      	pop	{r4, r5, r6, pc}
 800a8aa:	f081 0101 	eor.w	r1, r1, #1
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	54e1      	strb	r1, [r4, r3]
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a8b8:	2d2d      	cmp	r5, #45	; 0x2d
 800a8ba:	d005      	beq.n	800a8c8 <__sccl+0x48>
 800a8bc:	2d5d      	cmp	r5, #93	; 0x5d
 800a8be:	d016      	beq.n	800a8ee <__sccl+0x6e>
 800a8c0:	2d00      	cmp	r5, #0
 800a8c2:	d0f1      	beq.n	800a8a8 <__sccl+0x28>
 800a8c4:	462b      	mov	r3, r5
 800a8c6:	e7f2      	b.n	800a8ae <__sccl+0x2e>
 800a8c8:	7846      	ldrb	r6, [r0, #1]
 800a8ca:	2e5d      	cmp	r6, #93	; 0x5d
 800a8cc:	d0fa      	beq.n	800a8c4 <__sccl+0x44>
 800a8ce:	42b3      	cmp	r3, r6
 800a8d0:	dcf8      	bgt.n	800a8c4 <__sccl+0x44>
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	3002      	adds	r0, #2
 800a8d6:	3201      	adds	r2, #1
 800a8d8:	4296      	cmp	r6, r2
 800a8da:	54a1      	strb	r1, [r4, r2]
 800a8dc:	dcfb      	bgt.n	800a8d6 <__sccl+0x56>
 800a8de:	1af2      	subs	r2, r6, r3
 800a8e0:	3a01      	subs	r2, #1
 800a8e2:	42b3      	cmp	r3, r6
 800a8e4:	bfa8      	it	ge
 800a8e6:	2200      	movge	r2, #0
 800a8e8:	1c5d      	adds	r5, r3, #1
 800a8ea:	18ab      	adds	r3, r5, r2
 800a8ec:	e7e1      	b.n	800a8b2 <__sccl+0x32>
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	e7da      	b.n	800a8a8 <__sccl+0x28>

0800a8f2 <__submore>:
 800a8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8fe:	4299      	cmp	r1, r3
 800a900:	d11b      	bne.n	800a93a <__submore+0x48>
 800a902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a906:	f7fe fcf5 	bl	80092f4 <_malloc_r>
 800a90a:	b918      	cbnz	r0, 800a914 <__submore+0x22>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a918:	63a3      	str	r3, [r4, #56]	; 0x38
 800a91a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a91e:	6360      	str	r0, [r4, #52]	; 0x34
 800a920:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a924:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a928:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a92c:	7043      	strb	r3, [r0, #1]
 800a92e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a932:	7003      	strb	r3, [r0, #0]
 800a934:	6020      	str	r0, [r4, #0]
 800a936:	2000      	movs	r0, #0
 800a938:	e7ea      	b.n	800a910 <__submore+0x1e>
 800a93a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a93c:	0077      	lsls	r7, r6, #1
 800a93e:	463a      	mov	r2, r7
 800a940:	f000 f8cc 	bl	800aadc <_realloc_r>
 800a944:	4605      	mov	r5, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	d0e0      	beq.n	800a90c <__submore+0x1a>
 800a94a:	eb00 0806 	add.w	r8, r0, r6
 800a94e:	4601      	mov	r1, r0
 800a950:	4632      	mov	r2, r6
 800a952:	4640      	mov	r0, r8
 800a954:	f7fe ff48 	bl	80097e8 <memcpy>
 800a958:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a95c:	f8c4 8000 	str.w	r8, [r4]
 800a960:	e7e9      	b.n	800a936 <__submore+0x44>

0800a962 <__swbuf_r>:
 800a962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a964:	460e      	mov	r6, r1
 800a966:	4614      	mov	r4, r2
 800a968:	4605      	mov	r5, r0
 800a96a:	b118      	cbz	r0, 800a974 <__swbuf_r+0x12>
 800a96c:	6a03      	ldr	r3, [r0, #32]
 800a96e:	b90b      	cbnz	r3, 800a974 <__swbuf_r+0x12>
 800a970:	f7fe fdc6 	bl	8009500 <__sinit>
 800a974:	69a3      	ldr	r3, [r4, #24]
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	071a      	lsls	r2, r3, #28
 800a97c:	d525      	bpl.n	800a9ca <__swbuf_r+0x68>
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	b31b      	cbz	r3, 800a9ca <__swbuf_r+0x68>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	6922      	ldr	r2, [r4, #16]
 800a986:	b2f6      	uxtb	r6, r6
 800a988:	1a98      	subs	r0, r3, r2
 800a98a:	6963      	ldr	r3, [r4, #20]
 800a98c:	4637      	mov	r7, r6
 800a98e:	4283      	cmp	r3, r0
 800a990:	dc04      	bgt.n	800a99c <__swbuf_r+0x3a>
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f7ff ff4b 	bl	800a830 <_fflush_r>
 800a99a:	b9e0      	cbnz	r0, 800a9d6 <__swbuf_r+0x74>
 800a99c:	68a3      	ldr	r3, [r4, #8]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	60a3      	str	r3, [r4, #8]
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	6022      	str	r2, [r4, #0]
 800a9a8:	701e      	strb	r6, [r3, #0]
 800a9aa:	6962      	ldr	r2, [r4, #20]
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d004      	beq.n	800a9bc <__swbuf_r+0x5a>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	07db      	lsls	r3, r3, #31
 800a9b6:	d506      	bpl.n	800a9c6 <__swbuf_r+0x64>
 800a9b8:	2e0a      	cmp	r6, #10
 800a9ba:	d104      	bne.n	800a9c6 <__swbuf_r+0x64>
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f7ff ff36 	bl	800a830 <_fflush_r>
 800a9c4:	b938      	cbnz	r0, 800a9d6 <__swbuf_r+0x74>
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f000 f805 	bl	800a9dc <__swsetup_r>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0d5      	beq.n	800a982 <__swbuf_r+0x20>
 800a9d6:	f04f 37ff 	mov.w	r7, #4294967295
 800a9da:	e7f4      	b.n	800a9c6 <__swbuf_r+0x64>

0800a9dc <__swsetup_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	4b2a      	ldr	r3, [pc, #168]	; (800aa88 <__swsetup_r+0xac>)
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	b118      	cbz	r0, 800a9f0 <__swsetup_r+0x14>
 800a9e8:	6a03      	ldr	r3, [r0, #32]
 800a9ea:	b90b      	cbnz	r3, 800a9f0 <__swsetup_r+0x14>
 800a9ec:	f7fe fd88 	bl	8009500 <__sinit>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f6:	0718      	lsls	r0, r3, #28
 800a9f8:	d422      	bmi.n	800aa40 <__swsetup_r+0x64>
 800a9fa:	06d9      	lsls	r1, r3, #27
 800a9fc:	d407      	bmi.n	800aa0e <__swsetup_r+0x32>
 800a9fe:	2309      	movs	r3, #9
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	e034      	b.n	800aa78 <__swsetup_r+0x9c>
 800aa0e:	0758      	lsls	r0, r3, #29
 800aa10:	d512      	bpl.n	800aa38 <__swsetup_r+0x5c>
 800aa12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa14:	b141      	cbz	r1, 800aa28 <__swsetup_r+0x4c>
 800aa16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa1a:	4299      	cmp	r1, r3
 800aa1c:	d002      	beq.n	800aa24 <__swsetup_r+0x48>
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f7fe fef0 	bl	8009804 <_free_r>
 800aa24:	2300      	movs	r3, #0
 800aa26:	6363      	str	r3, [r4, #52]	; 0x34
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa2e:	81a3      	strh	r3, [r4, #12]
 800aa30:	2300      	movs	r3, #0
 800aa32:	6063      	str	r3, [r4, #4]
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	6023      	str	r3, [r4, #0]
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f043 0308 	orr.w	r3, r3, #8
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	b94b      	cbnz	r3, 800aa58 <__swsetup_r+0x7c>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa4e:	d003      	beq.n	800aa58 <__swsetup_r+0x7c>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 f98b 	bl	800ad6e <__smakebuf_r>
 800aa58:	89a0      	ldrh	r0, [r4, #12]
 800aa5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa5e:	f010 0301 	ands.w	r3, r0, #1
 800aa62:	d00a      	beq.n	800aa7a <__swsetup_r+0x9e>
 800aa64:	2300      	movs	r3, #0
 800aa66:	60a3      	str	r3, [r4, #8]
 800aa68:	6963      	ldr	r3, [r4, #20]
 800aa6a:	425b      	negs	r3, r3
 800aa6c:	61a3      	str	r3, [r4, #24]
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	b943      	cbnz	r3, 800aa84 <__swsetup_r+0xa8>
 800aa72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa76:	d1c4      	bne.n	800aa02 <__swsetup_r+0x26>
 800aa78:	bd38      	pop	{r3, r4, r5, pc}
 800aa7a:	0781      	lsls	r1, r0, #30
 800aa7c:	bf58      	it	pl
 800aa7e:	6963      	ldrpl	r3, [r4, #20]
 800aa80:	60a3      	str	r3, [r4, #8]
 800aa82:	e7f4      	b.n	800aa6e <__swsetup_r+0x92>
 800aa84:	2000      	movs	r0, #0
 800aa86:	e7f7      	b.n	800aa78 <__swsetup_r+0x9c>
 800aa88:	20000214 	.word	0x20000214

0800aa8c <memmove>:
 800aa8c:	4288      	cmp	r0, r1
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	eb01 0402 	add.w	r4, r1, r2
 800aa94:	d902      	bls.n	800aa9c <memmove+0x10>
 800aa96:	4284      	cmp	r4, r0
 800aa98:	4623      	mov	r3, r4
 800aa9a:	d807      	bhi.n	800aaac <memmove+0x20>
 800aa9c:	1e43      	subs	r3, r0, #1
 800aa9e:	42a1      	cmp	r1, r4
 800aaa0:	d008      	beq.n	800aab4 <memmove+0x28>
 800aaa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaaa:	e7f8      	b.n	800aa9e <memmove+0x12>
 800aaac:	4601      	mov	r1, r0
 800aaae:	4402      	add	r2, r0
 800aab0:	428a      	cmp	r2, r1
 800aab2:	d100      	bne.n	800aab6 <memmove+0x2a>
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aabe:	e7f7      	b.n	800aab0 <memmove+0x24>

0800aac0 <memchr>:
 800aac0:	4603      	mov	r3, r0
 800aac2:	b510      	push	{r4, lr}
 800aac4:	b2c9      	uxtb	r1, r1
 800aac6:	4402      	add	r2, r0
 800aac8:	4293      	cmp	r3, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	d101      	bne.n	800aad2 <memchr+0x12>
 800aace:	2000      	movs	r0, #0
 800aad0:	e003      	b.n	800aada <memchr+0x1a>
 800aad2:	7804      	ldrb	r4, [r0, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	428c      	cmp	r4, r1
 800aad8:	d1f6      	bne.n	800aac8 <memchr+0x8>
 800aada:	bd10      	pop	{r4, pc}

0800aadc <_realloc_r>:
 800aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae0:	4680      	mov	r8, r0
 800aae2:	4614      	mov	r4, r2
 800aae4:	460e      	mov	r6, r1
 800aae6:	b921      	cbnz	r1, 800aaf2 <_realloc_r+0x16>
 800aae8:	4611      	mov	r1, r2
 800aaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	f7fe bc01 	b.w	80092f4 <_malloc_r>
 800aaf2:	b92a      	cbnz	r2, 800ab00 <_realloc_r+0x24>
 800aaf4:	f7fe fe86 	bl	8009804 <_free_r>
 800aaf8:	4625      	mov	r5, r4
 800aafa:	4628      	mov	r0, r5
 800aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab00:	f000 f994 	bl	800ae2c <_malloc_usable_size_r>
 800ab04:	4284      	cmp	r4, r0
 800ab06:	4607      	mov	r7, r0
 800ab08:	d802      	bhi.n	800ab10 <_realloc_r+0x34>
 800ab0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab0e:	d812      	bhi.n	800ab36 <_realloc_r+0x5a>
 800ab10:	4621      	mov	r1, r4
 800ab12:	4640      	mov	r0, r8
 800ab14:	f7fe fbee 	bl	80092f4 <_malloc_r>
 800ab18:	4605      	mov	r5, r0
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d0ed      	beq.n	800aafa <_realloc_r+0x1e>
 800ab1e:	42bc      	cmp	r4, r7
 800ab20:	4622      	mov	r2, r4
 800ab22:	4631      	mov	r1, r6
 800ab24:	bf28      	it	cs
 800ab26:	463a      	movcs	r2, r7
 800ab28:	f7fe fe5e 	bl	80097e8 <memcpy>
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f7fe fe68 	bl	8009804 <_free_r>
 800ab34:	e7e1      	b.n	800aafa <_realloc_r+0x1e>
 800ab36:	4635      	mov	r5, r6
 800ab38:	e7df      	b.n	800aafa <_realloc_r+0x1e>
	...

0800ab3c <_strtol_l.constprop.0>:
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab42:	4686      	mov	lr, r0
 800ab44:	4690      	mov	r8, r2
 800ab46:	d001      	beq.n	800ab4c <_strtol_l.constprop.0+0x10>
 800ab48:	2b24      	cmp	r3, #36	; 0x24
 800ab4a:	d906      	bls.n	800ab5a <_strtol_l.constprop.0+0x1e>
 800ab4c:	f7fe fe20 	bl	8009790 <__errno>
 800ab50:	2316      	movs	r3, #22
 800ab52:	6003      	str	r3, [r0, #0]
 800ab54:	2000      	movs	r0, #0
 800ab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5a:	460d      	mov	r5, r1
 800ab5c:	4835      	ldr	r0, [pc, #212]	; (800ac34 <_strtol_l.constprop.0+0xf8>)
 800ab5e:	462a      	mov	r2, r5
 800ab60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab64:	5d06      	ldrb	r6, [r0, r4]
 800ab66:	f016 0608 	ands.w	r6, r6, #8
 800ab6a:	d1f8      	bne.n	800ab5e <_strtol_l.constprop.0+0x22>
 800ab6c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab6e:	d12e      	bne.n	800abce <_strtol_l.constprop.0+0x92>
 800ab70:	2601      	movs	r6, #1
 800ab72:	782c      	ldrb	r4, [r5, #0]
 800ab74:	1c95      	adds	r5, r2, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d057      	beq.n	800ac2a <_strtol_l.constprop.0+0xee>
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d109      	bne.n	800ab92 <_strtol_l.constprop.0+0x56>
 800ab7e:	2c30      	cmp	r4, #48	; 0x30
 800ab80:	d107      	bne.n	800ab92 <_strtol_l.constprop.0+0x56>
 800ab82:	782a      	ldrb	r2, [r5, #0]
 800ab84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ab88:	2a58      	cmp	r2, #88	; 0x58
 800ab8a:	d149      	bne.n	800ac20 <_strtol_l.constprop.0+0xe4>
 800ab8c:	2310      	movs	r3, #16
 800ab8e:	786c      	ldrb	r4, [r5, #1]
 800ab90:	3502      	adds	r5, #2
 800ab92:	2200      	movs	r2, #0
 800ab94:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800ab98:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab9c:	fbbc f9f3 	udiv	r9, ip, r3
 800aba0:	4610      	mov	r0, r2
 800aba2:	fb03 ca19 	mls	sl, r3, r9, ip
 800aba6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800abaa:	2f09      	cmp	r7, #9
 800abac:	d814      	bhi.n	800abd8 <_strtol_l.constprop.0+0x9c>
 800abae:	463c      	mov	r4, r7
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	dd20      	ble.n	800abf6 <_strtol_l.constprop.0+0xba>
 800abb4:	1c57      	adds	r7, r2, #1
 800abb6:	d007      	beq.n	800abc8 <_strtol_l.constprop.0+0x8c>
 800abb8:	4581      	cmp	r9, r0
 800abba:	d319      	bcc.n	800abf0 <_strtol_l.constprop.0+0xb4>
 800abbc:	d101      	bne.n	800abc2 <_strtol_l.constprop.0+0x86>
 800abbe:	45a2      	cmp	sl, r4
 800abc0:	db16      	blt.n	800abf0 <_strtol_l.constprop.0+0xb4>
 800abc2:	2201      	movs	r2, #1
 800abc4:	fb00 4003 	mla	r0, r0, r3, r4
 800abc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abcc:	e7eb      	b.n	800aba6 <_strtol_l.constprop.0+0x6a>
 800abce:	2c2b      	cmp	r4, #43	; 0x2b
 800abd0:	bf04      	itt	eq
 800abd2:	782c      	ldrbeq	r4, [r5, #0]
 800abd4:	1c95      	addeq	r5, r2, #2
 800abd6:	e7ce      	b.n	800ab76 <_strtol_l.constprop.0+0x3a>
 800abd8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800abdc:	2f19      	cmp	r7, #25
 800abde:	d801      	bhi.n	800abe4 <_strtol_l.constprop.0+0xa8>
 800abe0:	3c37      	subs	r4, #55	; 0x37
 800abe2:	e7e5      	b.n	800abb0 <_strtol_l.constprop.0+0x74>
 800abe4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800abe8:	2f19      	cmp	r7, #25
 800abea:	d804      	bhi.n	800abf6 <_strtol_l.constprop.0+0xba>
 800abec:	3c57      	subs	r4, #87	; 0x57
 800abee:	e7df      	b.n	800abb0 <_strtol_l.constprop.0+0x74>
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	e7e8      	b.n	800abc8 <_strtol_l.constprop.0+0x8c>
 800abf6:	1c53      	adds	r3, r2, #1
 800abf8:	d108      	bne.n	800ac0c <_strtol_l.constprop.0+0xd0>
 800abfa:	2322      	movs	r3, #34	; 0x22
 800abfc:	4660      	mov	r0, ip
 800abfe:	f8ce 3000 	str.w	r3, [lr]
 800ac02:	f1b8 0f00 	cmp.w	r8, #0
 800ac06:	d0a6      	beq.n	800ab56 <_strtol_l.constprop.0+0x1a>
 800ac08:	1e69      	subs	r1, r5, #1
 800ac0a:	e006      	b.n	800ac1a <_strtol_l.constprop.0+0xde>
 800ac0c:	b106      	cbz	r6, 800ac10 <_strtol_l.constprop.0+0xd4>
 800ac0e:	4240      	negs	r0, r0
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	d09f      	beq.n	800ab56 <_strtol_l.constprop.0+0x1a>
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	d1f6      	bne.n	800ac08 <_strtol_l.constprop.0+0xcc>
 800ac1a:	f8c8 1000 	str.w	r1, [r8]
 800ac1e:	e79a      	b.n	800ab56 <_strtol_l.constprop.0+0x1a>
 800ac20:	2430      	movs	r4, #48	; 0x30
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1b5      	bne.n	800ab92 <_strtol_l.constprop.0+0x56>
 800ac26:	2308      	movs	r3, #8
 800ac28:	e7b3      	b.n	800ab92 <_strtol_l.constprop.0+0x56>
 800ac2a:	2c30      	cmp	r4, #48	; 0x30
 800ac2c:	d0a9      	beq.n	800ab82 <_strtol_l.constprop.0+0x46>
 800ac2e:	230a      	movs	r3, #10
 800ac30:	e7af      	b.n	800ab92 <_strtol_l.constprop.0+0x56>
 800ac32:	bf00      	nop
 800ac34:	0800af9b 	.word	0x0800af9b

0800ac38 <_strtol_r>:
 800ac38:	f7ff bf80 	b.w	800ab3c <_strtol_l.constprop.0>

0800ac3c <_strtoul_l.constprop.0>:
 800ac3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac40:	4686      	mov	lr, r0
 800ac42:	460d      	mov	r5, r1
 800ac44:	4f35      	ldr	r7, [pc, #212]	; (800ad1c <_strtoul_l.constprop.0+0xe0>)
 800ac46:	4628      	mov	r0, r5
 800ac48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac4c:	5d3e      	ldrb	r6, [r7, r4]
 800ac4e:	f016 0608 	ands.w	r6, r6, #8
 800ac52:	d1f8      	bne.n	800ac46 <_strtoul_l.constprop.0+0xa>
 800ac54:	2c2d      	cmp	r4, #45	; 0x2d
 800ac56:	d130      	bne.n	800acba <_strtoul_l.constprop.0+0x7e>
 800ac58:	2601      	movs	r6, #1
 800ac5a:	782c      	ldrb	r4, [r5, #0]
 800ac5c:	1c85      	adds	r5, r0, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d057      	beq.n	800ad12 <_strtoul_l.constprop.0+0xd6>
 800ac62:	2b10      	cmp	r3, #16
 800ac64:	d109      	bne.n	800ac7a <_strtoul_l.constprop.0+0x3e>
 800ac66:	2c30      	cmp	r4, #48	; 0x30
 800ac68:	d107      	bne.n	800ac7a <_strtoul_l.constprop.0+0x3e>
 800ac6a:	7828      	ldrb	r0, [r5, #0]
 800ac6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac70:	2858      	cmp	r0, #88	; 0x58
 800ac72:	d149      	bne.n	800ad08 <_strtoul_l.constprop.0+0xcc>
 800ac74:	2310      	movs	r3, #16
 800ac76:	786c      	ldrb	r4, [r5, #1]
 800ac78:	3502      	adds	r5, #2
 800ac7a:	f04f 38ff 	mov.w	r8, #4294967295
 800ac7e:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac82:	2700      	movs	r7, #0
 800ac84:	fb03 f908 	mul.w	r9, r3, r8
 800ac88:	4638      	mov	r0, r7
 800ac8a:	ea6f 0909 	mvn.w	r9, r9
 800ac8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac92:	f1bc 0f09 	cmp.w	ip, #9
 800ac96:	d815      	bhi.n	800acc4 <_strtoul_l.constprop.0+0x88>
 800ac98:	4664      	mov	r4, ip
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	dd23      	ble.n	800ace6 <_strtoul_l.constprop.0+0xaa>
 800ac9e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800aca2:	d007      	beq.n	800acb4 <_strtoul_l.constprop.0+0x78>
 800aca4:	4580      	cmp	r8, r0
 800aca6:	d31b      	bcc.n	800ace0 <_strtoul_l.constprop.0+0xa4>
 800aca8:	d101      	bne.n	800acae <_strtoul_l.constprop.0+0x72>
 800acaa:	45a1      	cmp	r9, r4
 800acac:	db18      	blt.n	800ace0 <_strtoul_l.constprop.0+0xa4>
 800acae:	2701      	movs	r7, #1
 800acb0:	fb00 4003 	mla	r0, r0, r3, r4
 800acb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acb8:	e7e9      	b.n	800ac8e <_strtoul_l.constprop.0+0x52>
 800acba:	2c2b      	cmp	r4, #43	; 0x2b
 800acbc:	bf04      	itt	eq
 800acbe:	782c      	ldrbeq	r4, [r5, #0]
 800acc0:	1c85      	addeq	r5, r0, #2
 800acc2:	e7cc      	b.n	800ac5e <_strtoul_l.constprop.0+0x22>
 800acc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800acc8:	f1bc 0f19 	cmp.w	ip, #25
 800accc:	d801      	bhi.n	800acd2 <_strtoul_l.constprop.0+0x96>
 800acce:	3c37      	subs	r4, #55	; 0x37
 800acd0:	e7e3      	b.n	800ac9a <_strtoul_l.constprop.0+0x5e>
 800acd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800acd6:	f1bc 0f19 	cmp.w	ip, #25
 800acda:	d804      	bhi.n	800ace6 <_strtoul_l.constprop.0+0xaa>
 800acdc:	3c57      	subs	r4, #87	; 0x57
 800acde:	e7dc      	b.n	800ac9a <_strtoul_l.constprop.0+0x5e>
 800ace0:	f04f 37ff 	mov.w	r7, #4294967295
 800ace4:	e7e6      	b.n	800acb4 <_strtoul_l.constprop.0+0x78>
 800ace6:	1c7b      	adds	r3, r7, #1
 800ace8:	d106      	bne.n	800acf8 <_strtoul_l.constprop.0+0xbc>
 800acea:	2322      	movs	r3, #34	; 0x22
 800acec:	4638      	mov	r0, r7
 800acee:	f8ce 3000 	str.w	r3, [lr]
 800acf2:	b932      	cbnz	r2, 800ad02 <_strtoul_l.constprop.0+0xc6>
 800acf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acf8:	b106      	cbz	r6, 800acfc <_strtoul_l.constprop.0+0xc0>
 800acfa:	4240      	negs	r0, r0
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	d0f9      	beq.n	800acf4 <_strtoul_l.constprop.0+0xb8>
 800ad00:	b107      	cbz	r7, 800ad04 <_strtoul_l.constprop.0+0xc8>
 800ad02:	1e69      	subs	r1, r5, #1
 800ad04:	6011      	str	r1, [r2, #0]
 800ad06:	e7f5      	b.n	800acf4 <_strtoul_l.constprop.0+0xb8>
 800ad08:	2430      	movs	r4, #48	; 0x30
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1b5      	bne.n	800ac7a <_strtoul_l.constprop.0+0x3e>
 800ad0e:	2308      	movs	r3, #8
 800ad10:	e7b3      	b.n	800ac7a <_strtoul_l.constprop.0+0x3e>
 800ad12:	2c30      	cmp	r4, #48	; 0x30
 800ad14:	d0a9      	beq.n	800ac6a <_strtoul_l.constprop.0+0x2e>
 800ad16:	230a      	movs	r3, #10
 800ad18:	e7af      	b.n	800ac7a <_strtoul_l.constprop.0+0x3e>
 800ad1a:	bf00      	nop
 800ad1c:	0800af9b 	.word	0x0800af9b

0800ad20 <_strtoul_r>:
 800ad20:	f7ff bf8c 	b.w	800ac3c <_strtoul_l.constprop.0>

0800ad24 <__swhatbuf_r>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2c:	4615      	mov	r5, r2
 800ad2e:	2900      	cmp	r1, #0
 800ad30:	461e      	mov	r6, r3
 800ad32:	b096      	sub	sp, #88	; 0x58
 800ad34:	da0c      	bge.n	800ad50 <__swhatbuf_r+0x2c>
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	2100      	movs	r1, #0
 800ad3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad3e:	bf0c      	ite	eq
 800ad40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad44:	2340      	movne	r3, #64	; 0x40
 800ad46:	2000      	movs	r0, #0
 800ad48:	6031      	str	r1, [r6, #0]
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	b016      	add	sp, #88	; 0x58
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	466a      	mov	r2, sp
 800ad52:	f000 f849 	bl	800ade8 <_fstat_r>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	dbed      	blt.n	800ad36 <__swhatbuf_r+0x12>
 800ad5a:	9901      	ldr	r1, [sp, #4]
 800ad5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad64:	4259      	negs	r1, r3
 800ad66:	4159      	adcs	r1, r3
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	e7eb      	b.n	800ad46 <__swhatbuf_r+0x22>

0800ad6e <__smakebuf_r>:
 800ad6e:	898b      	ldrh	r3, [r1, #12]
 800ad70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad72:	079d      	lsls	r5, r3, #30
 800ad74:	4606      	mov	r6, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	d507      	bpl.n	800ad8a <__smakebuf_r+0x1c>
 800ad7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	2301      	movs	r3, #1
 800ad84:	6163      	str	r3, [r4, #20]
 800ad86:	b002      	add	sp, #8
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	466a      	mov	r2, sp
 800ad8c:	ab01      	add	r3, sp, #4
 800ad8e:	f7ff ffc9 	bl	800ad24 <__swhatbuf_r>
 800ad92:	9900      	ldr	r1, [sp, #0]
 800ad94:	4605      	mov	r5, r0
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7fe faac 	bl	80092f4 <_malloc_r>
 800ad9c:	b948      	cbnz	r0, 800adb2 <__smakebuf_r+0x44>
 800ad9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada2:	059a      	lsls	r2, r3, #22
 800ada4:	d4ef      	bmi.n	800ad86 <__smakebuf_r+0x18>
 800ada6:	f023 0303 	bic.w	r3, r3, #3
 800adaa:	f043 0302 	orr.w	r3, r3, #2
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	e7e3      	b.n	800ad7a <__smakebuf_r+0xc>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	6020      	str	r0, [r4, #0]
 800adb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adba:	81a3      	strh	r3, [r4, #12]
 800adbc:	9b00      	ldr	r3, [sp, #0]
 800adbe:	6120      	str	r0, [r4, #16]
 800adc0:	6163      	str	r3, [r4, #20]
 800adc2:	9b01      	ldr	r3, [sp, #4]
 800adc4:	b15b      	cbz	r3, 800adde <__smakebuf_r+0x70>
 800adc6:	4630      	mov	r0, r6
 800adc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adcc:	f000 f81e 	bl	800ae0c <_isatty_r>
 800add0:	b128      	cbz	r0, 800adde <__smakebuf_r+0x70>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f023 0303 	bic.w	r3, r3, #3
 800add8:	f043 0301 	orr.w	r3, r3, #1
 800addc:	81a3      	strh	r3, [r4, #12]
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	431d      	orrs	r5, r3
 800ade2:	81a5      	strh	r5, [r4, #12]
 800ade4:	e7cf      	b.n	800ad86 <__smakebuf_r+0x18>
	...

0800ade8 <_fstat_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	2300      	movs	r3, #0
 800adec:	4d06      	ldr	r5, [pc, #24]	; (800ae08 <_fstat_r+0x20>)
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	4611      	mov	r1, r2
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	f7f6 feff 	bl	8001bf8 <_fstat>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	d102      	bne.n	800ae04 <_fstat_r+0x1c>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	b103      	cbz	r3, 800ae04 <_fstat_r+0x1c>
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	bf00      	nop
 800ae08:	200016ac 	.word	0x200016ac

0800ae0c <_isatty_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4d05      	ldr	r5, [pc, #20]	; (800ae28 <_isatty_r+0x1c>)
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	602b      	str	r3, [r5, #0]
 800ae18:	f7f6 fefd 	bl	8001c16 <_isatty>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_isatty_r+0x1a>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_isatty_r+0x1a>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	200016ac 	.word	0x200016ac

0800ae2c <_malloc_usable_size_r>:
 800ae2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae30:	1f18      	subs	r0, r3, #4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	bfbc      	itt	lt
 800ae36:	580b      	ldrlt	r3, [r1, r0]
 800ae38:	18c0      	addlt	r0, r0, r3
 800ae3a:	4770      	bx	lr

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
